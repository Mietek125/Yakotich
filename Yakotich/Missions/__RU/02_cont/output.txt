// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 64 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 6830 0 0
// Czolg ;
  27: CALL 7368 0 0
// Action ;
  31: CALL 7469 0 0
// InitAmerican ;
  35: CALL 2464 0 0
// DebugMode ;
  39: CALL 216 0 0
// SetBName ( AmDep1 , mi ) ;
  43: LD_INT 1
  45: PPUSH
  46: LD_STRING mi
  48: PPUSH
  49: CALL_OW 500
// SetBName ( AmDep2 , ni ) ;
  53: LD_INT 47
  55: PPUSH
  56: LD_STRING ni
  58: PPUSH
  59: CALL_OW 500
// end ;
  63: END
// export YakotichCrew , MietekCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Morozov , Kurin , Grishko , Burlak , Platonov , AmSold ; export KurinTime , MietekTime ; export AmConvoys , AmConvoysVehicles , AmNorthPersonel , AmSouthPersonel ; export AmSoldNorth , AmSciNorth , AmMechNorth , AmEngNorth , AmSoldSouth , AmSciSouth , AmMechSouth , AmEngSouth ; export AmSoldConvoy , AmSciConvoy , AmMechConvoy , AmEngConvoy , AmVehicleConvoy ; export Tank ; export GunCounter ; export debug ; export mission_prefix ; export maksim_scout_ended , maksim_back , turrets_researched , gattling_researched , gun_researched , gun_recycled , second_wave_clear , transport_builded , first_attack_spawned , first_attack_clear , reiforcements_called , kurin_attack_started , end_of_the_mission , passages_touched , riverside_touched ; function Init ; begin
  64: LD_INT 0
  66: PPUSH
// mission_prefix := 02_ ;
  67: LD_ADDR_EXP 45
  71: PUSH
  72: LD_STRING 02_
  74: ST_TO_ADDR
// maksim_scout_ended := false ;
  75: LD_ADDR_EXP 46
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// maksim_back := false ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// turrets_researched := false ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// gattling_researched := false ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// gun_recycled := false ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// gun_researched := false ;
 115: LD_ADDR_EXP 50
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// transport_builded := false ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// first_attack_spawned := false ;
 131: LD_ADDR_EXP 54
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// first_attack_clear := false ;
 139: LD_ADDR_EXP 55
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// reiforcements_called := false ;
 147: LD_ADDR_EXP 56
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// kurin_attack_started := false ;
 155: LD_ADDR_EXP 57
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// end_of_the_mission := false ;
 163: LD_ADDR_EXP 58
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// passages_touched := false ;
 171: LD_ADDR_EXP 59
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// riverside_touched := false ;
 179: LD_ADDR_EXP 60
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// MietekTime := 5 5$0 ;
 187: LD_ADDR_EXP 24
 191: PUSH
 192: LD_INT 10500
 194: ST_TO_ADDR
// KurinTime := 30 30$0 ;
 195: LD_ADDR_EXP 23
 199: PUSH
 200: LD_INT 63000
 202: ST_TO_ADDR
// GunCounter := 0 ;
 203: LD_ADDR_EXP 43
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// end ;
 211: LD_VAR 0 1
 215: RET
// function DebugMode ; var i ; begin
 216: LD_INT 0
 218: PPUSH
 219: PPUSH
// if not debug then
 220: LD_EXP 44
 224: NOT
 225: IFFALSE 229
// exit ;
 227: GO 248
// Difficulty := 3 ;
 229: LD_ADDR_OWVAR 67
 233: PUSH
 234: LD_INT 3
 236: ST_TO_ADDR
// TurnFogOff ( ) ;
 237: CALL_OW 537
// FogOff ( 3 ) ;
 241: LD_INT 3
 243: PPUSH
 244: CALL_OW 344
// end ; end_of_file
 248: LD_VAR 0 1
 252: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
// uc_side := GetSide ( b ) ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_VAR 0 2
 267: PPUSH
 268: CALL_OW 255
 272: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 273: LD_ADDR_OWVAR 21
 277: PUSH
 278: LD_VAR 0 2
 282: PPUSH
 283: CALL_OW 248
 287: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 288: LD_ADDR_VAR 0 5
 292: PUSH
 293: LD_VAR 0 2
 297: PPUSH
 298: CALL_OW 254
 302: PUSH
 303: LD_INT 3
 305: MINUS
 306: ST_TO_ADDR
// if dir < 0 then
 307: LD_VAR 0 5
 311: PUSH
 312: LD_INT 0
 314: LESS
 315: IFFALSE 331
// dir := 6 + dir ;
 317: LD_ADDR_VAR 0 5
 321: PUSH
 322: LD_INT 6
 324: PUSH
 325: LD_VAR 0 5
 329: PLUS
 330: ST_TO_ADDR
// un := CreateHuman ;
 331: LD_ADDR_VAR 0 4
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// SetDir ( un , dir ) ;
 341: LD_VAR 0 4
 345: PPUSH
 346: LD_VAR 0 5
 350: PPUSH
 351: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 355: LD_VAR 0 4
 359: PPUSH
 360: LD_VAR 0 2
 364: PPUSH
 365: CALL_OW 52
// end ;
 369: LD_VAR 0 3
 373: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 374: LD_INT 0
 376: PPUSH
 377: PPUSH
 378: PPUSH
// result := 0 ;
 379: LD_ADDR_VAR 0 3
 383: PUSH
 384: LD_INT 0
 386: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 30
 394: PUSH
 395: LD_VAR 0 2
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PPUSH
 404: CALL_OW 69
 408: ST_TO_ADDR
// if not base or not tmp then
 409: LD_VAR 0 1
 413: NOT
 414: PUSH
 415: LD_VAR 0 5
 419: NOT
 420: OR
 421: IFFALSE 425
// exit ;
 423: GO 473
// for i in tmp do
 425: LD_ADDR_VAR 0 4
 429: PUSH
 430: LD_VAR 0 5
 434: PUSH
 435: FOR_IN
 436: IFFALSE 471
// if GetBase ( i ) = base then
 438: LD_VAR 0 4
 442: PPUSH
 443: CALL_OW 274
 447: PUSH
 448: LD_VAR 0 1
 452: EQUAL
 453: IFFALSE 469
// result := result + 1 ;
 455: LD_ADDR_VAR 0 3
 459: PUSH
 460: LD_VAR 0 3
 464: PUSH
 465: LD_INT 1
 467: PLUS
 468: ST_TO_ADDR
 469: GO 435
 471: POP
 472: POP
// end ;
 473: LD_VAR 0 3
 477: RET
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 478: LD_EXP 57
 482: PUSH
 483: LD_INT 0
 485: EQUAL
 486: PUSH
 487: LD_INT 17
 489: PPUSH
 490: LD_INT 22
 492: PUSH
 493: LD_INT 3
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: LD_INT 21
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 21
 515: PUSH
 516: LD_INT 2
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PPUSH
 532: CALL_OW 70
 536: PUSH
 537: LD_INT 0
 539: GREATER
 540: AND
 541: IFFALSE 627
 543: GO 545
 545: DISABLE
 546: LD_INT 0
 548: PPUSH
// begin enable ;
 549: ENABLE
// for unit in FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 550: LD_ADDR_VAR 0 1
 554: PUSH
 555: LD_INT 17
 557: PPUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 3
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 21
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 21
 583: PUSH
 584: LD_INT 2
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PPUSH
 600: CALL_OW 70
 604: PUSH
 605: FOR_IN
 606: IFFALSE 625
// begin ComMoveXY ( unit , 95 , 59 ) ;
 608: LD_VAR 0 1
 612: PPUSH
 613: LD_INT 95
 615: PPUSH
 616: LD_INT 59
 618: PPUSH
 619: CALL_OW 111
// end ;
 623: GO 605
 625: POP
 626: POP
// end ;
 627: PPOPN 1
 629: END
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 630: LD_EXP 57
 634: PUSH
 635: LD_INT 0
 637: EQUAL
 638: PUSH
 639: LD_INT 18
 641: PPUSH
 642: LD_INT 22
 644: PUSH
 645: LD_INT 3
 647: PUSH
 648: EMPTY
 649: LIST
 650: LIST
 651: PUSH
 652: LD_INT 2
 654: PUSH
 655: LD_INT 21
 657: PUSH
 658: LD_INT 1
 660: PUSH
 661: EMPTY
 662: LIST
 663: LIST
 664: PUSH
 665: LD_INT 21
 667: PUSH
 668: LD_INT 2
 670: PUSH
 671: EMPTY
 672: LIST
 673: LIST
 674: PUSH
 675: EMPTY
 676: LIST
 677: LIST
 678: LIST
 679: PUSH
 680: EMPTY
 681: LIST
 682: LIST
 683: PPUSH
 684: CALL_OW 70
 688: PUSH
 689: LD_INT 0
 691: GREATER
 692: AND
 693: IFFALSE 779
 695: GO 697
 697: DISABLE
 698: LD_INT 0
 700: PPUSH
// begin enable ;
 701: ENABLE
// for unit in FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 702: LD_ADDR_VAR 0 1
 706: PUSH
 707: LD_INT 18
 709: PPUSH
 710: LD_INT 22
 712: PUSH
 713: LD_INT 3
 715: PUSH
 716: EMPTY
 717: LIST
 718: LIST
 719: PUSH
 720: LD_INT 2
 722: PUSH
 723: LD_INT 21
 725: PUSH
 726: LD_INT 1
 728: PUSH
 729: EMPTY
 730: LIST
 731: LIST
 732: PUSH
 733: LD_INT 21
 735: PUSH
 736: LD_INT 2
 738: PUSH
 739: EMPTY
 740: LIST
 741: LIST
 742: PUSH
 743: EMPTY
 744: LIST
 745: LIST
 746: LIST
 747: PUSH
 748: EMPTY
 749: LIST
 750: LIST
 751: PPUSH
 752: CALL_OW 70
 756: PUSH
 757: FOR_IN
 758: IFFALSE 777
// begin ComMoveXY ( unit , 95 , 59 ) ;
 760: LD_VAR 0 1
 764: PPUSH
 765: LD_INT 95
 767: PPUSH
 768: LD_INT 59
 770: PPUSH
 771: CALL_OW 111
// end ;
 775: GO 757
 777: POP
 778: POP
// end ;
 779: PPOPN 1
 781: END
// every 1 trigger IsSelected ( Serpent ) do
 782: LD_INT 215
 784: PPUSH
 785: CALL_OW 306
 789: IFFALSE 893
 791: GO 793
 793: DISABLE
// begin SerpentExp ( [ 1 , 2 , 3 , 4 ] ) ;
 794: LD_INT 1
 796: PUSH
 797: LD_INT 2
 799: PUSH
 800: LD_INT 3
 802: PUSH
 803: LD_INT 4
 805: PUSH
 806: EMPTY
 807: LIST
 808: LIST
 809: LIST
 810: LIST
 811: PPUSH
 812: CALL 894 0 1
// Wait ( 0 0$05 ) ;
 816: LD_INT 175
 818: PPUSH
 819: CALL_OW 67
// Say ( Serpent , 2Langu-Sikret ) ;
 823: LD_INT 215
 825: PPUSH
 826: LD_STRING 2Langu-Sikret
 828: PPUSH
 829: CALL_OW 88
// TeleportUnit ( Serpent , 13 , 4 , 100 , true ) ;
 833: LD_INT 215
 835: PPUSH
 836: LD_INT 13
 838: PPUSH
 839: LD_INT 4
 841: PPUSH
 842: LD_INT 100
 844: PPUSH
 845: LD_INT 1
 847: PPUSH
 848: CALL_OW 483
// Wait ( 0 0$05 ) ;
 852: LD_INT 175
 854: PPUSH
 855: CALL_OW 67
// RemoveUnit ( Serpent ) ;
 859: LD_INT 215
 861: PPUSH
 862: CALL_OW 64
// SaveVariable ( 1 , SerpentSaved ) ;
 866: LD_INT 1
 868: PPUSH
 869: LD_STRING SerpentSaved
 871: PPUSH
 872: CALL_OW 39
// SaveCharacters ( Serpent , Langu ) ;
 876: LD_INT 215
 878: PPUSH
 879: LD_STRING Langu
 881: PPUSH
 882: CALL_OW 38
// SetAchievement ( ACH_SERPENT ) ;
 886: LD_STRING ACH_SERPENT
 888: PPUSH
 889: CALL_OW 543
// end ;
 893: END
// export function SerpentExp ( q ) ; var dec , q1 ; begin
 894: LD_INT 0
 896: PPUSH
 897: PPUSH
 898: PPUSH
// dec = SelectiveQuery ( SerpentQuery , q ) ;
 899: LD_ADDR_VAR 0 3
 903: PUSH
 904: LD_STRING SerpentQuery
 906: PPUSH
 907: LD_VAR 0 1
 911: PPUSH
 912: CALL_OW 98
 916: ST_TO_ADDR
// case dec of 1 :
 917: LD_VAR 0 3
 921: PUSH
 922: LD_INT 1
 924: DOUBLE
 925: EQUAL
 926: IFTRUE 930
 928: GO 948
 930: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1000 ) ;
 931: LD_EXP 3
 935: PPUSH
 936: LD_INT 1
 938: PPUSH
 939: LD_INT 1000
 941: PPUSH
 942: CALL_OW 591
// end ; 2 :
 946: GO 1027
 948: LD_INT 2
 950: DOUBLE
 951: EQUAL
 952: IFTRUE 956
 954: GO 974
 956: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1000 ) ;
 957: LD_EXP 3
 961: PPUSH
 962: LD_INT 2
 964: PPUSH
 965: LD_INT 1000
 967: PPUSH
 968: CALL_OW 591
// end ; 3 :
 972: GO 1027
 974: LD_INT 3
 976: DOUBLE
 977: EQUAL
 978: IFTRUE 982
 980: GO 1000
 982: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1000 ) ;
 983: LD_EXP 3
 987: PPUSH
 988: LD_INT 3
 990: PPUSH
 991: LD_INT 1000
 993: PPUSH
 994: CALL_OW 591
// end ; 4 :
 998: GO 1027
1000: LD_INT 4
1002: DOUBLE
1003: EQUAL
1004: IFTRUE 1008
1006: GO 1026
1008: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1000 ) ;
1009: LD_EXP 3
1013: PPUSH
1014: LD_INT 4
1016: PPUSH
1017: LD_INT 1000
1019: PPUSH
1020: CALL_OW 591
// end ; end ;
1024: GO 1027
1026: POP
// end ;
1027: LD_VAR 0 2
1031: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
1032: LD_EXP 3
1036: PPUSH
1037: CALL_OW 301
1041: IFFALSE 1053
1043: GO 1045
1045: DISABLE
// begin YouLost ( YakotichDead ) ;
1046: LD_STRING YakotichDead
1048: PPUSH
1049: CALL_OW 104
// end ;
1053: END
// every 0 0$1 trigger IsDead ( Mietek ) do
1054: LD_EXP 4
1058: PPUSH
1059: CALL_OW 301
1063: IFFALSE 1075
1065: GO 1067
1067: DISABLE
// begin YouLost ( MietekDead ) ;
1068: LD_STRING MietekDead
1070: PPUSH
1071: CALL_OW 104
// end ;
1075: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1076: LD_VAR 0 1
1080: PUSH
1081: LD_INT 22
1083: PUSH
1084: LD_INT 3
1086: PUSH
1087: EMPTY
1088: LIST
1089: LIST
1090: PUSH
1091: LD_INT 3
1093: PUSH
1094: LD_INT 23
1096: PUSH
1097: LD_INT 0
1099: PUSH
1100: EMPTY
1101: LIST
1102: LIST
1103: PUSH
1104: EMPTY
1105: LIST
1106: LIST
1107: PUSH
1108: LD_INT 21
1110: PUSH
1111: LD_INT 1
1113: PUSH
1114: EMPTY
1115: LIST
1116: LIST
1117: PUSH
1118: EMPTY
1119: LIST
1120: LIST
1121: LIST
1122: PPUSH
1123: CALL_OW 69
1127: IN
1128: IFFALSE 1137
// YouLost ( PeopleDead ) ;
1130: LD_STRING PeopleDead
1132: PPUSH
1133: CALL_OW 104
// end ;
1137: PPOPN 1
1139: END
// every 0 0$1 trigger FilterUnitsInArea ( OmikronArea , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) do
1140: LD_INT 15
1142: PPUSH
1143: LD_INT 2
1145: PUSH
1146: LD_INT 22
1148: PUSH
1149: LD_INT 1
1151: PUSH
1152: EMPTY
1153: LIST
1154: LIST
1155: PUSH
1156: LD_INT 22
1158: PUSH
1159: LD_INT 4
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: PUSH
1166: EMPTY
1167: LIST
1168: LIST
1169: LIST
1170: PPUSH
1171: CALL_OW 70
1175: IFFALSE 1187
1177: GO 1179
1179: DISABLE
// begin YouLost ( ConvoysMadeIt ) ;
1180: LD_STRING ConvoysMadeIt
1182: PPUSH
1183: CALL_OW 104
// end ;
1187: END
// every 0 0$1 trigger maksim_back = true do
1188: LD_EXP 47
1192: PUSH
1193: LD_INT 1
1195: EQUAL
1196: IFFALSE 1205
1198: GO 1200
1200: DISABLE
// begin AmAttacks ;
1201: CALL 3911 0 0
// end ;
1205: END
// export function MaksimScout ; begin
1206: LD_INT 0
1208: PPUSH
// SetSide ( Maksim , 6 ) ;
1209: LD_EXP 9
1213: PPUSH
1214: LD_INT 6
1216: PPUSH
1217: CALL_OW 235
// ComMoveToArea ( Maksim , MaksimStop1 ) ;
1221: LD_EXP 9
1225: PPUSH
1226: LD_INT 5
1228: PPUSH
1229: CALL_OW 113
// end ;
1233: LD_VAR 0 1
1237: RET
// every 1 trigger IsInArea ( Maksim , MaksimStop1 ) do
1238: LD_EXP 9
1242: PPUSH
1243: LD_INT 5
1245: PPUSH
1246: CALL_OW 308
1250: IFFALSE 1283
1252: GO 1254
1254: DISABLE
// begin ComHold ( Maksim ) ;
1255: LD_EXP 9
1259: PPUSH
1260: CALL_OW 140
// Wait ( 0 0$10 ) ;
1264: LD_INT 350
1266: PPUSH
1267: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop2 ) ;
1271: LD_EXP 9
1275: PPUSH
1276: LD_INT 6
1278: PPUSH
1279: CALL_OW 113
// end ;
1283: END
// every 1 trigger IsInArea ( Maksim , MaksimStop2 ) do
1284: LD_EXP 9
1288: PPUSH
1289: LD_INT 6
1291: PPUSH
1292: CALL_OW 308
1296: IFFALSE 1320
1298: GO 1300
1300: DISABLE
// begin Wait ( 0 0$10 ) ;
1301: LD_INT 350
1303: PPUSH
1304: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop3 ) ;
1308: LD_EXP 9
1312: PPUSH
1313: LD_INT 7
1315: PPUSH
1316: CALL_OW 113
// end ;
1320: END
// every 1 trigger IsInArea ( Maksim , MaksimStop3 ) do
1321: LD_EXP 9
1325: PPUSH
1326: LD_INT 7
1328: PPUSH
1329: CALL_OW 308
1333: IFFALSE 1367
1335: GO 1337
1337: DISABLE
// begin Wait ( 0 0$10 ) ;
1338: LD_INT 350
1340: PPUSH
1341: CALL_OW 67
// maksim_scout_ended = true ;
1345: LD_ADDR_EXP 46
1349: PUSH
1350: LD_INT 1
1352: ST_TO_ADDR
// ComMoveUnit ( Maksim , Yakotich ) ;
1353: LD_EXP 9
1357: PPUSH
1358: LD_EXP 3
1362: PPUSH
1363: CALL_OW 112
// end ;
1367: END
// every 0 0$1 trigger maksim_back do
1368: LD_EXP 47
1372: IFFALSE 1426
1374: GO 1376
1376: DISABLE
// begin enable ;
1377: ENABLE
// if KurinTime then
1378: LD_EXP 23
1382: IFFALSE 1417
// begin KurinTime := KurinTime - 0 0$1 ;
1384: LD_ADDR_EXP 23
1388: PUSH
1389: LD_EXP 23
1393: PUSH
1394: LD_INT 35
1396: MINUS
1397: ST_TO_ADDR
// display_strings := [ #KurinAttack , KurinTime ] ;
1398: LD_ADDR_OWVAR 47
1402: PUSH
1403: LD_STRING #KurinAttack
1405: PUSH
1406: LD_EXP 23
1410: PUSH
1411: EMPTY
1412: LIST
1413: LIST
1414: ST_TO_ADDR
// end else
1415: GO 1426
// begin display_strings :=  ;
1417: LD_ADDR_OWVAR 47
1421: PUSH
1422: LD_STRING 
1424: ST_TO_ADDR
// disable ;
1425: DISABLE
// end ; end ;
1426: END
// every 0 0$1 trigger first_attack_clear do
1427: LD_EXP 55
1431: IFFALSE 1491
1433: GO 1435
1435: DISABLE
// begin enable ;
1436: ENABLE
// if MietekTime then
1437: LD_EXP 24
1441: IFFALSE 1482
// begin MietekTime := MietekTime - 0 0$1 ;
1443: LD_ADDR_EXP 24
1447: PUSH
1448: LD_EXP 24
1452: PUSH
1453: LD_INT 35
1455: MINUS
1456: ST_TO_ADDR
// display_strings := display_strings ^ [ #MietekForces , MietekTime ] ;
1457: LD_ADDR_OWVAR 47
1461: PUSH
1462: LD_OWVAR 47
1466: PUSH
1467: LD_STRING #MietekForces
1469: PUSH
1470: LD_EXP 24
1474: PUSH
1475: EMPTY
1476: LIST
1477: LIST
1478: ADD
1479: ST_TO_ADDR
// end else
1480: GO 1491
// begin display_strings :=  ;
1482: LD_ADDR_OWVAR 47
1486: PUSH
1487: LD_STRING 
1489: ST_TO_ADDR
// disable ;
1490: DISABLE
// end ; end ; end_of_file
1491: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
1492: LD_VAR 0 1
1496: PPUSH
1497: CALL_OW 255
1501: PUSH
1502: LD_INT 3
1504: EQUAL
1505: PUSH
1506: LD_VAR 0 1
1510: PPUSH
1511: CALL_OW 266
1515: PUSH
1516: LD_INT 0
1518: EQUAL
1519: AND
1520: IFFALSE 1545
// begin RuDep := building ;
1522: LD_ADDR_EXP 61
1526: PUSH
1527: LD_VAR 0 1
1531: ST_TO_ADDR
// SetRestrict ( b_depot , 3 , false ) ;
1532: LD_INT 0
1534: PPUSH
1535: LD_INT 3
1537: PPUSH
1538: LD_INT 0
1540: PPUSH
1541: CALL_OW 324
// end ; end ;
1545: PPOPN 2
1547: END
// on VehicleConstructed ( v , f ) do begin if GetSide ( v ) = 3 and GetWeapon ( v ) = ru_gun then
1548: LD_VAR 0 1
1552: PPUSH
1553: CALL_OW 255
1557: PUSH
1558: LD_INT 3
1560: EQUAL
1561: PUSH
1562: LD_VAR 0 1
1566: PPUSH
1567: CALL_OW 264
1571: PUSH
1572: LD_INT 44
1574: EQUAL
1575: AND
1576: IFFALSE 1604
// begin GunCounter := GunCounter + 1 ;
1578: LD_ADDR_EXP 43
1582: PUSH
1583: LD_EXP 43
1587: PUSH
1588: LD_INT 1
1590: PLUS
1591: ST_TO_ADDR
// SetAchievementEX ( ACH_GUN , GunCounter ) ;
1592: LD_STRING ACH_GUN
1594: PPUSH
1595: LD_EXP 43
1599: PPUSH
1600: CALL_OW 564
// end ; end ;
1604: PPOPN 2
1606: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 3 and GetBType ( b ) = b_depot then
1607: LD_VAR 0 1
1611: PPUSH
1612: CALL_OW 255
1616: PUSH
1617: LD_INT 3
1619: EQUAL
1620: PUSH
1621: LD_VAR 0 1
1625: PPUSH
1626: CALL_OW 266
1630: PUSH
1631: LD_INT 0
1633: EQUAL
1634: AND
1635: IFFALSE 1689
// begin DialogueOn ;
1637: CALL_OW 6
// Say ( Boris , 2Bor-01 ) ;
1641: LD_EXP 5
1645: PPUSH
1646: LD_STRING 2Bor-01
1648: PPUSH
1649: CALL_OW 88
// Say ( Vasilij , 2Vas-05 ) ;
1653: LD_EXP 6
1657: PPUSH
1658: LD_STRING 2Vas-05
1660: PPUSH
1661: CALL_OW 88
// ChangeMissionObjectives ( transport ) ;
1665: LD_STRING transport
1667: PPUSH
1668: CALL_OW 337
// SetTech ( 83 , 3 , 1 ) ;
1672: LD_INT 83
1674: PPUSH
1675: LD_INT 3
1677: PPUSH
1678: LD_INT 1
1680: PPUSH
1681: CALL_OW 322
// DialogueOff ;
1685: CALL_OW 7
// end ; if GetSide ( b ) = 3 and GetBType ( b ) = b_lab then
1689: LD_VAR 0 1
1693: PPUSH
1694: CALL_OW 255
1698: PUSH
1699: LD_INT 3
1701: EQUAL
1702: PUSH
1703: LD_VAR 0 1
1707: PPUSH
1708: CALL_OW 266
1712: PUSH
1713: LD_INT 6
1715: EQUAL
1716: AND
1717: IFFALSE 1775
// begin Say ( Vasilij , 2Vas-01 ) ;
1719: LD_EXP 6
1723: PPUSH
1724: LD_STRING 2Vas-01
1726: PPUSH
1727: CALL_OW 88
// Say ( Vasilij , 2Vas-02 ) ;
1731: LD_EXP 6
1735: PPUSH
1736: LD_STRING 2Vas-02
1738: PPUSH
1739: CALL_OW 88
// Say ( Yakotich , 2Yak-14 ) ;
1743: LD_EXP 3
1747: PPUSH
1748: LD_STRING 2Yak-14
1750: PPUSH
1751: CALL_OW 88
// ChangeMissionObjectives ( gattling ) ;
1755: LD_STRING gattling
1757: PPUSH
1758: CALL_OW 337
// SetTech ( 69 , 3 , 1 ) ;
1762: LD_INT 69
1764: PPUSH
1765: LD_INT 3
1767: PPUSH
1768: LD_INT 1
1770: PPUSH
1771: CALL_OW 322
// end ; end ;
1775: PPOPN 1
1777: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 1 and Weapon in [ 3 , 5 , 6 ] and gun_recycled = false then
1778: LD_VAR 0 3
1782: PUSH
1783: LD_INT 3
1785: EQUAL
1786: PUSH
1787: LD_VAR 0 4
1791: PUSH
1792: LD_INT 1
1794: EQUAL
1795: AND
1796: PUSH
1797: LD_VAR 0 11
1801: PUSH
1802: LD_INT 3
1804: PUSH
1805: LD_INT 5
1807: PUSH
1808: LD_INT 6
1810: PUSH
1811: EMPTY
1812: LIST
1813: LIST
1814: LIST
1815: IN
1816: AND
1817: PUSH
1818: LD_EXP 51
1822: PUSH
1823: LD_INT 0
1825: EQUAL
1826: AND
1827: IFFALSE 1875
// begin gun_recycled = true ;
1829: LD_ADDR_EXP 51
1833: PUSH
1834: LD_INT 1
1836: ST_TO_ADDR
// Say ( Stanislav , 2Stan-04 ) ;
1837: LD_EXP 16
1841: PPUSH
1842: LD_STRING 2Stan-04
1844: PPUSH
1845: CALL_OW 88
// SetTech ( 39 , 3 , 1 ) ;
1849: LD_INT 39
1851: PPUSH
1852: LD_INT 3
1854: PPUSH
1855: LD_INT 1
1857: PPUSH
1858: CALL_OW 322
// SetRestrict ( 17 , 3 , 1 ) ;
1862: LD_INT 17
1864: PPUSH
1865: LD_INT 3
1867: PPUSH
1868: LD_INT 1
1870: PPUSH
1871: CALL_OW 324
// end ; end ;
1875: PPOPN 11
1877: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = 4 and side2 = 3 ) or ( side1 = 3 and side2 = 4 ) ) and reiforcements_called = false then
1878: LD_VAR 0 1
1882: PUSH
1883: LD_INT 4
1885: EQUAL
1886: PUSH
1887: LD_VAR 0 2
1891: PUSH
1892: LD_INT 3
1894: EQUAL
1895: AND
1896: PUSH
1897: LD_VAR 0 1
1901: PUSH
1902: LD_INT 3
1904: EQUAL
1905: PUSH
1906: LD_VAR 0 2
1910: PUSH
1911: LD_INT 4
1913: EQUAL
1914: AND
1915: OR
1916: PUSH
1917: LD_EXP 56
1921: PUSH
1922: LD_INT 0
1924: EQUAL
1925: AND
1926: IFFALSE 2030
// begin reiforcements_called := true ;
1928: LD_ADDR_EXP 56
1932: PUSH
1933: LD_INT 1
1935: ST_TO_ADDR
// Say ( Yakotich , 2Yak-23 ) ;
1936: LD_EXP 3
1940: PPUSH
1941: LD_STRING 2Yak-23
1943: PPUSH
1944: CALL_OW 88
// Wait ( 0 0$10 ) ;
1948: LD_INT 350
1950: PPUSH
1951: CALL_OW 67
// SayRadio ( Yakotich , 2Yak-Reinforcements ) ;
1955: LD_EXP 3
1959: PPUSH
1960: LD_STRING 2Yak-Reinforcements
1962: PPUSH
1963: CALL_OW 94
// SayRadio ( Morozov , 2Moro-Reinforcements ) ;
1967: LD_EXP 17
1971: PPUSH
1972: LD_STRING 2Moro-Reinforcements
1974: PPUSH
1975: CALL_OW 94
// Wait ( 0 0$10 ) ;
1979: LD_INT 350
1981: PPUSH
1982: CALL_OW 67
// SayRadio ( Mietek , 2Ryn-04 ) ;
1986: LD_EXP 4
1990: PPUSH
1991: LD_STRING 2Ryn-04
1993: PPUSH
1994: CALL_OW 94
// SayRadio ( Mietek , 2Ryn-05 ) ;
1998: LD_EXP 4
2002: PPUSH
2003: LD_STRING 2Ryn-05
2005: PPUSH
2006: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-24 ) ;
2010: LD_EXP 3
2014: PPUSH
2015: LD_STRING 2Yak-24
2017: PPUSH
2018: CALL_OW 94
// first_attack_clear = true ;
2022: LD_ADDR_EXP 55
2026: PUSH
2027: LD_INT 1
2029: ST_TO_ADDR
// end ; end ;
2030: PPOPN 2
2032: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
2033: LD_INT 3
2035: PPUSH
2036: LD_INT 69
2038: PPUSH
2039: CALL_OW 325
2043: IFFALSE 2087
2045: GO 2047
2047: DISABLE
// begin Say ( Vasilij , 2Vas-03 ) ;
2048: LD_EXP 6
2052: PPUSH
2053: LD_STRING 2Vas-03
2055: PPUSH
2056: CALL_OW 88
// Say ( Vasilij , 2Vas-04 ) ;
2060: LD_EXP 6
2064: PPUSH
2065: LD_STRING 2Vas-04
2067: PPUSH
2068: CALL_OW 88
// gattling_researched = true ;
2072: LD_ADDR_EXP 49
2076: PUSH
2077: LD_INT 1
2079: ST_TO_ADDR
// ChangeMissionObjectives ( gattling-2 ) ;
2080: LD_STRING gattling-2
2082: PPUSH
2083: CALL_OW 337
// end ;
2087: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
2088: LD_INT 3
2090: PPUSH
2091: LD_INT 90
2093: PPUSH
2094: CALL_OW 325
2098: IFFALSE 2118
2100: GO 2102
2102: DISABLE
// begin turrets_researched = true ;
2103: LD_ADDR_EXP 48
2107: PUSH
2108: LD_INT 1
2110: ST_TO_ADDR
// ChangeMissionObjectives ( turret-2 ) ;
2111: LD_STRING turret-2
2113: PPUSH
2114: CALL_OW 337
// end ;
2118: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 89 ] , [ f_weapon , 51 ] ] ] ) do
2119: LD_INT 22
2121: PUSH
2122: LD_INT 3
2124: PUSH
2125: EMPTY
2126: LIST
2127: LIST
2128: PUSH
2129: LD_INT 21
2131: PUSH
2132: LD_INT 2
2134: PUSH
2135: EMPTY
2136: LIST
2137: LIST
2138: PUSH
2139: LD_INT 2
2141: PUSH
2142: LD_INT 34
2144: PUSH
2145: LD_INT 89
2147: PUSH
2148: EMPTY
2149: LIST
2150: LIST
2151: PUSH
2152: LD_INT 34
2154: PUSH
2155: LD_INT 51
2157: PUSH
2158: EMPTY
2159: LIST
2160: LIST
2161: PUSH
2162: EMPTY
2163: LIST
2164: LIST
2165: LIST
2166: PUSH
2167: EMPTY
2168: LIST
2169: LIST
2170: LIST
2171: PPUSH
2172: CALL_OW 69
2176: IFFALSE 2196
2178: GO 2180
2180: DISABLE
// begin ChangeMissionObjectives ( transport-2 ) ;
2181: LD_STRING transport-2
2183: PPUSH
2184: CALL_OW 337
// transport_builded = true ;
2188: LD_ADDR_EXP 53
2192: PUSH
2193: LD_INT 1
2195: ST_TO_ADDR
// end ;
2196: END
// every 0 0$1 trigger Researched ( 3 , 39 ) do
2197: LD_INT 3
2199: PPUSH
2200: LD_INT 39
2202: PPUSH
2203: CALL_OW 325
2207: IFFALSE 2263
2209: GO 2211
2211: DISABLE
// begin Say ( Stanislav , 2Stan-05 ) ;
2212: LD_EXP 16
2216: PPUSH
2217: LD_STRING 2Stan-05
2219: PPUSH
2220: CALL_OW 88
// Say ( Stanislav , 2Stan-06 ) ;
2224: LD_EXP 16
2228: PPUSH
2229: LD_STRING 2Stan-06
2231: PPUSH
2232: CALL_OW 88
// Say ( Yakotich , 2Yak-Stan-02 ) ;
2236: LD_EXP 3
2240: PPUSH
2241: LD_STRING 2Yak-Stan-02
2243: PPUSH
2244: CALL_OW 88
// gun_researched = true ;
2248: LD_ADDR_EXP 50
2252: PUSH
2253: LD_INT 1
2255: ST_TO_ADDR
// ChangeMissionObjectives ( gun-2 ) ;
2256: LD_STRING gun-2
2258: PPUSH
2259: CALL_OW 337
// end ;
2263: END
// every 0 0$1 trigger IsInArea ( [ f_side , 4 ] , DontEnterAchivArea ) do
2264: LD_INT 22
2266: PUSH
2267: LD_INT 4
2269: PUSH
2270: EMPTY
2271: LIST
2272: LIST
2273: PPUSH
2274: LD_INT 20
2276: PPUSH
2277: CALL_OW 308
2281: IFFALSE 2294
2283: GO 2285
2285: DISABLE
// begin riverside_touched = true ;
2286: LD_ADDR_EXP 60
2290: PUSH
2291: LD_INT 1
2293: ST_TO_ADDR
// end ;
2294: END
// every 0 0$1 trigger riverside_touched = false and kurin_attack_started = true do
2295: LD_EXP 60
2299: PUSH
2300: LD_INT 0
2302: EQUAL
2303: PUSH
2304: LD_EXP 57
2308: PUSH
2309: LD_INT 1
2311: EQUAL
2312: AND
2313: IFFALSE 2325
2315: GO 2317
2317: DISABLE
// begin SetAchievement ( ACH_RIVER ) ;
2318: LD_STRING ACH_RIVER
2320: PPUSH
2321: CALL_OW 543
// end ;
2325: END
// every 0 0$1 trigger FilterUnitsInArea ( NorthPassage , [ [ f_side , 3 ] ] ) or FilterUnitsInArea ( WestPassage , [ [ f_side , 3 ] ] ) do
2326: LD_INT 9
2328: PPUSH
2329: LD_INT 22
2331: PUSH
2332: LD_INT 3
2334: PUSH
2335: EMPTY
2336: LIST
2337: LIST
2338: PUSH
2339: EMPTY
2340: LIST
2341: PPUSH
2342: CALL_OW 70
2346: PUSH
2347: LD_INT 10
2349: PPUSH
2350: LD_INT 22
2352: PUSH
2353: LD_INT 3
2355: PUSH
2356: EMPTY
2357: LIST
2358: LIST
2359: PUSH
2360: EMPTY
2361: LIST
2362: PPUSH
2363: CALL_OW 70
2367: OR
2368: IFFALSE 2381
2370: GO 2372
2372: DISABLE
// begin passages_touched = true ;
2373: LD_ADDR_EXP 59
2377: PUSH
2378: LD_INT 1
2380: ST_TO_ADDR
// end ;
2381: END
// every 0 0$1 trigger passages_touched = false and end_of_the_mission = true do
2382: LD_EXP 59
2386: PUSH
2387: LD_INT 0
2389: EQUAL
2390: PUSH
2391: LD_EXP 58
2395: PUSH
2396: LD_INT 1
2398: EQUAL
2399: AND
2400: IFFALSE 2412
2402: GO 2404
2404: DISABLE
// begin SetAchievement ( ACH_SNAKE ) ;
2405: LD_STRING ACH_SNAKE
2407: PPUSH
2408: CALL_OW 543
// end ; end_of_file
2412: END
// every 5 5$0 do var i ;
2413: GO 2415
2415: DISABLE
2416: LD_INT 0
2418: PPUSH
// begin for i = 1 to 4 do
2419: LD_ADDR_VAR 0 1
2423: PUSH
2424: DOUBLE
2425: LD_INT 1
2427: DEC
2428: ST_TO_ADDR
2429: LD_INT 4
2431: PUSH
2432: FOR_TO
2433: IFFALSE 2459
// begin CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
2435: LD_INT 2
2437: PPUSH
2438: LD_INT 5
2440: PPUSH
2441: CALL_OW 12
2445: PPUSH
2446: LD_INT 4
2448: PPUSH
2449: LD_INT 1
2451: PPUSH
2452: CALL_OW 55
// enable ;
2456: ENABLE
// end ;
2457: GO 2432
2459: POP
2460: POP
// end ; end_of_file
2461: PPOPN 1
2463: END
// export function InitAmerican ; var i , y , turrety , lab , fabryka , zbrojka , turrety2 , lab2 , fabryka2 , zbrojka2 ; begin
2464: LD_INT 0
2466: PPUSH
2467: PPUSH
2468: PPUSH
2469: PPUSH
2470: PPUSH
2471: PPUSH
2472: PPUSH
2473: PPUSH
2474: PPUSH
2475: PPUSH
2476: PPUSH
// AmNorthPersonel := [ ] ;
2477: LD_ADDR_EXP 27
2481: PUSH
2482: EMPTY
2483: ST_TO_ADDR
// uc_side := 1 ;
2484: LD_ADDR_OWVAR 20
2488: PUSH
2489: LD_INT 1
2491: ST_TO_ADDR
// uc_nation := 1 ;
2492: LD_ADDR_OWVAR 21
2496: PUSH
2497: LD_INT 1
2499: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
2500: LD_ADDR_VAR 0 2
2504: PUSH
2505: DOUBLE
2506: LD_INT 1
2508: DEC
2509: ST_TO_ADDR
2510: LD_INT 7
2512: PUSH
2513: LD_INT 8
2515: PUSH
2516: LD_INT 9
2518: PUSH
2519: EMPTY
2520: LIST
2521: LIST
2522: LIST
2523: PUSH
2524: LD_OWVAR 67
2528: ARRAY
2529: PUSH
2530: FOR_TO
2531: IFFALSE 2590
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
2533: LD_INT 0
2535: PPUSH
2536: LD_INT 1
2538: PPUSH
2539: CALL_OW 12
2543: PPUSH
2544: LD_INT 0
2546: PUSH
2547: LD_INT 2
2549: PUSH
2550: LD_INT 4
2552: PUSH
2553: LD_INT 5
2555: PUSH
2556: EMPTY
2557: LIST
2558: LIST
2559: LIST
2560: LIST
2561: PUSH
2562: LD_OWVAR 67
2566: ARRAY
2567: PPUSH
2568: CALL_OW 381
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2572: LD_ADDR_EXP 27
2576: PUSH
2577: LD_EXP 27
2581: PUSH
2582: CALL_OW 44
2586: ADD
2587: ST_TO_ADDR
// end ;
2588: GO 2530
2590: POP
2591: POP
// for i = 1 to 2 do
2592: LD_ADDR_VAR 0 2
2596: PUSH
2597: DOUBLE
2598: LD_INT 1
2600: DEC
2601: ST_TO_ADDR
2602: LD_INT 2
2604: PUSH
2605: FOR_TO
2606: IFFALSE 2665
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
2608: LD_INT 0
2610: PPUSH
2611: LD_INT 1
2613: PPUSH
2614: CALL_OW 12
2618: PPUSH
2619: LD_INT 0
2621: PUSH
2622: LD_INT 2
2624: PUSH
2625: LD_INT 4
2627: PUSH
2628: LD_INT 5
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: LIST
2635: LIST
2636: PUSH
2637: LD_OWVAR 67
2641: ARRAY
2642: PPUSH
2643: CALL_OW 382
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2647: LD_ADDR_EXP 27
2651: PUSH
2652: LD_EXP 27
2656: PUSH
2657: CALL_OW 44
2661: ADD
2662: ST_TO_ADDR
// end ;
2663: GO 2605
2665: POP
2666: POP
// for i = 1 to 1 do
2667: LD_ADDR_VAR 0 2
2671: PUSH
2672: DOUBLE
2673: LD_INT 1
2675: DEC
2676: ST_TO_ADDR
2677: LD_INT 1
2679: PUSH
2680: FOR_TO
2681: IFFALSE 2740
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
2683: LD_INT 0
2685: PPUSH
2686: LD_INT 1
2688: PPUSH
2689: CALL_OW 12
2693: PPUSH
2694: LD_INT 0
2696: PUSH
2697: LD_INT 2
2699: PUSH
2700: LD_INT 4
2702: PUSH
2703: LD_INT 5
2705: PUSH
2706: EMPTY
2707: LIST
2708: LIST
2709: LIST
2710: LIST
2711: PUSH
2712: LD_OWVAR 67
2716: ARRAY
2717: PPUSH
2718: CALL_OW 383
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2722: LD_ADDR_EXP 27
2726: PUSH
2727: LD_EXP 27
2731: PUSH
2732: CALL_OW 44
2736: ADD
2737: ST_TO_ADDR
// end ;
2738: GO 2680
2740: POP
2741: POP
// for i = 1 to 1 do
2742: LD_ADDR_VAR 0 2
2746: PUSH
2747: DOUBLE
2748: LD_INT 1
2750: DEC
2751: ST_TO_ADDR
2752: LD_INT 1
2754: PUSH
2755: FOR_TO
2756: IFFALSE 2815
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
2758: LD_INT 0
2760: PPUSH
2761: LD_INT 1
2763: PPUSH
2764: CALL_OW 12
2768: PPUSH
2769: LD_INT 0
2771: PUSH
2772: LD_INT 2
2774: PUSH
2775: LD_INT 4
2777: PUSH
2778: LD_INT 5
2780: PUSH
2781: EMPTY
2782: LIST
2783: LIST
2784: LIST
2785: LIST
2786: PUSH
2787: LD_OWVAR 67
2791: ARRAY
2792: PPUSH
2793: CALL_OW 384
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2797: LD_ADDR_EXP 27
2801: PUSH
2802: LD_EXP 27
2806: PUSH
2807: CALL_OW 44
2811: ADD
2812: ST_TO_ADDR
// end ;
2813: GO 2755
2815: POP
2816: POP
// turrety := FilterUnitsInArea ( AmNorthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
2817: LD_ADDR_VAR 0 4
2821: PUSH
2822: LD_INT 11
2824: PPUSH
2825: LD_INT 2
2827: PUSH
2828: LD_INT 30
2830: PUSH
2831: LD_INT 31
2833: PUSH
2834: EMPTY
2835: LIST
2836: LIST
2837: PUSH
2838: LD_INT 30
2840: PUSH
2841: LD_INT 32
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: PUSH
2848: EMPTY
2849: LIST
2850: LIST
2851: LIST
2852: PPUSH
2853: CALL_OW 70
2857: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
2858: LD_ADDR_VAR 0 5
2862: PUSH
2863: LD_INT 11
2865: PPUSH
2866: LD_INT 30
2868: PUSH
2869: LD_INT 7
2871: PUSH
2872: EMPTY
2873: LIST
2874: LIST
2875: PUSH
2876: EMPTY
2877: LIST
2878: PPUSH
2879: CALL_OW 70
2883: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_factory ] ] ) ;
2884: LD_ADDR_VAR 0 6
2888: PUSH
2889: LD_INT 11
2891: PPUSH
2892: LD_INT 30
2894: PUSH
2895: LD_INT 3
2897: PUSH
2898: EMPTY
2899: LIST
2900: LIST
2901: PUSH
2902: EMPTY
2903: LIST
2904: PPUSH
2905: CALL_OW 70
2909: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
2910: LD_ADDR_VAR 0 7
2914: PUSH
2915: LD_INT 11
2917: PPUSH
2918: LD_INT 30
2920: PUSH
2921: LD_INT 4
2923: PUSH
2924: EMPTY
2925: LIST
2926: LIST
2927: PUSH
2928: EMPTY
2929: LIST
2930: PPUSH
2931: CALL_OW 70
2935: ST_TO_ADDR
// y := 1 ;
2936: LD_ADDR_VAR 0 3
2940: PUSH
2941: LD_INT 1
2943: ST_TO_ADDR
// for i in AmNorthPersonel do
2944: LD_ADDR_VAR 0 2
2948: PUSH
2949: LD_EXP 27
2953: PUSH
2954: FOR_IN
2955: IFFALSE 3141
// begin PlaceUnitArea ( i , AmNorthArea , false ) ;
2957: LD_VAR 0 2
2961: PPUSH
2962: LD_INT 3
2964: PPUSH
2965: LD_INT 0
2967: PPUSH
2968: CALL_OW 49
// case GetClass ( i ) of 1 :
2972: LD_VAR 0 2
2976: PPUSH
2977: CALL_OW 257
2981: PUSH
2982: LD_INT 1
2984: DOUBLE
2985: EQUAL
2986: IFTRUE 2990
2988: GO 3057
2990: POP
// begin if y > 6 then
2991: LD_VAR 0 3
2995: PUSH
2996: LD_INT 6
2998: GREATER
2999: IFFALSE 3021
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3001: LD_VAR 0 2
3005: PPUSH
3006: LD_VAR 0 7
3010: PUSH
3011: LD_INT 1
3013: ARRAY
3014: PPUSH
3015: CALL_OW 120
3019: GO 3041
// ComEnterUnit ( i , turrety [ y ] ) ;
3021: LD_VAR 0 2
3025: PPUSH
3026: LD_VAR 0 4
3030: PUSH
3031: LD_VAR 0 3
3035: ARRAY
3036: PPUSH
3037: CALL_OW 120
// y = y + 1 ;
3041: LD_ADDR_VAR 0 3
3045: PUSH
3046: LD_VAR 0 3
3050: PUSH
3051: LD_INT 1
3053: PLUS
3054: ST_TO_ADDR
// end ; 2 :
3055: GO 3139
3057: LD_INT 2
3059: DOUBLE
3060: EQUAL
3061: IFTRUE 3065
3063: GO 3080
3065: POP
// ComEnterUnit ( i , AmDep1 ) ; 3 :
3066: LD_VAR 0 2
3070: PPUSH
3071: LD_INT 1
3073: PPUSH
3074: CALL_OW 120
3078: GO 3139
3080: LD_INT 3
3082: DOUBLE
3083: EQUAL
3084: IFTRUE 3088
3086: GO 3109
3088: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3089: LD_VAR 0 2
3093: PPUSH
3094: LD_VAR 0 6
3098: PUSH
3099: LD_INT 1
3101: ARRAY
3102: PPUSH
3103: CALL_OW 120
3107: GO 3139
3109: LD_INT 4
3111: DOUBLE
3112: EQUAL
3113: IFTRUE 3117
3115: GO 3138
3117: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3118: LD_VAR 0 2
3122: PPUSH
3123: LD_VAR 0 5
3127: PUSH
3128: LD_INT 1
3130: ARRAY
3131: PPUSH
3132: CALL_OW 120
3136: GO 3139
3138: POP
// end ;
3139: GO 2954
3141: POP
3142: POP
// AmSouthPersonel := [ ] ;
3143: LD_ADDR_EXP 28
3147: PUSH
3148: EMPTY
3149: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3150: LD_ADDR_VAR 0 2
3154: PUSH
3155: DOUBLE
3156: LD_INT 1
3158: DEC
3159: ST_TO_ADDR
3160: LD_INT 4
3162: PUSH
3163: LD_INT 5
3165: PUSH
3166: LD_INT 6
3168: PUSH
3169: EMPTY
3170: LIST
3171: LIST
3172: LIST
3173: PUSH
3174: LD_OWVAR 67
3178: ARRAY
3179: PUSH
3180: FOR_TO
3181: IFFALSE 3240
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
3183: LD_INT 0
3185: PPUSH
3186: LD_INT 1
3188: PPUSH
3189: CALL_OW 12
3193: PPUSH
3194: LD_INT 0
3196: PUSH
3197: LD_INT 2
3199: PUSH
3200: LD_INT 4
3202: PUSH
3203: LD_INT 5
3205: PUSH
3206: EMPTY
3207: LIST
3208: LIST
3209: LIST
3210: LIST
3211: PUSH
3212: LD_OWVAR 67
3216: ARRAY
3217: PPUSH
3218: CALL_OW 381
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3222: LD_ADDR_EXP 28
3226: PUSH
3227: LD_EXP 28
3231: PUSH
3232: CALL_OW 44
3236: ADD
3237: ST_TO_ADDR
// end ;
3238: GO 3180
3240: POP
3241: POP
// for i = 1 to 1 do
3242: LD_ADDR_VAR 0 2
3246: PUSH
3247: DOUBLE
3248: LD_INT 1
3250: DEC
3251: ST_TO_ADDR
3252: LD_INT 1
3254: PUSH
3255: FOR_TO
3256: IFFALSE 3315
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
3258: LD_INT 0
3260: PPUSH
3261: LD_INT 1
3263: PPUSH
3264: CALL_OW 12
3268: PPUSH
3269: LD_INT 0
3271: PUSH
3272: LD_INT 2
3274: PUSH
3275: LD_INT 4
3277: PUSH
3278: LD_INT 5
3280: PUSH
3281: EMPTY
3282: LIST
3283: LIST
3284: LIST
3285: LIST
3286: PUSH
3287: LD_OWVAR 67
3291: ARRAY
3292: PPUSH
3293: CALL_OW 382
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3297: LD_ADDR_EXP 28
3301: PUSH
3302: LD_EXP 28
3306: PUSH
3307: CALL_OW 44
3311: ADD
3312: ST_TO_ADDR
// end ;
3313: GO 3255
3315: POP
3316: POP
// for i = 1 to 2 do
3317: LD_ADDR_VAR 0 2
3321: PUSH
3322: DOUBLE
3323: LD_INT 1
3325: DEC
3326: ST_TO_ADDR
3327: LD_INT 2
3329: PUSH
3330: FOR_TO
3331: IFFALSE 3390
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
3333: LD_INT 0
3335: PPUSH
3336: LD_INT 1
3338: PPUSH
3339: CALL_OW 12
3343: PPUSH
3344: LD_INT 0
3346: PUSH
3347: LD_INT 2
3349: PUSH
3350: LD_INT 4
3352: PUSH
3353: LD_INT 5
3355: PUSH
3356: EMPTY
3357: LIST
3358: LIST
3359: LIST
3360: LIST
3361: PUSH
3362: LD_OWVAR 67
3366: ARRAY
3367: PPUSH
3368: CALL_OW 383
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3372: LD_ADDR_EXP 28
3376: PUSH
3377: LD_EXP 28
3381: PUSH
3382: CALL_OW 44
3386: ADD
3387: ST_TO_ADDR
// end ;
3388: GO 3330
3390: POP
3391: POP
// for i = 1 to 1 do
3392: LD_ADDR_VAR 0 2
3396: PUSH
3397: DOUBLE
3398: LD_INT 1
3400: DEC
3401: ST_TO_ADDR
3402: LD_INT 1
3404: PUSH
3405: FOR_TO
3406: IFFALSE 3465
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 0 , 2 , 4 , 5 ] [ Difficulty ] ) ;
3408: LD_INT 0
3410: PPUSH
3411: LD_INT 1
3413: PPUSH
3414: CALL_OW 12
3418: PPUSH
3419: LD_INT 0
3421: PUSH
3422: LD_INT 2
3424: PUSH
3425: LD_INT 4
3427: PUSH
3428: LD_INT 5
3430: PUSH
3431: EMPTY
3432: LIST
3433: LIST
3434: LIST
3435: LIST
3436: PUSH
3437: LD_OWVAR 67
3441: ARRAY
3442: PPUSH
3443: CALL_OW 384
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3447: LD_ADDR_EXP 28
3451: PUSH
3452: LD_EXP 28
3456: PUSH
3457: CALL_OW 44
3461: ADD
3462: ST_TO_ADDR
// end ;
3463: GO 3405
3465: POP
3466: POP
// turrety := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3467: LD_ADDR_VAR 0 4
3471: PUSH
3472: LD_INT 13
3474: PPUSH
3475: LD_INT 2
3477: PUSH
3478: LD_INT 30
3480: PUSH
3481: LD_INT 31
3483: PUSH
3484: EMPTY
3485: LIST
3486: LIST
3487: PUSH
3488: LD_INT 30
3490: PUSH
3491: LD_INT 32
3493: PUSH
3494: EMPTY
3495: LIST
3496: LIST
3497: PUSH
3498: EMPTY
3499: LIST
3500: LIST
3501: LIST
3502: PPUSH
3503: CALL_OW 70
3507: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_lab ] ] ) ;
3508: LD_ADDR_VAR 0 5
3512: PUSH
3513: LD_INT 13
3515: PPUSH
3516: LD_INT 30
3518: PUSH
3519: LD_INT 6
3521: PUSH
3522: EMPTY
3523: LIST
3524: LIST
3525: PUSH
3526: EMPTY
3527: LIST
3528: PPUSH
3529: CALL_OW 70
3533: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ) ;
3534: LD_ADDR_VAR 0 6
3538: PUSH
3539: LD_INT 13
3541: PPUSH
3542: LD_INT 2
3544: PUSH
3545: LD_INT 30
3547: PUSH
3548: LD_INT 3
3550: PUSH
3551: EMPTY
3552: LIST
3553: LIST
3554: PUSH
3555: LD_INT 30
3557: PUSH
3558: LD_INT 2
3560: PUSH
3561: EMPTY
3562: LIST
3563: LIST
3564: PUSH
3565: EMPTY
3566: LIST
3567: LIST
3568: LIST
3569: PPUSH
3570: CALL_OW 70
3574: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
3575: LD_ADDR_VAR 0 7
3579: PUSH
3580: LD_INT 13
3582: PPUSH
3583: LD_INT 30
3585: PUSH
3586: LD_INT 4
3588: PUSH
3589: EMPTY
3590: LIST
3591: LIST
3592: PUSH
3593: EMPTY
3594: LIST
3595: PPUSH
3596: CALL_OW 70
3600: ST_TO_ADDR
// y := 1 ;
3601: LD_ADDR_VAR 0 3
3605: PUSH
3606: LD_INT 1
3608: ST_TO_ADDR
// for i in AmSouthPersonel do
3609: LD_ADDR_VAR 0 2
3613: PUSH
3614: LD_EXP 28
3618: PUSH
3619: FOR_IN
3620: IFFALSE 3806
// begin PlaceUnitArea ( i , AmSouthArea , false ) ;
3622: LD_VAR 0 2
3626: PPUSH
3627: LD_INT 12
3629: PPUSH
3630: LD_INT 0
3632: PPUSH
3633: CALL_OW 49
// case GetClass ( i ) of 1 :
3637: LD_VAR 0 2
3641: PPUSH
3642: CALL_OW 257
3646: PUSH
3647: LD_INT 1
3649: DOUBLE
3650: EQUAL
3651: IFTRUE 3655
3653: GO 3722
3655: POP
// begin if y > 2 then
3656: LD_VAR 0 3
3660: PUSH
3661: LD_INT 2
3663: GREATER
3664: IFFALSE 3686
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3666: LD_VAR 0 2
3670: PPUSH
3671: LD_VAR 0 7
3675: PUSH
3676: LD_INT 1
3678: ARRAY
3679: PPUSH
3680: CALL_OW 120
3684: GO 3706
// ComEnterUnit ( i , turrety [ y ] ) ;
3686: LD_VAR 0 2
3690: PPUSH
3691: LD_VAR 0 4
3695: PUSH
3696: LD_VAR 0 3
3700: ARRAY
3701: PPUSH
3702: CALL_OW 120
// y = y + 1 ;
3706: LD_ADDR_VAR 0 3
3710: PUSH
3711: LD_VAR 0 3
3715: PUSH
3716: LD_INT 1
3718: PLUS
3719: ST_TO_ADDR
// end ; 2 :
3720: GO 3804
3722: LD_INT 2
3724: DOUBLE
3725: EQUAL
3726: IFTRUE 3730
3728: GO 3745
3730: POP
// ComEnterUnit ( i , AmDep2 ) ; 3 :
3731: LD_VAR 0 2
3735: PPUSH
3736: LD_INT 47
3738: PPUSH
3739: CALL_OW 120
3743: GO 3804
3745: LD_INT 3
3747: DOUBLE
3748: EQUAL
3749: IFTRUE 3753
3751: GO 3774
3753: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3754: LD_VAR 0 2
3758: PPUSH
3759: LD_VAR 0 6
3763: PUSH
3764: LD_INT 1
3766: ARRAY
3767: PPUSH
3768: CALL_OW 120
3772: GO 3804
3774: LD_INT 4
3776: DOUBLE
3777: EQUAL
3778: IFTRUE 3782
3780: GO 3803
3782: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3783: LD_VAR 0 2
3787: PPUSH
3788: LD_VAR 0 5
3792: PUSH
3793: LD_INT 1
3795: ARRAY
3796: PPUSH
3797: CALL_OW 120
3801: GO 3804
3803: POP
// end ;
3804: GO 3619
3806: POP
3807: POP
// end ;
3808: LD_VAR 0 1
3812: RET
// every 0 0$1 trigger not kurin_attack_started = true do var enemy , attacker ;
3813: LD_EXP 57
3817: PUSH
3818: LD_INT 1
3820: EQUAL
3821: NOT
3822: IFFALSE 3908
3824: GO 3826
3826: DISABLE
3827: LD_INT 0
3829: PPUSH
3830: PPUSH
// begin enable ;
3831: ENABLE
// ComAgressiveMove ( AmConvoys , 158 , 99 ) ;
3832: LD_EXP 25
3836: PPUSH
3837: LD_INT 158
3839: PPUSH
3840: LD_INT 99
3842: PPUSH
3843: CALL_OW 114
// enemy = Filterallunits ( [ f_side , 3 ] ) ;
3847: LD_ADDR_VAR 0 1
3851: PUSH
3852: LD_INT 22
3854: PUSH
3855: LD_INT 3
3857: PUSH
3858: EMPTY
3859: LIST
3860: LIST
3861: PPUSH
3862: CALL_OW 69
3866: ST_TO_ADDR
// for attacker in AmConvoysVehicles do
3867: LD_ADDR_VAR 0 2
3871: PUSH
3872: LD_EXP 26
3876: PUSH
3877: FOR_IN
3878: IFFALSE 3906
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
3880: LD_VAR 0 2
3884: PPUSH
3885: LD_VAR 0 1
3889: PPUSH
3890: LD_VAR 0 2
3894: PPUSH
3895: CALL_OW 74
3899: PPUSH
3900: CALL_OW 115
3904: GO 3877
3906: POP
3907: POP
// end ;
3908: PPOPN 2
3910: END
// export function AmAttacks ; var i ; begin
3911: LD_INT 0
3913: PPUSH
3914: PPUSH
// Uc_Side = 4 ;
3915: LD_ADDR_OWVAR 20
3919: PUSH
3920: LD_INT 4
3922: ST_TO_ADDR
// Uc_Nation = 1 ;
3923: LD_ADDR_OWVAR 21
3927: PUSH
3928: LD_INT 1
3930: ST_TO_ADDR
// Wait ( 4 4$30 ) ;
3931: LD_INT 9450
3933: PPUSH
3934: CALL_OW 67
// first_attack_spawned = true ;
3938: LD_ADDR_EXP 54
3942: PUSH
3943: LD_INT 1
3945: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3946: LD_ADDR_VAR 0 2
3950: PUSH
3951: DOUBLE
3952: LD_INT 1
3954: DEC
3955: ST_TO_ADDR
3956: LD_INT 2
3958: PUSH
3959: LD_INT 2
3961: PUSH
3962: LD_INT 3
3964: PUSH
3965: EMPTY
3966: LIST
3967: LIST
3968: LIST
3969: PUSH
3970: LD_OWVAR 67
3974: ARRAY
3975: PUSH
3976: FOR_TO
3977: IFFALSE 4061
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 3 , 5 ] [ Difficulty ] ) ;
3979: LD_INT 0
3981: PPUSH
3982: LD_INT 1
3984: PPUSH
3985: CALL_OW 12
3989: PPUSH
3990: LD_INT 1
3992: PUSH
3993: LD_INT 2
3995: PUSH
3996: LD_INT 3
3998: PUSH
3999: LD_INT 5
4001: PUSH
4002: EMPTY
4003: LIST
4004: LIST
4005: LIST
4006: LIST
4007: PUSH
4008: LD_OWVAR 67
4012: ARRAY
4013: PPUSH
4014: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4018: LD_ADDR_EXP 37
4022: PUSH
4023: CALL_OW 44
4027: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4028: LD_ADDR_EXP 25
4032: PUSH
4033: LD_EXP 25
4037: PUSH
4038: LD_EXP 37
4042: ADD
4043: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4044: LD_EXP 37
4048: PPUSH
4049: LD_INT 1
4051: PPUSH
4052: LD_INT 0
4054: PPUSH
4055: CALL_OW 49
// end ;
4059: GO 3976
4061: POP
4062: POP
// for i = 1 to [ 0 , 1 , 1 ] [ Difficulty ] do
4063: LD_ADDR_VAR 0 2
4067: PUSH
4068: DOUBLE
4069: LD_INT 1
4071: DEC
4072: ST_TO_ADDR
4073: LD_INT 0
4075: PUSH
4076: LD_INT 1
4078: PUSH
4079: LD_INT 1
4081: PUSH
4082: EMPTY
4083: LIST
4084: LIST
4085: LIST
4086: PUSH
4087: LD_OWVAR 67
4091: ARRAY
4092: PUSH
4093: FOR_TO
4094: IFFALSE 4178
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 3 , 5 ] [ Difficulty ] ) ;
4096: LD_INT 0
4098: PPUSH
4099: LD_INT 1
4101: PPUSH
4102: CALL_OW 12
4106: PPUSH
4107: LD_INT 1
4109: PUSH
4110: LD_INT 2
4112: PUSH
4113: LD_INT 3
4115: PUSH
4116: LD_INT 5
4118: PUSH
4119: EMPTY
4120: LIST
4121: LIST
4122: LIST
4123: LIST
4124: PUSH
4125: LD_OWVAR 67
4129: ARRAY
4130: PPUSH
4131: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4135: LD_ADDR_EXP 38
4139: PUSH
4140: CALL_OW 44
4144: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4145: LD_ADDR_EXP 25
4149: PUSH
4150: LD_EXP 25
4154: PUSH
4155: LD_EXP 38
4159: ADD
4160: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4161: LD_EXP 38
4165: PPUSH
4166: LD_INT 1
4168: PPUSH
4169: LD_INT 0
4171: PPUSH
4172: CALL_OW 49
// end ;
4176: GO 4093
4178: POP
4179: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4180: LD_ADDR_VAR 0 2
4184: PUSH
4185: DOUBLE
4186: LD_INT 1
4188: DEC
4189: ST_TO_ADDR
4190: LD_INT 1
4192: PUSH
4193: LD_INT 1
4195: PUSH
4196: LD_INT 1
4198: PUSH
4199: EMPTY
4200: LIST
4201: LIST
4202: LIST
4203: PUSH
4204: LD_OWVAR 67
4208: ARRAY
4209: PUSH
4210: FOR_TO
4211: IFFALSE 4295
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 3 , 5 ] [ Difficulty ] ) ;
4213: LD_INT 0
4215: PPUSH
4216: LD_INT 1
4218: PPUSH
4219: CALL_OW 12
4223: PPUSH
4224: LD_INT 1
4226: PUSH
4227: LD_INT 2
4229: PUSH
4230: LD_INT 3
4232: PUSH
4233: LD_INT 5
4235: PUSH
4236: EMPTY
4237: LIST
4238: LIST
4239: LIST
4240: LIST
4241: PUSH
4242: LD_OWVAR 67
4246: ARRAY
4247: PPUSH
4248: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4252: LD_ADDR_EXP 40
4256: PUSH
4257: CALL_OW 44
4261: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4262: LD_ADDR_EXP 25
4266: PUSH
4267: LD_EXP 25
4271: PUSH
4272: LD_EXP 40
4276: ADD
4277: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4278: LD_EXP 40
4282: PPUSH
4283: LD_INT 1
4285: PPUSH
4286: LD_INT 0
4288: PPUSH
4289: CALL_OW 49
// end ;
4293: GO 4210
4295: POP
4296: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4297: LD_ADDR_VAR 0 2
4301: PUSH
4302: DOUBLE
4303: LD_INT 1
4305: DEC
4306: ST_TO_ADDR
4307: LD_INT 1
4309: PUSH
4310: LD_INT 1
4312: PUSH
4313: LD_INT 1
4315: PUSH
4316: EMPTY
4317: LIST
4318: LIST
4319: LIST
4320: PUSH
4321: LD_OWVAR 67
4325: ARRAY
4326: PUSH
4327: FOR_TO
4328: IFFALSE 4506
// begin uc_side := 4 ;
4330: LD_ADDR_OWVAR 20
4334: PUSH
4335: LD_INT 4
4337: ST_TO_ADDR
// uc_nation := 1 ;
4338: LD_ADDR_OWVAR 21
4342: PUSH
4343: LD_INT 1
4345: ST_TO_ADDR
// vc_control = control_manual ;
4346: LD_ADDR_OWVAR 38
4350: PUSH
4351: LD_INT 1
4353: ST_TO_ADDR
// vc_engine = engine_combustion ;
4354: LD_ADDR_OWVAR 39
4358: PUSH
4359: LD_INT 1
4361: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4362: LD_ADDR_OWVAR 37
4366: PUSH
4367: LD_INT 2
4369: PPUSH
4370: LD_INT 4
4372: PPUSH
4373: CALL_OW 12
4377: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4378: LD_ADDR_OWVAR 40
4382: PUSH
4383: LD_INT 3
4385: PPUSH
4386: LD_INT 5
4388: PPUSH
4389: CALL_OW 12
4393: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4394: LD_ADDR_EXP 41
4398: PUSH
4399: CALL_OW 45
4403: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 3 , 5 ] [ Difficulty ] ) ;
4404: LD_INT 0
4406: PPUSH
4407: LD_INT 1
4409: PPUSH
4410: CALL_OW 12
4414: PPUSH
4415: LD_INT 1
4417: PUSH
4418: LD_INT 2
4420: PUSH
4421: LD_INT 3
4423: PUSH
4424: LD_INT 5
4426: PUSH
4427: EMPTY
4428: LIST
4429: LIST
4430: LIST
4431: LIST
4432: PUSH
4433: LD_OWVAR 67
4437: ARRAY
4438: PPUSH
4439: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4443: LD_ADDR_EXP 39
4447: PUSH
4448: CALL_OW 44
4452: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4453: LD_EXP 39
4457: PPUSH
4458: LD_EXP 41
4462: PPUSH
4463: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4467: LD_EXP 41
4471: PPUSH
4472: LD_INT 14
4474: PPUSH
4475: LD_INT 0
4477: PPUSH
4478: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4482: LD_ADDR_EXP 26
4486: PUSH
4487: LD_EXP 26
4491: PUSH
4492: LD_EXP 39
4496: ADD
4497: PUSH
4498: LD_EXP 41
4502: ADD
4503: ST_TO_ADDR
// end ;
4504: GO 4327
4506: POP
4507: POP
// Wait ( 5 5$45 ) ;
4508: LD_INT 12075
4510: PPUSH
4511: CALL_OW 67
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4515: LD_ADDR_VAR 0 2
4519: PUSH
4520: DOUBLE
4521: LD_INT 1
4523: DEC
4524: ST_TO_ADDR
4525: LD_INT 2
4527: PUSH
4528: LD_INT 3
4530: PUSH
4531: LD_INT 4
4533: PUSH
4534: EMPTY
4535: LIST
4536: LIST
4537: LIST
4538: PUSH
4539: LD_OWVAR 67
4543: ARRAY
4544: PUSH
4545: FOR_TO
4546: IFFALSE 4630
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
4548: LD_INT 0
4550: PPUSH
4551: LD_INT 1
4553: PPUSH
4554: CALL_OW 12
4558: PPUSH
4559: LD_INT 1
4561: PUSH
4562: LD_INT 2
4564: PUSH
4565: LD_INT 4
4567: PUSH
4568: LD_INT 5
4570: PUSH
4571: EMPTY
4572: LIST
4573: LIST
4574: LIST
4575: LIST
4576: PUSH
4577: LD_OWVAR 67
4581: ARRAY
4582: PPUSH
4583: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4587: LD_ADDR_EXP 37
4591: PUSH
4592: CALL_OW 44
4596: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4597: LD_ADDR_EXP 25
4601: PUSH
4602: LD_EXP 25
4606: PUSH
4607: LD_EXP 37
4611: ADD
4612: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4613: LD_EXP 37
4617: PPUSH
4618: LD_INT 1
4620: PPUSH
4621: LD_INT 0
4623: PPUSH
4624: CALL_OW 49
// end ;
4628: GO 4545
4630: POP
4631: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4632: LD_ADDR_VAR 0 2
4636: PUSH
4637: DOUBLE
4638: LD_INT 1
4640: DEC
4641: ST_TO_ADDR
4642: LD_INT 1
4644: PUSH
4645: LD_INT 2
4647: PUSH
4648: LD_INT 2
4650: PUSH
4651: EMPTY
4652: LIST
4653: LIST
4654: LIST
4655: PUSH
4656: LD_OWVAR 67
4660: ARRAY
4661: PUSH
4662: FOR_TO
4663: IFFALSE 4747
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
4665: LD_INT 0
4667: PPUSH
4668: LD_INT 1
4670: PPUSH
4671: CALL_OW 12
4675: PPUSH
4676: LD_INT 1
4678: PUSH
4679: LD_INT 2
4681: PUSH
4682: LD_INT 4
4684: PUSH
4685: LD_INT 5
4687: PUSH
4688: EMPTY
4689: LIST
4690: LIST
4691: LIST
4692: LIST
4693: PUSH
4694: LD_OWVAR 67
4698: ARRAY
4699: PPUSH
4700: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4704: LD_ADDR_EXP 38
4708: PUSH
4709: CALL_OW 44
4713: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4714: LD_ADDR_EXP 25
4718: PUSH
4719: LD_EXP 25
4723: PUSH
4724: LD_EXP 38
4728: ADD
4729: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4730: LD_EXP 38
4734: PPUSH
4735: LD_INT 1
4737: PPUSH
4738: LD_INT 0
4740: PPUSH
4741: CALL_OW 49
// end ;
4745: GO 4662
4747: POP
4748: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4749: LD_ADDR_VAR 0 2
4753: PUSH
4754: DOUBLE
4755: LD_INT 1
4757: DEC
4758: ST_TO_ADDR
4759: LD_INT 1
4761: PUSH
4762: LD_INT 1
4764: PUSH
4765: LD_INT 1
4767: PUSH
4768: EMPTY
4769: LIST
4770: LIST
4771: LIST
4772: PUSH
4773: LD_OWVAR 67
4777: ARRAY
4778: PUSH
4779: FOR_TO
4780: IFFALSE 4864
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
4782: LD_INT 0
4784: PPUSH
4785: LD_INT 1
4787: PPUSH
4788: CALL_OW 12
4792: PPUSH
4793: LD_INT 1
4795: PUSH
4796: LD_INT 2
4798: PUSH
4799: LD_INT 4
4801: PUSH
4802: LD_INT 5
4804: PUSH
4805: EMPTY
4806: LIST
4807: LIST
4808: LIST
4809: LIST
4810: PUSH
4811: LD_OWVAR 67
4815: ARRAY
4816: PPUSH
4817: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4821: LD_ADDR_EXP 40
4825: PUSH
4826: CALL_OW 44
4830: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4831: LD_ADDR_EXP 25
4835: PUSH
4836: LD_EXP 25
4840: PUSH
4841: LD_EXP 40
4845: ADD
4846: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4847: LD_EXP 40
4851: PPUSH
4852: LD_INT 1
4854: PPUSH
4855: LD_INT 0
4857: PPUSH
4858: CALL_OW 49
// end ;
4862: GO 4779
4864: POP
4865: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4866: LD_ADDR_VAR 0 2
4870: PUSH
4871: DOUBLE
4872: LD_INT 1
4874: DEC
4875: ST_TO_ADDR
4876: LD_INT 1
4878: PUSH
4879: LD_INT 2
4881: PUSH
4882: LD_INT 2
4884: PUSH
4885: EMPTY
4886: LIST
4887: LIST
4888: LIST
4889: PUSH
4890: LD_OWVAR 67
4894: ARRAY
4895: PUSH
4896: FOR_TO
4897: IFFALSE 5075
// begin uc_side := 4 ;
4899: LD_ADDR_OWVAR 20
4903: PUSH
4904: LD_INT 4
4906: ST_TO_ADDR
// uc_nation := 1 ;
4907: LD_ADDR_OWVAR 21
4911: PUSH
4912: LD_INT 1
4914: ST_TO_ADDR
// vc_control = control_manual ;
4915: LD_ADDR_OWVAR 38
4919: PUSH
4920: LD_INT 1
4922: ST_TO_ADDR
// vc_engine = engine_combustion ;
4923: LD_ADDR_OWVAR 39
4927: PUSH
4928: LD_INT 1
4930: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4931: LD_ADDR_OWVAR 37
4935: PUSH
4936: LD_INT 2
4938: PPUSH
4939: LD_INT 4
4941: PPUSH
4942: CALL_OW 12
4946: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4947: LD_ADDR_OWVAR 40
4951: PUSH
4952: LD_INT 3
4954: PPUSH
4955: LD_INT 5
4957: PPUSH
4958: CALL_OW 12
4962: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4963: LD_ADDR_EXP 41
4967: PUSH
4968: CALL_OW 45
4972: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
4973: LD_INT 0
4975: PPUSH
4976: LD_INT 1
4978: PPUSH
4979: CALL_OW 12
4983: PPUSH
4984: LD_INT 1
4986: PUSH
4987: LD_INT 2
4989: PUSH
4990: LD_INT 4
4992: PUSH
4993: LD_INT 5
4995: PUSH
4996: EMPTY
4997: LIST
4998: LIST
4999: LIST
5000: LIST
5001: PUSH
5002: LD_OWVAR 67
5006: ARRAY
5007: PPUSH
5008: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5012: LD_ADDR_EXP 39
5016: PUSH
5017: CALL_OW 44
5021: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5022: LD_EXP 39
5026: PPUSH
5027: LD_EXP 41
5031: PPUSH
5032: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5036: LD_EXP 41
5040: PPUSH
5041: LD_INT 14
5043: PPUSH
5044: LD_INT 0
5046: PPUSH
5047: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5051: LD_ADDR_EXP 26
5055: PUSH
5056: LD_EXP 26
5060: PUSH
5061: LD_EXP 39
5065: ADD
5066: PUSH
5067: LD_EXP 41
5071: ADD
5072: ST_TO_ADDR
// end ;
5073: GO 4896
5075: POP
5076: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5077: LD_EXP 25
5081: PPUSH
5082: LD_INT 157
5084: PPUSH
5085: LD_INT 97
5087: PPUSH
5088: CALL_OW 114
// Wait ( 5 5$0 ) ;
5092: LD_INT 10500
5094: PPUSH
5095: CALL_OW 67
// for i = 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
5099: LD_ADDR_VAR 0 2
5103: PUSH
5104: DOUBLE
5105: LD_INT 1
5107: DEC
5108: ST_TO_ADDR
5109: LD_INT 3
5111: PUSH
5112: LD_INT 4
5114: PUSH
5115: LD_INT 6
5117: PUSH
5118: EMPTY
5119: LIST
5120: LIST
5121: LIST
5122: PUSH
5123: LD_OWVAR 67
5127: ARRAY
5128: PUSH
5129: FOR_TO
5130: IFFALSE 5214
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
5132: LD_INT 0
5134: PPUSH
5135: LD_INT 1
5137: PPUSH
5138: CALL_OW 12
5142: PPUSH
5143: LD_INT 1
5145: PUSH
5146: LD_INT 2
5148: PUSH
5149: LD_INT 4
5151: PUSH
5152: LD_INT 5
5154: PUSH
5155: EMPTY
5156: LIST
5157: LIST
5158: LIST
5159: LIST
5160: PUSH
5161: LD_OWVAR 67
5165: ARRAY
5166: PPUSH
5167: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5171: LD_ADDR_EXP 37
5175: PUSH
5176: CALL_OW 44
5180: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5181: LD_ADDR_EXP 25
5185: PUSH
5186: LD_EXP 25
5190: PUSH
5191: LD_EXP 37
5195: ADD
5196: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5197: LD_EXP 37
5201: PPUSH
5202: LD_INT 1
5204: PPUSH
5205: LD_INT 0
5207: PPUSH
5208: CALL_OW 49
// end ;
5212: GO 5129
5214: POP
5215: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
5216: LD_ADDR_VAR 0 2
5220: PUSH
5221: DOUBLE
5222: LD_INT 1
5224: DEC
5225: ST_TO_ADDR
5226: LD_INT 1
5228: PUSH
5229: LD_INT 2
5231: PUSH
5232: LD_INT 2
5234: PUSH
5235: EMPTY
5236: LIST
5237: LIST
5238: LIST
5239: PUSH
5240: LD_OWVAR 67
5244: ARRAY
5245: PUSH
5246: FOR_TO
5247: IFFALSE 5327
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5249: LD_INT 0
5251: PPUSH
5252: LD_INT 1
5254: PPUSH
5255: CALL_OW 12
5259: PPUSH
5260: LD_INT 1
5262: PUSH
5263: LD_INT 2
5265: PUSH
5266: LD_INT 4
5268: PUSH
5269: EMPTY
5270: LIST
5271: LIST
5272: LIST
5273: PUSH
5274: LD_OWVAR 67
5278: ARRAY
5279: PPUSH
5280: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5284: LD_ADDR_EXP 38
5288: PUSH
5289: CALL_OW 44
5293: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5294: LD_ADDR_EXP 25
5298: PUSH
5299: LD_EXP 25
5303: PUSH
5304: LD_EXP 38
5308: ADD
5309: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5310: LD_EXP 38
5314: PPUSH
5315: LD_INT 1
5317: PPUSH
5318: LD_INT 0
5320: PPUSH
5321: CALL_OW 49
// end ;
5325: GO 5246
5327: POP
5328: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5329: LD_ADDR_VAR 0 2
5333: PUSH
5334: DOUBLE
5335: LD_INT 1
5337: DEC
5338: ST_TO_ADDR
5339: LD_INT 1
5341: PUSH
5342: LD_INT 1
5344: PUSH
5345: LD_INT 2
5347: PUSH
5348: EMPTY
5349: LIST
5350: LIST
5351: LIST
5352: PUSH
5353: LD_OWVAR 67
5357: ARRAY
5358: PUSH
5359: FOR_TO
5360: IFFALSE 5444
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
5362: LD_INT 0
5364: PPUSH
5365: LD_INT 1
5367: PPUSH
5368: CALL_OW 12
5372: PPUSH
5373: LD_INT 1
5375: PUSH
5376: LD_INT 2
5378: PUSH
5379: LD_INT 4
5381: PUSH
5382: LD_INT 5
5384: PUSH
5385: EMPTY
5386: LIST
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_OWVAR 67
5395: ARRAY
5396: PPUSH
5397: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5401: LD_ADDR_EXP 40
5405: PUSH
5406: CALL_OW 44
5410: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5411: LD_ADDR_EXP 25
5415: PUSH
5416: LD_EXP 25
5420: PUSH
5421: LD_EXP 40
5425: ADD
5426: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5427: LD_EXP 40
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 49
// end ;
5442: GO 5359
5444: POP
5445: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: DOUBLE
5452: LD_INT 1
5454: DEC
5455: ST_TO_ADDR
5456: LD_INT 1
5458: PUSH
5459: LD_INT 2
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PUSH
5470: LD_OWVAR 67
5474: ARRAY
5475: PUSH
5476: FOR_TO
5477: IFFALSE 5655
// begin uc_side := 4 ;
5479: LD_ADDR_OWVAR 20
5483: PUSH
5484: LD_INT 4
5486: ST_TO_ADDR
// uc_nation := 1 ;
5487: LD_ADDR_OWVAR 21
5491: PUSH
5492: LD_INT 1
5494: ST_TO_ADDR
// vc_control = control_manual ;
5495: LD_ADDR_OWVAR 38
5499: PUSH
5500: LD_INT 1
5502: ST_TO_ADDR
// vc_engine = engine_combustion ;
5503: LD_ADDR_OWVAR 39
5507: PUSH
5508: LD_INT 1
5510: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5511: LD_ADDR_OWVAR 37
5515: PUSH
5516: LD_INT 2
5518: PPUSH
5519: LD_INT 4
5521: PPUSH
5522: CALL_OW 12
5526: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5527: LD_ADDR_OWVAR 40
5531: PUSH
5532: LD_INT 3
5534: PPUSH
5535: LD_INT 5
5537: PPUSH
5538: CALL_OW 12
5542: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
5543: LD_ADDR_EXP 41
5547: PUSH
5548: CALL_OW 45
5552: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 12
5563: PPUSH
5564: LD_INT 1
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 4
5572: PUSH
5573: LD_INT 5
5575: PUSH
5576: EMPTY
5577: LIST
5578: LIST
5579: LIST
5580: LIST
5581: PUSH
5582: LD_OWVAR 67
5586: ARRAY
5587: PPUSH
5588: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5592: LD_ADDR_EXP 39
5596: PUSH
5597: CALL_OW 44
5601: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5602: LD_EXP 39
5606: PPUSH
5607: LD_EXP 41
5611: PPUSH
5612: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5616: LD_EXP 41
5620: PPUSH
5621: LD_INT 14
5623: PPUSH
5624: LD_INT 0
5626: PPUSH
5627: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5631: LD_ADDR_EXP 26
5635: PUSH
5636: LD_EXP 26
5640: PUSH
5641: LD_EXP 39
5645: ADD
5646: PUSH
5647: LD_EXP 41
5651: ADD
5652: ST_TO_ADDR
// end ;
5653: GO 5476
5655: POP
5656: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5657: LD_EXP 25
5661: PPUSH
5662: LD_INT 157
5664: PPUSH
5665: LD_INT 97
5667: PPUSH
5668: CALL_OW 114
// Wait ( 5 5$0 ) ;
5672: LD_INT 10500
5674: PPUSH
5675: CALL_OW 67
// for i = 1 to [ 3 , 5 , 7 ] [ Difficulty ] do
5679: LD_ADDR_VAR 0 2
5683: PUSH
5684: DOUBLE
5685: LD_INT 1
5687: DEC
5688: ST_TO_ADDR
5689: LD_INT 3
5691: PUSH
5692: LD_INT 5
5694: PUSH
5695: LD_INT 7
5697: PUSH
5698: EMPTY
5699: LIST
5700: LIST
5701: LIST
5702: PUSH
5703: LD_OWVAR 67
5707: ARRAY
5708: PUSH
5709: FOR_TO
5710: IFFALSE 5794
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
5712: LD_INT 0
5714: PPUSH
5715: LD_INT 1
5717: PPUSH
5718: CALL_OW 12
5722: PPUSH
5723: LD_INT 1
5725: PUSH
5726: LD_INT 2
5728: PUSH
5729: LD_INT 4
5731: PUSH
5732: LD_INT 5
5734: PUSH
5735: EMPTY
5736: LIST
5737: LIST
5738: LIST
5739: LIST
5740: PUSH
5741: LD_OWVAR 67
5745: ARRAY
5746: PPUSH
5747: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5751: LD_ADDR_EXP 37
5755: PUSH
5756: CALL_OW 44
5760: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5761: LD_ADDR_EXP 25
5765: PUSH
5766: LD_EXP 25
5770: PUSH
5771: LD_EXP 37
5775: ADD
5776: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5777: LD_EXP 37
5781: PPUSH
5782: LD_INT 1
5784: PPUSH
5785: LD_INT 0
5787: PPUSH
5788: CALL_OW 49
// end ;
5792: GO 5709
5794: POP
5795: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5796: LD_ADDR_VAR 0 2
5800: PUSH
5801: DOUBLE
5802: LD_INT 1
5804: DEC
5805: ST_TO_ADDR
5806: LD_INT 1
5808: PUSH
5809: LD_INT 2
5811: PUSH
5812: LD_INT 3
5814: PUSH
5815: EMPTY
5816: LIST
5817: LIST
5818: LIST
5819: PUSH
5820: LD_OWVAR 67
5824: ARRAY
5825: PUSH
5826: FOR_TO
5827: IFFALSE 5911
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
5829: LD_INT 0
5831: PPUSH
5832: LD_INT 1
5834: PPUSH
5835: CALL_OW 12
5839: PPUSH
5840: LD_INT 1
5842: PUSH
5843: LD_INT 2
5845: PUSH
5846: LD_INT 4
5848: PUSH
5849: LD_INT 5
5851: PUSH
5852: EMPTY
5853: LIST
5854: LIST
5855: LIST
5856: LIST
5857: PUSH
5858: LD_OWVAR 67
5862: ARRAY
5863: PPUSH
5864: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5868: LD_ADDR_EXP 38
5872: PUSH
5873: CALL_OW 44
5877: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5878: LD_ADDR_EXP 25
5882: PUSH
5883: LD_EXP 25
5887: PUSH
5888: LD_EXP 38
5892: ADD
5893: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5894: LD_EXP 38
5898: PPUSH
5899: LD_INT 1
5901: PPUSH
5902: LD_INT 0
5904: PPUSH
5905: CALL_OW 49
// end ;
5909: GO 5826
5911: POP
5912: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5913: LD_ADDR_VAR 0 2
5917: PUSH
5918: DOUBLE
5919: LD_INT 1
5921: DEC
5922: ST_TO_ADDR
5923: LD_INT 1
5925: PUSH
5926: LD_INT 1
5928: PUSH
5929: LD_INT 2
5931: PUSH
5932: EMPTY
5933: LIST
5934: LIST
5935: LIST
5936: PUSH
5937: LD_OWVAR 67
5941: ARRAY
5942: PUSH
5943: FOR_TO
5944: IFFALSE 6028
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
5946: LD_INT 0
5948: PPUSH
5949: LD_INT 1
5951: PPUSH
5952: CALL_OW 12
5956: PPUSH
5957: LD_INT 1
5959: PUSH
5960: LD_INT 2
5962: PUSH
5963: LD_INT 4
5965: PUSH
5966: LD_INT 5
5968: PUSH
5969: EMPTY
5970: LIST
5971: LIST
5972: LIST
5973: LIST
5974: PUSH
5975: LD_OWVAR 67
5979: ARRAY
5980: PPUSH
5981: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5985: LD_ADDR_EXP 40
5989: PUSH
5990: CALL_OW 44
5994: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5995: LD_ADDR_EXP 25
5999: PUSH
6000: LD_EXP 25
6004: PUSH
6005: LD_EXP 40
6009: ADD
6010: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6011: LD_EXP 40
6015: PPUSH
6016: LD_INT 1
6018: PPUSH
6019: LD_INT 0
6021: PPUSH
6022: CALL_OW 49
// end ;
6026: GO 5943
6028: POP
6029: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6030: LD_ADDR_VAR 0 2
6034: PUSH
6035: DOUBLE
6036: LD_INT 1
6038: DEC
6039: ST_TO_ADDR
6040: LD_INT 1
6042: PUSH
6043: LD_INT 2
6045: PUSH
6046: LD_INT 3
6048: PUSH
6049: EMPTY
6050: LIST
6051: LIST
6052: LIST
6053: PUSH
6054: LD_OWVAR 67
6058: ARRAY
6059: PUSH
6060: FOR_TO
6061: IFFALSE 6239
// begin uc_side := 4 ;
6063: LD_ADDR_OWVAR 20
6067: PUSH
6068: LD_INT 4
6070: ST_TO_ADDR
// uc_nation := 1 ;
6071: LD_ADDR_OWVAR 21
6075: PUSH
6076: LD_INT 1
6078: ST_TO_ADDR
// vc_control = control_manual ;
6079: LD_ADDR_OWVAR 38
6083: PUSH
6084: LD_INT 1
6086: ST_TO_ADDR
// vc_engine = engine_combustion ;
6087: LD_ADDR_OWVAR 39
6091: PUSH
6092: LD_INT 1
6094: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6095: LD_ADDR_OWVAR 37
6099: PUSH
6100: LD_INT 2
6102: PPUSH
6103: LD_INT 4
6105: PPUSH
6106: CALL_OW 12
6110: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6111: LD_ADDR_OWVAR 40
6115: PUSH
6116: LD_INT 3
6118: PPUSH
6119: LD_INT 5
6121: PPUSH
6122: CALL_OW 12
6126: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6127: LD_ADDR_EXP 41
6131: PUSH
6132: CALL_OW 45
6136: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
6137: LD_INT 0
6139: PPUSH
6140: LD_INT 1
6142: PPUSH
6143: CALL_OW 12
6147: PPUSH
6148: LD_INT 1
6150: PUSH
6151: LD_INT 2
6153: PUSH
6154: LD_INT 4
6156: PUSH
6157: LD_INT 5
6159: PUSH
6160: EMPTY
6161: LIST
6162: LIST
6163: LIST
6164: LIST
6165: PUSH
6166: LD_OWVAR 67
6170: ARRAY
6171: PPUSH
6172: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6176: LD_ADDR_EXP 39
6180: PUSH
6181: CALL_OW 44
6185: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6186: LD_EXP 39
6190: PPUSH
6191: LD_EXP 41
6195: PPUSH
6196: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6200: LD_EXP 41
6204: PPUSH
6205: LD_INT 14
6207: PPUSH
6208: LD_INT 0
6210: PPUSH
6211: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6215: LD_ADDR_EXP 26
6219: PUSH
6220: LD_EXP 26
6224: PUSH
6225: LD_EXP 39
6229: ADD
6230: PUSH
6231: LD_EXP 41
6235: ADD
6236: ST_TO_ADDR
// end ;
6237: GO 6060
6239: POP
6240: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6241: LD_EXP 25
6245: PPUSH
6246: LD_INT 157
6248: PPUSH
6249: LD_INT 97
6251: PPUSH
6252: CALL_OW 114
// Wait ( 5 5$0 ) ;
6256: LD_INT 10500
6258: PPUSH
6259: CALL_OW 67
// for i = 1 to [ 4 , 6 , 10 ] [ Difficulty ] do
6263: LD_ADDR_VAR 0 2
6267: PUSH
6268: DOUBLE
6269: LD_INT 1
6271: DEC
6272: ST_TO_ADDR
6273: LD_INT 4
6275: PUSH
6276: LD_INT 6
6278: PUSH
6279: LD_INT 10
6281: PUSH
6282: EMPTY
6283: LIST
6284: LIST
6285: LIST
6286: PUSH
6287: LD_OWVAR 67
6291: ARRAY
6292: PUSH
6293: FOR_TO
6294: IFFALSE 6378
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
6296: LD_INT 0
6298: PPUSH
6299: LD_INT 1
6301: PPUSH
6302: CALL_OW 12
6306: PPUSH
6307: LD_INT 1
6309: PUSH
6310: LD_INT 2
6312: PUSH
6313: LD_INT 4
6315: PUSH
6316: LD_INT 5
6318: PUSH
6319: EMPTY
6320: LIST
6321: LIST
6322: LIST
6323: LIST
6324: PUSH
6325: LD_OWVAR 67
6329: ARRAY
6330: PPUSH
6331: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
6335: LD_ADDR_EXP 37
6339: PUSH
6340: CALL_OW 44
6344: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
6345: LD_ADDR_EXP 25
6349: PUSH
6350: LD_EXP 25
6354: PUSH
6355: LD_EXP 37
6359: ADD
6360: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
6361: LD_EXP 37
6365: PPUSH
6366: LD_INT 1
6368: PPUSH
6369: LD_INT 0
6371: PPUSH
6372: CALL_OW 49
// end ;
6376: GO 6293
6378: POP
6379: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6380: LD_ADDR_VAR 0 2
6384: PUSH
6385: DOUBLE
6386: LD_INT 1
6388: DEC
6389: ST_TO_ADDR
6390: LD_INT 1
6392: PUSH
6393: LD_INT 2
6395: PUSH
6396: LD_INT 3
6398: PUSH
6399: EMPTY
6400: LIST
6401: LIST
6402: LIST
6403: PUSH
6404: LD_OWVAR 67
6408: ARRAY
6409: PUSH
6410: FOR_TO
6411: IFFALSE 6495
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
6413: LD_INT 0
6415: PPUSH
6416: LD_INT 1
6418: PPUSH
6419: CALL_OW 12
6423: PPUSH
6424: LD_INT 1
6426: PUSH
6427: LD_INT 2
6429: PUSH
6430: LD_INT 4
6432: PUSH
6433: LD_INT 5
6435: PUSH
6436: EMPTY
6437: LIST
6438: LIST
6439: LIST
6440: LIST
6441: PUSH
6442: LD_OWVAR 67
6446: ARRAY
6447: PPUSH
6448: CALL_OW 384
// AmSciConvoy = CreateHuman ;
6452: LD_ADDR_EXP 38
6456: PUSH
6457: CALL_OW 44
6461: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
6462: LD_ADDR_EXP 25
6466: PUSH
6467: LD_EXP 25
6471: PUSH
6472: LD_EXP 38
6476: ADD
6477: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
6478: LD_EXP 38
6482: PPUSH
6483: LD_INT 1
6485: PPUSH
6486: LD_INT 0
6488: PPUSH
6489: CALL_OW 49
// end ;
6493: GO 6410
6495: POP
6496: POP
// for i = 1 to [ 1 , 1 , 3 ] [ Difficulty ] do
6497: LD_ADDR_VAR 0 2
6501: PUSH
6502: DOUBLE
6503: LD_INT 1
6505: DEC
6506: ST_TO_ADDR
6507: LD_INT 1
6509: PUSH
6510: LD_INT 1
6512: PUSH
6513: LD_INT 3
6515: PUSH
6516: EMPTY
6517: LIST
6518: LIST
6519: LIST
6520: PUSH
6521: LD_OWVAR 67
6525: ARRAY
6526: PUSH
6527: FOR_TO
6528: IFFALSE 6612
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
6530: LD_INT 0
6532: PPUSH
6533: LD_INT 1
6535: PPUSH
6536: CALL_OW 12
6540: PPUSH
6541: LD_INT 1
6543: PUSH
6544: LD_INT 2
6546: PUSH
6547: LD_INT 4
6549: PUSH
6550: LD_INT 5
6552: PUSH
6553: EMPTY
6554: LIST
6555: LIST
6556: LIST
6557: LIST
6558: PUSH
6559: LD_OWVAR 67
6563: ARRAY
6564: PPUSH
6565: CALL_OW 382
// AmEngConvoy = CreateHuman ;
6569: LD_ADDR_EXP 40
6573: PUSH
6574: CALL_OW 44
6578: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
6579: LD_ADDR_EXP 25
6583: PUSH
6584: LD_EXP 25
6588: PUSH
6589: LD_EXP 40
6593: ADD
6594: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6595: LD_EXP 40
6599: PPUSH
6600: LD_INT 1
6602: PPUSH
6603: LD_INT 0
6605: PPUSH
6606: CALL_OW 49
// end ;
6610: GO 6527
6612: POP
6613: POP
// for i = 1 to [ 1 , 2 , 4 ] [ Difficulty ] do
6614: LD_ADDR_VAR 0 2
6618: PUSH
6619: DOUBLE
6620: LD_INT 1
6622: DEC
6623: ST_TO_ADDR
6624: LD_INT 1
6626: PUSH
6627: LD_INT 2
6629: PUSH
6630: LD_INT 4
6632: PUSH
6633: EMPTY
6634: LIST
6635: LIST
6636: LIST
6637: PUSH
6638: LD_OWVAR 67
6642: ARRAY
6643: PUSH
6644: FOR_TO
6645: IFFALSE 6823
// begin uc_side := 4 ;
6647: LD_ADDR_OWVAR 20
6651: PUSH
6652: LD_INT 4
6654: ST_TO_ADDR
// uc_nation := 1 ;
6655: LD_ADDR_OWVAR 21
6659: PUSH
6660: LD_INT 1
6662: ST_TO_ADDR
// vc_control = control_manual ;
6663: LD_ADDR_OWVAR 38
6667: PUSH
6668: LD_INT 1
6670: ST_TO_ADDR
// vc_engine = engine_combustion ;
6671: LD_ADDR_OWVAR 39
6675: PUSH
6676: LD_INT 1
6678: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6679: LD_ADDR_OWVAR 37
6683: PUSH
6684: LD_INT 2
6686: PPUSH
6687: LD_INT 4
6689: PPUSH
6690: CALL_OW 12
6694: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6695: LD_ADDR_OWVAR 40
6699: PUSH
6700: LD_INT 3
6702: PPUSH
6703: LD_INT 5
6705: PPUSH
6706: CALL_OW 12
6710: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6711: LD_ADDR_EXP 41
6715: PUSH
6716: CALL_OW 45
6720: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 , 5 ] [ Difficulty ] ) ;
6721: LD_INT 0
6723: PPUSH
6724: LD_INT 1
6726: PPUSH
6727: CALL_OW 12
6731: PPUSH
6732: LD_INT 1
6734: PUSH
6735: LD_INT 2
6737: PUSH
6738: LD_INT 4
6740: PUSH
6741: LD_INT 5
6743: PUSH
6744: EMPTY
6745: LIST
6746: LIST
6747: LIST
6748: LIST
6749: PUSH
6750: LD_OWVAR 67
6754: ARRAY
6755: PPUSH
6756: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6760: LD_ADDR_EXP 39
6764: PUSH
6765: CALL_OW 44
6769: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6770: LD_EXP 39
6774: PPUSH
6775: LD_EXP 41
6779: PPUSH
6780: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6784: LD_EXP 41
6788: PPUSH
6789: LD_INT 14
6791: PPUSH
6792: LD_INT 0
6794: PPUSH
6795: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6799: LD_ADDR_EXP 26
6803: PUSH
6804: LD_EXP 26
6808: PUSH
6809: LD_EXP 39
6813: ADD
6814: PUSH
6815: LD_EXP 41
6819: ADD
6820: ST_TO_ADDR
// end ;
6821: GO 6644
6823: POP
6824: POP
// end ; end_of_file
6825: LD_VAR 0 1
6829: RET
// export function InitRussian ; begin
6830: LD_INT 0
6832: PPUSH
// Uc_Nation := 3 ;
6833: LD_ADDR_OWVAR 21
6837: PUSH
6838: LD_INT 3
6840: ST_TO_ADDR
// Uc_Side := 3 ;
6841: LD_ADDR_OWVAR 20
6845: PUSH
6846: LD_INT 3
6848: ST_TO_ADDR
// YakotichCrew := YakotichCrew ^ Yakotich ^ Mietek ^ Boris ^ Michail ^ Vasilij ^ Maksim ^ Fiodor ^ Aleksandr ^ Aleksiej ^ Pavel ^ Zakhar ^ Constantin ^ Stanislav ^ Josif ;
6849: LD_ADDR_EXP 1
6853: PUSH
6854: LD_EXP 1
6858: PUSH
6859: LD_EXP 3
6863: ADD
6864: PUSH
6865: LD_EXP 4
6869: ADD
6870: PUSH
6871: LD_EXP 5
6875: ADD
6876: PUSH
6877: LD_EXP 7
6881: ADD
6882: PUSH
6883: LD_EXP 6
6887: ADD
6888: PUSH
6889: LD_EXP 9
6893: ADD
6894: PUSH
6895: LD_EXP 10
6899: ADD
6900: PUSH
6901: LD_EXP 14
6905: ADD
6906: PUSH
6907: LD_EXP 13
6911: ADD
6912: PUSH
6913: LD_EXP 11
6917: ADD
6918: PUSH
6919: LD_EXP 12
6923: ADD
6924: PUSH
6925: LD_EXP 8
6929: ADD
6930: PUSH
6931: LD_EXP 16
6935: ADD
6936: PUSH
6937: LD_EXP 15
6941: ADD
6942: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 01_ ) ;
6943: LD_ADDR_EXP 3
6947: PUSH
6948: LD_STRING Yakotich
6950: PPUSH
6951: LD_INT 1
6953: PPUSH
6954: LD_STRING 01_
6956: PPUSH
6957: CALL 9310 0 3
6961: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 01_ ) ;
6962: LD_ADDR_EXP 4
6966: PUSH
6967: LD_STRING Mietek
6969: PPUSH
6970: LD_INT 1
6972: PPUSH
6973: LD_STRING 01_
6975: PPUSH
6976: CALL 9310 0 3
6980: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 01_ ) ;
6981: LD_ADDR_EXP 5
6985: PUSH
6986: LD_STRING Boris
6988: PPUSH
6989: LD_INT 1
6991: PPUSH
6992: LD_STRING 01_
6994: PPUSH
6995: CALL 9310 0 3
6999: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 01_ ) ;
7000: LD_ADDR_EXP 7
7004: PUSH
7005: LD_STRING Michail
7007: PPUSH
7008: LD_INT 1
7010: PPUSH
7011: LD_STRING 01_
7013: PPUSH
7014: CALL 9310 0 3
7018: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 01_ ) ;
7019: LD_ADDR_EXP 6
7023: PUSH
7024: LD_STRING Vasilij
7026: PPUSH
7027: LD_INT 1
7029: PPUSH
7030: LD_STRING 01_
7032: PPUSH
7033: CALL 9310 0 3
7037: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 01_ ) ;
7038: LD_ADDR_EXP 9
7042: PUSH
7043: LD_STRING Maksim
7045: PPUSH
7046: LD_INT 1
7048: PPUSH
7049: LD_STRING 01_
7051: PPUSH
7052: CALL 9310 0 3
7056: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 01_ ) ;
7057: LD_ADDR_EXP 10
7061: PUSH
7062: LD_STRING Fiodor
7064: PPUSH
7065: LD_INT 1
7067: PPUSH
7068: LD_STRING 01_
7070: PPUSH
7071: CALL 9310 0 3
7075: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 01_ ) ;
7076: LD_ADDR_EXP 14
7080: PUSH
7081: LD_STRING Aleksandr
7083: PPUSH
7084: LD_INT 1
7086: PPUSH
7087: LD_STRING 01_
7089: PPUSH
7090: CALL 9310 0 3
7094: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 01_ ) ;
7095: LD_ADDR_EXP 13
7099: PUSH
7100: LD_STRING Aleksiej
7102: PPUSH
7103: LD_INT 1
7105: PPUSH
7106: LD_STRING 01_
7108: PPUSH
7109: CALL 9310 0 3
7113: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 01_ ) ;
7114: LD_ADDR_EXP 11
7118: PUSH
7119: LD_STRING Pavel
7121: PPUSH
7122: LD_INT 1
7124: PPUSH
7125: LD_STRING 01_
7127: PPUSH
7128: CALL 9310 0 3
7132: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 01_ ) ;
7133: LD_ADDR_EXP 12
7137: PUSH
7138: LD_STRING Zakhar
7140: PPUSH
7141: LD_INT 1
7143: PPUSH
7144: LD_STRING 01_
7146: PPUSH
7147: CALL 9310 0 3
7151: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 01_ ) ;
7152: LD_ADDR_EXP 8
7156: PUSH
7157: LD_STRING Constantin
7159: PPUSH
7160: LD_INT 1
7162: PPUSH
7163: LD_STRING 01_
7165: PPUSH
7166: CALL 9310 0 3
7170: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false ,  ) ;
7171: LD_ADDR_EXP 16
7175: PUSH
7176: LD_STRING Stanislav
7178: PPUSH
7179: LD_INT 0
7181: PPUSH
7182: LD_STRING 
7184: PPUSH
7185: CALL 9310 0 3
7189: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
7190: LD_ADDR_EXP 15
7194: PUSH
7195: LD_STRING Josif
7197: PPUSH
7198: LD_INT 0
7200: PPUSH
7201: LD_STRING 
7203: PPUSH
7204: CALL 9310 0 3
7208: ST_TO_ADDR
// SetClass ( Boris , 2 ) ;
7209: LD_EXP 5
7213: PPUSH
7214: LD_INT 2
7216: PPUSH
7217: CALL_OW 336
// SetClass ( Vasilij , 4 ) ;
7221: LD_EXP 6
7225: PPUSH
7226: LD_INT 4
7228: PPUSH
7229: CALL_OW 336
// Uc_Side := 6 ;
7233: LD_ADDR_OWVAR 20
7237: PUSH
7238: LD_INT 6
7240: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
7241: LD_ADDR_EXP 17
7245: PUSH
7246: LD_STRING Morozov
7248: PPUSH
7249: LD_INT 0
7251: PPUSH
7252: LD_STRING 
7254: PPUSH
7255: CALL 9310 0 3
7259: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
7260: LD_ADDR_EXP 18
7264: PUSH
7265: LD_STRING Kurin
7267: PPUSH
7268: LD_INT 0
7270: PPUSH
7271: LD_STRING 
7273: PPUSH
7274: CALL 9310 0 3
7278: ST_TO_ADDR
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
7279: LD_ADDR_EXP 19
7283: PUSH
7284: LD_STRING Grishko
7286: PPUSH
7287: LD_INT 0
7289: PPUSH
7290: LD_STRING 
7292: PPUSH
7293: CALL 9310 0 3
7297: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
7298: LD_ADDR_EXP 20
7302: PUSH
7303: LD_STRING Burlak
7305: PPUSH
7306: LD_INT 0
7308: PPUSH
7309: LD_STRING 
7311: PPUSH
7312: CALL 9310 0 3
7316: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
7317: LD_ADDR_EXP 21
7321: PUSH
7322: LD_STRING Platonov
7324: PPUSH
7325: LD_INT 0
7327: PPUSH
7328: LD_STRING 
7330: PPUSH
7331: CALL 9310 0 3
7335: ST_TO_ADDR
// Uc_Side := 1 ;
7336: LD_ADDR_OWVAR 20
7340: PUSH
7341: LD_INT 1
7343: ST_TO_ADDR
// AmSold := PrepareUnit ( AmSold , false ,  ) ;
7344: LD_ADDR_EXP 22
7348: PUSH
7349: LD_STRING AmSold
7351: PPUSH
7352: LD_INT 0
7354: PPUSH
7355: LD_STRING 
7357: PPUSH
7358: CALL 9310 0 3
7362: ST_TO_ADDR
// end ;
7363: LD_VAR 0 1
7367: RET
// export function Czolg ; begin
7368: LD_INT 0
7370: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7371: LD_STRING 01_Vehicle
7373: PPUSH
7374: LD_INT 1
7376: PPUSH
7377: CALL_OW 30
7381: IFFALSE 7464
// begin Uc_Side = 3 ;
7383: LD_ADDR_OWVAR 20
7387: PUSH
7388: LD_INT 3
7390: ST_TO_ADDR
// Uc_Nation = 3 ;
7391: LD_ADDR_OWVAR 21
7395: PUSH
7396: LD_INT 3
7398: ST_TO_ADDR
// Uc_Direction = 2 ;
7399: LD_ADDR_OWVAR 24
7403: PUSH
7404: LD_INT 2
7406: ST_TO_ADDR
// Vc_Chassis = 21 ;
7407: LD_ADDR_OWVAR 37
7411: PUSH
7412: LD_INT 21
7414: ST_TO_ADDR
// Vc_Control = 1 ;
7415: LD_ADDR_OWVAR 38
7419: PUSH
7420: LD_INT 1
7422: ST_TO_ADDR
// Vc_Engine = 1 ;
7423: LD_ADDR_OWVAR 39
7427: PUSH
7428: LD_INT 1
7430: ST_TO_ADDR
// Vc_Weapon = 42 ;
7431: LD_ADDR_OWVAR 40
7435: PUSH
7436: LD_INT 42
7438: ST_TO_ADDR
// Tank := CreateVehicle ;
7439: LD_ADDR_EXP 42
7443: PUSH
7444: CALL_OW 45
7448: ST_TO_ADDR
// PlaceUnitArea ( Tank , VehSpawn , false ) ;
7449: LD_EXP 42
7453: PPUSH
7454: LD_INT 19
7456: PPUSH
7457: LD_INT 0
7459: PPUSH
7460: CALL_OW 49
// end ; end ; end_of_file
7464: LD_VAR 0 1
7468: RET
// export function Action ; var i ; begin
7469: LD_INT 0
7471: PPUSH
7472: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7473: LD_STRING 01_Vehicle
7475: PPUSH
7476: LD_INT 1
7478: PPUSH
7479: CALL_OW 30
7483: IFFALSE 7501
// PlaceHumanInUnit ( Yakotich , Tank ) else
7485: LD_EXP 3
7489: PPUSH
7490: LD_EXP 42
7494: PPUSH
7495: CALL_OW 52
7499: GO 7516
// PlaceUnitArea ( Yakotich , RussianSpawn , false ) ;
7501: LD_EXP 3
7505: PPUSH
7506: LD_INT 2
7508: PPUSH
7509: LD_INT 0
7511: PPUSH
7512: CALL_OW 49
// PlaceUnitArea ( Maksim , RussianSpawn , false ) ;
7516: LD_EXP 9
7520: PPUSH
7521: LD_INT 2
7523: PPUSH
7524: LD_INT 0
7526: PPUSH
7527: CALL_OW 49
// PlaceUnitArea ( Vasilij , RussianSpawn , false ) ;
7531: LD_EXP 6
7535: PPUSH
7536: LD_INT 2
7538: PPUSH
7539: LD_INT 0
7541: PPUSH
7542: CALL_OW 49
// PlaceUnitArea ( Michail , RussianSpawn , false ) ;
7546: LD_EXP 7
7550: PPUSH
7551: LD_INT 2
7553: PPUSH
7554: LD_INT 0
7556: PPUSH
7557: CALL_OW 49
// PlaceUnitArea ( Fiodor , RussianSpawn , false ) ;
7561: LD_EXP 10
7565: PPUSH
7566: LD_INT 2
7568: PPUSH
7569: LD_INT 0
7571: PPUSH
7572: CALL_OW 49
// PlaceUnitArea ( Constantin , RussianSpawn , false ) ;
7576: LD_EXP 8
7580: PPUSH
7581: LD_INT 2
7583: PPUSH
7584: LD_INT 0
7586: PPUSH
7587: CALL_OW 49
// PlaceUnitArea ( Boris , RussianSpawn , false ) ;
7591: LD_EXP 5
7595: PPUSH
7596: LD_INT 2
7598: PPUSH
7599: LD_INT 0
7601: PPUSH
7602: CALL_OW 49
// InGameOn ;
7606: CALL_OW 8
// DialogueOn ;
7610: CALL_OW 6
// CenterNowOnXY ( 152 , 28 ) ;
7614: LD_INT 152
7616: PPUSH
7617: LD_INT 28
7619: PPUSH
7620: CALL_OW 86
// Wait ( 0 0$3 ) ;
7624: LD_INT 105
7626: PPUSH
7627: CALL_OW 67
// Say ( Yakotich , 2Yak-13 ) ;
7631: LD_EXP 3
7635: PPUSH
7636: LD_STRING 2Yak-13
7638: PPUSH
7639: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
7643: LD_STRING o1
7645: PPUSH
7646: CALL_OW 337
// MaksimScout ;
7650: CALL 1206 0 0
// InGameOff ;
7654: CALL_OW 9
// DialogueOff ;
7658: CALL_OW 7
// Say ( Michail , 2Mich-02 ) ;
7662: LD_EXP 7
7666: PPUSH
7667: LD_STRING 2Mich-02
7669: PPUSH
7670: CALL_OW 88
// Say ( Michail , 2Mich-03 ) ;
7674: LD_EXP 7
7678: PPUSH
7679: LD_STRING 2Mich-03
7681: PPUSH
7682: CALL_OW 88
// Say ( Yakotich , 2Yak-15 ) ;
7686: LD_EXP 3
7690: PPUSH
7691: LD_STRING 2Yak-15
7693: PPUSH
7694: CALL_OW 88
// ChangeMissionObjectives ( turret ) ;
7698: LD_STRING turret
7700: PPUSH
7701: CALL_OW 337
// SaveForQuickRestart ;
7705: CALL_OW 22
// end ;
7709: LD_VAR 0 1
7713: RET
// every 0 0$1 trigger maksim_scout_ended = true and See ( 3 , Maksim ) do
7714: LD_EXP 46
7718: PUSH
7719: LD_INT 1
7721: EQUAL
7722: PUSH
7723: LD_INT 3
7725: PPUSH
7726: LD_EXP 9
7730: PPUSH
7731: CALL_OW 292
7735: AND
7736: IFFALSE 8072
7738: GO 7740
7740: DISABLE
// begin CenterNowOnUnits ( Maksim ) ;
7741: LD_EXP 9
7745: PPUSH
7746: CALL_OW 87
// DialogueOn ;
7750: CALL_OW 6
// InGameOn ;
7754: CALL_OW 8
// RevealFogArea ( 3 , ScoutedTerrains ) ;
7758: LD_INT 3
7760: PPUSH
7761: LD_INT 8
7763: PPUSH
7764: CALL_OW 332
// Say ( Maksim , 2Mak-06 ) ;
7768: LD_EXP 9
7772: PPUSH
7773: LD_STRING 2Mak-06
7775: PPUSH
7776: CALL_OW 88
// Say ( Yakotich , 2Yak-16 ) ;
7780: LD_EXP 3
7784: PPUSH
7785: LD_STRING 2Yak-16
7787: PPUSH
7788: CALL_OW 88
// CenterNowOnXY ( 40 , 10 ) ;
7792: LD_INT 40
7794: PPUSH
7795: LD_INT 10
7797: PPUSH
7798: CALL_OW 86
// Wait ( 0 0$03 ) ;
7802: LD_INT 105
7804: PPUSH
7805: CALL_OW 67
// CenterOnXY ( 55 , 40 ) ;
7809: LD_INT 55
7811: PPUSH
7812: LD_INT 40
7814: PPUSH
7815: CALL_OW 84
// Wait ( 0 0$03 ) ;
7819: LD_INT 105
7821: PPUSH
7822: CALL_OW 67
// CenterOnXY ( 70 , 72 ) ;
7826: LD_INT 70
7828: PPUSH
7829: LD_INT 72
7831: PPUSH
7832: CALL_OW 84
// Say ( Maksim , 2Mak-07 ) ;
7836: LD_EXP 9
7840: PPUSH
7841: LD_STRING 2Mak-07
7843: PPUSH
7844: CALL_OW 88
// Say ( Maksim , 2Mak-08 ) ;
7848: LD_EXP 9
7852: PPUSH
7853: LD_STRING 2Mak-08
7855: PPUSH
7856: CALL_OW 88
// CenterNowOnUnits ( Yakotich ) ;
7860: LD_EXP 3
7864: PPUSH
7865: CALL_OW 87
// Say ( Yakotich , 2Yak-17 ) ;
7869: LD_EXP 3
7873: PPUSH
7874: LD_STRING 2Yak-17
7876: PPUSH
7877: CALL_OW 88
// Say ( Yakotich , 2Yak-18 ) ;
7881: LD_EXP 3
7885: PPUSH
7886: LD_STRING 2Yak-18
7888: PPUSH
7889: CALL_OW 88
// Say ( Maksim , 2Mak-09 ) ;
7893: LD_EXP 9
7897: PPUSH
7898: LD_STRING 2Mak-09
7900: PPUSH
7901: CALL_OW 88
// Say ( Maksim , 2Mak-10 ) ;
7905: LD_EXP 9
7909: PPUSH
7910: LD_STRING 2Mak-10
7912: PPUSH
7913: CALL_OW 88
// Say ( Maksim , 2Mak-11 ) ;
7917: LD_EXP 9
7921: PPUSH
7922: LD_STRING 2Mak-11
7924: PPUSH
7925: CALL_OW 88
// Say ( Yakotich , 2Yak-19 ) ;
7929: LD_EXP 3
7933: PPUSH
7934: LD_STRING 2Yak-19
7936: PPUSH
7937: CALL_OW 88
// SayRadio ( Yakotich , 2Yak-20 ) ;
7941: LD_EXP 3
7945: PPUSH
7946: LD_STRING 2Yak-20
7948: PPUSH
7949: CALL_OW 94
// SayRadio ( Morozov , 2Moro-05 ) ;
7953: LD_EXP 17
7957: PPUSH
7958: LD_STRING 2Moro-05
7960: PPUSH
7961: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-21 ) ;
7965: LD_EXP 3
7969: PPUSH
7970: LD_STRING 2Yak-21
7972: PPUSH
7973: CALL_OW 94
// SayRadio ( Morozov , 2Moro-06 ) ;
7977: LD_EXP 17
7981: PPUSH
7982: LD_STRING 2Moro-06
7984: PPUSH
7985: CALL_OW 94
// SayRadio ( Morozov , 2Moro-07 ) ;
7989: LD_EXP 17
7993: PPUSH
7994: LD_STRING 2Moro-07
7996: PPUSH
7997: CALL_OW 94
// SayRadio ( Morozov , 2Moro-08 ) ;
8001: LD_EXP 17
8005: PPUSH
8006: LD_STRING 2Moro-08
8008: PPUSH
8009: CALL_OW 94
// SayRadio ( Morozov , 2Moro-09 ) ;
8013: LD_EXP 17
8017: PPUSH
8018: LD_STRING 2Moro-09
8020: PPUSH
8021: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-22 ) ;
8025: LD_EXP 3
8029: PPUSH
8030: LD_STRING 2Yak-22
8032: PPUSH
8033: CALL_OW 94
// ChangeMissionObjectives ( o2 ) ;
8037: LD_STRING o2
8039: PPUSH
8040: CALL_OW 337
// DialogueOff ;
8044: CALL_OW 7
// InGameOff ;
8048: CALL_OW 9
// maksim_back = true ;
8052: LD_ADDR_EXP 47
8056: PUSH
8057: LD_INT 1
8059: ST_TO_ADDR
// SetSide ( Maksim , 3 ) ;
8060: LD_EXP 9
8064: PPUSH
8065: LD_INT 3
8067: PPUSH
8068: CALL_OW 235
// end ;
8072: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
8073: LD_INT 3
8075: PPUSH
8076: LD_INT 90
8078: PPUSH
8079: CALL_OW 325
8083: IFFALSE 8112
8085: GO 8087
8087: DISABLE
// begin Say ( Michail , 2Mich-04 ) ;
8088: LD_EXP 7
8092: PPUSH
8093: LD_STRING 2Mich-04
8095: PPUSH
8096: CALL_OW 88
// Say ( Michail , 2Mich-05 ) ;
8100: LD_EXP 7
8104: PPUSH
8105: LD_STRING 2Mich-05
8107: PPUSH
8108: CALL_OW 88
// end ;
8112: END
// every 0 0$1 trigger Researched ( 3 , 83 ) do
8113: LD_INT 3
8115: PPUSH
8116: LD_INT 83
8118: PPUSH
8119: CALL_OW 325
8123: IFFALSE 8140
8125: GO 8127
8127: DISABLE
// begin Say ( Vasilij , 2Vas-07 ) ;
8128: LD_EXP 6
8132: PPUSH
8133: LD_STRING 2Vas-07
8135: PPUSH
8136: CALL_OW 88
// end ;
8140: END
// every 0 0$1 trigger first_attack_clear do
8141: LD_EXP 55
8145: IFFALSE 8358
8147: GO 8149
8149: DISABLE
// begin Wait ( 5 5$0 ) ;
8150: LD_INT 10500
8152: PPUSH
8153: CALL_OW 67
// PlaceUnitArea ( Mietek , RussianSpawn , false ) ;
8157: LD_EXP 4
8161: PPUSH
8162: LD_INT 2
8164: PPUSH
8165: LD_INT 0
8167: PPUSH
8168: CALL_OW 49
// PlaceUnitArea ( Aleksiej , RussianSpawn , false ) ;
8172: LD_EXP 13
8176: PPUSH
8177: LD_INT 2
8179: PPUSH
8180: LD_INT 0
8182: PPUSH
8183: CALL_OW 49
// PlaceUnitArea ( Aleksandr , RussianSpawn , false ) ;
8187: LD_EXP 14
8191: PPUSH
8192: LD_INT 2
8194: PPUSH
8195: LD_INT 0
8197: PPUSH
8198: CALL_OW 49
// PlaceUnitArea ( Josif , RussianSpawn , false ) ;
8202: LD_EXP 15
8206: PPUSH
8207: LD_INT 2
8209: PPUSH
8210: LD_INT 0
8212: PPUSH
8213: CALL_OW 49
// PlaceUnitArea ( Zakhar , RussianSpawn , false ) ;
8217: LD_EXP 12
8221: PPUSH
8222: LD_INT 2
8224: PPUSH
8225: LD_INT 0
8227: PPUSH
8228: CALL_OW 49
// PlaceUnitArea ( Stanislav , RussianSpawn , false ) ;
8232: LD_EXP 16
8236: PPUSH
8237: LD_INT 2
8239: PPUSH
8240: LD_INT 0
8242: PPUSH
8243: CALL_OW 49
// PlaceUnitArea ( Pavel , RussianSpawn , false ) ;
8247: LD_EXP 11
8251: PPUSH
8252: LD_INT 2
8254: PPUSH
8255: LD_INT 0
8257: PPUSH
8258: CALL_OW 49
// DialogueOn ;
8262: CALL_OW 6
// CenterNowOnUnits ( Mietek ) ;
8266: LD_EXP 4
8270: PPUSH
8271: CALL_OW 87
// SayRadio ( Mietek , 2Ryn-06 ) ;
8275: LD_EXP 4
8279: PPUSH
8280: LD_STRING 2Ryn-06
8282: PPUSH
8283: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-25 ) ;
8287: LD_EXP 3
8291: PPUSH
8292: LD_STRING 2Yak-25
8294: PPUSH
8295: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-01 ) ;
8299: LD_EXP 16
8303: PPUSH
8304: LD_STRING 2Stan-01
8306: PPUSH
8307: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-02 ) ;
8311: LD_EXP 16
8315: PPUSH
8316: LD_STRING 2Stan-02
8318: PPUSH
8319: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-03 ) ;
8323: LD_EXP 16
8327: PPUSH
8328: LD_STRING 2Stan-03
8330: PPUSH
8331: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-Stan-01 ) ;
8335: LD_EXP 3
8339: PPUSH
8340: LD_STRING 2Yak-Stan-01
8342: PPUSH
8343: CALL_OW 94
// ChangeMissionObjectives ( gun ) ;
8347: LD_STRING gun
8349: PPUSH
8350: CALL_OW 337
// DialogueOff ;
8354: CALL_OW 7
// end ;
8358: END
// every 0 0$1 trigger maksim_back = true do
8359: LD_EXP 47
8363: PUSH
8364: LD_INT 1
8366: EQUAL
8367: IFFALSE 8490
8369: GO 8371
8371: DISABLE
// begin Wait ( 30 30$0 ) ;
8372: LD_INT 63000
8374: PPUSH
8375: CALL_OW 67
// DialogueOn ;
8379: CALL_OW 6
// InGameOn ;
8383: CALL_OW 8
// SayRadio ( Kurin , 2Kurin-01 ) ;
8387: LD_EXP 18
8391: PPUSH
8392: LD_STRING 2Kurin-01
8394: PPUSH
8395: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-02 ) ;
8399: LD_EXP 18
8403: PPUSH
8404: LD_STRING 2Kurin-02
8406: PPUSH
8407: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-26 ) ;
8411: LD_EXP 3
8415: PPUSH
8416: LD_STRING 2Yak-26
8418: PPUSH
8419: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
8423: LD_STRING o3
8425: PPUSH
8426: CALL_OW 337
// Say ( Maksim , 2Mak-12 ) ;
8430: LD_EXP 9
8434: PPUSH
8435: LD_STRING 2Mak-12
8437: PPUSH
8438: CALL_OW 88
// CenterNowOnXY ( 57 , 2 ) ;
8442: LD_INT 57
8444: PPUSH
8445: LD_INT 2
8447: PPUSH
8448: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
8452: LD_INT 3
8454: PPUSH
8455: LD_INT 9
8457: PPUSH
8458: CALL_OW 332
// Say ( Maksim , 2Mak-13 ) ;
8462: LD_EXP 9
8466: PPUSH
8467: LD_STRING 2Mak-13
8469: PPUSH
8470: CALL_OW 88
// DialogueOff ;
8474: CALL_OW 7
// InGameOff ;
8478: CALL_OW 9
// kurin_attack_started = true ;
8482: LD_ADDR_EXP 57
8486: PUSH
8487: LD_INT 1
8489: ST_TO_ADDR
// end ;
8490: END
// every 1 trigger kurin_attack_started = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var unit ;
8491: LD_EXP 57
8495: PUSH
8496: LD_INT 1
8498: EQUAL
8499: PUSH
8500: LD_INT 22
8502: PUSH
8503: LD_INT 1
8505: PUSH
8506: EMPTY
8507: LIST
8508: LIST
8509: PUSH
8510: LD_INT 21
8512: PUSH
8513: LD_INT 1
8515: PUSH
8516: EMPTY
8517: LIST
8518: LIST
8519: PUSH
8520: EMPTY
8521: LIST
8522: LIST
8523: PPUSH
8524: CALL_OW 69
8528: PUSH
8529: LD_INT 0
8531: EQUAL
8532: AND
8533: IFFALSE 9147
8535: GO 8537
8537: DISABLE
8538: LD_INT 0
8540: PPUSH
// begin InGameOn ;
8541: CALL_OW 8
// SayRadio ( Yakotich , 2Yak-27 ) ;
8545: LD_EXP 3
8549: PPUSH
8550: LD_STRING 2Yak-27
8552: PPUSH
8553: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-03 ) ;
8557: LD_EXP 18
8561: PPUSH
8562: LD_STRING 2Kurin-03
8564: PPUSH
8565: CALL_OW 94
// SayRadio ( AmSold , 2AmSold-01 ) ;
8569: LD_EXP 22
8573: PPUSH
8574: LD_STRING 2AmSold-01
8576: PPUSH
8577: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-04 ) ;
8581: LD_EXP 18
8585: PPUSH
8586: LD_STRING 2Kurin-04
8588: PPUSH
8589: CALL_OW 94
// Wait ( 0 0$02 ) ;
8593: LD_INT 70
8595: PPUSH
8596: CALL_OW 67
// SayRadio ( Grishko , 2Gri-01 ) ;
8600: LD_EXP 19
8604: PPUSH
8605: LD_STRING 2Gri-01
8607: PPUSH
8608: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-05 ) ;
8612: LD_EXP 18
8616: PPUSH
8617: LD_STRING 2Kurin-05
8619: PPUSH
8620: CALL_OW 94
// SayRadio ( Grishko , 2Gri-02 ) ;
8624: LD_EXP 19
8628: PPUSH
8629: LD_STRING 2Gri-02
8631: PPUSH
8632: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-06 ) ;
8636: LD_EXP 18
8640: PPUSH
8641: LD_STRING 2Kurin-06
8643: PPUSH
8644: CALL_OW 94
// SayRadio ( Grishko , 2Gri-03 ) ;
8648: LD_EXP 19
8652: PPUSH
8653: LD_STRING 2Gri-03
8655: PPUSH
8656: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-07 ) ;
8660: LD_EXP 18
8664: PPUSH
8665: LD_STRING 2Kurin-07
8667: PPUSH
8668: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-28 ) ;
8672: LD_EXP 3
8676: PPUSH
8677: LD_STRING 2Yak-28
8679: PPUSH
8680: CALL_OW 94
// Wait ( 0 0$03 ) ;
8684: LD_INT 105
8686: PPUSH
8687: CALL_OW 67
// SayRadio ( Kurin , 2Kurin-08 ) ;
8691: LD_EXP 18
8695: PPUSH
8696: LD_STRING 2Kurin-08
8698: PPUSH
8699: CALL_OW 94
// SayRadio ( Burlak , 2Burlak-01 ) ;
8703: LD_EXP 20
8707: PPUSH
8708: LD_STRING 2Burlak-01
8710: PPUSH
8711: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-09 ) ;
8715: LD_EXP 18
8719: PPUSH
8720: LD_STRING 2Kurin-09
8722: PPUSH
8723: CALL_OW 94
// SayEffect ( 2GunSound ) ;
8727: LD_STRING 2GunSound
8729: PPUSH
8730: CALL_OW 96
// SayRadio ( Morozov , 2Moro-10 ) ;
8734: LD_EXP 17
8738: PPUSH
8739: LD_STRING 2Moro-10
8741: PPUSH
8742: CALL_OW 94
// SayRadio ( Morozov , 2Moro-11 ) ;
8746: LD_EXP 17
8750: PPUSH
8751: LD_STRING 2Moro-11
8753: PPUSH
8754: CALL_OW 94
// SayRadio ( Morozov , 2Moro-12 ) ;
8758: LD_EXP 17
8762: PPUSH
8763: LD_STRING 2Moro-12
8765: PPUSH
8766: CALL_OW 94
// SayRadio ( Morozov , 2Moro-13 ) ;
8770: LD_EXP 17
8774: PPUSH
8775: LD_STRING 2Moro-13
8777: PPUSH
8778: CALL_OW 94
// SayRadio ( Morozov , 2Moro-14 ) ;
8782: LD_EXP 17
8786: PPUSH
8787: LD_STRING 2Moro-14
8789: PPUSH
8790: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-29 ) ;
8794: LD_EXP 3
8798: PPUSH
8799: LD_STRING 2Yak-29
8801: PPUSH
8802: CALL_OW 94
// end_of_the_mission = true ;
8806: LD_ADDR_EXP 58
8810: PUSH
8811: LD_INT 1
8813: ST_TO_ADDR
// InGameOff ;
8814: CALL_OW 9
// AddMedal ( PeopleConvoys , 1 ) ;
8818: LD_STRING PeopleConvoys
8820: PPUSH
8821: LD_INT 1
8823: PPUSH
8824: CALL_OW 101
// if gun_researched = true then
8828: LD_EXP 50
8832: PUSH
8833: LD_INT 1
8835: EQUAL
8836: IFFALSE 8850
// AddMedal ( GunMedal , 1 ) else
8838: LD_STRING GunMedal
8840: PPUSH
8841: LD_INT 1
8843: PPUSH
8844: CALL_OW 101
8848: GO 8861
// AddMedal ( GunMedal , - 1 ) ;
8850: LD_STRING GunMedal
8852: PPUSH
8853: LD_INT 1
8855: NEG
8856: PPUSH
8857: CALL_OW 101
// if gattling_researched = true and gun_researched = true and transport_builded = true and turrets_researched = true then
8861: LD_EXP 49
8865: PUSH
8866: LD_INT 1
8868: EQUAL
8869: PUSH
8870: LD_EXP 50
8874: PUSH
8875: LD_INT 1
8877: EQUAL
8878: AND
8879: PUSH
8880: LD_EXP 53
8884: PUSH
8885: LD_INT 1
8887: EQUAL
8888: AND
8889: PUSH
8890: LD_EXP 48
8894: PUSH
8895: LD_INT 1
8897: EQUAL
8898: AND
8899: IFFALSE 8913
// AddMedal ( Secondary , 1 ) else
8901: LD_STRING Secondary
8903: PPUSH
8904: LD_INT 1
8906: PPUSH
8907: CALL_OW 101
8911: GO 8924
// AddMedal ( Secondary , - 1 ) ;
8913: LD_STRING Secondary
8915: PPUSH
8916: LD_INT 1
8918: NEG
8919: PPUSH
8920: CALL_OW 101
// GiveMedals ( Medals ) ;
8924: LD_STRING Medals
8926: PPUSH
8927: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8931: LD_INT 22
8933: PUSH
8934: LD_INT 3
8936: PUSH
8937: EMPTY
8938: LIST
8939: LIST
8940: PUSH
8941: LD_INT 23
8943: PUSH
8944: LD_INT 3
8946: PUSH
8947: EMPTY
8948: LIST
8949: LIST
8950: PUSH
8951: LD_INT 21
8953: PUSH
8954: LD_INT 1
8956: PUSH
8957: EMPTY
8958: LIST
8959: LIST
8960: PUSH
8961: EMPTY
8962: LIST
8963: LIST
8964: LIST
8965: PPUSH
8966: CALL_OW 69
8970: PPUSH
8971: CALL_OW 43
// SaveCharacters ( Yakotich , 02_Yakotich ) ;
8975: LD_EXP 3
8979: PPUSH
8980: LD_STRING 02_Yakotich
8982: PPUSH
8983: CALL_OW 38
// SaveCharacters ( Mietek , 02_Mietek ) ;
8987: LD_EXP 4
8991: PPUSH
8992: LD_STRING 02_Mietek
8994: PPUSH
8995: CALL_OW 38
// SaveCharacters ( Maksim , 02_Maksim ) ;
8999: LD_EXP 9
9003: PPUSH
9004: LD_STRING 02_Maksim
9006: PPUSH
9007: CALL_OW 38
// SaveCharacters ( Vasilij , 02_Vasilij ) ;
9011: LD_EXP 6
9015: PPUSH
9016: LD_STRING 02_Vasilij
9018: PPUSH
9019: CALL_OW 38
// SaveCharacters ( Michail , 02_Michail ) ;
9023: LD_EXP 7
9027: PPUSH
9028: LD_STRING 02_Michail
9030: PPUSH
9031: CALL_OW 38
// SaveCharacters ( Boris , 02_Boris ) ;
9035: LD_EXP 5
9039: PPUSH
9040: LD_STRING 02_Boris
9042: PPUSH
9043: CALL_OW 38
// SaveCharacters ( Constantin , 02_Constantin ) ;
9047: LD_EXP 8
9051: PPUSH
9052: LD_STRING 02_Constantin
9054: PPUSH
9055: CALL_OW 38
// SaveCharacters ( Fiodor , 02_Fiodor ) ;
9059: LD_EXP 10
9063: PPUSH
9064: LD_STRING 02_Fiodor
9066: PPUSH
9067: CALL_OW 38
// SaveCharacters ( Aleksiej , 02_Aleksiej ) ;
9071: LD_EXP 13
9075: PPUSH
9076: LD_STRING 02_Aleksiej
9078: PPUSH
9079: CALL_OW 38
// SaveCharacters ( Pavel , 02_Pavel ) ;
9083: LD_EXP 11
9087: PPUSH
9088: LD_STRING 02_Pavel
9090: PPUSH
9091: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Zakhar ) ;
9095: LD_EXP 12
9099: PPUSH
9100: LD_STRING 02_Zakhar
9102: PPUSH
9103: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Aleksandr ) ;
9107: LD_EXP 14
9111: PPUSH
9112: LD_STRING 02_Aleksandr
9114: PPUSH
9115: CALL_OW 38
// SaveCharacters ( Stanislav , 02_Stanislav ) ;
9119: LD_EXP 16
9123: PPUSH
9124: LD_STRING 02_Stanislav
9126: PPUSH
9127: CALL_OW 38
// SaveCharacters ( Josif , 02_Josif ) ;
9131: LD_EXP 15
9135: PPUSH
9136: LD_STRING 02_Josif
9138: PPUSH
9139: CALL_OW 38
// YouWin ;
9143: CALL_OW 103
// end ; end_of_file
9147: PPOPN 1
9149: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export function InitGlobalVariables ; begin
9150: LD_INT 0
9152: PPUSH
// ar_miner := 81 ;
9153: LD_ADDR_EXP 69
9157: PUSH
9158: LD_INT 81
9160: ST_TO_ADDR
// ar_crane := 88 ;
9161: LD_ADDR_EXP 68
9165: PUSH
9166: LD_INT 88
9168: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9169: LD_ADDR_EXP 63
9173: PUSH
9174: LD_INT 89
9176: ST_TO_ADDR
// us_hack := 99 ;
9177: LD_ADDR_EXP 64
9181: PUSH
9182: LD_INT 99
9184: ST_TO_ADDR
// us_artillery := 97 ;
9185: LD_ADDR_EXP 65
9189: PUSH
9190: LD_INT 97
9192: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9193: LD_ADDR_EXP 66
9197: PUSH
9198: LD_INT 91
9200: ST_TO_ADDR
// ar_mortar := 92 ;
9201: LD_ADDR_EXP 67
9205: PUSH
9206: LD_INT 92
9208: ST_TO_ADDR
// ru_flamethrower := 93 ;
9209: LD_ADDR_EXP 70
9213: PUSH
9214: LD_INT 93
9216: ST_TO_ADDR
// ru_radar := 98 ;
9217: LD_ADDR_EXP 62
9221: PUSH
9222: LD_INT 98
9224: ST_TO_ADDR
// tech_Artillery := 80 ;
9225: LD_ADDR_EXP 71
9229: PUSH
9230: LD_INT 80
9232: ST_TO_ADDR
// tech_RadMat := 81 ;
9233: LD_ADDR_EXP 72
9237: PUSH
9238: LD_INT 81
9240: ST_TO_ADDR
// tech_BasicTools := 82 ;
9241: LD_ADDR_EXP 73
9245: PUSH
9246: LD_INT 82
9248: ST_TO_ADDR
// tech_Cargo := 83 ;
9249: LD_ADDR_EXP 74
9253: PUSH
9254: LD_INT 83
9256: ST_TO_ADDR
// tech_Track := 84 ;
9257: LD_ADDR_EXP 75
9261: PUSH
9262: LD_INT 84
9264: ST_TO_ADDR
// tech_Crane := 85 ;
9265: LD_ADDR_EXP 76
9269: PUSH
9270: LD_INT 85
9272: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9273: LD_ADDR_EXP 77
9277: PUSH
9278: LD_INT 86
9280: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9281: LD_ADDR_EXP 78
9285: PUSH
9286: LD_INT 87
9288: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9289: LD_ADDR_EXP 79
9293: PUSH
9294: LD_INT 88
9296: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
9297: LD_ADDR_EXP 80
9301: PUSH
9302: LD_INT 90
9304: ST_TO_ADDR
// end ; end_of_file
9305: LD_VAR 0 1
9309: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9310: LD_INT 0
9312: PPUSH
9313: PPUSH
// if exist_mode then
9314: LD_VAR 0 2
9318: IFFALSE 9343
// unit := CreateCharacter ( prefix & ident ) else
9320: LD_ADDR_VAR 0 5
9324: PUSH
9325: LD_VAR 0 3
9329: PUSH
9330: LD_VAR 0 1
9334: STR
9335: PPUSH
9336: CALL_OW 34
9340: ST_TO_ADDR
9341: GO 9358
// unit := NewCharacter ( ident ) ;
9343: LD_ADDR_VAR 0 5
9347: PUSH
9348: LD_VAR 0 1
9352: PPUSH
9353: CALL_OW 25
9357: ST_TO_ADDR
// result := unit ;
9358: LD_ADDR_VAR 0 4
9362: PUSH
9363: LD_VAR 0 5
9367: ST_TO_ADDR
// end ;
9368: LD_VAR 0 4
9372: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9373: LD_INT 0
9375: PPUSH
9376: PPUSH
// if not side or not nation then
9377: LD_VAR 0 1
9381: NOT
9382: PUSH
9383: LD_VAR 0 2
9387: NOT
9388: OR
9389: IFFALSE 9393
// exit ;
9391: GO 10161
// case nation of nation_american :
9393: LD_VAR 0 2
9397: PUSH
9398: LD_INT 1
9400: DOUBLE
9401: EQUAL
9402: IFTRUE 9406
9404: GO 9620
9406: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9407: LD_ADDR_VAR 0 4
9411: PUSH
9412: LD_INT 35
9414: PUSH
9415: LD_INT 45
9417: PUSH
9418: LD_INT 46
9420: PUSH
9421: LD_INT 47
9423: PUSH
9424: LD_INT 82
9426: PUSH
9427: LD_INT 83
9429: PUSH
9430: LD_INT 84
9432: PUSH
9433: LD_INT 85
9435: PUSH
9436: LD_INT 86
9438: PUSH
9439: LD_INT 1
9441: PUSH
9442: LD_INT 2
9444: PUSH
9445: LD_INT 6
9447: PUSH
9448: LD_INT 15
9450: PUSH
9451: LD_INT 16
9453: PUSH
9454: LD_INT 7
9456: PUSH
9457: LD_INT 12
9459: PUSH
9460: LD_INT 13
9462: PUSH
9463: LD_INT 10
9465: PUSH
9466: LD_INT 14
9468: PUSH
9469: LD_INT 20
9471: PUSH
9472: LD_INT 21
9474: PUSH
9475: LD_INT 22
9477: PUSH
9478: LD_INT 25
9480: PUSH
9481: LD_INT 32
9483: PUSH
9484: LD_INT 27
9486: PUSH
9487: LD_INT 36
9489: PUSH
9490: LD_INT 69
9492: PUSH
9493: LD_INT 39
9495: PUSH
9496: LD_INT 34
9498: PUSH
9499: LD_INT 40
9501: PUSH
9502: LD_INT 48
9504: PUSH
9505: LD_INT 49
9507: PUSH
9508: LD_INT 50
9510: PUSH
9511: LD_INT 51
9513: PUSH
9514: LD_INT 52
9516: PUSH
9517: LD_INT 53
9519: PUSH
9520: LD_INT 54
9522: PUSH
9523: LD_INT 55
9525: PUSH
9526: LD_INT 56
9528: PUSH
9529: LD_INT 57
9531: PUSH
9532: LD_INT 58
9534: PUSH
9535: LD_INT 59
9537: PUSH
9538: LD_INT 60
9540: PUSH
9541: LD_INT 61
9543: PUSH
9544: LD_INT 62
9546: PUSH
9547: LD_INT 80
9549: PUSH
9550: LD_INT 82
9552: PUSH
9553: LD_INT 83
9555: PUSH
9556: LD_INT 84
9558: PUSH
9559: LD_INT 85
9561: PUSH
9562: LD_INT 86
9564: PUSH
9565: EMPTY
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: LIST
9605: LIST
9606: LIST
9607: LIST
9608: LIST
9609: LIST
9610: LIST
9611: LIST
9612: LIST
9613: LIST
9614: LIST
9615: LIST
9616: LIST
9617: ST_TO_ADDR
9618: GO 10085
9620: LD_INT 2
9622: DOUBLE
9623: EQUAL
9624: IFTRUE 9628
9626: GO 9854
9628: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9629: LD_ADDR_VAR 0 4
9633: PUSH
9634: LD_INT 35
9636: PUSH
9637: LD_INT 45
9639: PUSH
9640: LD_INT 46
9642: PUSH
9643: LD_INT 47
9645: PUSH
9646: LD_INT 82
9648: PUSH
9649: LD_INT 83
9651: PUSH
9652: LD_INT 84
9654: PUSH
9655: LD_INT 85
9657: PUSH
9658: LD_INT 87
9660: PUSH
9661: LD_INT 70
9663: PUSH
9664: LD_INT 1
9666: PUSH
9667: LD_INT 11
9669: PUSH
9670: LD_INT 3
9672: PUSH
9673: LD_INT 4
9675: PUSH
9676: LD_INT 5
9678: PUSH
9679: LD_INT 6
9681: PUSH
9682: LD_INT 15
9684: PUSH
9685: LD_INT 18
9687: PUSH
9688: LD_INT 7
9690: PUSH
9691: LD_INT 17
9693: PUSH
9694: LD_INT 8
9696: PUSH
9697: LD_INT 20
9699: PUSH
9700: LD_INT 21
9702: PUSH
9703: LD_INT 22
9705: PUSH
9706: LD_INT 72
9708: PUSH
9709: LD_INT 26
9711: PUSH
9712: LD_INT 69
9714: PUSH
9715: LD_INT 39
9717: PUSH
9718: LD_INT 40
9720: PUSH
9721: LD_INT 41
9723: PUSH
9724: LD_INT 42
9726: PUSH
9727: LD_INT 43
9729: PUSH
9730: LD_INT 48
9732: PUSH
9733: LD_INT 49
9735: PUSH
9736: LD_INT 50
9738: PUSH
9739: LD_INT 51
9741: PUSH
9742: LD_INT 52
9744: PUSH
9745: LD_INT 53
9747: PUSH
9748: LD_INT 54
9750: PUSH
9751: LD_INT 55
9753: PUSH
9754: LD_INT 56
9756: PUSH
9757: LD_INT 60
9759: PUSH
9760: LD_INT 61
9762: PUSH
9763: LD_INT 62
9765: PUSH
9766: LD_INT 66
9768: PUSH
9769: LD_INT 67
9771: PUSH
9772: LD_INT 68
9774: PUSH
9775: LD_INT 81
9777: PUSH
9778: LD_INT 82
9780: PUSH
9781: LD_INT 83
9783: PUSH
9784: LD_INT 84
9786: PUSH
9787: LD_INT 85
9789: PUSH
9790: LD_INT 87
9792: PUSH
9793: LD_INT 88
9795: PUSH
9796: EMPTY
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: LIST
9839: LIST
9840: LIST
9841: LIST
9842: LIST
9843: LIST
9844: LIST
9845: LIST
9846: LIST
9847: LIST
9848: LIST
9849: LIST
9850: LIST
9851: ST_TO_ADDR
9852: GO 10085
9854: LD_INT 3
9856: DOUBLE
9857: EQUAL
9858: IFTRUE 9862
9860: GO 10084
9862: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9863: LD_ADDR_VAR 0 4
9867: PUSH
9868: LD_INT 46
9870: PUSH
9871: LD_INT 47
9873: PUSH
9874: LD_INT 1
9876: PUSH
9877: LD_INT 2
9879: PUSH
9880: LD_INT 82
9882: PUSH
9883: LD_INT 83
9885: PUSH
9886: LD_INT 84
9888: PUSH
9889: LD_INT 85
9891: PUSH
9892: LD_INT 86
9894: PUSH
9895: LD_INT 11
9897: PUSH
9898: LD_INT 9
9900: PUSH
9901: LD_INT 20
9903: PUSH
9904: LD_INT 19
9906: PUSH
9907: LD_INT 21
9909: PUSH
9910: LD_INT 24
9912: PUSH
9913: LD_INT 22
9915: PUSH
9916: LD_INT 25
9918: PUSH
9919: LD_INT 28
9921: PUSH
9922: LD_INT 29
9924: PUSH
9925: LD_INT 30
9927: PUSH
9928: LD_INT 31
9930: PUSH
9931: LD_INT 37
9933: PUSH
9934: LD_INT 38
9936: PUSH
9937: LD_INT 32
9939: PUSH
9940: LD_INT 27
9942: PUSH
9943: LD_INT 33
9945: PUSH
9946: LD_INT 69
9948: PUSH
9949: LD_INT 39
9951: PUSH
9952: LD_INT 34
9954: PUSH
9955: LD_INT 40
9957: PUSH
9958: LD_INT 71
9960: PUSH
9961: LD_INT 23
9963: PUSH
9964: LD_INT 44
9966: PUSH
9967: LD_INT 48
9969: PUSH
9970: LD_INT 49
9972: PUSH
9973: LD_INT 50
9975: PUSH
9976: LD_INT 51
9978: PUSH
9979: LD_INT 52
9981: PUSH
9982: LD_INT 53
9984: PUSH
9985: LD_INT 54
9987: PUSH
9988: LD_INT 55
9990: PUSH
9991: LD_INT 56
9993: PUSH
9994: LD_INT 57
9996: PUSH
9997: LD_INT 58
9999: PUSH
10000: LD_INT 59
10002: PUSH
10003: LD_INT 63
10005: PUSH
10006: LD_INT 64
10008: PUSH
10009: LD_INT 65
10011: PUSH
10012: LD_INT 82
10014: PUSH
10015: LD_INT 83
10017: PUSH
10018: LD_INT 84
10020: PUSH
10021: LD_INT 85
10023: PUSH
10024: LD_INT 86
10026: PUSH
10027: EMPTY
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: LIST
10069: LIST
10070: LIST
10071: LIST
10072: LIST
10073: LIST
10074: LIST
10075: LIST
10076: LIST
10077: LIST
10078: LIST
10079: LIST
10080: LIST
10081: ST_TO_ADDR
10082: GO 10085
10084: POP
// if state > - 1 and state < 3 then
10085: LD_VAR 0 3
10089: PUSH
10090: LD_INT 1
10092: NEG
10093: GREATER
10094: PUSH
10095: LD_VAR 0 3
10099: PUSH
10100: LD_INT 3
10102: LESS
10103: AND
10104: IFFALSE 10161
// for i in result do
10106: LD_ADDR_VAR 0 5
10110: PUSH
10111: LD_VAR 0 4
10115: PUSH
10116: FOR_IN
10117: IFFALSE 10159
// if GetTech ( i , side ) <> state then
10119: LD_VAR 0 5
10123: PPUSH
10124: LD_VAR 0 1
10128: PPUSH
10129: CALL_OW 321
10133: PUSH
10134: LD_VAR 0 3
10138: NONEQUAL
10139: IFFALSE 10157
// result := result diff i ;
10141: LD_ADDR_VAR 0 4
10145: PUSH
10146: LD_VAR 0 4
10150: PUSH
10151: LD_VAR 0 5
10155: DIFF
10156: ST_TO_ADDR
10157: GO 10116
10159: POP
10160: POP
// end ;
10161: LD_VAR 0 4
10165: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10166: LD_INT 0
10168: PPUSH
10169: PPUSH
10170: PPUSH
// result := true ;
10171: LD_ADDR_VAR 0 3
10175: PUSH
10176: LD_INT 1
10178: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10179: LD_ADDR_VAR 0 5
10183: PUSH
10184: LD_VAR 0 2
10188: PPUSH
10189: CALL_OW 480
10193: ST_TO_ADDR
// if not tmp then
10194: LD_VAR 0 5
10198: NOT
10199: IFFALSE 10203
// exit ;
10201: GO 10252
// for i in tmp do
10203: LD_ADDR_VAR 0 4
10207: PUSH
10208: LD_VAR 0 5
10212: PUSH
10213: FOR_IN
10214: IFFALSE 10250
// if GetTech ( i , side ) <> state_researched then
10216: LD_VAR 0 4
10220: PPUSH
10221: LD_VAR 0 1
10225: PPUSH
10226: CALL_OW 321
10230: PUSH
10231: LD_INT 2
10233: NONEQUAL
10234: IFFALSE 10248
// begin result := false ;
10236: LD_ADDR_VAR 0 3
10240: PUSH
10241: LD_INT 0
10243: ST_TO_ADDR
// exit ;
10244: POP
10245: POP
10246: GO 10252
// end ;
10248: GO 10213
10250: POP
10251: POP
// end ;
10252: LD_VAR 0 3
10256: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10257: LD_INT 0
10259: PPUSH
10260: PPUSH
10261: PPUSH
10262: PPUSH
10263: PPUSH
10264: PPUSH
10265: PPUSH
10266: PPUSH
10267: PPUSH
10268: PPUSH
10269: PPUSH
10270: PPUSH
10271: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10272: LD_VAR 0 1
10276: NOT
10277: PUSH
10278: LD_VAR 0 1
10282: PPUSH
10283: CALL_OW 257
10287: PUSH
10288: LD_INT 9
10290: NONEQUAL
10291: OR
10292: IFFALSE 10296
// exit ;
10294: GO 10869
// side := GetSide ( unit ) ;
10296: LD_ADDR_VAR 0 9
10300: PUSH
10301: LD_VAR 0 1
10305: PPUSH
10306: CALL_OW 255
10310: ST_TO_ADDR
// tech_space := tech_spacanom ;
10311: LD_ADDR_VAR 0 12
10315: PUSH
10316: LD_INT 29
10318: ST_TO_ADDR
// tech_time := tech_taurad ;
10319: LD_ADDR_VAR 0 13
10323: PUSH
10324: LD_INT 28
10326: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10327: LD_ADDR_VAR 0 11
10331: PUSH
10332: LD_VAR 0 1
10336: PPUSH
10337: CALL_OW 310
10341: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10342: LD_VAR 0 11
10346: PPUSH
10347: CALL_OW 247
10351: PUSH
10352: LD_INT 2
10354: EQUAL
10355: IFFALSE 10359
// exit ;
10357: GO 10869
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10359: LD_ADDR_VAR 0 8
10363: PUSH
10364: LD_INT 81
10366: PUSH
10367: LD_VAR 0 9
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: LD_INT 3
10378: PUSH
10379: LD_INT 21
10381: PUSH
10382: LD_INT 3
10384: PUSH
10385: EMPTY
10386: LIST
10387: LIST
10388: PUSH
10389: EMPTY
10390: LIST
10391: LIST
10392: PUSH
10393: EMPTY
10394: LIST
10395: LIST
10396: PPUSH
10397: CALL_OW 69
10401: ST_TO_ADDR
// if not tmp then
10402: LD_VAR 0 8
10406: NOT
10407: IFFALSE 10411
// exit ;
10409: GO 10869
// if in_unit then
10411: LD_VAR 0 11
10415: IFFALSE 10439
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10417: LD_ADDR_VAR 0 10
10421: PUSH
10422: LD_VAR 0 8
10426: PPUSH
10427: LD_VAR 0 11
10431: PPUSH
10432: CALL_OW 74
10436: ST_TO_ADDR
10437: GO 10459
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10439: LD_ADDR_VAR 0 10
10443: PUSH
10444: LD_VAR 0 8
10448: PPUSH
10449: LD_VAR 0 1
10453: PPUSH
10454: CALL_OW 74
10458: ST_TO_ADDR
// if not enemy then
10459: LD_VAR 0 10
10463: NOT
10464: IFFALSE 10468
// exit ;
10466: GO 10869
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10468: LD_VAR 0 11
10472: PUSH
10473: LD_VAR 0 11
10477: PPUSH
10478: LD_VAR 0 10
10482: PPUSH
10483: CALL_OW 296
10487: PUSH
10488: LD_INT 13
10490: GREATER
10491: AND
10492: PUSH
10493: LD_VAR 0 1
10497: PPUSH
10498: LD_VAR 0 10
10502: PPUSH
10503: CALL_OW 296
10507: PUSH
10508: LD_INT 12
10510: GREATER
10511: OR
10512: IFFALSE 10516
// exit ;
10514: GO 10869
// missile := [ 1 ] ;
10516: LD_ADDR_VAR 0 14
10520: PUSH
10521: LD_INT 1
10523: PUSH
10524: EMPTY
10525: LIST
10526: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10527: LD_VAR 0 9
10531: PPUSH
10532: LD_VAR 0 12
10536: PPUSH
10537: CALL_OW 325
10541: IFFALSE 10570
// missile := Replace ( missile , missile + 1 , 2 ) ;
10543: LD_ADDR_VAR 0 14
10547: PUSH
10548: LD_VAR 0 14
10552: PPUSH
10553: LD_VAR 0 14
10557: PUSH
10558: LD_INT 1
10560: PLUS
10561: PPUSH
10562: LD_INT 2
10564: PPUSH
10565: CALL_OW 1
10569: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10570: LD_VAR 0 9
10574: PPUSH
10575: LD_VAR 0 13
10579: PPUSH
10580: CALL_OW 325
10584: PUSH
10585: LD_VAR 0 10
10589: PPUSH
10590: CALL_OW 255
10594: PPUSH
10595: LD_VAR 0 13
10599: PPUSH
10600: CALL_OW 325
10604: NOT
10605: AND
10606: IFFALSE 10635
// missile := Replace ( missile , missile + 1 , 3 ) ;
10608: LD_ADDR_VAR 0 14
10612: PUSH
10613: LD_VAR 0 14
10617: PPUSH
10618: LD_VAR 0 14
10622: PUSH
10623: LD_INT 1
10625: PLUS
10626: PPUSH
10627: LD_INT 3
10629: PPUSH
10630: CALL_OW 1
10634: ST_TO_ADDR
// if missile < 2 then
10635: LD_VAR 0 14
10639: PUSH
10640: LD_INT 2
10642: LESS
10643: IFFALSE 10647
// exit ;
10645: GO 10869
// x := GetX ( enemy ) ;
10647: LD_ADDR_VAR 0 4
10651: PUSH
10652: LD_VAR 0 10
10656: PPUSH
10657: CALL_OW 250
10661: ST_TO_ADDR
// y := GetY ( enemy ) ;
10662: LD_ADDR_VAR 0 5
10666: PUSH
10667: LD_VAR 0 10
10671: PPUSH
10672: CALL_OW 251
10676: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10677: LD_ADDR_VAR 0 6
10681: PUSH
10682: LD_VAR 0 4
10686: PUSH
10687: LD_INT 1
10689: NEG
10690: PPUSH
10691: LD_INT 1
10693: PPUSH
10694: CALL_OW 12
10698: PLUS
10699: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10700: LD_ADDR_VAR 0 7
10704: PUSH
10705: LD_VAR 0 5
10709: PUSH
10710: LD_INT 1
10712: NEG
10713: PPUSH
10714: LD_INT 1
10716: PPUSH
10717: CALL_OW 12
10721: PLUS
10722: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10723: LD_VAR 0 6
10727: PPUSH
10728: LD_VAR 0 7
10732: PPUSH
10733: CALL_OW 488
10737: NOT
10738: IFFALSE 10760
// begin _x := x ;
10740: LD_ADDR_VAR 0 6
10744: PUSH
10745: LD_VAR 0 4
10749: ST_TO_ADDR
// _y := y ;
10750: LD_ADDR_VAR 0 7
10754: PUSH
10755: LD_VAR 0 5
10759: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10760: LD_ADDR_VAR 0 3
10764: PUSH
10765: LD_INT 1
10767: PPUSH
10768: LD_VAR 0 14
10772: PPUSH
10773: CALL_OW 12
10777: ST_TO_ADDR
// case i of 1 :
10778: LD_VAR 0 3
10782: PUSH
10783: LD_INT 1
10785: DOUBLE
10786: EQUAL
10787: IFTRUE 10791
10789: GO 10808
10791: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10792: LD_VAR 0 1
10796: PPUSH
10797: LD_VAR 0 10
10801: PPUSH
10802: CALL_OW 115
10806: GO 10869
10808: LD_INT 2
10810: DOUBLE
10811: EQUAL
10812: IFTRUE 10816
10814: GO 10838
10816: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10817: LD_VAR 0 1
10821: PPUSH
10822: LD_VAR 0 6
10826: PPUSH
10827: LD_VAR 0 7
10831: PPUSH
10832: CALL_OW 153
10836: GO 10869
10838: LD_INT 3
10840: DOUBLE
10841: EQUAL
10842: IFTRUE 10846
10844: GO 10868
10846: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10847: LD_VAR 0 1
10851: PPUSH
10852: LD_VAR 0 6
10856: PPUSH
10857: LD_VAR 0 7
10861: PPUSH
10862: CALL_OW 154
10866: GO 10869
10868: POP
// end ;
10869: LD_VAR 0 2
10873: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10874: LD_INT 0
10876: PPUSH
10877: PPUSH
10878: PPUSH
10879: PPUSH
10880: PPUSH
10881: PPUSH
// if not unit or not building then
10882: LD_VAR 0 1
10886: NOT
10887: PUSH
10888: LD_VAR 0 2
10892: NOT
10893: OR
10894: IFFALSE 10898
// exit ;
10896: GO 11056
// x := GetX ( building ) ;
10898: LD_ADDR_VAR 0 5
10902: PUSH
10903: LD_VAR 0 2
10907: PPUSH
10908: CALL_OW 250
10912: ST_TO_ADDR
// y := GetY ( building ) ;
10913: LD_ADDR_VAR 0 6
10917: PUSH
10918: LD_VAR 0 2
10922: PPUSH
10923: CALL_OW 251
10927: ST_TO_ADDR
// for i = 0 to 5 do
10928: LD_ADDR_VAR 0 4
10932: PUSH
10933: DOUBLE
10934: LD_INT 0
10936: DEC
10937: ST_TO_ADDR
10938: LD_INT 5
10940: PUSH
10941: FOR_TO
10942: IFFALSE 11054
// begin _x := ShiftX ( x , i , 3 ) ;
10944: LD_ADDR_VAR 0 7
10948: PUSH
10949: LD_VAR 0 5
10953: PPUSH
10954: LD_VAR 0 4
10958: PPUSH
10959: LD_INT 3
10961: PPUSH
10962: CALL_OW 272
10966: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10967: LD_ADDR_VAR 0 8
10971: PUSH
10972: LD_VAR 0 6
10976: PPUSH
10977: LD_VAR 0 4
10981: PPUSH
10982: LD_INT 3
10984: PPUSH
10985: CALL_OW 273
10989: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10990: LD_VAR 0 7
10994: PPUSH
10995: LD_VAR 0 8
10999: PPUSH
11000: CALL_OW 488
11004: NOT
11005: IFFALSE 11009
// continue ;
11007: GO 10941
// if HexInfo ( _x , _y ) = 0 then
11009: LD_VAR 0 7
11013: PPUSH
11014: LD_VAR 0 8
11018: PPUSH
11019: CALL_OW 428
11023: PUSH
11024: LD_INT 0
11026: EQUAL
11027: IFFALSE 11052
// begin ComMoveXY ( unit , _x , _y ) ;
11029: LD_VAR 0 1
11033: PPUSH
11034: LD_VAR 0 7
11038: PPUSH
11039: LD_VAR 0 8
11043: PPUSH
11044: CALL_OW 111
// exit ;
11048: POP
11049: POP
11050: GO 11056
// end ; end ;
11052: GO 10941
11054: POP
11055: POP
// end ;
11056: LD_VAR 0 3
11060: RET
// export function ScanBase ( side , base_area ) ; begin
11061: LD_INT 0
11063: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11064: LD_ADDR_VAR 0 3
11068: PUSH
11069: LD_VAR 0 2
11073: PPUSH
11074: LD_INT 81
11076: PUSH
11077: LD_VAR 0 1
11081: PUSH
11082: EMPTY
11083: LIST
11084: LIST
11085: PPUSH
11086: CALL_OW 70
11090: ST_TO_ADDR
// end ;
11091: LD_VAR 0 3
11095: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11096: LD_INT 0
11098: PPUSH
11099: PPUSH
11100: PPUSH
11101: PPUSH
// result := false ;
11102: LD_ADDR_VAR 0 2
11106: PUSH
11107: LD_INT 0
11109: ST_TO_ADDR
// side := GetSide ( unit ) ;
11110: LD_ADDR_VAR 0 3
11114: PUSH
11115: LD_VAR 0 1
11119: PPUSH
11120: CALL_OW 255
11124: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11125: LD_ADDR_VAR 0 4
11129: PUSH
11130: LD_VAR 0 1
11134: PPUSH
11135: CALL_OW 248
11139: ST_TO_ADDR
// case nat of 1 :
11140: LD_VAR 0 4
11144: PUSH
11145: LD_INT 1
11147: DOUBLE
11148: EQUAL
11149: IFTRUE 11153
11151: GO 11164
11153: POP
// tech := tech_lassight ; 2 :
11154: LD_ADDR_VAR 0 5
11158: PUSH
11159: LD_INT 12
11161: ST_TO_ADDR
11162: GO 11203
11164: LD_INT 2
11166: DOUBLE
11167: EQUAL
11168: IFTRUE 11172
11170: GO 11183
11172: POP
// tech := tech_mortar ; 3 :
11173: LD_ADDR_VAR 0 5
11177: PUSH
11178: LD_INT 41
11180: ST_TO_ADDR
11181: GO 11203
11183: LD_INT 3
11185: DOUBLE
11186: EQUAL
11187: IFTRUE 11191
11189: GO 11202
11191: POP
// tech := tech_bazooka ; end ;
11192: LD_ADDR_VAR 0 5
11196: PUSH
11197: LD_INT 44
11199: ST_TO_ADDR
11200: GO 11203
11202: POP
// if Researched ( side , tech ) then
11203: LD_VAR 0 3
11207: PPUSH
11208: LD_VAR 0 5
11212: PPUSH
11213: CALL_OW 325
11217: IFFALSE 11244
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11219: LD_ADDR_VAR 0 2
11223: PUSH
11224: LD_INT 5
11226: PUSH
11227: LD_INT 8
11229: PUSH
11230: LD_INT 9
11232: PUSH
11233: EMPTY
11234: LIST
11235: LIST
11236: LIST
11237: PUSH
11238: LD_VAR 0 4
11242: ARRAY
11243: ST_TO_ADDR
// end ;
11244: LD_VAR 0 2
11248: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11249: LD_INT 0
11251: PPUSH
11252: PPUSH
11253: PPUSH
// if not mines then
11254: LD_VAR 0 2
11258: NOT
11259: IFFALSE 11263
// exit ;
11261: GO 11407
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11263: LD_ADDR_VAR 0 5
11267: PUSH
11268: LD_INT 81
11270: PUSH
11271: LD_VAR 0 1
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: LD_INT 3
11282: PUSH
11283: LD_INT 21
11285: PUSH
11286: LD_INT 3
11288: PUSH
11289: EMPTY
11290: LIST
11291: LIST
11292: PUSH
11293: EMPTY
11294: LIST
11295: LIST
11296: PUSH
11297: EMPTY
11298: LIST
11299: LIST
11300: PPUSH
11301: CALL_OW 69
11305: ST_TO_ADDR
// for i in mines do
11306: LD_ADDR_VAR 0 4
11310: PUSH
11311: LD_VAR 0 2
11315: PUSH
11316: FOR_IN
11317: IFFALSE 11405
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11319: LD_VAR 0 4
11323: PUSH
11324: LD_INT 1
11326: ARRAY
11327: PPUSH
11328: LD_VAR 0 4
11332: PUSH
11333: LD_INT 2
11335: ARRAY
11336: PPUSH
11337: CALL_OW 458
11341: NOT
11342: IFFALSE 11346
// continue ;
11344: GO 11316
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11346: LD_VAR 0 4
11350: PUSH
11351: LD_INT 1
11353: ARRAY
11354: PPUSH
11355: LD_VAR 0 4
11359: PUSH
11360: LD_INT 2
11362: ARRAY
11363: PPUSH
11364: CALL_OW 428
11368: PUSH
11369: LD_VAR 0 5
11373: IN
11374: IFFALSE 11403
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11376: LD_VAR 0 4
11380: PUSH
11381: LD_INT 1
11383: ARRAY
11384: PPUSH
11385: LD_VAR 0 4
11389: PUSH
11390: LD_INT 2
11392: ARRAY
11393: PPUSH
11394: LD_VAR 0 1
11398: PPUSH
11399: CALL_OW 456
// end ;
11403: GO 11316
11405: POP
11406: POP
// end ;
11407: LD_VAR 0 3
11411: RET
// export function Count ( array ) ; var i ; begin
11412: LD_INT 0
11414: PPUSH
11415: PPUSH
// result := 0 ;
11416: LD_ADDR_VAR 0 2
11420: PUSH
11421: LD_INT 0
11423: ST_TO_ADDR
// for i in array do
11424: LD_ADDR_VAR 0 3
11428: PUSH
11429: LD_VAR 0 1
11433: PUSH
11434: FOR_IN
11435: IFFALSE 11459
// if i then
11437: LD_VAR 0 3
11441: IFFALSE 11457
// result := result + 1 ;
11443: LD_ADDR_VAR 0 2
11447: PUSH
11448: LD_VAR 0 2
11452: PUSH
11453: LD_INT 1
11455: PLUS
11456: ST_TO_ADDR
11457: GO 11434
11459: POP
11460: POP
// end ;
11461: LD_VAR 0 2
11465: RET
// export function IsEmpty ( building ) ; begin
11466: LD_INT 0
11468: PPUSH
// if not building then
11469: LD_VAR 0 1
11473: NOT
11474: IFFALSE 11478
// exit ;
11476: GO 11521
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11478: LD_ADDR_VAR 0 2
11482: PUSH
11483: LD_VAR 0 1
11487: PUSH
11488: LD_INT 22
11490: PUSH
11491: LD_VAR 0 1
11495: PPUSH
11496: CALL_OW 255
11500: PUSH
11501: EMPTY
11502: LIST
11503: LIST
11504: PUSH
11505: LD_INT 58
11507: PUSH
11508: EMPTY
11509: LIST
11510: PUSH
11511: EMPTY
11512: LIST
11513: LIST
11514: PPUSH
11515: CALL_OW 69
11519: IN
11520: ST_TO_ADDR
// end ;
11521: LD_VAR 0 2
11525: RET
// export function IsNotFull ( building ) ; var places ; begin
11526: LD_INT 0
11528: PPUSH
11529: PPUSH
// if not building then
11530: LD_VAR 0 1
11534: NOT
11535: IFFALSE 11539
// exit ;
11537: GO 11710
// result := false ;
11539: LD_ADDR_VAR 0 2
11543: PUSH
11544: LD_INT 0
11546: ST_TO_ADDR
// places := 0 ;
11547: LD_ADDR_VAR 0 3
11551: PUSH
11552: LD_INT 0
11554: ST_TO_ADDR
// case GetBType ( building ) of b_depot , b_warehouse , b_lab , b_lab_half , b_lab_full , b_armoury , b_barracks , b_workshop , b_factory , b_fort :
11555: LD_VAR 0 1
11559: PPUSH
11560: CALL_OW 266
11564: PUSH
11565: LD_INT 0
11567: DOUBLE
11568: EQUAL
11569: IFTRUE 11627
11571: LD_INT 1
11573: DOUBLE
11574: EQUAL
11575: IFTRUE 11627
11577: LD_INT 6
11579: DOUBLE
11580: EQUAL
11581: IFTRUE 11627
11583: LD_INT 7
11585: DOUBLE
11586: EQUAL
11587: IFTRUE 11627
11589: LD_INT 8
11591: DOUBLE
11592: EQUAL
11593: IFTRUE 11627
11595: LD_INT 4
11597: DOUBLE
11598: EQUAL
11599: IFTRUE 11627
11601: LD_INT 5
11603: DOUBLE
11604: EQUAL
11605: IFTRUE 11627
11607: LD_INT 2
11609: DOUBLE
11610: EQUAL
11611: IFTRUE 11627
11613: LD_INT 3
11615: DOUBLE
11616: EQUAL
11617: IFTRUE 11627
11619: LD_INT 35
11621: DOUBLE
11622: EQUAL
11623: IFTRUE 11627
11625: GO 11638
11627: POP
// places := 6 ; b_bunker , b_breastwork :
11628: LD_ADDR_VAR 0 3
11632: PUSH
11633: LD_INT 6
11635: ST_TO_ADDR
11636: GO 11683
11638: LD_INT 32
11640: DOUBLE
11641: EQUAL
11642: IFTRUE 11652
11644: LD_INT 31
11646: DOUBLE
11647: EQUAL
11648: IFTRUE 11652
11650: GO 11663
11652: POP
// places := 1 ; b_control_tower :
11653: LD_ADDR_VAR 0 3
11657: PUSH
11658: LD_INT 1
11660: ST_TO_ADDR
11661: GO 11683
11663: LD_INT 36
11665: DOUBLE
11666: EQUAL
11667: IFTRUE 11671
11669: GO 11682
11671: POP
// places := 3 ; end ;
11672: LD_ADDR_VAR 0 3
11676: PUSH
11677: LD_INT 3
11679: ST_TO_ADDR
11680: GO 11683
11682: POP
// if places then
11683: LD_VAR 0 3
11687: IFFALSE 11710
// result := UnitsInside ( building ) < places ;
11689: LD_ADDR_VAR 0 2
11693: PUSH
11694: LD_VAR 0 1
11698: PPUSH
11699: CALL_OW 313
11703: PUSH
11704: LD_VAR 0 3
11708: LESS
11709: ST_TO_ADDR
// end ;
11710: LD_VAR 0 2
11714: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11715: LD_INT 0
11717: PPUSH
11718: PPUSH
11719: PPUSH
11720: PPUSH
// tmp := [ ] ;
11721: LD_ADDR_VAR 0 3
11725: PUSH
11726: EMPTY
11727: ST_TO_ADDR
// list := [ ] ;
11728: LD_ADDR_VAR 0 5
11732: PUSH
11733: EMPTY
11734: ST_TO_ADDR
// for i = 16 to 25 do
11735: LD_ADDR_VAR 0 4
11739: PUSH
11740: DOUBLE
11741: LD_INT 16
11743: DEC
11744: ST_TO_ADDR
11745: LD_INT 25
11747: PUSH
11748: FOR_TO
11749: IFFALSE 11822
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11751: LD_ADDR_VAR 0 3
11755: PUSH
11756: LD_VAR 0 3
11760: PUSH
11761: LD_INT 22
11763: PUSH
11764: LD_VAR 0 1
11768: PPUSH
11769: CALL_OW 255
11773: PUSH
11774: EMPTY
11775: LIST
11776: LIST
11777: PUSH
11778: LD_INT 91
11780: PUSH
11781: LD_VAR 0 1
11785: PUSH
11786: LD_INT 6
11788: PUSH
11789: EMPTY
11790: LIST
11791: LIST
11792: LIST
11793: PUSH
11794: LD_INT 30
11796: PUSH
11797: LD_VAR 0 4
11801: PUSH
11802: EMPTY
11803: LIST
11804: LIST
11805: PUSH
11806: EMPTY
11807: LIST
11808: LIST
11809: LIST
11810: PUSH
11811: EMPTY
11812: LIST
11813: PPUSH
11814: CALL_OW 69
11818: ADD
11819: ST_TO_ADDR
11820: GO 11748
11822: POP
11823: POP
// for i = 1 to tmp do
11824: LD_ADDR_VAR 0 4
11828: PUSH
11829: DOUBLE
11830: LD_INT 1
11832: DEC
11833: ST_TO_ADDR
11834: LD_VAR 0 3
11838: PUSH
11839: FOR_TO
11840: IFFALSE 11928
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11842: LD_ADDR_VAR 0 5
11846: PUSH
11847: LD_VAR 0 5
11851: PUSH
11852: LD_VAR 0 3
11856: PUSH
11857: LD_VAR 0 4
11861: ARRAY
11862: PPUSH
11863: CALL_OW 266
11867: PUSH
11868: LD_VAR 0 3
11872: PUSH
11873: LD_VAR 0 4
11877: ARRAY
11878: PPUSH
11879: CALL_OW 250
11883: PUSH
11884: LD_VAR 0 3
11888: PUSH
11889: LD_VAR 0 4
11893: ARRAY
11894: PPUSH
11895: CALL_OW 251
11899: PUSH
11900: LD_VAR 0 3
11904: PUSH
11905: LD_VAR 0 4
11909: ARRAY
11910: PPUSH
11911: CALL_OW 254
11915: PUSH
11916: EMPTY
11917: LIST
11918: LIST
11919: LIST
11920: LIST
11921: PUSH
11922: EMPTY
11923: LIST
11924: ADD
11925: ST_TO_ADDR
11926: GO 11839
11928: POP
11929: POP
// result := list ;
11930: LD_ADDR_VAR 0 2
11934: PUSH
11935: LD_VAR 0 5
11939: ST_TO_ADDR
// end ;
11940: LD_VAR 0 2
11944: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11945: LD_INT 0
11947: PPUSH
11948: PPUSH
11949: PPUSH
11950: PPUSH
11951: PPUSH
11952: PPUSH
11953: PPUSH
// if not factory then
11954: LD_VAR 0 1
11958: NOT
11959: IFFALSE 11963
// exit ;
11961: GO 12556
// if control = control_apeman then
11963: LD_VAR 0 4
11967: PUSH
11968: LD_INT 5
11970: EQUAL
11971: IFFALSE 12080
// begin tmp := UnitsInside ( factory ) ;
11973: LD_ADDR_VAR 0 8
11977: PUSH
11978: LD_VAR 0 1
11982: PPUSH
11983: CALL_OW 313
11987: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11988: LD_VAR 0 8
11992: PPUSH
11993: LD_INT 25
11995: PUSH
11996: LD_INT 12
11998: PUSH
11999: EMPTY
12000: LIST
12001: LIST
12002: PPUSH
12003: CALL_OW 72
12007: NOT
12008: IFFALSE 12018
// control := control_manual ;
12010: LD_ADDR_VAR 0 4
12014: PUSH
12015: LD_INT 1
12017: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
12018: LD_ADDR_VAR 0 8
12022: PUSH
12023: LD_VAR 0 1
12027: PPUSH
12028: CALL 11715 0 1
12032: ST_TO_ADDR
// if tmp then
12033: LD_VAR 0 8
12037: IFFALSE 12080
// begin for i in tmp do
12039: LD_ADDR_VAR 0 7
12043: PUSH
12044: LD_VAR 0 8
12048: PUSH
12049: FOR_IN
12050: IFFALSE 12078
// if i [ 1 ] = b_ext_radio then
12052: LD_VAR 0 7
12056: PUSH
12057: LD_INT 1
12059: ARRAY
12060: PUSH
12061: LD_INT 22
12063: EQUAL
12064: IFFALSE 12076
// begin control := control_remote ;
12066: LD_ADDR_VAR 0 4
12070: PUSH
12071: LD_INT 2
12073: ST_TO_ADDR
// break ;
12074: GO 12078
// end ;
12076: GO 12049
12078: POP
12079: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12080: LD_VAR 0 1
12084: PPUSH
12085: LD_VAR 0 2
12089: PPUSH
12090: LD_VAR 0 3
12094: PPUSH
12095: LD_VAR 0 4
12099: PPUSH
12100: LD_VAR 0 5
12104: PPUSH
12105: CALL_OW 448
12109: IFFALSE 12144
// begin result := [ chassis , engine , control , weapon ] ;
12111: LD_ADDR_VAR 0 6
12115: PUSH
12116: LD_VAR 0 2
12120: PUSH
12121: LD_VAR 0 3
12125: PUSH
12126: LD_VAR 0 4
12130: PUSH
12131: LD_VAR 0 5
12135: PUSH
12136: EMPTY
12137: LIST
12138: LIST
12139: LIST
12140: LIST
12141: ST_TO_ADDR
// exit ;
12142: GO 12556
// end ; _chassis := AvailableChassisList ( factory ) ;
12144: LD_ADDR_VAR 0 9
12148: PUSH
12149: LD_VAR 0 1
12153: PPUSH
12154: CALL_OW 475
12158: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
12159: LD_ADDR_VAR 0 11
12163: PUSH
12164: LD_VAR 0 1
12168: PPUSH
12169: CALL_OW 476
12173: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12174: LD_ADDR_VAR 0 12
12178: PUSH
12179: LD_VAR 0 1
12183: PPUSH
12184: CALL_OW 477
12188: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12189: LD_ADDR_VAR 0 10
12193: PUSH
12194: LD_VAR 0 1
12198: PPUSH
12199: CALL_OW 478
12203: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12204: LD_VAR 0 9
12208: NOT
12209: PUSH
12210: LD_VAR 0 11
12214: NOT
12215: OR
12216: PUSH
12217: LD_VAR 0 12
12221: NOT
12222: OR
12223: PUSH
12224: LD_VAR 0 10
12228: NOT
12229: OR
12230: IFFALSE 12265
// begin result := [ chassis , engine , control , weapon ] ;
12232: LD_ADDR_VAR 0 6
12236: PUSH
12237: LD_VAR 0 2
12241: PUSH
12242: LD_VAR 0 3
12246: PUSH
12247: LD_VAR 0 4
12251: PUSH
12252: LD_VAR 0 5
12256: PUSH
12257: EMPTY
12258: LIST
12259: LIST
12260: LIST
12261: LIST
12262: ST_TO_ADDR
// exit ;
12263: GO 12556
// end ; if not chassis in _chassis then
12265: LD_VAR 0 2
12269: PUSH
12270: LD_VAR 0 9
12274: IN
12275: NOT
12276: IFFALSE 12302
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12278: LD_ADDR_VAR 0 2
12282: PUSH
12283: LD_VAR 0 9
12287: PUSH
12288: LD_INT 1
12290: PPUSH
12291: LD_VAR 0 9
12295: PPUSH
12296: CALL_OW 12
12300: ARRAY
12301: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12302: LD_VAR 0 2
12306: PPUSH
12307: LD_VAR 0 3
12311: PPUSH
12312: CALL 12561 0 2
12316: NOT
12317: IFFALSE 12376
// repeat engine := _engine [ 1 ] ;
12319: LD_ADDR_VAR 0 3
12323: PUSH
12324: LD_VAR 0 11
12328: PUSH
12329: LD_INT 1
12331: ARRAY
12332: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12333: LD_ADDR_VAR 0 11
12337: PUSH
12338: LD_VAR 0 11
12342: PPUSH
12343: LD_INT 1
12345: PPUSH
12346: CALL_OW 3
12350: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12351: LD_VAR 0 2
12355: PPUSH
12356: LD_VAR 0 3
12360: PPUSH
12361: CALL 12561 0 2
12365: PUSH
12366: LD_VAR 0 11
12370: PUSH
12371: EMPTY
12372: EQUAL
12373: OR
12374: IFFALSE 12319
// if not control in _control then
12376: LD_VAR 0 4
12380: PUSH
12381: LD_VAR 0 12
12385: IN
12386: NOT
12387: IFFALSE 12413
// control := _control [ rand ( 1 , _control ) ] ;
12389: LD_ADDR_VAR 0 4
12393: PUSH
12394: LD_VAR 0 12
12398: PUSH
12399: LD_INT 1
12401: PPUSH
12402: LD_VAR 0 12
12406: PPUSH
12407: CALL_OW 12
12411: ARRAY
12412: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12413: LD_VAR 0 2
12417: PPUSH
12418: LD_VAR 0 5
12422: PPUSH
12423: CALL 12781 0 2
12427: NOT
12428: IFFALSE 12487
// repeat weapon := _weapon [ 1 ] ;
12430: LD_ADDR_VAR 0 5
12434: PUSH
12435: LD_VAR 0 10
12439: PUSH
12440: LD_INT 1
12442: ARRAY
12443: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12444: LD_ADDR_VAR 0 10
12448: PUSH
12449: LD_VAR 0 10
12453: PPUSH
12454: LD_INT 1
12456: PPUSH
12457: CALL_OW 3
12461: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12462: LD_VAR 0 2
12466: PPUSH
12467: LD_VAR 0 5
12471: PPUSH
12472: CALL 12781 0 2
12476: PUSH
12477: LD_VAR 0 10
12481: PUSH
12482: EMPTY
12483: EQUAL
12484: OR
12485: IFFALSE 12430
// result := [ ] ;
12487: LD_ADDR_VAR 0 6
12491: PUSH
12492: EMPTY
12493: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12494: LD_VAR 0 1
12498: PPUSH
12499: LD_VAR 0 2
12503: PPUSH
12504: LD_VAR 0 3
12508: PPUSH
12509: LD_VAR 0 4
12513: PPUSH
12514: LD_VAR 0 5
12518: PPUSH
12519: CALL_OW 448
12523: IFFALSE 12556
// result := [ chassis , engine , control , weapon ] ;
12525: LD_ADDR_VAR 0 6
12529: PUSH
12530: LD_VAR 0 2
12534: PUSH
12535: LD_VAR 0 3
12539: PUSH
12540: LD_VAR 0 4
12544: PUSH
12545: LD_VAR 0 5
12549: PUSH
12550: EMPTY
12551: LIST
12552: LIST
12553: LIST
12554: LIST
12555: ST_TO_ADDR
// end ;
12556: LD_VAR 0 6
12560: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12561: LD_INT 0
12563: PPUSH
// if not chassis or not engine then
12564: LD_VAR 0 1
12568: NOT
12569: PUSH
12570: LD_VAR 0 2
12574: NOT
12575: OR
12576: IFFALSE 12580
// exit ;
12578: GO 12776
// case engine of engine_solar :
12580: LD_VAR 0 2
12584: PUSH
12585: LD_INT 2
12587: DOUBLE
12588: EQUAL
12589: IFTRUE 12593
12591: GO 12631
12593: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12594: LD_ADDR_VAR 0 3
12598: PUSH
12599: LD_INT 11
12601: PUSH
12602: LD_INT 12
12604: PUSH
12605: LD_INT 13
12607: PUSH
12608: LD_INT 14
12610: PUSH
12611: LD_INT 1
12613: PUSH
12614: LD_INT 2
12616: PUSH
12617: LD_INT 3
12619: PUSH
12620: EMPTY
12621: LIST
12622: LIST
12623: LIST
12624: LIST
12625: LIST
12626: LIST
12627: LIST
12628: ST_TO_ADDR
12629: GO 12760
12631: LD_INT 1
12633: DOUBLE
12634: EQUAL
12635: IFTRUE 12639
12637: GO 12701
12639: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12640: LD_ADDR_VAR 0 3
12644: PUSH
12645: LD_INT 11
12647: PUSH
12648: LD_INT 12
12650: PUSH
12651: LD_INT 13
12653: PUSH
12654: LD_INT 14
12656: PUSH
12657: LD_INT 1
12659: PUSH
12660: LD_INT 2
12662: PUSH
12663: LD_INT 3
12665: PUSH
12666: LD_INT 4
12668: PUSH
12669: LD_INT 5
12671: PUSH
12672: LD_INT 21
12674: PUSH
12675: LD_INT 23
12677: PUSH
12678: LD_INT 22
12680: PUSH
12681: LD_INT 24
12683: PUSH
12684: EMPTY
12685: LIST
12686: LIST
12687: LIST
12688: LIST
12689: LIST
12690: LIST
12691: LIST
12692: LIST
12693: LIST
12694: LIST
12695: LIST
12696: LIST
12697: LIST
12698: ST_TO_ADDR
12699: GO 12760
12701: LD_INT 3
12703: DOUBLE
12704: EQUAL
12705: IFTRUE 12709
12707: GO 12759
12709: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12710: LD_ADDR_VAR 0 3
12714: PUSH
12715: LD_INT 13
12717: PUSH
12718: LD_INT 14
12720: PUSH
12721: LD_INT 2
12723: PUSH
12724: LD_INT 3
12726: PUSH
12727: LD_INT 4
12729: PUSH
12730: LD_INT 5
12732: PUSH
12733: LD_INT 21
12735: PUSH
12736: LD_INT 22
12738: PUSH
12739: LD_INT 23
12741: PUSH
12742: LD_INT 24
12744: PUSH
12745: EMPTY
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: LIST
12751: LIST
12752: LIST
12753: LIST
12754: LIST
12755: LIST
12756: ST_TO_ADDR
12757: GO 12760
12759: POP
// result := ( chassis in result ) ;
12760: LD_ADDR_VAR 0 3
12764: PUSH
12765: LD_VAR 0 1
12769: PUSH
12770: LD_VAR 0 3
12774: IN
12775: ST_TO_ADDR
// end ;
12776: LD_VAR 0 3
12780: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12781: LD_INT 0
12783: PPUSH
// if not chassis or not weapon then
12784: LD_VAR 0 1
12788: NOT
12789: PUSH
12790: LD_VAR 0 2
12794: NOT
12795: OR
12796: IFFALSE 12800
// exit ;
12798: GO 13862
// case weapon of us_machine_gun :
12800: LD_VAR 0 2
12804: PUSH
12805: LD_INT 2
12807: DOUBLE
12808: EQUAL
12809: IFTRUE 12813
12811: GO 12843
12813: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12814: LD_ADDR_VAR 0 3
12818: PUSH
12819: LD_INT 1
12821: PUSH
12822: LD_INT 2
12824: PUSH
12825: LD_INT 3
12827: PUSH
12828: LD_INT 4
12830: PUSH
12831: LD_INT 5
12833: PUSH
12834: EMPTY
12835: LIST
12836: LIST
12837: LIST
12838: LIST
12839: LIST
12840: ST_TO_ADDR
12841: GO 13846
12843: LD_INT 3
12845: DOUBLE
12846: EQUAL
12847: IFTRUE 12851
12849: GO 12881
12851: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12852: LD_ADDR_VAR 0 3
12856: PUSH
12857: LD_INT 1
12859: PUSH
12860: LD_INT 2
12862: PUSH
12863: LD_INT 3
12865: PUSH
12866: LD_INT 4
12868: PUSH
12869: LD_INT 5
12871: PUSH
12872: EMPTY
12873: LIST
12874: LIST
12875: LIST
12876: LIST
12877: LIST
12878: ST_TO_ADDR
12879: GO 13846
12881: LD_INT 11
12883: DOUBLE
12884: EQUAL
12885: IFTRUE 12889
12887: GO 12919
12889: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12890: LD_ADDR_VAR 0 3
12894: PUSH
12895: LD_INT 1
12897: PUSH
12898: LD_INT 2
12900: PUSH
12901: LD_INT 3
12903: PUSH
12904: LD_INT 4
12906: PUSH
12907: LD_INT 5
12909: PUSH
12910: EMPTY
12911: LIST
12912: LIST
12913: LIST
12914: LIST
12915: LIST
12916: ST_TO_ADDR
12917: GO 13846
12919: LD_INT 4
12921: DOUBLE
12922: EQUAL
12923: IFTRUE 12927
12925: GO 12953
12927: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12928: LD_ADDR_VAR 0 3
12932: PUSH
12933: LD_INT 2
12935: PUSH
12936: LD_INT 3
12938: PUSH
12939: LD_INT 4
12941: PUSH
12942: LD_INT 5
12944: PUSH
12945: EMPTY
12946: LIST
12947: LIST
12948: LIST
12949: LIST
12950: ST_TO_ADDR
12951: GO 13846
12953: LD_INT 5
12955: DOUBLE
12956: EQUAL
12957: IFTRUE 12961
12959: GO 12987
12961: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12962: LD_ADDR_VAR 0 3
12966: PUSH
12967: LD_INT 2
12969: PUSH
12970: LD_INT 3
12972: PUSH
12973: LD_INT 4
12975: PUSH
12976: LD_INT 5
12978: PUSH
12979: EMPTY
12980: LIST
12981: LIST
12982: LIST
12983: LIST
12984: ST_TO_ADDR
12985: GO 13846
12987: LD_INT 9
12989: DOUBLE
12990: EQUAL
12991: IFTRUE 12995
12993: GO 13021
12995: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12996: LD_ADDR_VAR 0 3
13000: PUSH
13001: LD_INT 2
13003: PUSH
13004: LD_INT 3
13006: PUSH
13007: LD_INT 4
13009: PUSH
13010: LD_INT 5
13012: PUSH
13013: EMPTY
13014: LIST
13015: LIST
13016: LIST
13017: LIST
13018: ST_TO_ADDR
13019: GO 13846
13021: LD_INT 7
13023: DOUBLE
13024: EQUAL
13025: IFTRUE 13029
13027: GO 13055
13029: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
13030: LD_ADDR_VAR 0 3
13034: PUSH
13035: LD_INT 2
13037: PUSH
13038: LD_INT 3
13040: PUSH
13041: LD_INT 4
13043: PUSH
13044: LD_INT 5
13046: PUSH
13047: EMPTY
13048: LIST
13049: LIST
13050: LIST
13051: LIST
13052: ST_TO_ADDR
13053: GO 13846
13055: LD_INT 12
13057: DOUBLE
13058: EQUAL
13059: IFTRUE 13063
13061: GO 13089
13063: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
13064: LD_ADDR_VAR 0 3
13068: PUSH
13069: LD_INT 2
13071: PUSH
13072: LD_INT 3
13074: PUSH
13075: LD_INT 4
13077: PUSH
13078: LD_INT 5
13080: PUSH
13081: EMPTY
13082: LIST
13083: LIST
13084: LIST
13085: LIST
13086: ST_TO_ADDR
13087: GO 13846
13089: LD_INT 13
13091: DOUBLE
13092: EQUAL
13093: IFTRUE 13097
13095: GO 13123
13097: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
13098: LD_ADDR_VAR 0 3
13102: PUSH
13103: LD_INT 2
13105: PUSH
13106: LD_INT 3
13108: PUSH
13109: LD_INT 4
13111: PUSH
13112: LD_INT 5
13114: PUSH
13115: EMPTY
13116: LIST
13117: LIST
13118: LIST
13119: LIST
13120: ST_TO_ADDR
13121: GO 13846
13123: LD_INT 14
13125: DOUBLE
13126: EQUAL
13127: IFTRUE 13131
13129: GO 13149
13131: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
13132: LD_ADDR_VAR 0 3
13136: PUSH
13137: LD_INT 4
13139: PUSH
13140: LD_INT 5
13142: PUSH
13143: EMPTY
13144: LIST
13145: LIST
13146: ST_TO_ADDR
13147: GO 13846
13149: LD_INT 6
13151: DOUBLE
13152: EQUAL
13153: IFTRUE 13157
13155: GO 13175
13157: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
13158: LD_ADDR_VAR 0 3
13162: PUSH
13163: LD_INT 4
13165: PUSH
13166: LD_INT 5
13168: PUSH
13169: EMPTY
13170: LIST
13171: LIST
13172: ST_TO_ADDR
13173: GO 13846
13175: LD_INT 10
13177: DOUBLE
13178: EQUAL
13179: IFTRUE 13183
13181: GO 13201
13183: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13184: LD_ADDR_VAR 0 3
13188: PUSH
13189: LD_INT 4
13191: PUSH
13192: LD_INT 5
13194: PUSH
13195: EMPTY
13196: LIST
13197: LIST
13198: ST_TO_ADDR
13199: GO 13846
13201: LD_INT 22
13203: DOUBLE
13204: EQUAL
13205: IFTRUE 13209
13207: GO 13235
13209: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13210: LD_ADDR_VAR 0 3
13214: PUSH
13215: LD_INT 11
13217: PUSH
13218: LD_INT 12
13220: PUSH
13221: LD_INT 13
13223: PUSH
13224: LD_INT 14
13226: PUSH
13227: EMPTY
13228: LIST
13229: LIST
13230: LIST
13231: LIST
13232: ST_TO_ADDR
13233: GO 13846
13235: LD_INT 23
13237: DOUBLE
13238: EQUAL
13239: IFTRUE 13243
13241: GO 13269
13243: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13244: LD_ADDR_VAR 0 3
13248: PUSH
13249: LD_INT 11
13251: PUSH
13252: LD_INT 12
13254: PUSH
13255: LD_INT 13
13257: PUSH
13258: LD_INT 14
13260: PUSH
13261: EMPTY
13262: LIST
13263: LIST
13264: LIST
13265: LIST
13266: ST_TO_ADDR
13267: GO 13846
13269: LD_INT 24
13271: DOUBLE
13272: EQUAL
13273: IFTRUE 13277
13275: GO 13303
13277: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13278: LD_ADDR_VAR 0 3
13282: PUSH
13283: LD_INT 11
13285: PUSH
13286: LD_INT 12
13288: PUSH
13289: LD_INT 13
13291: PUSH
13292: LD_INT 14
13294: PUSH
13295: EMPTY
13296: LIST
13297: LIST
13298: LIST
13299: LIST
13300: ST_TO_ADDR
13301: GO 13846
13303: LD_INT 30
13305: DOUBLE
13306: EQUAL
13307: IFTRUE 13311
13309: GO 13337
13311: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13312: LD_ADDR_VAR 0 3
13316: PUSH
13317: LD_INT 11
13319: PUSH
13320: LD_INT 12
13322: PUSH
13323: LD_INT 13
13325: PUSH
13326: LD_INT 14
13328: PUSH
13329: EMPTY
13330: LIST
13331: LIST
13332: LIST
13333: LIST
13334: ST_TO_ADDR
13335: GO 13846
13337: LD_INT 25
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13363
13345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13346: LD_ADDR_VAR 0 3
13350: PUSH
13351: LD_INT 13
13353: PUSH
13354: LD_INT 14
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: ST_TO_ADDR
13361: GO 13846
13363: LD_INT 27
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13389
13371: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13372: LD_ADDR_VAR 0 3
13376: PUSH
13377: LD_INT 13
13379: PUSH
13380: LD_INT 14
13382: PUSH
13383: EMPTY
13384: LIST
13385: LIST
13386: ST_TO_ADDR
13387: GO 13846
13389: LD_EXP 67
13393: DOUBLE
13394: EQUAL
13395: IFTRUE 13399
13397: GO 13425
13399: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13400: LD_ADDR_VAR 0 3
13404: PUSH
13405: LD_INT 11
13407: PUSH
13408: LD_INT 12
13410: PUSH
13411: LD_INT 13
13413: PUSH
13414: LD_INT 14
13416: PUSH
13417: EMPTY
13418: LIST
13419: LIST
13420: LIST
13421: LIST
13422: ST_TO_ADDR
13423: GO 13846
13425: LD_INT 28
13427: DOUBLE
13428: EQUAL
13429: IFTRUE 13433
13431: GO 13451
13433: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13434: LD_ADDR_VAR 0 3
13438: PUSH
13439: LD_INT 13
13441: PUSH
13442: LD_INT 14
13444: PUSH
13445: EMPTY
13446: LIST
13447: LIST
13448: ST_TO_ADDR
13449: GO 13846
13451: LD_INT 29
13453: DOUBLE
13454: EQUAL
13455: IFTRUE 13459
13457: GO 13477
13459: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13460: LD_ADDR_VAR 0 3
13464: PUSH
13465: LD_INT 13
13467: PUSH
13468: LD_INT 14
13470: PUSH
13471: EMPTY
13472: LIST
13473: LIST
13474: ST_TO_ADDR
13475: GO 13846
13477: LD_INT 31
13479: DOUBLE
13480: EQUAL
13481: IFTRUE 13485
13483: GO 13503
13485: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13486: LD_ADDR_VAR 0 3
13490: PUSH
13491: LD_INT 13
13493: PUSH
13494: LD_INT 14
13496: PUSH
13497: EMPTY
13498: LIST
13499: LIST
13500: ST_TO_ADDR
13501: GO 13846
13503: LD_INT 26
13505: DOUBLE
13506: EQUAL
13507: IFTRUE 13511
13509: GO 13529
13511: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13512: LD_ADDR_VAR 0 3
13516: PUSH
13517: LD_INT 13
13519: PUSH
13520: LD_INT 14
13522: PUSH
13523: EMPTY
13524: LIST
13525: LIST
13526: ST_TO_ADDR
13527: GO 13846
13529: LD_INT 42
13531: DOUBLE
13532: EQUAL
13533: IFTRUE 13537
13535: GO 13563
13537: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13538: LD_ADDR_VAR 0 3
13542: PUSH
13543: LD_INT 21
13545: PUSH
13546: LD_INT 22
13548: PUSH
13549: LD_INT 23
13551: PUSH
13552: LD_INT 24
13554: PUSH
13555: EMPTY
13556: LIST
13557: LIST
13558: LIST
13559: LIST
13560: ST_TO_ADDR
13561: GO 13846
13563: LD_INT 43
13565: DOUBLE
13566: EQUAL
13567: IFTRUE 13571
13569: GO 13597
13571: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13572: LD_ADDR_VAR 0 3
13576: PUSH
13577: LD_INT 21
13579: PUSH
13580: LD_INT 22
13582: PUSH
13583: LD_INT 23
13585: PUSH
13586: LD_INT 24
13588: PUSH
13589: EMPTY
13590: LIST
13591: LIST
13592: LIST
13593: LIST
13594: ST_TO_ADDR
13595: GO 13846
13597: LD_INT 44
13599: DOUBLE
13600: EQUAL
13601: IFTRUE 13605
13603: GO 13631
13605: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13606: LD_ADDR_VAR 0 3
13610: PUSH
13611: LD_INT 21
13613: PUSH
13614: LD_INT 22
13616: PUSH
13617: LD_INT 23
13619: PUSH
13620: LD_INT 24
13622: PUSH
13623: EMPTY
13624: LIST
13625: LIST
13626: LIST
13627: LIST
13628: ST_TO_ADDR
13629: GO 13846
13631: LD_INT 45
13633: DOUBLE
13634: EQUAL
13635: IFTRUE 13639
13637: GO 13665
13639: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13640: LD_ADDR_VAR 0 3
13644: PUSH
13645: LD_INT 21
13647: PUSH
13648: LD_INT 22
13650: PUSH
13651: LD_INT 23
13653: PUSH
13654: LD_INT 24
13656: PUSH
13657: EMPTY
13658: LIST
13659: LIST
13660: LIST
13661: LIST
13662: ST_TO_ADDR
13663: GO 13846
13665: LD_INT 49
13667: DOUBLE
13668: EQUAL
13669: IFTRUE 13673
13671: GO 13699
13673: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13674: LD_ADDR_VAR 0 3
13678: PUSH
13679: LD_INT 21
13681: PUSH
13682: LD_INT 22
13684: PUSH
13685: LD_INT 23
13687: PUSH
13688: LD_INT 24
13690: PUSH
13691: EMPTY
13692: LIST
13693: LIST
13694: LIST
13695: LIST
13696: ST_TO_ADDR
13697: GO 13846
13699: LD_INT 51
13701: DOUBLE
13702: EQUAL
13703: IFTRUE 13707
13705: GO 13733
13707: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13708: LD_ADDR_VAR 0 3
13712: PUSH
13713: LD_INT 21
13715: PUSH
13716: LD_INT 22
13718: PUSH
13719: LD_INT 23
13721: PUSH
13722: LD_INT 24
13724: PUSH
13725: EMPTY
13726: LIST
13727: LIST
13728: LIST
13729: LIST
13730: ST_TO_ADDR
13731: GO 13846
13733: LD_INT 52
13735: DOUBLE
13736: EQUAL
13737: IFTRUE 13741
13739: GO 13767
13741: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13742: LD_ADDR_VAR 0 3
13746: PUSH
13747: LD_INT 21
13749: PUSH
13750: LD_INT 22
13752: PUSH
13753: LD_INT 23
13755: PUSH
13756: LD_INT 24
13758: PUSH
13759: EMPTY
13760: LIST
13761: LIST
13762: LIST
13763: LIST
13764: ST_TO_ADDR
13765: GO 13846
13767: LD_INT 53
13769: DOUBLE
13770: EQUAL
13771: IFTRUE 13775
13773: GO 13793
13775: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13776: LD_ADDR_VAR 0 3
13780: PUSH
13781: LD_INT 23
13783: PUSH
13784: LD_INT 24
13786: PUSH
13787: EMPTY
13788: LIST
13789: LIST
13790: ST_TO_ADDR
13791: GO 13846
13793: LD_INT 46
13795: DOUBLE
13796: EQUAL
13797: IFTRUE 13801
13799: GO 13819
13801: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13802: LD_ADDR_VAR 0 3
13806: PUSH
13807: LD_INT 23
13809: PUSH
13810: LD_INT 24
13812: PUSH
13813: EMPTY
13814: LIST
13815: LIST
13816: ST_TO_ADDR
13817: GO 13846
13819: LD_INT 47
13821: DOUBLE
13822: EQUAL
13823: IFTRUE 13827
13825: GO 13845
13827: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13828: LD_ADDR_VAR 0 3
13832: PUSH
13833: LD_INT 23
13835: PUSH
13836: LD_INT 24
13838: PUSH
13839: EMPTY
13840: LIST
13841: LIST
13842: ST_TO_ADDR
13843: GO 13846
13845: POP
// result := ( chassis in result ) ;
13846: LD_ADDR_VAR 0 3
13850: PUSH
13851: LD_VAR 0 1
13855: PUSH
13856: LD_VAR 0 3
13860: IN
13861: ST_TO_ADDR
// end ;
13862: LD_VAR 0 3
13866: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13867: LD_INT 0
13869: PPUSH
13870: PPUSH
13871: PPUSH
13872: PPUSH
13873: PPUSH
13874: PPUSH
13875: PPUSH
// result := array ;
13876: LD_ADDR_VAR 0 5
13880: PUSH
13881: LD_VAR 0 1
13885: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13886: LD_VAR 0 1
13890: NOT
13891: PUSH
13892: LD_VAR 0 2
13896: NOT
13897: OR
13898: PUSH
13899: LD_VAR 0 3
13903: NOT
13904: OR
13905: PUSH
13906: LD_VAR 0 2
13910: PUSH
13911: LD_VAR 0 1
13915: GREATER
13916: OR
13917: PUSH
13918: LD_VAR 0 3
13922: PUSH
13923: LD_VAR 0 1
13927: GREATER
13928: OR
13929: IFFALSE 13933
// exit ;
13931: GO 14229
// if direction then
13933: LD_VAR 0 4
13937: IFFALSE 14001
// begin d := 1 ;
13939: LD_ADDR_VAR 0 9
13943: PUSH
13944: LD_INT 1
13946: ST_TO_ADDR
// if i_from > i_to then
13947: LD_VAR 0 2
13951: PUSH
13952: LD_VAR 0 3
13956: GREATER
13957: IFFALSE 13983
// length := ( array - i_from ) + i_to else
13959: LD_ADDR_VAR 0 11
13963: PUSH
13964: LD_VAR 0 1
13968: PUSH
13969: LD_VAR 0 2
13973: MINUS
13974: PUSH
13975: LD_VAR 0 3
13979: PLUS
13980: ST_TO_ADDR
13981: GO 13999
// length := i_to - i_from ;
13983: LD_ADDR_VAR 0 11
13987: PUSH
13988: LD_VAR 0 3
13992: PUSH
13993: LD_VAR 0 2
13997: MINUS
13998: ST_TO_ADDR
// end else
13999: GO 14062
// begin d := - 1 ;
14001: LD_ADDR_VAR 0 9
14005: PUSH
14006: LD_INT 1
14008: NEG
14009: ST_TO_ADDR
// if i_from > i_to then
14010: LD_VAR 0 2
14014: PUSH
14015: LD_VAR 0 3
14019: GREATER
14020: IFFALSE 14040
// length := i_from - i_to else
14022: LD_ADDR_VAR 0 11
14026: PUSH
14027: LD_VAR 0 2
14031: PUSH
14032: LD_VAR 0 3
14036: MINUS
14037: ST_TO_ADDR
14038: GO 14062
// length := ( array - i_to ) + i_from ;
14040: LD_ADDR_VAR 0 11
14044: PUSH
14045: LD_VAR 0 1
14049: PUSH
14050: LD_VAR 0 3
14054: MINUS
14055: PUSH
14056: LD_VAR 0 2
14060: PLUS
14061: ST_TO_ADDR
// end ; if not length then
14062: LD_VAR 0 11
14066: NOT
14067: IFFALSE 14071
// exit ;
14069: GO 14229
// tmp := array ;
14071: LD_ADDR_VAR 0 10
14075: PUSH
14076: LD_VAR 0 1
14080: ST_TO_ADDR
// for i = 1 to length do
14081: LD_ADDR_VAR 0 6
14085: PUSH
14086: DOUBLE
14087: LD_INT 1
14089: DEC
14090: ST_TO_ADDR
14091: LD_VAR 0 11
14095: PUSH
14096: FOR_TO
14097: IFFALSE 14217
// begin for j = 1 to array do
14099: LD_ADDR_VAR 0 7
14103: PUSH
14104: DOUBLE
14105: LD_INT 1
14107: DEC
14108: ST_TO_ADDR
14109: LD_VAR 0 1
14113: PUSH
14114: FOR_TO
14115: IFFALSE 14203
// begin k := j + d ;
14117: LD_ADDR_VAR 0 8
14121: PUSH
14122: LD_VAR 0 7
14126: PUSH
14127: LD_VAR 0 9
14131: PLUS
14132: ST_TO_ADDR
// if k > array then
14133: LD_VAR 0 8
14137: PUSH
14138: LD_VAR 0 1
14142: GREATER
14143: IFFALSE 14153
// k := 1 ;
14145: LD_ADDR_VAR 0 8
14149: PUSH
14150: LD_INT 1
14152: ST_TO_ADDR
// if not k then
14153: LD_VAR 0 8
14157: NOT
14158: IFFALSE 14170
// k := array ;
14160: LD_ADDR_VAR 0 8
14164: PUSH
14165: LD_VAR 0 1
14169: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14170: LD_ADDR_VAR 0 10
14174: PUSH
14175: LD_VAR 0 10
14179: PPUSH
14180: LD_VAR 0 8
14184: PPUSH
14185: LD_VAR 0 1
14189: PUSH
14190: LD_VAR 0 7
14194: ARRAY
14195: PPUSH
14196: CALL_OW 1
14200: ST_TO_ADDR
// end ;
14201: GO 14114
14203: POP
14204: POP
// array := tmp ;
14205: LD_ADDR_VAR 0 1
14209: PUSH
14210: LD_VAR 0 10
14214: ST_TO_ADDR
// end ;
14215: GO 14096
14217: POP
14218: POP
// result := array ;
14219: LD_ADDR_VAR 0 5
14223: PUSH
14224: LD_VAR 0 1
14228: ST_TO_ADDR
// end ;
14229: LD_VAR 0 5
14233: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14234: LD_INT 0
14236: PPUSH
14237: PPUSH
// result := 0 ;
14238: LD_ADDR_VAR 0 3
14242: PUSH
14243: LD_INT 0
14245: ST_TO_ADDR
// if not array or not value in array then
14246: LD_VAR 0 1
14250: NOT
14251: PUSH
14252: LD_VAR 0 2
14256: PUSH
14257: LD_VAR 0 1
14261: IN
14262: NOT
14263: OR
14264: IFFALSE 14268
// exit ;
14266: GO 14322
// for i = 1 to array do
14268: LD_ADDR_VAR 0 4
14272: PUSH
14273: DOUBLE
14274: LD_INT 1
14276: DEC
14277: ST_TO_ADDR
14278: LD_VAR 0 1
14282: PUSH
14283: FOR_TO
14284: IFFALSE 14320
// if value = array [ i ] then
14286: LD_VAR 0 2
14290: PUSH
14291: LD_VAR 0 1
14295: PUSH
14296: LD_VAR 0 4
14300: ARRAY
14301: EQUAL
14302: IFFALSE 14318
// begin result := i ;
14304: LD_ADDR_VAR 0 3
14308: PUSH
14309: LD_VAR 0 4
14313: ST_TO_ADDR
// exit ;
14314: POP
14315: POP
14316: GO 14322
// end ;
14318: GO 14283
14320: POP
14321: POP
// end ;
14322: LD_VAR 0 3
14326: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14327: LD_INT 0
14329: PPUSH
// vc_chassis := chassis ;
14330: LD_ADDR_OWVAR 37
14334: PUSH
14335: LD_VAR 0 1
14339: ST_TO_ADDR
// vc_engine := engine ;
14340: LD_ADDR_OWVAR 39
14344: PUSH
14345: LD_VAR 0 2
14349: ST_TO_ADDR
// vc_control := control ;
14350: LD_ADDR_OWVAR 38
14354: PUSH
14355: LD_VAR 0 3
14359: ST_TO_ADDR
// vc_weapon := weapon ;
14360: LD_ADDR_OWVAR 40
14364: PUSH
14365: LD_VAR 0 4
14369: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14370: LD_ADDR_OWVAR 41
14374: PUSH
14375: LD_VAR 0 5
14379: ST_TO_ADDR
// end ;
14380: LD_VAR 0 6
14384: RET
// export function WantPlant ( unit ) ; var task ; begin
14385: LD_INT 0
14387: PPUSH
14388: PPUSH
// result := false ;
14389: LD_ADDR_VAR 0 2
14393: PUSH
14394: LD_INT 0
14396: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14397: LD_ADDR_VAR 0 3
14401: PUSH
14402: LD_VAR 0 1
14406: PPUSH
14407: CALL_OW 437
14411: ST_TO_ADDR
// if task then
14412: LD_VAR 0 3
14416: IFFALSE 14444
// if task [ 1 ] [ 1 ] = p then
14418: LD_VAR 0 3
14422: PUSH
14423: LD_INT 1
14425: ARRAY
14426: PUSH
14427: LD_INT 1
14429: ARRAY
14430: PUSH
14431: LD_STRING p
14433: EQUAL
14434: IFFALSE 14444
// result := true ;
14436: LD_ADDR_VAR 0 2
14440: PUSH
14441: LD_INT 1
14443: ST_TO_ADDR
// end ;
14444: LD_VAR 0 2
14448: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14449: LD_INT 0
14451: PPUSH
14452: PPUSH
14453: PPUSH
14454: PPUSH
// if pos < 1 then
14455: LD_VAR 0 2
14459: PUSH
14460: LD_INT 1
14462: LESS
14463: IFFALSE 14467
// exit ;
14465: GO 14770
// if pos = 1 then
14467: LD_VAR 0 2
14471: PUSH
14472: LD_INT 1
14474: EQUAL
14475: IFFALSE 14508
// result := Replace ( arr , pos [ 1 ] , value ) else
14477: LD_ADDR_VAR 0 4
14481: PUSH
14482: LD_VAR 0 1
14486: PPUSH
14487: LD_VAR 0 2
14491: PUSH
14492: LD_INT 1
14494: ARRAY
14495: PPUSH
14496: LD_VAR 0 3
14500: PPUSH
14501: CALL_OW 1
14505: ST_TO_ADDR
14506: GO 14770
// begin tmp := arr ;
14508: LD_ADDR_VAR 0 6
14512: PUSH
14513: LD_VAR 0 1
14517: ST_TO_ADDR
// s_arr := [ tmp ] ;
14518: LD_ADDR_VAR 0 7
14522: PUSH
14523: LD_VAR 0 6
14527: PUSH
14528: EMPTY
14529: LIST
14530: ST_TO_ADDR
// for i = 1 to pos - 1 do
14531: LD_ADDR_VAR 0 5
14535: PUSH
14536: DOUBLE
14537: LD_INT 1
14539: DEC
14540: ST_TO_ADDR
14541: LD_VAR 0 2
14545: PUSH
14546: LD_INT 1
14548: MINUS
14549: PUSH
14550: FOR_TO
14551: IFFALSE 14596
// begin tmp := tmp [ pos [ i ] ] ;
14553: LD_ADDR_VAR 0 6
14557: PUSH
14558: LD_VAR 0 6
14562: PUSH
14563: LD_VAR 0 2
14567: PUSH
14568: LD_VAR 0 5
14572: ARRAY
14573: ARRAY
14574: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14575: LD_ADDR_VAR 0 7
14579: PUSH
14580: LD_VAR 0 7
14584: PUSH
14585: LD_VAR 0 6
14589: PUSH
14590: EMPTY
14591: LIST
14592: ADD
14593: ST_TO_ADDR
// end ;
14594: GO 14550
14596: POP
14597: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14598: LD_ADDR_VAR 0 6
14602: PUSH
14603: LD_VAR 0 6
14607: PPUSH
14608: LD_VAR 0 2
14612: PUSH
14613: LD_VAR 0 2
14617: ARRAY
14618: PPUSH
14619: LD_VAR 0 3
14623: PPUSH
14624: CALL_OW 1
14628: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14629: LD_ADDR_VAR 0 7
14633: PUSH
14634: LD_VAR 0 7
14638: PPUSH
14639: LD_VAR 0 7
14643: PPUSH
14644: LD_VAR 0 6
14648: PPUSH
14649: CALL_OW 1
14653: ST_TO_ADDR
// for i = s_arr downto 2 do
14654: LD_ADDR_VAR 0 5
14658: PUSH
14659: DOUBLE
14660: LD_VAR 0 7
14664: INC
14665: ST_TO_ADDR
14666: LD_INT 2
14668: PUSH
14669: FOR_DOWNTO
14670: IFFALSE 14754
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14672: LD_ADDR_VAR 0 6
14676: PUSH
14677: LD_VAR 0 7
14681: PUSH
14682: LD_VAR 0 5
14686: PUSH
14687: LD_INT 1
14689: MINUS
14690: ARRAY
14691: PPUSH
14692: LD_VAR 0 2
14696: PUSH
14697: LD_VAR 0 5
14701: PUSH
14702: LD_INT 1
14704: MINUS
14705: ARRAY
14706: PPUSH
14707: LD_VAR 0 7
14711: PUSH
14712: LD_VAR 0 5
14716: ARRAY
14717: PPUSH
14718: CALL_OW 1
14722: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14723: LD_ADDR_VAR 0 7
14727: PUSH
14728: LD_VAR 0 7
14732: PPUSH
14733: LD_VAR 0 5
14737: PUSH
14738: LD_INT 1
14740: MINUS
14741: PPUSH
14742: LD_VAR 0 6
14746: PPUSH
14747: CALL_OW 1
14751: ST_TO_ADDR
// end ;
14752: GO 14669
14754: POP
14755: POP
// result := s_arr [ 1 ] ;
14756: LD_ADDR_VAR 0 4
14760: PUSH
14761: LD_VAR 0 7
14765: PUSH
14766: LD_INT 1
14768: ARRAY
14769: ST_TO_ADDR
// end ; end ;
14770: LD_VAR 0 4
14774: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14775: LD_INT 0
14777: PPUSH
14778: PPUSH
// if not list then
14779: LD_VAR 0 1
14783: NOT
14784: IFFALSE 14788
// exit ;
14786: GO 14879
// i := list [ pos1 ] ;
14788: LD_ADDR_VAR 0 5
14792: PUSH
14793: LD_VAR 0 1
14797: PUSH
14798: LD_VAR 0 2
14802: ARRAY
14803: ST_TO_ADDR
// if not i then
14804: LD_VAR 0 5
14808: NOT
14809: IFFALSE 14813
// exit ;
14811: GO 14879
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14813: LD_ADDR_VAR 0 1
14817: PUSH
14818: LD_VAR 0 1
14822: PPUSH
14823: LD_VAR 0 2
14827: PPUSH
14828: LD_VAR 0 1
14832: PUSH
14833: LD_VAR 0 3
14837: ARRAY
14838: PPUSH
14839: CALL_OW 1
14843: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14844: LD_ADDR_VAR 0 1
14848: PUSH
14849: LD_VAR 0 1
14853: PPUSH
14854: LD_VAR 0 3
14858: PPUSH
14859: LD_VAR 0 5
14863: PPUSH
14864: CALL_OW 1
14868: ST_TO_ADDR
// result := list ;
14869: LD_ADDR_VAR 0 4
14873: PUSH
14874: LD_VAR 0 1
14878: ST_TO_ADDR
// end ;
14879: LD_VAR 0 4
14883: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14884: LD_INT 0
14886: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14887: LD_ADDR_VAR 0 5
14891: PUSH
14892: LD_VAR 0 1
14896: PPUSH
14897: CALL_OW 250
14901: PPUSH
14902: LD_VAR 0 1
14906: PPUSH
14907: CALL_OW 251
14911: PPUSH
14912: LD_VAR 0 2
14916: PPUSH
14917: LD_VAR 0 3
14921: PPUSH
14922: LD_VAR 0 4
14926: PPUSH
14927: CALL 14937 0 5
14931: ST_TO_ADDR
// end ;
14932: LD_VAR 0 5
14936: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14937: LD_INT 0
14939: PPUSH
14940: PPUSH
14941: PPUSH
14942: PPUSH
// if not list then
14943: LD_VAR 0 3
14947: NOT
14948: IFFALSE 14952
// exit ;
14950: GO 15340
// result := [ ] ;
14952: LD_ADDR_VAR 0 6
14956: PUSH
14957: EMPTY
14958: ST_TO_ADDR
// for i in list do
14959: LD_ADDR_VAR 0 7
14963: PUSH
14964: LD_VAR 0 3
14968: PUSH
14969: FOR_IN
14970: IFFALSE 15172
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14972: LD_ADDR_VAR 0 9
14976: PUSH
14977: LD_VAR 0 7
14981: PPUSH
14982: LD_VAR 0 1
14986: PPUSH
14987: LD_VAR 0 2
14991: PPUSH
14992: CALL_OW 297
14996: ST_TO_ADDR
// if not result then
14997: LD_VAR 0 6
15001: NOT
15002: IFFALSE 15028
// result := [ [ i , tmp ] ] else
15004: LD_ADDR_VAR 0 6
15008: PUSH
15009: LD_VAR 0 7
15013: PUSH
15014: LD_VAR 0 9
15018: PUSH
15019: EMPTY
15020: LIST
15021: LIST
15022: PUSH
15023: EMPTY
15024: LIST
15025: ST_TO_ADDR
15026: GO 15170
// begin if result [ result ] [ 2 ] < tmp then
15028: LD_VAR 0 6
15032: PUSH
15033: LD_VAR 0 6
15037: ARRAY
15038: PUSH
15039: LD_INT 2
15041: ARRAY
15042: PUSH
15043: LD_VAR 0 9
15047: LESS
15048: IFFALSE 15090
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
15050: LD_ADDR_VAR 0 6
15054: PUSH
15055: LD_VAR 0 6
15059: PPUSH
15060: LD_VAR 0 6
15064: PUSH
15065: LD_INT 1
15067: PLUS
15068: PPUSH
15069: LD_VAR 0 7
15073: PUSH
15074: LD_VAR 0 9
15078: PUSH
15079: EMPTY
15080: LIST
15081: LIST
15082: PPUSH
15083: CALL_OW 2
15087: ST_TO_ADDR
15088: GO 15170
// for j = 1 to result do
15090: LD_ADDR_VAR 0 8
15094: PUSH
15095: DOUBLE
15096: LD_INT 1
15098: DEC
15099: ST_TO_ADDR
15100: LD_VAR 0 6
15104: PUSH
15105: FOR_TO
15106: IFFALSE 15168
// begin if tmp < result [ j ] [ 2 ] then
15108: LD_VAR 0 9
15112: PUSH
15113: LD_VAR 0 6
15117: PUSH
15118: LD_VAR 0 8
15122: ARRAY
15123: PUSH
15124: LD_INT 2
15126: ARRAY
15127: LESS
15128: IFFALSE 15166
// begin result := Insert ( result , j , [ i , tmp ] ) ;
15130: LD_ADDR_VAR 0 6
15134: PUSH
15135: LD_VAR 0 6
15139: PPUSH
15140: LD_VAR 0 8
15144: PPUSH
15145: LD_VAR 0 7
15149: PUSH
15150: LD_VAR 0 9
15154: PUSH
15155: EMPTY
15156: LIST
15157: LIST
15158: PPUSH
15159: CALL_OW 2
15163: ST_TO_ADDR
// break ;
15164: GO 15168
// end ; end ;
15166: GO 15105
15168: POP
15169: POP
// end ; end ;
15170: GO 14969
15172: POP
15173: POP
// if result and not asc then
15174: LD_VAR 0 6
15178: PUSH
15179: LD_VAR 0 4
15183: NOT
15184: AND
15185: IFFALSE 15260
// begin tmp := result ;
15187: LD_ADDR_VAR 0 9
15191: PUSH
15192: LD_VAR 0 6
15196: ST_TO_ADDR
// for i = tmp downto 1 do
15197: LD_ADDR_VAR 0 7
15201: PUSH
15202: DOUBLE
15203: LD_VAR 0 9
15207: INC
15208: ST_TO_ADDR
15209: LD_INT 1
15211: PUSH
15212: FOR_DOWNTO
15213: IFFALSE 15258
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15215: LD_ADDR_VAR 0 6
15219: PUSH
15220: LD_VAR 0 6
15224: PPUSH
15225: LD_VAR 0 9
15229: PUSH
15230: LD_VAR 0 7
15234: MINUS
15235: PUSH
15236: LD_INT 1
15238: PLUS
15239: PPUSH
15240: LD_VAR 0 9
15244: PUSH
15245: LD_VAR 0 7
15249: ARRAY
15250: PPUSH
15251: CALL_OW 1
15255: ST_TO_ADDR
15256: GO 15212
15258: POP
15259: POP
// end ; tmp := [ ] ;
15260: LD_ADDR_VAR 0 9
15264: PUSH
15265: EMPTY
15266: ST_TO_ADDR
// if mode then
15267: LD_VAR 0 5
15271: IFFALSE 15340
// begin for i = 1 to result do
15273: LD_ADDR_VAR 0 7
15277: PUSH
15278: DOUBLE
15279: LD_INT 1
15281: DEC
15282: ST_TO_ADDR
15283: LD_VAR 0 6
15287: PUSH
15288: FOR_TO
15289: IFFALSE 15328
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15291: LD_ADDR_VAR 0 9
15295: PUSH
15296: LD_VAR 0 9
15300: PPUSH
15301: LD_VAR 0 7
15305: PPUSH
15306: LD_VAR 0 6
15310: PUSH
15311: LD_VAR 0 7
15315: ARRAY
15316: PUSH
15317: LD_INT 1
15319: ARRAY
15320: PPUSH
15321: CALL_OW 1
15325: ST_TO_ADDR
15326: GO 15288
15328: POP
15329: POP
// result := tmp ;
15330: LD_ADDR_VAR 0 6
15334: PUSH
15335: LD_VAR 0 9
15339: ST_TO_ADDR
// end ; end ;
15340: LD_VAR 0 6
15344: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15345: LD_INT 0
15347: PPUSH
15348: PPUSH
15349: PPUSH
15350: PPUSH
15351: PPUSH
15352: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15353: LD_ADDR_VAR 0 5
15357: PUSH
15358: LD_INT 0
15360: PUSH
15361: LD_INT 0
15363: PUSH
15364: LD_INT 0
15366: PUSH
15367: EMPTY
15368: PUSH
15369: EMPTY
15370: LIST
15371: LIST
15372: LIST
15373: LIST
15374: ST_TO_ADDR
// if not x or not y then
15375: LD_VAR 0 2
15379: NOT
15380: PUSH
15381: LD_VAR 0 3
15385: NOT
15386: OR
15387: IFFALSE 15391
// exit ;
15389: GO 17043
// if not range then
15391: LD_VAR 0 4
15395: NOT
15396: IFFALSE 15406
// range := 10 ;
15398: LD_ADDR_VAR 0 4
15402: PUSH
15403: LD_INT 10
15405: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15406: LD_ADDR_VAR 0 8
15410: PUSH
15411: LD_INT 81
15413: PUSH
15414: LD_VAR 0 1
15418: PUSH
15419: EMPTY
15420: LIST
15421: LIST
15422: PUSH
15423: LD_INT 92
15425: PUSH
15426: LD_VAR 0 2
15430: PUSH
15431: LD_VAR 0 3
15435: PUSH
15436: LD_VAR 0 4
15440: PUSH
15441: EMPTY
15442: LIST
15443: LIST
15444: LIST
15445: LIST
15446: PUSH
15447: LD_INT 3
15449: PUSH
15450: LD_INT 21
15452: PUSH
15453: LD_INT 3
15455: PUSH
15456: EMPTY
15457: LIST
15458: LIST
15459: PUSH
15460: EMPTY
15461: LIST
15462: LIST
15463: PUSH
15464: EMPTY
15465: LIST
15466: LIST
15467: LIST
15468: PPUSH
15469: CALL_OW 69
15473: ST_TO_ADDR
// if not tmp then
15474: LD_VAR 0 8
15478: NOT
15479: IFFALSE 15483
// exit ;
15481: GO 17043
// for i in tmp do
15483: LD_ADDR_VAR 0 6
15487: PUSH
15488: LD_VAR 0 8
15492: PUSH
15493: FOR_IN
15494: IFFALSE 17018
// begin points := [ 0 , 0 , 0 ] ;
15496: LD_ADDR_VAR 0 9
15500: PUSH
15501: LD_INT 0
15503: PUSH
15504: LD_INT 0
15506: PUSH
15507: LD_INT 0
15509: PUSH
15510: EMPTY
15511: LIST
15512: LIST
15513: LIST
15514: ST_TO_ADDR
// bpoints := 1 ;
15515: LD_ADDR_VAR 0 10
15519: PUSH
15520: LD_INT 1
15522: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15523: LD_VAR 0 6
15527: PPUSH
15528: CALL_OW 247
15532: PUSH
15533: LD_INT 1
15535: DOUBLE
15536: EQUAL
15537: IFTRUE 15541
15539: GO 16119
15541: POP
// begin if GetClass ( i ) = 1 then
15542: LD_VAR 0 6
15546: PPUSH
15547: CALL_OW 257
15551: PUSH
15552: LD_INT 1
15554: EQUAL
15555: IFFALSE 15576
// points := [ 10 , 5 , 3 ] ;
15557: LD_ADDR_VAR 0 9
15561: PUSH
15562: LD_INT 10
15564: PUSH
15565: LD_INT 5
15567: PUSH
15568: LD_INT 3
15570: PUSH
15571: EMPTY
15572: LIST
15573: LIST
15574: LIST
15575: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15576: LD_VAR 0 6
15580: PPUSH
15581: CALL_OW 257
15585: PUSH
15586: LD_INT 2
15588: PUSH
15589: LD_INT 3
15591: PUSH
15592: LD_INT 4
15594: PUSH
15595: EMPTY
15596: LIST
15597: LIST
15598: LIST
15599: IN
15600: IFFALSE 15621
// points := [ 3 , 2 , 1 ] ;
15602: LD_ADDR_VAR 0 9
15606: PUSH
15607: LD_INT 3
15609: PUSH
15610: LD_INT 2
15612: PUSH
15613: LD_INT 1
15615: PUSH
15616: EMPTY
15617: LIST
15618: LIST
15619: LIST
15620: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15621: LD_VAR 0 6
15625: PPUSH
15626: CALL_OW 257
15630: PUSH
15631: LD_INT 5
15633: EQUAL
15634: IFFALSE 15655
// points := [ 130 , 5 , 2 ] ;
15636: LD_ADDR_VAR 0 9
15640: PUSH
15641: LD_INT 130
15643: PUSH
15644: LD_INT 5
15646: PUSH
15647: LD_INT 2
15649: PUSH
15650: EMPTY
15651: LIST
15652: LIST
15653: LIST
15654: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15655: LD_VAR 0 6
15659: PPUSH
15660: CALL_OW 257
15664: PUSH
15665: LD_INT 8
15667: EQUAL
15668: IFFALSE 15689
// points := [ 35 , 35 , 30 ] ;
15670: LD_ADDR_VAR 0 9
15674: PUSH
15675: LD_INT 35
15677: PUSH
15678: LD_INT 35
15680: PUSH
15681: LD_INT 30
15683: PUSH
15684: EMPTY
15685: LIST
15686: LIST
15687: LIST
15688: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15689: LD_VAR 0 6
15693: PPUSH
15694: CALL_OW 257
15698: PUSH
15699: LD_INT 9
15701: EQUAL
15702: IFFALSE 15723
// points := [ 20 , 55 , 40 ] ;
15704: LD_ADDR_VAR 0 9
15708: PUSH
15709: LD_INT 20
15711: PUSH
15712: LD_INT 55
15714: PUSH
15715: LD_INT 40
15717: PUSH
15718: EMPTY
15719: LIST
15720: LIST
15721: LIST
15722: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15723: LD_VAR 0 6
15727: PPUSH
15728: CALL_OW 257
15732: PUSH
15733: LD_INT 12
15735: PUSH
15736: LD_INT 16
15738: PUSH
15739: EMPTY
15740: LIST
15741: LIST
15742: IN
15743: IFFALSE 15764
// points := [ 5 , 3 , 2 ] ;
15745: LD_ADDR_VAR 0 9
15749: PUSH
15750: LD_INT 5
15752: PUSH
15753: LD_INT 3
15755: PUSH
15756: LD_INT 2
15758: PUSH
15759: EMPTY
15760: LIST
15761: LIST
15762: LIST
15763: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15764: LD_VAR 0 6
15768: PPUSH
15769: CALL_OW 257
15773: PUSH
15774: LD_INT 17
15776: EQUAL
15777: IFFALSE 15798
// points := [ 100 , 50 , 75 ] ;
15779: LD_ADDR_VAR 0 9
15783: PUSH
15784: LD_INT 100
15786: PUSH
15787: LD_INT 50
15789: PUSH
15790: LD_INT 75
15792: PUSH
15793: EMPTY
15794: LIST
15795: LIST
15796: LIST
15797: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15798: LD_VAR 0 6
15802: PPUSH
15803: CALL_OW 257
15807: PUSH
15808: LD_INT 15
15810: EQUAL
15811: IFFALSE 15832
// points := [ 10 , 5 , 3 ] ;
15813: LD_ADDR_VAR 0 9
15817: PUSH
15818: LD_INT 10
15820: PUSH
15821: LD_INT 5
15823: PUSH
15824: LD_INT 3
15826: PUSH
15827: EMPTY
15828: LIST
15829: LIST
15830: LIST
15831: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15832: LD_VAR 0 6
15836: PPUSH
15837: CALL_OW 257
15841: PUSH
15842: LD_INT 14
15844: EQUAL
15845: IFFALSE 15866
// points := [ 10 , 0 , 0 ] ;
15847: LD_ADDR_VAR 0 9
15851: PUSH
15852: LD_INT 10
15854: PUSH
15855: LD_INT 0
15857: PUSH
15858: LD_INT 0
15860: PUSH
15861: EMPTY
15862: LIST
15863: LIST
15864: LIST
15865: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15866: LD_VAR 0 6
15870: PPUSH
15871: CALL_OW 257
15875: PUSH
15876: LD_INT 11
15878: EQUAL
15879: IFFALSE 15900
// points := [ 30 , 10 , 5 ] ;
15881: LD_ADDR_VAR 0 9
15885: PUSH
15886: LD_INT 30
15888: PUSH
15889: LD_INT 10
15891: PUSH
15892: LD_INT 5
15894: PUSH
15895: EMPTY
15896: LIST
15897: LIST
15898: LIST
15899: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15900: LD_VAR 0 1
15904: PPUSH
15905: LD_INT 5
15907: PPUSH
15908: CALL_OW 321
15912: PUSH
15913: LD_INT 2
15915: EQUAL
15916: IFFALSE 15933
// bpoints := bpoints * 1.8 ;
15918: LD_ADDR_VAR 0 10
15922: PUSH
15923: LD_VAR 0 10
15927: PUSH
15928: LD_REAL  1.80000000000000E+0000
15931: MUL
15932: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15933: LD_VAR 0 6
15937: PPUSH
15938: CALL_OW 257
15942: PUSH
15943: LD_INT 1
15945: PUSH
15946: LD_INT 2
15948: PUSH
15949: LD_INT 3
15951: PUSH
15952: LD_INT 4
15954: PUSH
15955: EMPTY
15956: LIST
15957: LIST
15958: LIST
15959: LIST
15960: IN
15961: PUSH
15962: LD_VAR 0 1
15966: PPUSH
15967: LD_INT 51
15969: PPUSH
15970: CALL_OW 321
15974: PUSH
15975: LD_INT 2
15977: EQUAL
15978: AND
15979: IFFALSE 15996
// bpoints := bpoints * 1.2 ;
15981: LD_ADDR_VAR 0 10
15985: PUSH
15986: LD_VAR 0 10
15990: PUSH
15991: LD_REAL  1.20000000000000E+0000
15994: MUL
15995: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15996: LD_VAR 0 6
16000: PPUSH
16001: CALL_OW 257
16005: PUSH
16006: LD_INT 5
16008: PUSH
16009: LD_INT 7
16011: PUSH
16012: LD_INT 9
16014: PUSH
16015: EMPTY
16016: LIST
16017: LIST
16018: LIST
16019: IN
16020: PUSH
16021: LD_VAR 0 1
16025: PPUSH
16026: LD_INT 52
16028: PPUSH
16029: CALL_OW 321
16033: PUSH
16034: LD_INT 2
16036: EQUAL
16037: AND
16038: IFFALSE 16055
// bpoints := bpoints * 1.5 ;
16040: LD_ADDR_VAR 0 10
16044: PUSH
16045: LD_VAR 0 10
16049: PUSH
16050: LD_REAL  1.50000000000000E+0000
16053: MUL
16054: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
16055: LD_VAR 0 1
16059: PPUSH
16060: LD_INT 66
16062: PPUSH
16063: CALL_OW 321
16067: PUSH
16068: LD_INT 2
16070: EQUAL
16071: IFFALSE 16088
// bpoints := bpoints * 1.1 ;
16073: LD_ADDR_VAR 0 10
16077: PUSH
16078: LD_VAR 0 10
16082: PUSH
16083: LD_REAL  1.10000000000000E+0000
16086: MUL
16087: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
16088: LD_ADDR_VAR 0 10
16092: PUSH
16093: LD_VAR 0 10
16097: PUSH
16098: LD_VAR 0 6
16102: PPUSH
16103: LD_INT 1
16105: PPUSH
16106: CALL_OW 259
16110: PUSH
16111: LD_REAL  1.15000000000000E+0000
16114: MUL
16115: MUL
16116: ST_TO_ADDR
// end ; unit_vehicle :
16117: GO 16947
16119: LD_INT 2
16121: DOUBLE
16122: EQUAL
16123: IFTRUE 16127
16125: GO 16935
16127: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
16128: LD_VAR 0 6
16132: PPUSH
16133: CALL_OW 264
16137: PUSH
16138: LD_INT 2
16140: PUSH
16141: LD_INT 42
16143: PUSH
16144: LD_INT 24
16146: PUSH
16147: EMPTY
16148: LIST
16149: LIST
16150: LIST
16151: IN
16152: IFFALSE 16173
// points := [ 25 , 5 , 3 ] ;
16154: LD_ADDR_VAR 0 9
16158: PUSH
16159: LD_INT 25
16161: PUSH
16162: LD_INT 5
16164: PUSH
16165: LD_INT 3
16167: PUSH
16168: EMPTY
16169: LIST
16170: LIST
16171: LIST
16172: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16173: LD_VAR 0 6
16177: PPUSH
16178: CALL_OW 264
16182: PUSH
16183: LD_INT 4
16185: PUSH
16186: LD_INT 43
16188: PUSH
16189: LD_INT 25
16191: PUSH
16192: EMPTY
16193: LIST
16194: LIST
16195: LIST
16196: IN
16197: IFFALSE 16218
// points := [ 40 , 15 , 5 ] ;
16199: LD_ADDR_VAR 0 9
16203: PUSH
16204: LD_INT 40
16206: PUSH
16207: LD_INT 15
16209: PUSH
16210: LD_INT 5
16212: PUSH
16213: EMPTY
16214: LIST
16215: LIST
16216: LIST
16217: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16218: LD_VAR 0 6
16222: PPUSH
16223: CALL_OW 264
16227: PUSH
16228: LD_INT 3
16230: PUSH
16231: LD_INT 23
16233: PUSH
16234: EMPTY
16235: LIST
16236: LIST
16237: IN
16238: IFFALSE 16259
// points := [ 7 , 25 , 8 ] ;
16240: LD_ADDR_VAR 0 9
16244: PUSH
16245: LD_INT 7
16247: PUSH
16248: LD_INT 25
16250: PUSH
16251: LD_INT 8
16253: PUSH
16254: EMPTY
16255: LIST
16256: LIST
16257: LIST
16258: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16259: LD_VAR 0 6
16263: PPUSH
16264: CALL_OW 264
16268: PUSH
16269: LD_INT 5
16271: PUSH
16272: LD_INT 27
16274: PUSH
16275: LD_INT 44
16277: PUSH
16278: EMPTY
16279: LIST
16280: LIST
16281: LIST
16282: IN
16283: IFFALSE 16304
// points := [ 14 , 50 , 16 ] ;
16285: LD_ADDR_VAR 0 9
16289: PUSH
16290: LD_INT 14
16292: PUSH
16293: LD_INT 50
16295: PUSH
16296: LD_INT 16
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16304: LD_VAR 0 6
16308: PPUSH
16309: CALL_OW 264
16313: PUSH
16314: LD_INT 6
16316: PUSH
16317: LD_INT 46
16319: PUSH
16320: EMPTY
16321: LIST
16322: LIST
16323: IN
16324: IFFALSE 16345
// points := [ 32 , 120 , 70 ] ;
16326: LD_ADDR_VAR 0 9
16330: PUSH
16331: LD_INT 32
16333: PUSH
16334: LD_INT 120
16336: PUSH
16337: LD_INT 70
16339: PUSH
16340: EMPTY
16341: LIST
16342: LIST
16343: LIST
16344: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16345: LD_VAR 0 6
16349: PPUSH
16350: CALL_OW 264
16354: PUSH
16355: LD_INT 7
16357: PUSH
16358: LD_INT 28
16360: PUSH
16361: LD_INT 45
16363: PUSH
16364: LD_EXP 67
16368: PUSH
16369: EMPTY
16370: LIST
16371: LIST
16372: LIST
16373: LIST
16374: IN
16375: IFFALSE 16396
// points := [ 35 , 20 , 45 ] ;
16377: LD_ADDR_VAR 0 9
16381: PUSH
16382: LD_INT 35
16384: PUSH
16385: LD_INT 20
16387: PUSH
16388: LD_INT 45
16390: PUSH
16391: EMPTY
16392: LIST
16393: LIST
16394: LIST
16395: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16396: LD_VAR 0 6
16400: PPUSH
16401: CALL_OW 264
16405: PUSH
16406: LD_INT 47
16408: PUSH
16409: EMPTY
16410: LIST
16411: IN
16412: IFFALSE 16433
// points := [ 67 , 45 , 75 ] ;
16414: LD_ADDR_VAR 0 9
16418: PUSH
16419: LD_INT 67
16421: PUSH
16422: LD_INT 45
16424: PUSH
16425: LD_INT 75
16427: PUSH
16428: EMPTY
16429: LIST
16430: LIST
16431: LIST
16432: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16433: LD_VAR 0 6
16437: PPUSH
16438: CALL_OW 264
16442: PUSH
16443: LD_INT 26
16445: PUSH
16446: EMPTY
16447: LIST
16448: IN
16449: IFFALSE 16470
// points := [ 120 , 30 , 80 ] ;
16451: LD_ADDR_VAR 0 9
16455: PUSH
16456: LD_INT 120
16458: PUSH
16459: LD_INT 30
16461: PUSH
16462: LD_INT 80
16464: PUSH
16465: EMPTY
16466: LIST
16467: LIST
16468: LIST
16469: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16470: LD_VAR 0 6
16474: PPUSH
16475: CALL_OW 264
16479: PUSH
16480: LD_INT 22
16482: PUSH
16483: EMPTY
16484: LIST
16485: IN
16486: IFFALSE 16507
// points := [ 40 , 1 , 1 ] ;
16488: LD_ADDR_VAR 0 9
16492: PUSH
16493: LD_INT 40
16495: PUSH
16496: LD_INT 1
16498: PUSH
16499: LD_INT 1
16501: PUSH
16502: EMPTY
16503: LIST
16504: LIST
16505: LIST
16506: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16507: LD_VAR 0 6
16511: PPUSH
16512: CALL_OW 264
16516: PUSH
16517: LD_INT 29
16519: PUSH
16520: EMPTY
16521: LIST
16522: IN
16523: IFFALSE 16544
// points := [ 70 , 200 , 400 ] ;
16525: LD_ADDR_VAR 0 9
16529: PUSH
16530: LD_INT 70
16532: PUSH
16533: LD_INT 200
16535: PUSH
16536: LD_INT 400
16538: PUSH
16539: EMPTY
16540: LIST
16541: LIST
16542: LIST
16543: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16544: LD_VAR 0 6
16548: PPUSH
16549: CALL_OW 264
16553: PUSH
16554: LD_INT 14
16556: PUSH
16557: LD_INT 53
16559: PUSH
16560: EMPTY
16561: LIST
16562: LIST
16563: IN
16564: IFFALSE 16585
// points := [ 40 , 10 , 20 ] ;
16566: LD_ADDR_VAR 0 9
16570: PUSH
16571: LD_INT 40
16573: PUSH
16574: LD_INT 10
16576: PUSH
16577: LD_INT 20
16579: PUSH
16580: EMPTY
16581: LIST
16582: LIST
16583: LIST
16584: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16585: LD_VAR 0 6
16589: PPUSH
16590: CALL_OW 264
16594: PUSH
16595: LD_INT 9
16597: PUSH
16598: EMPTY
16599: LIST
16600: IN
16601: IFFALSE 16622
// points := [ 5 , 70 , 20 ] ;
16603: LD_ADDR_VAR 0 9
16607: PUSH
16608: LD_INT 5
16610: PUSH
16611: LD_INT 70
16613: PUSH
16614: LD_INT 20
16616: PUSH
16617: EMPTY
16618: LIST
16619: LIST
16620: LIST
16621: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16622: LD_VAR 0 6
16626: PPUSH
16627: CALL_OW 264
16631: PUSH
16632: LD_INT 10
16634: PUSH
16635: EMPTY
16636: LIST
16637: IN
16638: IFFALSE 16659
// points := [ 35 , 110 , 70 ] ;
16640: LD_ADDR_VAR 0 9
16644: PUSH
16645: LD_INT 35
16647: PUSH
16648: LD_INT 110
16650: PUSH
16651: LD_INT 70
16653: PUSH
16654: EMPTY
16655: LIST
16656: LIST
16657: LIST
16658: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16659: LD_VAR 0 6
16663: PPUSH
16664: CALL_OW 265
16668: PUSH
16669: LD_INT 25
16671: EQUAL
16672: IFFALSE 16693
// points := [ 80 , 65 , 100 ] ;
16674: LD_ADDR_VAR 0 9
16678: PUSH
16679: LD_INT 80
16681: PUSH
16682: LD_INT 65
16684: PUSH
16685: LD_INT 100
16687: PUSH
16688: EMPTY
16689: LIST
16690: LIST
16691: LIST
16692: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16693: LD_VAR 0 6
16697: PPUSH
16698: CALL_OW 263
16702: PUSH
16703: LD_INT 1
16705: EQUAL
16706: IFFALSE 16741
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16708: LD_ADDR_VAR 0 10
16712: PUSH
16713: LD_VAR 0 10
16717: PUSH
16718: LD_VAR 0 6
16722: PPUSH
16723: CALL_OW 311
16727: PPUSH
16728: LD_INT 3
16730: PPUSH
16731: CALL_OW 259
16735: PUSH
16736: LD_INT 4
16738: MUL
16739: MUL
16740: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16741: LD_VAR 0 6
16745: PPUSH
16746: CALL_OW 263
16750: PUSH
16751: LD_INT 2
16753: EQUAL
16754: IFFALSE 16805
// begin j := IsControledBy ( i ) ;
16756: LD_ADDR_VAR 0 7
16760: PUSH
16761: LD_VAR 0 6
16765: PPUSH
16766: CALL_OW 312
16770: ST_TO_ADDR
// if j then
16771: LD_VAR 0 7
16775: IFFALSE 16805
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16777: LD_ADDR_VAR 0 10
16781: PUSH
16782: LD_VAR 0 10
16786: PUSH
16787: LD_VAR 0 7
16791: PPUSH
16792: LD_INT 3
16794: PPUSH
16795: CALL_OW 259
16799: PUSH
16800: LD_INT 3
16802: MUL
16803: MUL
16804: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16805: LD_VAR 0 6
16809: PPUSH
16810: CALL_OW 264
16814: PUSH
16815: LD_INT 5
16817: PUSH
16818: LD_INT 6
16820: PUSH
16821: LD_INT 46
16823: PUSH
16824: LD_INT 44
16826: PUSH
16827: LD_INT 47
16829: PUSH
16830: LD_INT 45
16832: PUSH
16833: LD_INT 28
16835: PUSH
16836: LD_INT 7
16838: PUSH
16839: LD_INT 27
16841: PUSH
16842: LD_INT 29
16844: PUSH
16845: EMPTY
16846: LIST
16847: LIST
16848: LIST
16849: LIST
16850: LIST
16851: LIST
16852: LIST
16853: LIST
16854: LIST
16855: LIST
16856: IN
16857: PUSH
16858: LD_VAR 0 1
16862: PPUSH
16863: LD_INT 52
16865: PPUSH
16866: CALL_OW 321
16870: PUSH
16871: LD_INT 2
16873: EQUAL
16874: AND
16875: IFFALSE 16892
// bpoints := bpoints * 1.2 ;
16877: LD_ADDR_VAR 0 10
16881: PUSH
16882: LD_VAR 0 10
16886: PUSH
16887: LD_REAL  1.20000000000000E+0000
16890: MUL
16891: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16892: LD_VAR 0 6
16896: PPUSH
16897: CALL_OW 264
16901: PUSH
16902: LD_INT 6
16904: PUSH
16905: LD_INT 46
16907: PUSH
16908: LD_INT 47
16910: PUSH
16911: EMPTY
16912: LIST
16913: LIST
16914: LIST
16915: IN
16916: IFFALSE 16933
// bpoints := bpoints * 1.2 ;
16918: LD_ADDR_VAR 0 10
16922: PUSH
16923: LD_VAR 0 10
16927: PUSH
16928: LD_REAL  1.20000000000000E+0000
16931: MUL
16932: ST_TO_ADDR
// end ; unit_building :
16933: GO 16947
16935: LD_INT 3
16937: DOUBLE
16938: EQUAL
16939: IFTRUE 16943
16941: GO 16946
16943: POP
// ; end ;
16944: GO 16947
16946: POP
// for j = 1 to 3 do
16947: LD_ADDR_VAR 0 7
16951: PUSH
16952: DOUBLE
16953: LD_INT 1
16955: DEC
16956: ST_TO_ADDR
16957: LD_INT 3
16959: PUSH
16960: FOR_TO
16961: IFFALSE 17014
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16963: LD_ADDR_VAR 0 5
16967: PUSH
16968: LD_VAR 0 5
16972: PPUSH
16973: LD_VAR 0 7
16977: PPUSH
16978: LD_VAR 0 5
16982: PUSH
16983: LD_VAR 0 7
16987: ARRAY
16988: PUSH
16989: LD_VAR 0 9
16993: PUSH
16994: LD_VAR 0 7
16998: ARRAY
16999: PUSH
17000: LD_VAR 0 10
17004: MUL
17005: PLUS
17006: PPUSH
17007: CALL_OW 1
17011: ST_TO_ADDR
17012: GO 16960
17014: POP
17015: POP
// end ;
17016: GO 15493
17018: POP
17019: POP
// result := Replace ( result , 4 , tmp ) ;
17020: LD_ADDR_VAR 0 5
17024: PUSH
17025: LD_VAR 0 5
17029: PPUSH
17030: LD_INT 4
17032: PPUSH
17033: LD_VAR 0 8
17037: PPUSH
17038: CALL_OW 1
17042: ST_TO_ADDR
// end ;
17043: LD_VAR 0 5
17047: RET
// export function DangerAtRange ( unit , range ) ; begin
17048: LD_INT 0
17050: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
17051: LD_ADDR_VAR 0 3
17055: PUSH
17056: LD_VAR 0 1
17060: PPUSH
17061: CALL_OW 255
17065: PPUSH
17066: LD_VAR 0 1
17070: PPUSH
17071: CALL_OW 250
17075: PPUSH
17076: LD_VAR 0 1
17080: PPUSH
17081: CALL_OW 251
17085: PPUSH
17086: LD_VAR 0 2
17090: PPUSH
17091: CALL 15345 0 4
17095: ST_TO_ADDR
// end ;
17096: LD_VAR 0 3
17100: RET
// export function DangerInArea ( side , area ) ; begin
17101: LD_INT 0
17103: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
17104: LD_ADDR_VAR 0 3
17108: PUSH
17109: LD_VAR 0 2
17113: PPUSH
17114: LD_INT 81
17116: PUSH
17117: LD_VAR 0 1
17121: PUSH
17122: EMPTY
17123: LIST
17124: LIST
17125: PPUSH
17126: CALL_OW 70
17130: ST_TO_ADDR
// end ;
17131: LD_VAR 0 3
17135: RET
// export function IsExtension ( b ) ; begin
17136: LD_INT 0
17138: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
17139: LD_ADDR_VAR 0 2
17143: PUSH
17144: LD_VAR 0 1
17148: PUSH
17149: LD_INT 23
17151: PUSH
17152: LD_INT 20
17154: PUSH
17155: LD_INT 22
17157: PUSH
17158: LD_INT 17
17160: PUSH
17161: LD_INT 24
17163: PUSH
17164: LD_INT 21
17166: PUSH
17167: LD_INT 19
17169: PUSH
17170: LD_INT 16
17172: PUSH
17173: LD_INT 25
17175: PUSH
17176: LD_INT 18
17178: PUSH
17179: EMPTY
17180: LIST
17181: LIST
17182: LIST
17183: LIST
17184: LIST
17185: LIST
17186: LIST
17187: LIST
17188: LIST
17189: LIST
17190: IN
17191: ST_TO_ADDR
// end ;
17192: LD_VAR 0 2
17196: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17197: LD_INT 0
17199: PPUSH
17200: PPUSH
17201: PPUSH
// result := [ ] ;
17202: LD_ADDR_VAR 0 4
17206: PUSH
17207: EMPTY
17208: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17209: LD_ADDR_VAR 0 5
17213: PUSH
17214: LD_VAR 0 2
17218: PPUSH
17219: LD_INT 21
17221: PUSH
17222: LD_INT 3
17224: PUSH
17225: EMPTY
17226: LIST
17227: LIST
17228: PPUSH
17229: CALL_OW 70
17233: ST_TO_ADDR
// if not tmp then
17234: LD_VAR 0 5
17238: NOT
17239: IFFALSE 17243
// exit ;
17241: GO 17307
// if checkLink then
17243: LD_VAR 0 3
17247: IFFALSE 17297
// begin for i in tmp do
17249: LD_ADDR_VAR 0 6
17253: PUSH
17254: LD_VAR 0 5
17258: PUSH
17259: FOR_IN
17260: IFFALSE 17295
// if GetBase ( i ) <> base then
17262: LD_VAR 0 6
17266: PPUSH
17267: CALL_OW 274
17271: PUSH
17272: LD_VAR 0 1
17276: NONEQUAL
17277: IFFALSE 17293
// ComLinkToBase ( base , i ) ;
17279: LD_VAR 0 1
17283: PPUSH
17284: LD_VAR 0 6
17288: PPUSH
17289: CALL_OW 169
17293: GO 17259
17295: POP
17296: POP
// end ; result := tmp ;
17297: LD_ADDR_VAR 0 4
17301: PUSH
17302: LD_VAR 0 5
17306: ST_TO_ADDR
// end ;
17307: LD_VAR 0 4
17311: RET
// export function ComComplete ( units , b ) ; var i ; begin
17312: LD_INT 0
17314: PPUSH
17315: PPUSH
// if not units then
17316: LD_VAR 0 1
17320: NOT
17321: IFFALSE 17325
// exit ;
17323: GO 17415
// for i in units do
17325: LD_ADDR_VAR 0 4
17329: PUSH
17330: LD_VAR 0 1
17334: PUSH
17335: FOR_IN
17336: IFFALSE 17413
// if BuildingStatus ( b ) = bs_build then
17338: LD_VAR 0 2
17342: PPUSH
17343: CALL_OW 461
17347: PUSH
17348: LD_INT 1
17350: EQUAL
17351: IFFALSE 17411
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17353: LD_VAR 0 4
17357: PPUSH
17358: LD_STRING h
17360: PUSH
17361: LD_VAR 0 2
17365: PPUSH
17366: CALL_OW 250
17370: PUSH
17371: LD_VAR 0 2
17375: PPUSH
17376: CALL_OW 251
17380: PUSH
17381: LD_VAR 0 2
17385: PUSH
17386: LD_INT 0
17388: PUSH
17389: LD_INT 0
17391: PUSH
17392: LD_INT 0
17394: PUSH
17395: EMPTY
17396: LIST
17397: LIST
17398: LIST
17399: LIST
17400: LIST
17401: LIST
17402: LIST
17403: PUSH
17404: EMPTY
17405: LIST
17406: PPUSH
17407: CALL_OW 446
17411: GO 17335
17413: POP
17414: POP
// end ;
17415: LD_VAR 0 3
17419: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17420: LD_INT 0
17422: PPUSH
17423: PPUSH
17424: PPUSH
17425: PPUSH
17426: PPUSH
17427: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17428: LD_VAR 0 1
17432: NOT
17433: PUSH
17434: LD_VAR 0 1
17438: PPUSH
17439: CALL_OW 263
17443: PUSH
17444: LD_INT 2
17446: NONEQUAL
17447: OR
17448: IFFALSE 17452
// exit ;
17450: GO 17768
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17452: LD_ADDR_VAR 0 6
17456: PUSH
17457: LD_INT 22
17459: PUSH
17460: LD_VAR 0 1
17464: PPUSH
17465: CALL_OW 255
17469: PUSH
17470: EMPTY
17471: LIST
17472: LIST
17473: PUSH
17474: LD_INT 2
17476: PUSH
17477: LD_INT 30
17479: PUSH
17480: LD_INT 36
17482: PUSH
17483: EMPTY
17484: LIST
17485: LIST
17486: PUSH
17487: LD_INT 34
17489: PUSH
17490: LD_INT 31
17492: PUSH
17493: EMPTY
17494: LIST
17495: LIST
17496: PUSH
17497: EMPTY
17498: LIST
17499: LIST
17500: LIST
17501: PUSH
17502: EMPTY
17503: LIST
17504: LIST
17505: PPUSH
17506: CALL_OW 69
17510: ST_TO_ADDR
// if not tmp then
17511: LD_VAR 0 6
17515: NOT
17516: IFFALSE 17520
// exit ;
17518: GO 17768
// result := [ ] ;
17520: LD_ADDR_VAR 0 2
17524: PUSH
17525: EMPTY
17526: ST_TO_ADDR
// for i in tmp do
17527: LD_ADDR_VAR 0 3
17531: PUSH
17532: LD_VAR 0 6
17536: PUSH
17537: FOR_IN
17538: IFFALSE 17609
// begin t := UnitsInside ( i ) ;
17540: LD_ADDR_VAR 0 4
17544: PUSH
17545: LD_VAR 0 3
17549: PPUSH
17550: CALL_OW 313
17554: ST_TO_ADDR
// if t then
17555: LD_VAR 0 4
17559: IFFALSE 17607
// for j in t do
17561: LD_ADDR_VAR 0 7
17565: PUSH
17566: LD_VAR 0 4
17570: PUSH
17571: FOR_IN
17572: IFFALSE 17605
// result := Replace ( result , result + 1 , j ) ;
17574: LD_ADDR_VAR 0 2
17578: PUSH
17579: LD_VAR 0 2
17583: PPUSH
17584: LD_VAR 0 2
17588: PUSH
17589: LD_INT 1
17591: PLUS
17592: PPUSH
17593: LD_VAR 0 7
17597: PPUSH
17598: CALL_OW 1
17602: ST_TO_ADDR
17603: GO 17571
17605: POP
17606: POP
// end ;
17607: GO 17537
17609: POP
17610: POP
// if not result then
17611: LD_VAR 0 2
17615: NOT
17616: IFFALSE 17620
// exit ;
17618: GO 17768
// mech := result [ 1 ] ;
17620: LD_ADDR_VAR 0 5
17624: PUSH
17625: LD_VAR 0 2
17629: PUSH
17630: LD_INT 1
17632: ARRAY
17633: ST_TO_ADDR
// if result > 1 then
17634: LD_VAR 0 2
17638: PUSH
17639: LD_INT 1
17641: GREATER
17642: IFFALSE 17754
// begin for i = 2 to result do
17644: LD_ADDR_VAR 0 3
17648: PUSH
17649: DOUBLE
17650: LD_INT 2
17652: DEC
17653: ST_TO_ADDR
17654: LD_VAR 0 2
17658: PUSH
17659: FOR_TO
17660: IFFALSE 17752
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17662: LD_ADDR_VAR 0 4
17666: PUSH
17667: LD_VAR 0 2
17671: PUSH
17672: LD_VAR 0 3
17676: ARRAY
17677: PPUSH
17678: LD_INT 3
17680: PPUSH
17681: CALL_OW 259
17685: PUSH
17686: LD_VAR 0 2
17690: PUSH
17691: LD_VAR 0 3
17695: ARRAY
17696: PPUSH
17697: CALL_OW 432
17701: MINUS
17702: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17703: LD_VAR 0 4
17707: PUSH
17708: LD_VAR 0 5
17712: PPUSH
17713: LD_INT 3
17715: PPUSH
17716: CALL_OW 259
17720: PUSH
17721: LD_VAR 0 5
17725: PPUSH
17726: CALL_OW 432
17730: MINUS
17731: GREATEREQUAL
17732: IFFALSE 17750
// mech := result [ i ] ;
17734: LD_ADDR_VAR 0 5
17738: PUSH
17739: LD_VAR 0 2
17743: PUSH
17744: LD_VAR 0 3
17748: ARRAY
17749: ST_TO_ADDR
// end ;
17750: GO 17659
17752: POP
17753: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17754: LD_VAR 0 1
17758: PPUSH
17759: LD_VAR 0 5
17763: PPUSH
17764: CALL_OW 135
// end ;
17768: LD_VAR 0 2
17772: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17773: LD_INT 0
17775: PPUSH
17776: PPUSH
17777: PPUSH
17778: PPUSH
17779: PPUSH
17780: PPUSH
17781: PPUSH
17782: PPUSH
17783: PPUSH
17784: PPUSH
17785: PPUSH
17786: PPUSH
17787: PPUSH
// result := [ ] ;
17788: LD_ADDR_VAR 0 7
17792: PUSH
17793: EMPTY
17794: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17795: LD_VAR 0 1
17799: PPUSH
17800: CALL_OW 266
17804: PUSH
17805: LD_INT 0
17807: PUSH
17808: LD_INT 1
17810: PUSH
17811: EMPTY
17812: LIST
17813: LIST
17814: IN
17815: NOT
17816: IFFALSE 17820
// exit ;
17818: GO 19454
// if name then
17820: LD_VAR 0 3
17824: IFFALSE 17840
// SetBName ( base_dep , name ) ;
17826: LD_VAR 0 1
17830: PPUSH
17831: LD_VAR 0 3
17835: PPUSH
17836: CALL_OW 500
// base := GetBase ( base_dep ) ;
17840: LD_ADDR_VAR 0 15
17844: PUSH
17845: LD_VAR 0 1
17849: PPUSH
17850: CALL_OW 274
17854: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17855: LD_ADDR_VAR 0 16
17859: PUSH
17860: LD_VAR 0 1
17864: PPUSH
17865: CALL_OW 255
17869: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17870: LD_ADDR_VAR 0 17
17874: PUSH
17875: LD_VAR 0 1
17879: PPUSH
17880: CALL_OW 248
17884: ST_TO_ADDR
// if sources then
17885: LD_VAR 0 5
17889: IFFALSE 17936
// for i = 1 to 3 do
17891: LD_ADDR_VAR 0 8
17895: PUSH
17896: DOUBLE
17897: LD_INT 1
17899: DEC
17900: ST_TO_ADDR
17901: LD_INT 3
17903: PUSH
17904: FOR_TO
17905: IFFALSE 17934
// AddResourceType ( base , i , sources [ i ] ) ;
17907: LD_VAR 0 15
17911: PPUSH
17912: LD_VAR 0 8
17916: PPUSH
17917: LD_VAR 0 5
17921: PUSH
17922: LD_VAR 0 8
17926: ARRAY
17927: PPUSH
17928: CALL_OW 276
17932: GO 17904
17934: POP
17935: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17936: LD_ADDR_VAR 0 18
17940: PUSH
17941: LD_VAR 0 15
17945: PPUSH
17946: LD_VAR 0 2
17950: PPUSH
17951: LD_INT 1
17953: PPUSH
17954: CALL 17197 0 3
17958: ST_TO_ADDR
// InitHc ;
17959: CALL_OW 19
// InitUc ;
17963: CALL_OW 18
// uc_side := side ;
17967: LD_ADDR_OWVAR 20
17971: PUSH
17972: LD_VAR 0 16
17976: ST_TO_ADDR
// uc_nation := nation ;
17977: LD_ADDR_OWVAR 21
17981: PUSH
17982: LD_VAR 0 17
17986: ST_TO_ADDR
// if buildings then
17987: LD_VAR 0 18
17991: IFFALSE 19313
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17993: LD_ADDR_VAR 0 19
17997: PUSH
17998: LD_VAR 0 18
18002: PPUSH
18003: LD_INT 2
18005: PUSH
18006: LD_INT 30
18008: PUSH
18009: LD_INT 29
18011: PUSH
18012: EMPTY
18013: LIST
18014: LIST
18015: PUSH
18016: LD_INT 30
18018: PUSH
18019: LD_INT 30
18021: PUSH
18022: EMPTY
18023: LIST
18024: LIST
18025: PUSH
18026: EMPTY
18027: LIST
18028: LIST
18029: LIST
18030: PPUSH
18031: CALL_OW 72
18035: ST_TO_ADDR
// if tmp then
18036: LD_VAR 0 19
18040: IFFALSE 18088
// for i in tmp do
18042: LD_ADDR_VAR 0 8
18046: PUSH
18047: LD_VAR 0 19
18051: PUSH
18052: FOR_IN
18053: IFFALSE 18086
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
18055: LD_VAR 0 8
18059: PPUSH
18060: CALL_OW 250
18064: PPUSH
18065: LD_VAR 0 8
18069: PPUSH
18070: CALL_OW 251
18074: PPUSH
18075: LD_VAR 0 16
18079: PPUSH
18080: CALL_OW 441
18084: GO 18052
18086: POP
18087: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
18088: LD_VAR 0 18
18092: PPUSH
18093: LD_INT 2
18095: PUSH
18096: LD_INT 30
18098: PUSH
18099: LD_INT 32
18101: PUSH
18102: EMPTY
18103: LIST
18104: LIST
18105: PUSH
18106: LD_INT 30
18108: PUSH
18109: LD_INT 33
18111: PUSH
18112: EMPTY
18113: LIST
18114: LIST
18115: PUSH
18116: EMPTY
18117: LIST
18118: LIST
18119: LIST
18120: PPUSH
18121: CALL_OW 72
18125: IFFALSE 18213
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
18127: LD_ADDR_VAR 0 8
18131: PUSH
18132: LD_VAR 0 18
18136: PPUSH
18137: LD_INT 2
18139: PUSH
18140: LD_INT 30
18142: PUSH
18143: LD_INT 32
18145: PUSH
18146: EMPTY
18147: LIST
18148: LIST
18149: PUSH
18150: LD_INT 30
18152: PUSH
18153: LD_INT 33
18155: PUSH
18156: EMPTY
18157: LIST
18158: LIST
18159: PUSH
18160: EMPTY
18161: LIST
18162: LIST
18163: LIST
18164: PPUSH
18165: CALL_OW 72
18169: PUSH
18170: FOR_IN
18171: IFFALSE 18211
// begin if not GetBWeapon ( i ) then
18173: LD_VAR 0 8
18177: PPUSH
18178: CALL_OW 269
18182: NOT
18183: IFFALSE 18209
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18185: LD_VAR 0 8
18189: PPUSH
18190: LD_VAR 0 8
18194: PPUSH
18195: LD_VAR 0 2
18199: PPUSH
18200: CALL 19459 0 2
18204: PPUSH
18205: CALL_OW 431
// end ;
18209: GO 18170
18211: POP
18212: POP
// end ; for i = 1 to personel do
18213: LD_ADDR_VAR 0 8
18217: PUSH
18218: DOUBLE
18219: LD_INT 1
18221: DEC
18222: ST_TO_ADDR
18223: LD_VAR 0 6
18227: PUSH
18228: FOR_TO
18229: IFFALSE 19293
// begin if i > 4 then
18231: LD_VAR 0 8
18235: PUSH
18236: LD_INT 4
18238: GREATER
18239: IFFALSE 18243
// break ;
18241: GO 19293
// case i of 1 :
18243: LD_VAR 0 8
18247: PUSH
18248: LD_INT 1
18250: DOUBLE
18251: EQUAL
18252: IFTRUE 18256
18254: GO 18336
18256: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18257: LD_ADDR_VAR 0 12
18261: PUSH
18262: LD_VAR 0 18
18266: PPUSH
18267: LD_INT 22
18269: PUSH
18270: LD_VAR 0 16
18274: PUSH
18275: EMPTY
18276: LIST
18277: LIST
18278: PUSH
18279: LD_INT 58
18281: PUSH
18282: EMPTY
18283: LIST
18284: PUSH
18285: LD_INT 2
18287: PUSH
18288: LD_INT 30
18290: PUSH
18291: LD_INT 32
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: PUSH
18298: LD_INT 30
18300: PUSH
18301: LD_INT 4
18303: PUSH
18304: EMPTY
18305: LIST
18306: LIST
18307: PUSH
18308: LD_INT 30
18310: PUSH
18311: LD_INT 5
18313: PUSH
18314: EMPTY
18315: LIST
18316: LIST
18317: PUSH
18318: EMPTY
18319: LIST
18320: LIST
18321: LIST
18322: LIST
18323: PUSH
18324: EMPTY
18325: LIST
18326: LIST
18327: LIST
18328: PPUSH
18329: CALL_OW 72
18333: ST_TO_ADDR
18334: GO 18558
18336: LD_INT 2
18338: DOUBLE
18339: EQUAL
18340: IFTRUE 18344
18342: GO 18406
18344: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18345: LD_ADDR_VAR 0 12
18349: PUSH
18350: LD_VAR 0 18
18354: PPUSH
18355: LD_INT 22
18357: PUSH
18358: LD_VAR 0 16
18362: PUSH
18363: EMPTY
18364: LIST
18365: LIST
18366: PUSH
18367: LD_INT 2
18369: PUSH
18370: LD_INT 30
18372: PUSH
18373: LD_INT 0
18375: PUSH
18376: EMPTY
18377: LIST
18378: LIST
18379: PUSH
18380: LD_INT 30
18382: PUSH
18383: LD_INT 1
18385: PUSH
18386: EMPTY
18387: LIST
18388: LIST
18389: PUSH
18390: EMPTY
18391: LIST
18392: LIST
18393: LIST
18394: PUSH
18395: EMPTY
18396: LIST
18397: LIST
18398: PPUSH
18399: CALL_OW 72
18403: ST_TO_ADDR
18404: GO 18558
18406: LD_INT 3
18408: DOUBLE
18409: EQUAL
18410: IFTRUE 18414
18412: GO 18476
18414: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18415: LD_ADDR_VAR 0 12
18419: PUSH
18420: LD_VAR 0 18
18424: PPUSH
18425: LD_INT 22
18427: PUSH
18428: LD_VAR 0 16
18432: PUSH
18433: EMPTY
18434: LIST
18435: LIST
18436: PUSH
18437: LD_INT 2
18439: PUSH
18440: LD_INT 30
18442: PUSH
18443: LD_INT 2
18445: PUSH
18446: EMPTY
18447: LIST
18448: LIST
18449: PUSH
18450: LD_INT 30
18452: PUSH
18453: LD_INT 3
18455: PUSH
18456: EMPTY
18457: LIST
18458: LIST
18459: PUSH
18460: EMPTY
18461: LIST
18462: LIST
18463: LIST
18464: PUSH
18465: EMPTY
18466: LIST
18467: LIST
18468: PPUSH
18469: CALL_OW 72
18473: ST_TO_ADDR
18474: GO 18558
18476: LD_INT 4
18478: DOUBLE
18479: EQUAL
18480: IFTRUE 18484
18482: GO 18557
18484: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18485: LD_ADDR_VAR 0 12
18489: PUSH
18490: LD_VAR 0 18
18494: PPUSH
18495: LD_INT 22
18497: PUSH
18498: LD_VAR 0 16
18502: PUSH
18503: EMPTY
18504: LIST
18505: LIST
18506: PUSH
18507: LD_INT 2
18509: PUSH
18510: LD_INT 30
18512: PUSH
18513: LD_INT 6
18515: PUSH
18516: EMPTY
18517: LIST
18518: LIST
18519: PUSH
18520: LD_INT 30
18522: PUSH
18523: LD_INT 7
18525: PUSH
18526: EMPTY
18527: LIST
18528: LIST
18529: PUSH
18530: LD_INT 30
18532: PUSH
18533: LD_INT 8
18535: PUSH
18536: EMPTY
18537: LIST
18538: LIST
18539: PUSH
18540: EMPTY
18541: LIST
18542: LIST
18543: LIST
18544: LIST
18545: PUSH
18546: EMPTY
18547: LIST
18548: LIST
18549: PPUSH
18550: CALL_OW 72
18554: ST_TO_ADDR
18555: GO 18558
18557: POP
// if i = 1 then
18558: LD_VAR 0 8
18562: PUSH
18563: LD_INT 1
18565: EQUAL
18566: IFFALSE 18677
// begin tmp := [ ] ;
18568: LD_ADDR_VAR 0 19
18572: PUSH
18573: EMPTY
18574: ST_TO_ADDR
// for j in f do
18575: LD_ADDR_VAR 0 9
18579: PUSH
18580: LD_VAR 0 12
18584: PUSH
18585: FOR_IN
18586: IFFALSE 18659
// if GetBType ( j ) = b_bunker then
18588: LD_VAR 0 9
18592: PPUSH
18593: CALL_OW 266
18597: PUSH
18598: LD_INT 32
18600: EQUAL
18601: IFFALSE 18628
// tmp := Insert ( tmp , 1 , j ) else
18603: LD_ADDR_VAR 0 19
18607: PUSH
18608: LD_VAR 0 19
18612: PPUSH
18613: LD_INT 1
18615: PPUSH
18616: LD_VAR 0 9
18620: PPUSH
18621: CALL_OW 2
18625: ST_TO_ADDR
18626: GO 18657
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18628: LD_ADDR_VAR 0 19
18632: PUSH
18633: LD_VAR 0 19
18637: PPUSH
18638: LD_VAR 0 19
18642: PUSH
18643: LD_INT 1
18645: PLUS
18646: PPUSH
18647: LD_VAR 0 9
18651: PPUSH
18652: CALL_OW 2
18656: ST_TO_ADDR
18657: GO 18585
18659: POP
18660: POP
// if tmp then
18661: LD_VAR 0 19
18665: IFFALSE 18677
// f := tmp ;
18667: LD_ADDR_VAR 0 12
18671: PUSH
18672: LD_VAR 0 19
18676: ST_TO_ADDR
// end ; x := personel [ i ] ;
18677: LD_ADDR_VAR 0 13
18681: PUSH
18682: LD_VAR 0 6
18686: PUSH
18687: LD_VAR 0 8
18691: ARRAY
18692: ST_TO_ADDR
// if x = - 1 then
18693: LD_VAR 0 13
18697: PUSH
18698: LD_INT 1
18700: NEG
18701: EQUAL
18702: IFFALSE 18911
// begin for j in f do
18704: LD_ADDR_VAR 0 9
18708: PUSH
18709: LD_VAR 0 12
18713: PUSH
18714: FOR_IN
18715: IFFALSE 18907
// repeat InitHc ;
18717: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18721: LD_VAR 0 9
18725: PPUSH
18726: CALL_OW 266
18730: PUSH
18731: LD_INT 5
18733: EQUAL
18734: IFFALSE 18804
// begin if UnitsInside ( j ) < 3 then
18736: LD_VAR 0 9
18740: PPUSH
18741: CALL_OW 313
18745: PUSH
18746: LD_INT 3
18748: LESS
18749: IFFALSE 18785
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18751: LD_INT 0
18753: PPUSH
18754: LD_INT 5
18756: PUSH
18757: LD_INT 8
18759: PUSH
18760: LD_INT 9
18762: PUSH
18763: EMPTY
18764: LIST
18765: LIST
18766: LIST
18767: PUSH
18768: LD_VAR 0 17
18772: ARRAY
18773: PPUSH
18774: LD_VAR 0 4
18778: PPUSH
18779: CALL_OW 380
18783: GO 18802
// PrepareHuman ( false , i , skill ) ;
18785: LD_INT 0
18787: PPUSH
18788: LD_VAR 0 8
18792: PPUSH
18793: LD_VAR 0 4
18797: PPUSH
18798: CALL_OW 380
// end else
18802: GO 18821
// PrepareHuman ( false , i , skill ) ;
18804: LD_INT 0
18806: PPUSH
18807: LD_VAR 0 8
18811: PPUSH
18812: LD_VAR 0 4
18816: PPUSH
18817: CALL_OW 380
// un := CreateHuman ;
18821: LD_ADDR_VAR 0 14
18825: PUSH
18826: CALL_OW 44
18830: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18831: LD_ADDR_VAR 0 7
18835: PUSH
18836: LD_VAR 0 7
18840: PPUSH
18841: LD_INT 1
18843: PPUSH
18844: LD_VAR 0 14
18848: PPUSH
18849: CALL_OW 2
18853: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18854: LD_VAR 0 14
18858: PPUSH
18859: LD_VAR 0 9
18863: PPUSH
18864: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18868: LD_VAR 0 9
18872: PPUSH
18873: CALL_OW 313
18877: PUSH
18878: LD_INT 6
18880: EQUAL
18881: PUSH
18882: LD_VAR 0 9
18886: PPUSH
18887: CALL_OW 266
18891: PUSH
18892: LD_INT 32
18894: PUSH
18895: LD_INT 31
18897: PUSH
18898: EMPTY
18899: LIST
18900: LIST
18901: IN
18902: OR
18903: IFFALSE 18717
18905: GO 18714
18907: POP
18908: POP
// end else
18909: GO 19291
// for j = 1 to x do
18911: LD_ADDR_VAR 0 9
18915: PUSH
18916: DOUBLE
18917: LD_INT 1
18919: DEC
18920: ST_TO_ADDR
18921: LD_VAR 0 13
18925: PUSH
18926: FOR_TO
18927: IFFALSE 19289
// begin InitHc ;
18929: CALL_OW 19
// if not f then
18933: LD_VAR 0 12
18937: NOT
18938: IFFALSE 19027
// begin PrepareHuman ( false , i , skill ) ;
18940: LD_INT 0
18942: PPUSH
18943: LD_VAR 0 8
18947: PPUSH
18948: LD_VAR 0 4
18952: PPUSH
18953: CALL_OW 380
// un := CreateHuman ;
18957: LD_ADDR_VAR 0 14
18961: PUSH
18962: CALL_OW 44
18966: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18967: LD_ADDR_VAR 0 7
18971: PUSH
18972: LD_VAR 0 7
18976: PPUSH
18977: LD_INT 1
18979: PPUSH
18980: LD_VAR 0 14
18984: PPUSH
18985: CALL_OW 2
18989: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18990: LD_VAR 0 14
18994: PPUSH
18995: LD_VAR 0 1
18999: PPUSH
19000: CALL_OW 250
19004: PPUSH
19005: LD_VAR 0 1
19009: PPUSH
19010: CALL_OW 251
19014: PPUSH
19015: LD_INT 10
19017: PPUSH
19018: LD_INT 0
19020: PPUSH
19021: CALL_OW 50
// continue ;
19025: GO 18926
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
19027: LD_VAR 0 12
19031: PUSH
19032: LD_INT 1
19034: ARRAY
19035: PPUSH
19036: CALL_OW 313
19040: PUSH
19041: LD_VAR 0 12
19045: PUSH
19046: LD_INT 1
19048: ARRAY
19049: PPUSH
19050: CALL_OW 266
19054: PUSH
19055: LD_INT 32
19057: PUSH
19058: LD_INT 31
19060: PUSH
19061: EMPTY
19062: LIST
19063: LIST
19064: IN
19065: AND
19066: PUSH
19067: LD_VAR 0 12
19071: PUSH
19072: LD_INT 1
19074: ARRAY
19075: PPUSH
19076: CALL_OW 313
19080: PUSH
19081: LD_INT 6
19083: EQUAL
19084: OR
19085: IFFALSE 19105
// f := Delete ( f , 1 ) ;
19087: LD_ADDR_VAR 0 12
19091: PUSH
19092: LD_VAR 0 12
19096: PPUSH
19097: LD_INT 1
19099: PPUSH
19100: CALL_OW 3
19104: ST_TO_ADDR
// if not f then
19105: LD_VAR 0 12
19109: NOT
19110: IFFALSE 19128
// begin x := x + 2 ;
19112: LD_ADDR_VAR 0 13
19116: PUSH
19117: LD_VAR 0 13
19121: PUSH
19122: LD_INT 2
19124: PLUS
19125: ST_TO_ADDR
// continue ;
19126: GO 18926
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
19128: LD_VAR 0 12
19132: PUSH
19133: LD_INT 1
19135: ARRAY
19136: PPUSH
19137: CALL_OW 266
19141: PUSH
19142: LD_INT 5
19144: EQUAL
19145: IFFALSE 19219
// begin if UnitsInside ( f [ 1 ] ) < 3 then
19147: LD_VAR 0 12
19151: PUSH
19152: LD_INT 1
19154: ARRAY
19155: PPUSH
19156: CALL_OW 313
19160: PUSH
19161: LD_INT 3
19163: LESS
19164: IFFALSE 19200
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19166: LD_INT 0
19168: PPUSH
19169: LD_INT 5
19171: PUSH
19172: LD_INT 8
19174: PUSH
19175: LD_INT 9
19177: PUSH
19178: EMPTY
19179: LIST
19180: LIST
19181: LIST
19182: PUSH
19183: LD_VAR 0 17
19187: ARRAY
19188: PPUSH
19189: LD_VAR 0 4
19193: PPUSH
19194: CALL_OW 380
19198: GO 19217
// PrepareHuman ( false , i , skill ) ;
19200: LD_INT 0
19202: PPUSH
19203: LD_VAR 0 8
19207: PPUSH
19208: LD_VAR 0 4
19212: PPUSH
19213: CALL_OW 380
// end else
19217: GO 19236
// PrepareHuman ( false , i , skill ) ;
19219: LD_INT 0
19221: PPUSH
19222: LD_VAR 0 8
19226: PPUSH
19227: LD_VAR 0 4
19231: PPUSH
19232: CALL_OW 380
// un := CreateHuman ;
19236: LD_ADDR_VAR 0 14
19240: PUSH
19241: CALL_OW 44
19245: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19246: LD_ADDR_VAR 0 7
19250: PUSH
19251: LD_VAR 0 7
19255: PPUSH
19256: LD_INT 1
19258: PPUSH
19259: LD_VAR 0 14
19263: PPUSH
19264: CALL_OW 2
19268: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19269: LD_VAR 0 14
19273: PPUSH
19274: LD_VAR 0 12
19278: PUSH
19279: LD_INT 1
19281: ARRAY
19282: PPUSH
19283: CALL_OW 52
// end ;
19287: GO 18926
19289: POP
19290: POP
// end ;
19291: GO 18228
19293: POP
19294: POP
// result := result ^ buildings ;
19295: LD_ADDR_VAR 0 7
19299: PUSH
19300: LD_VAR 0 7
19304: PUSH
19305: LD_VAR 0 18
19309: ADD
19310: ST_TO_ADDR
// end else
19311: GO 19454
// begin for i = 1 to personel do
19313: LD_ADDR_VAR 0 8
19317: PUSH
19318: DOUBLE
19319: LD_INT 1
19321: DEC
19322: ST_TO_ADDR
19323: LD_VAR 0 6
19327: PUSH
19328: FOR_TO
19329: IFFALSE 19452
// begin if i > 4 then
19331: LD_VAR 0 8
19335: PUSH
19336: LD_INT 4
19338: GREATER
19339: IFFALSE 19343
// break ;
19341: GO 19452
// x := personel [ i ] ;
19343: LD_ADDR_VAR 0 13
19347: PUSH
19348: LD_VAR 0 6
19352: PUSH
19353: LD_VAR 0 8
19357: ARRAY
19358: ST_TO_ADDR
// if x = - 1 then
19359: LD_VAR 0 13
19363: PUSH
19364: LD_INT 1
19366: NEG
19367: EQUAL
19368: IFFALSE 19372
// continue ;
19370: GO 19328
// PrepareHuman ( false , i , skill ) ;
19372: LD_INT 0
19374: PPUSH
19375: LD_VAR 0 8
19379: PPUSH
19380: LD_VAR 0 4
19384: PPUSH
19385: CALL_OW 380
// un := CreateHuman ;
19389: LD_ADDR_VAR 0 14
19393: PUSH
19394: CALL_OW 44
19398: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19399: LD_VAR 0 14
19403: PPUSH
19404: LD_VAR 0 1
19408: PPUSH
19409: CALL_OW 250
19413: PPUSH
19414: LD_VAR 0 1
19418: PPUSH
19419: CALL_OW 251
19423: PPUSH
19424: LD_INT 10
19426: PPUSH
19427: LD_INT 0
19429: PPUSH
19430: CALL_OW 50
// result := result ^ un ;
19434: LD_ADDR_VAR 0 7
19438: PUSH
19439: LD_VAR 0 7
19443: PUSH
19444: LD_VAR 0 14
19448: ADD
19449: ST_TO_ADDR
// end ;
19450: GO 19328
19452: POP
19453: POP
// end ; end ;
19454: LD_VAR 0 7
19458: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19459: LD_INT 0
19461: PPUSH
19462: PPUSH
19463: PPUSH
19464: PPUSH
19465: PPUSH
19466: PPUSH
19467: PPUSH
19468: PPUSH
19469: PPUSH
19470: PPUSH
19471: PPUSH
19472: PPUSH
19473: PPUSH
19474: PPUSH
19475: PPUSH
19476: PPUSH
// result := false ;
19477: LD_ADDR_VAR 0 3
19481: PUSH
19482: LD_INT 0
19484: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19485: LD_VAR 0 1
19489: NOT
19490: PUSH
19491: LD_VAR 0 1
19495: PPUSH
19496: CALL_OW 266
19500: PUSH
19501: LD_INT 32
19503: PUSH
19504: LD_INT 33
19506: PUSH
19507: EMPTY
19508: LIST
19509: LIST
19510: IN
19511: NOT
19512: OR
19513: IFFALSE 19517
// exit ;
19515: GO 20626
// nat := GetNation ( tower ) ;
19517: LD_ADDR_VAR 0 12
19521: PUSH
19522: LD_VAR 0 1
19526: PPUSH
19527: CALL_OW 248
19531: ST_TO_ADDR
// side := GetSide ( tower ) ;
19532: LD_ADDR_VAR 0 16
19536: PUSH
19537: LD_VAR 0 1
19541: PPUSH
19542: CALL_OW 255
19546: ST_TO_ADDR
// x := GetX ( tower ) ;
19547: LD_ADDR_VAR 0 10
19551: PUSH
19552: LD_VAR 0 1
19556: PPUSH
19557: CALL_OW 250
19561: ST_TO_ADDR
// y := GetY ( tower ) ;
19562: LD_ADDR_VAR 0 11
19566: PUSH
19567: LD_VAR 0 1
19571: PPUSH
19572: CALL_OW 251
19576: ST_TO_ADDR
// if not x or not y then
19577: LD_VAR 0 10
19581: NOT
19582: PUSH
19583: LD_VAR 0 11
19587: NOT
19588: OR
19589: IFFALSE 19593
// exit ;
19591: GO 20626
// weapon := 0 ;
19593: LD_ADDR_VAR 0 18
19597: PUSH
19598: LD_INT 0
19600: ST_TO_ADDR
// fac_list := [ ] ;
19601: LD_ADDR_VAR 0 17
19605: PUSH
19606: EMPTY
19607: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19608: LD_ADDR_VAR 0 6
19612: PUSH
19613: LD_VAR 0 1
19617: PPUSH
19618: CALL_OW 274
19622: PPUSH
19623: LD_VAR 0 2
19627: PPUSH
19628: LD_INT 0
19630: PPUSH
19631: CALL 17197 0 3
19635: PPUSH
19636: LD_INT 30
19638: PUSH
19639: LD_INT 3
19641: PUSH
19642: EMPTY
19643: LIST
19644: LIST
19645: PPUSH
19646: CALL_OW 72
19650: ST_TO_ADDR
// if not factories then
19651: LD_VAR 0 6
19655: NOT
19656: IFFALSE 19660
// exit ;
19658: GO 20626
// for i in factories do
19660: LD_ADDR_VAR 0 8
19664: PUSH
19665: LD_VAR 0 6
19669: PUSH
19670: FOR_IN
19671: IFFALSE 19696
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19673: LD_ADDR_VAR 0 17
19677: PUSH
19678: LD_VAR 0 17
19682: PUSH
19683: LD_VAR 0 8
19687: PPUSH
19688: CALL_OW 478
19692: UNION
19693: ST_TO_ADDR
19694: GO 19670
19696: POP
19697: POP
// if not fac_list then
19698: LD_VAR 0 17
19702: NOT
19703: IFFALSE 19707
// exit ;
19705: GO 20626
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19707: LD_ADDR_VAR 0 5
19711: PUSH
19712: LD_INT 4
19714: PUSH
19715: LD_INT 5
19717: PUSH
19718: LD_INT 9
19720: PUSH
19721: LD_INT 10
19723: PUSH
19724: LD_INT 6
19726: PUSH
19727: LD_INT 7
19729: PUSH
19730: LD_INT 11
19732: PUSH
19733: EMPTY
19734: LIST
19735: LIST
19736: LIST
19737: LIST
19738: LIST
19739: LIST
19740: LIST
19741: PUSH
19742: LD_INT 27
19744: PUSH
19745: LD_INT 28
19747: PUSH
19748: LD_INT 26
19750: PUSH
19751: LD_INT 30
19753: PUSH
19754: EMPTY
19755: LIST
19756: LIST
19757: LIST
19758: LIST
19759: PUSH
19760: LD_INT 43
19762: PUSH
19763: LD_INT 44
19765: PUSH
19766: LD_INT 46
19768: PUSH
19769: LD_INT 45
19771: PUSH
19772: LD_INT 47
19774: PUSH
19775: LD_INT 49
19777: PUSH
19778: EMPTY
19779: LIST
19780: LIST
19781: LIST
19782: LIST
19783: LIST
19784: LIST
19785: PUSH
19786: EMPTY
19787: LIST
19788: LIST
19789: LIST
19790: PUSH
19791: LD_VAR 0 12
19795: ARRAY
19796: ST_TO_ADDR
// list := list isect fac_list ;
19797: LD_ADDR_VAR 0 5
19801: PUSH
19802: LD_VAR 0 5
19806: PUSH
19807: LD_VAR 0 17
19811: ISECT
19812: ST_TO_ADDR
// if not list then
19813: LD_VAR 0 5
19817: NOT
19818: IFFALSE 19822
// exit ;
19820: GO 20626
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19822: LD_VAR 0 12
19826: PUSH
19827: LD_INT 3
19829: EQUAL
19830: PUSH
19831: LD_INT 49
19833: PUSH
19834: LD_VAR 0 5
19838: IN
19839: AND
19840: PUSH
19841: LD_INT 31
19843: PPUSH
19844: LD_VAR 0 16
19848: PPUSH
19849: CALL_OW 321
19853: PUSH
19854: LD_INT 2
19856: EQUAL
19857: AND
19858: IFFALSE 19918
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19860: LD_INT 22
19862: PUSH
19863: LD_VAR 0 16
19867: PUSH
19868: EMPTY
19869: LIST
19870: LIST
19871: PUSH
19872: LD_INT 35
19874: PUSH
19875: LD_INT 49
19877: PUSH
19878: EMPTY
19879: LIST
19880: LIST
19881: PUSH
19882: LD_INT 91
19884: PUSH
19885: LD_VAR 0 1
19889: PUSH
19890: LD_INT 10
19892: PUSH
19893: EMPTY
19894: LIST
19895: LIST
19896: LIST
19897: PUSH
19898: EMPTY
19899: LIST
19900: LIST
19901: LIST
19902: PPUSH
19903: CALL_OW 69
19907: NOT
19908: IFFALSE 19918
// weapon := ru_time_lapser ;
19910: LD_ADDR_VAR 0 18
19914: PUSH
19915: LD_INT 49
19917: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19918: LD_VAR 0 12
19922: PUSH
19923: LD_INT 1
19925: PUSH
19926: LD_INT 2
19928: PUSH
19929: EMPTY
19930: LIST
19931: LIST
19932: IN
19933: PUSH
19934: LD_INT 11
19936: PUSH
19937: LD_VAR 0 5
19941: IN
19942: PUSH
19943: LD_INT 30
19945: PUSH
19946: LD_VAR 0 5
19950: IN
19951: OR
19952: AND
19953: PUSH
19954: LD_INT 6
19956: PPUSH
19957: LD_VAR 0 16
19961: PPUSH
19962: CALL_OW 321
19966: PUSH
19967: LD_INT 2
19969: EQUAL
19970: AND
19971: IFFALSE 20136
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19973: LD_INT 22
19975: PUSH
19976: LD_VAR 0 16
19980: PUSH
19981: EMPTY
19982: LIST
19983: LIST
19984: PUSH
19985: LD_INT 2
19987: PUSH
19988: LD_INT 35
19990: PUSH
19991: LD_INT 11
19993: PUSH
19994: EMPTY
19995: LIST
19996: LIST
19997: PUSH
19998: LD_INT 35
20000: PUSH
20001: LD_INT 30
20003: PUSH
20004: EMPTY
20005: LIST
20006: LIST
20007: PUSH
20008: EMPTY
20009: LIST
20010: LIST
20011: LIST
20012: PUSH
20013: LD_INT 91
20015: PUSH
20016: LD_VAR 0 1
20020: PUSH
20021: LD_INT 18
20023: PUSH
20024: EMPTY
20025: LIST
20026: LIST
20027: LIST
20028: PUSH
20029: EMPTY
20030: LIST
20031: LIST
20032: LIST
20033: PPUSH
20034: CALL_OW 69
20038: NOT
20039: PUSH
20040: LD_INT 22
20042: PUSH
20043: LD_VAR 0 16
20047: PUSH
20048: EMPTY
20049: LIST
20050: LIST
20051: PUSH
20052: LD_INT 2
20054: PUSH
20055: LD_INT 30
20057: PUSH
20058: LD_INT 32
20060: PUSH
20061: EMPTY
20062: LIST
20063: LIST
20064: PUSH
20065: LD_INT 30
20067: PUSH
20068: LD_INT 33
20070: PUSH
20071: EMPTY
20072: LIST
20073: LIST
20074: PUSH
20075: EMPTY
20076: LIST
20077: LIST
20078: LIST
20079: PUSH
20080: LD_INT 91
20082: PUSH
20083: LD_VAR 0 1
20087: PUSH
20088: LD_INT 12
20090: PUSH
20091: EMPTY
20092: LIST
20093: LIST
20094: LIST
20095: PUSH
20096: EMPTY
20097: LIST
20098: LIST
20099: LIST
20100: PUSH
20101: EMPTY
20102: LIST
20103: PPUSH
20104: CALL_OW 69
20108: PUSH
20109: LD_INT 2
20111: GREATER
20112: AND
20113: IFFALSE 20136
// weapon := [ us_radar , ar_radar ] [ nat ] ;
20115: LD_ADDR_VAR 0 18
20119: PUSH
20120: LD_INT 11
20122: PUSH
20123: LD_INT 30
20125: PUSH
20126: EMPTY
20127: LIST
20128: LIST
20129: PUSH
20130: LD_VAR 0 12
20134: ARRAY
20135: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
20136: LD_VAR 0 18
20140: NOT
20141: PUSH
20142: LD_INT 40
20144: PPUSH
20145: LD_VAR 0 16
20149: PPUSH
20150: CALL_OW 321
20154: PUSH
20155: LD_INT 2
20157: EQUAL
20158: AND
20159: PUSH
20160: LD_INT 7
20162: PUSH
20163: LD_VAR 0 5
20167: IN
20168: PUSH
20169: LD_INT 28
20171: PUSH
20172: LD_VAR 0 5
20176: IN
20177: OR
20178: PUSH
20179: LD_INT 45
20181: PUSH
20182: LD_VAR 0 5
20186: IN
20187: OR
20188: AND
20189: IFFALSE 20443
// begin hex := GetHexInfo ( x , y ) ;
20191: LD_ADDR_VAR 0 4
20195: PUSH
20196: LD_VAR 0 10
20200: PPUSH
20201: LD_VAR 0 11
20205: PPUSH
20206: CALL_OW 546
20210: ST_TO_ADDR
// if hex [ 1 ] then
20211: LD_VAR 0 4
20215: PUSH
20216: LD_INT 1
20218: ARRAY
20219: IFFALSE 20223
// exit ;
20221: GO 20626
// height := hex [ 2 ] ;
20223: LD_ADDR_VAR 0 15
20227: PUSH
20228: LD_VAR 0 4
20232: PUSH
20233: LD_INT 2
20235: ARRAY
20236: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20237: LD_ADDR_VAR 0 14
20241: PUSH
20242: LD_INT 0
20244: PUSH
20245: LD_INT 2
20247: PUSH
20248: LD_INT 3
20250: PUSH
20251: LD_INT 5
20253: PUSH
20254: EMPTY
20255: LIST
20256: LIST
20257: LIST
20258: LIST
20259: ST_TO_ADDR
// for i in tmp do
20260: LD_ADDR_VAR 0 8
20264: PUSH
20265: LD_VAR 0 14
20269: PUSH
20270: FOR_IN
20271: IFFALSE 20441
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20273: LD_ADDR_VAR 0 9
20277: PUSH
20278: LD_VAR 0 10
20282: PPUSH
20283: LD_VAR 0 8
20287: PPUSH
20288: LD_INT 5
20290: PPUSH
20291: CALL_OW 272
20295: PUSH
20296: LD_VAR 0 11
20300: PPUSH
20301: LD_VAR 0 8
20305: PPUSH
20306: LD_INT 5
20308: PPUSH
20309: CALL_OW 273
20313: PUSH
20314: EMPTY
20315: LIST
20316: LIST
20317: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20318: LD_VAR 0 9
20322: PUSH
20323: LD_INT 1
20325: ARRAY
20326: PPUSH
20327: LD_VAR 0 9
20331: PUSH
20332: LD_INT 2
20334: ARRAY
20335: PPUSH
20336: CALL_OW 488
20340: IFFALSE 20439
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20342: LD_ADDR_VAR 0 4
20346: PUSH
20347: LD_VAR 0 9
20351: PUSH
20352: LD_INT 1
20354: ARRAY
20355: PPUSH
20356: LD_VAR 0 9
20360: PUSH
20361: LD_INT 2
20363: ARRAY
20364: PPUSH
20365: CALL_OW 546
20369: ST_TO_ADDR
// if hex [ 1 ] then
20370: LD_VAR 0 4
20374: PUSH
20375: LD_INT 1
20377: ARRAY
20378: IFFALSE 20382
// continue ;
20380: GO 20270
// h := hex [ 2 ] ;
20382: LD_ADDR_VAR 0 13
20386: PUSH
20387: LD_VAR 0 4
20391: PUSH
20392: LD_INT 2
20394: ARRAY
20395: ST_TO_ADDR
// if h + 7 < height then
20396: LD_VAR 0 13
20400: PUSH
20401: LD_INT 7
20403: PLUS
20404: PUSH
20405: LD_VAR 0 15
20409: LESS
20410: IFFALSE 20439
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20412: LD_ADDR_VAR 0 18
20416: PUSH
20417: LD_INT 7
20419: PUSH
20420: LD_INT 28
20422: PUSH
20423: LD_INT 45
20425: PUSH
20426: EMPTY
20427: LIST
20428: LIST
20429: LIST
20430: PUSH
20431: LD_VAR 0 12
20435: ARRAY
20436: ST_TO_ADDR
// break ;
20437: GO 20441
// end ; end ; end ;
20439: GO 20270
20441: POP
20442: POP
// end ; if not weapon then
20443: LD_VAR 0 18
20447: NOT
20448: IFFALSE 20508
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20450: LD_ADDR_VAR 0 5
20454: PUSH
20455: LD_VAR 0 5
20459: PUSH
20460: LD_INT 11
20462: PUSH
20463: LD_INT 30
20465: PUSH
20466: LD_INT 49
20468: PUSH
20469: EMPTY
20470: LIST
20471: LIST
20472: LIST
20473: DIFF
20474: ST_TO_ADDR
// if not list then
20475: LD_VAR 0 5
20479: NOT
20480: IFFALSE 20484
// exit ;
20482: GO 20626
// weapon := list [ rand ( 1 , list ) ] ;
20484: LD_ADDR_VAR 0 18
20488: PUSH
20489: LD_VAR 0 5
20493: PUSH
20494: LD_INT 1
20496: PPUSH
20497: LD_VAR 0 5
20501: PPUSH
20502: CALL_OW 12
20506: ARRAY
20507: ST_TO_ADDR
// end ; if weapon then
20508: LD_VAR 0 18
20512: IFFALSE 20626
// begin tmp := CostOfWeapon ( weapon ) ;
20514: LD_ADDR_VAR 0 14
20518: PUSH
20519: LD_VAR 0 18
20523: PPUSH
20524: CALL_OW 451
20528: ST_TO_ADDR
// j := GetBase ( tower ) ;
20529: LD_ADDR_VAR 0 9
20533: PUSH
20534: LD_VAR 0 1
20538: PPUSH
20539: CALL_OW 274
20543: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20544: LD_VAR 0 9
20548: PPUSH
20549: LD_INT 1
20551: PPUSH
20552: CALL_OW 275
20556: PUSH
20557: LD_VAR 0 14
20561: PUSH
20562: LD_INT 1
20564: ARRAY
20565: GREATEREQUAL
20566: PUSH
20567: LD_VAR 0 9
20571: PPUSH
20572: LD_INT 2
20574: PPUSH
20575: CALL_OW 275
20579: PUSH
20580: LD_VAR 0 14
20584: PUSH
20585: LD_INT 2
20587: ARRAY
20588: GREATEREQUAL
20589: AND
20590: PUSH
20591: LD_VAR 0 9
20595: PPUSH
20596: LD_INT 3
20598: PPUSH
20599: CALL_OW 275
20603: PUSH
20604: LD_VAR 0 14
20608: PUSH
20609: LD_INT 3
20611: ARRAY
20612: GREATEREQUAL
20613: AND
20614: IFFALSE 20626
// result := weapon ;
20616: LD_ADDR_VAR 0 3
20620: PUSH
20621: LD_VAR 0 18
20625: ST_TO_ADDR
// end ; end ;
20626: LD_VAR 0 3
20630: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20631: LD_INT 0
20633: PPUSH
20634: PPUSH
// result := true ;
20635: LD_ADDR_VAR 0 3
20639: PUSH
20640: LD_INT 1
20642: ST_TO_ADDR
// if array1 = array2 then
20643: LD_VAR 0 1
20647: PUSH
20648: LD_VAR 0 2
20652: EQUAL
20653: IFFALSE 20713
// begin for i = 1 to array1 do
20655: LD_ADDR_VAR 0 4
20659: PUSH
20660: DOUBLE
20661: LD_INT 1
20663: DEC
20664: ST_TO_ADDR
20665: LD_VAR 0 1
20669: PUSH
20670: FOR_TO
20671: IFFALSE 20709
// if array1 [ i ] <> array2 [ i ] then
20673: LD_VAR 0 1
20677: PUSH
20678: LD_VAR 0 4
20682: ARRAY
20683: PUSH
20684: LD_VAR 0 2
20688: PUSH
20689: LD_VAR 0 4
20693: ARRAY
20694: NONEQUAL
20695: IFFALSE 20707
// begin result := false ;
20697: LD_ADDR_VAR 0 3
20701: PUSH
20702: LD_INT 0
20704: ST_TO_ADDR
// break ;
20705: GO 20709
// end ;
20707: GO 20670
20709: POP
20710: POP
// end else
20711: GO 20721
// result := false ;
20713: LD_ADDR_VAR 0 3
20717: PUSH
20718: LD_INT 0
20720: ST_TO_ADDR
// end ;
20721: LD_VAR 0 3
20725: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20726: LD_INT 0
20728: PPUSH
20729: PPUSH
// if not array1 or not array2 then
20730: LD_VAR 0 1
20734: NOT
20735: PUSH
20736: LD_VAR 0 2
20740: NOT
20741: OR
20742: IFFALSE 20746
// exit ;
20744: GO 20810
// result := true ;
20746: LD_ADDR_VAR 0 3
20750: PUSH
20751: LD_INT 1
20753: ST_TO_ADDR
// for i = 1 to array1 do
20754: LD_ADDR_VAR 0 4
20758: PUSH
20759: DOUBLE
20760: LD_INT 1
20762: DEC
20763: ST_TO_ADDR
20764: LD_VAR 0 1
20768: PUSH
20769: FOR_TO
20770: IFFALSE 20808
// if array1 [ i ] <> array2 [ i ] then
20772: LD_VAR 0 1
20776: PUSH
20777: LD_VAR 0 4
20781: ARRAY
20782: PUSH
20783: LD_VAR 0 2
20787: PUSH
20788: LD_VAR 0 4
20792: ARRAY
20793: NONEQUAL
20794: IFFALSE 20806
// begin result := false ;
20796: LD_ADDR_VAR 0 3
20800: PUSH
20801: LD_INT 0
20803: ST_TO_ADDR
// break ;
20804: GO 20808
// end ;
20806: GO 20769
20808: POP
20809: POP
// end ;
20810: LD_VAR 0 3
20814: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20815: LD_INT 0
20817: PPUSH
20818: PPUSH
20819: PPUSH
// pom := GetBase ( fac ) ;
20820: LD_ADDR_VAR 0 5
20824: PUSH
20825: LD_VAR 0 1
20829: PPUSH
20830: CALL_OW 274
20834: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20835: LD_ADDR_VAR 0 4
20839: PUSH
20840: LD_VAR 0 2
20844: PUSH
20845: LD_INT 1
20847: ARRAY
20848: PPUSH
20849: LD_VAR 0 2
20853: PUSH
20854: LD_INT 2
20856: ARRAY
20857: PPUSH
20858: LD_VAR 0 2
20862: PUSH
20863: LD_INT 3
20865: ARRAY
20866: PPUSH
20867: LD_VAR 0 2
20871: PUSH
20872: LD_INT 4
20874: ARRAY
20875: PPUSH
20876: CALL_OW 449
20880: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20881: LD_ADDR_VAR 0 3
20885: PUSH
20886: LD_VAR 0 5
20890: PPUSH
20891: LD_INT 1
20893: PPUSH
20894: CALL_OW 275
20898: PUSH
20899: LD_VAR 0 4
20903: PUSH
20904: LD_INT 1
20906: ARRAY
20907: GREATEREQUAL
20908: PUSH
20909: LD_VAR 0 5
20913: PPUSH
20914: LD_INT 2
20916: PPUSH
20917: CALL_OW 275
20921: PUSH
20922: LD_VAR 0 4
20926: PUSH
20927: LD_INT 2
20929: ARRAY
20930: GREATEREQUAL
20931: AND
20932: PUSH
20933: LD_VAR 0 5
20937: PPUSH
20938: LD_INT 3
20940: PPUSH
20941: CALL_OW 275
20945: PUSH
20946: LD_VAR 0 4
20950: PUSH
20951: LD_INT 3
20953: ARRAY
20954: GREATEREQUAL
20955: AND
20956: ST_TO_ADDR
// end ;
20957: LD_VAR 0 3
20961: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20962: LD_INT 0
20964: PPUSH
20965: PPUSH
20966: PPUSH
20967: PPUSH
// pom := GetBase ( building ) ;
20968: LD_ADDR_VAR 0 3
20972: PUSH
20973: LD_VAR 0 1
20977: PPUSH
20978: CALL_OW 274
20982: ST_TO_ADDR
// if not pom then
20983: LD_VAR 0 3
20987: NOT
20988: IFFALSE 20992
// exit ;
20990: GO 21162
// btype := GetBType ( building ) ;
20992: LD_ADDR_VAR 0 5
20996: PUSH
20997: LD_VAR 0 1
21001: PPUSH
21002: CALL_OW 266
21006: ST_TO_ADDR
// if btype = b_armoury then
21007: LD_VAR 0 5
21011: PUSH
21012: LD_INT 4
21014: EQUAL
21015: IFFALSE 21025
// btype := b_barracks ;
21017: LD_ADDR_VAR 0 5
21021: PUSH
21022: LD_INT 5
21024: ST_TO_ADDR
// if btype = b_depot then
21025: LD_VAR 0 5
21029: PUSH
21030: LD_INT 0
21032: EQUAL
21033: IFFALSE 21043
// btype := b_warehouse ;
21035: LD_ADDR_VAR 0 5
21039: PUSH
21040: LD_INT 1
21042: ST_TO_ADDR
// if btype = b_workshop then
21043: LD_VAR 0 5
21047: PUSH
21048: LD_INT 2
21050: EQUAL
21051: IFFALSE 21061
// btype := b_factory ;
21053: LD_ADDR_VAR 0 5
21057: PUSH
21058: LD_INT 3
21060: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21061: LD_ADDR_VAR 0 4
21065: PUSH
21066: LD_VAR 0 5
21070: PPUSH
21071: LD_VAR 0 1
21075: PPUSH
21076: CALL_OW 248
21080: PPUSH
21081: CALL_OW 450
21085: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21086: LD_ADDR_VAR 0 2
21090: PUSH
21091: LD_VAR 0 3
21095: PPUSH
21096: LD_INT 1
21098: PPUSH
21099: CALL_OW 275
21103: PUSH
21104: LD_VAR 0 4
21108: PUSH
21109: LD_INT 1
21111: ARRAY
21112: GREATEREQUAL
21113: PUSH
21114: LD_VAR 0 3
21118: PPUSH
21119: LD_INT 2
21121: PPUSH
21122: CALL_OW 275
21126: PUSH
21127: LD_VAR 0 4
21131: PUSH
21132: LD_INT 2
21134: ARRAY
21135: GREATEREQUAL
21136: AND
21137: PUSH
21138: LD_VAR 0 3
21142: PPUSH
21143: LD_INT 3
21145: PPUSH
21146: CALL_OW 275
21150: PUSH
21151: LD_VAR 0 4
21155: PUSH
21156: LD_INT 3
21158: ARRAY
21159: GREATEREQUAL
21160: AND
21161: ST_TO_ADDR
// end ;
21162: LD_VAR 0 2
21166: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21167: LD_INT 0
21169: PPUSH
21170: PPUSH
21171: PPUSH
// pom := GetBase ( building ) ;
21172: LD_ADDR_VAR 0 4
21176: PUSH
21177: LD_VAR 0 1
21181: PPUSH
21182: CALL_OW 274
21186: ST_TO_ADDR
// if not pom then
21187: LD_VAR 0 4
21191: NOT
21192: IFFALSE 21196
// exit ;
21194: GO 21297
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21196: LD_ADDR_VAR 0 5
21200: PUSH
21201: LD_VAR 0 2
21205: PPUSH
21206: LD_VAR 0 1
21210: PPUSH
21211: CALL_OW 248
21215: PPUSH
21216: CALL_OW 450
21220: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21221: LD_ADDR_VAR 0 3
21225: PUSH
21226: LD_VAR 0 4
21230: PPUSH
21231: LD_INT 1
21233: PPUSH
21234: CALL_OW 275
21238: PUSH
21239: LD_VAR 0 5
21243: PUSH
21244: LD_INT 1
21246: ARRAY
21247: GREATEREQUAL
21248: PUSH
21249: LD_VAR 0 4
21253: PPUSH
21254: LD_INT 2
21256: PPUSH
21257: CALL_OW 275
21261: PUSH
21262: LD_VAR 0 5
21266: PUSH
21267: LD_INT 2
21269: ARRAY
21270: GREATEREQUAL
21271: AND
21272: PUSH
21273: LD_VAR 0 4
21277: PPUSH
21278: LD_INT 3
21280: PPUSH
21281: CALL_OW 275
21285: PUSH
21286: LD_VAR 0 5
21290: PUSH
21291: LD_INT 3
21293: ARRAY
21294: GREATEREQUAL
21295: AND
21296: ST_TO_ADDR
// end ;
21297: LD_VAR 0 3
21301: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21302: LD_INT 0
21304: PPUSH
21305: PPUSH
21306: PPUSH
21307: PPUSH
21308: PPUSH
21309: PPUSH
21310: PPUSH
21311: PPUSH
21312: PPUSH
21313: PPUSH
21314: PPUSH
// result := false ;
21315: LD_ADDR_VAR 0 8
21319: PUSH
21320: LD_INT 0
21322: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21323: LD_VAR 0 5
21327: NOT
21328: PUSH
21329: LD_VAR 0 1
21333: NOT
21334: OR
21335: PUSH
21336: LD_VAR 0 2
21340: NOT
21341: OR
21342: PUSH
21343: LD_VAR 0 3
21347: NOT
21348: OR
21349: IFFALSE 21353
// exit ;
21351: GO 22167
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21353: LD_ADDR_VAR 0 14
21357: PUSH
21358: LD_VAR 0 1
21362: PPUSH
21363: LD_VAR 0 2
21367: PPUSH
21368: LD_VAR 0 3
21372: PPUSH
21373: LD_VAR 0 4
21377: PPUSH
21378: LD_VAR 0 5
21382: PUSH
21383: LD_INT 1
21385: ARRAY
21386: PPUSH
21387: CALL_OW 248
21391: PPUSH
21392: LD_INT 0
21394: PPUSH
21395: CALL 23404 0 6
21399: ST_TO_ADDR
// if not hexes then
21400: LD_VAR 0 14
21404: NOT
21405: IFFALSE 21409
// exit ;
21407: GO 22167
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21409: LD_ADDR_VAR 0 17
21413: PUSH
21414: LD_VAR 0 5
21418: PPUSH
21419: LD_INT 22
21421: PUSH
21422: LD_VAR 0 13
21426: PPUSH
21427: CALL_OW 255
21431: PUSH
21432: EMPTY
21433: LIST
21434: LIST
21435: PUSH
21436: LD_INT 2
21438: PUSH
21439: LD_INT 30
21441: PUSH
21442: LD_INT 0
21444: PUSH
21445: EMPTY
21446: LIST
21447: LIST
21448: PUSH
21449: LD_INT 30
21451: PUSH
21452: LD_INT 1
21454: PUSH
21455: EMPTY
21456: LIST
21457: LIST
21458: PUSH
21459: EMPTY
21460: LIST
21461: LIST
21462: LIST
21463: PUSH
21464: EMPTY
21465: LIST
21466: LIST
21467: PPUSH
21468: CALL_OW 72
21472: ST_TO_ADDR
// for i = 1 to hexes do
21473: LD_ADDR_VAR 0 9
21477: PUSH
21478: DOUBLE
21479: LD_INT 1
21481: DEC
21482: ST_TO_ADDR
21483: LD_VAR 0 14
21487: PUSH
21488: FOR_TO
21489: IFFALSE 22165
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21491: LD_ADDR_VAR 0 13
21495: PUSH
21496: LD_VAR 0 14
21500: PUSH
21501: LD_VAR 0 9
21505: ARRAY
21506: PUSH
21507: LD_INT 1
21509: ARRAY
21510: PPUSH
21511: LD_VAR 0 14
21515: PUSH
21516: LD_VAR 0 9
21520: ARRAY
21521: PUSH
21522: LD_INT 2
21524: ARRAY
21525: PPUSH
21526: CALL_OW 428
21530: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21531: LD_VAR 0 14
21535: PUSH
21536: LD_VAR 0 9
21540: ARRAY
21541: PUSH
21542: LD_INT 1
21544: ARRAY
21545: PPUSH
21546: LD_VAR 0 14
21550: PUSH
21551: LD_VAR 0 9
21555: ARRAY
21556: PUSH
21557: LD_INT 2
21559: ARRAY
21560: PPUSH
21561: CALL_OW 351
21565: PUSH
21566: LD_VAR 0 14
21570: PUSH
21571: LD_VAR 0 9
21575: ARRAY
21576: PUSH
21577: LD_INT 1
21579: ARRAY
21580: PPUSH
21581: LD_VAR 0 14
21585: PUSH
21586: LD_VAR 0 9
21590: ARRAY
21591: PUSH
21592: LD_INT 2
21594: ARRAY
21595: PPUSH
21596: CALL_OW 488
21600: NOT
21601: OR
21602: PUSH
21603: LD_VAR 0 13
21607: PPUSH
21608: CALL_OW 247
21612: PUSH
21613: LD_INT 3
21615: EQUAL
21616: OR
21617: IFFALSE 21623
// exit ;
21619: POP
21620: POP
21621: GO 22167
// if not tmp then
21623: LD_VAR 0 13
21627: NOT
21628: IFFALSE 21632
// continue ;
21630: GO 21488
// result := true ;
21632: LD_ADDR_VAR 0 8
21636: PUSH
21637: LD_INT 1
21639: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21640: LD_VAR 0 6
21644: PUSH
21645: LD_VAR 0 13
21649: PPUSH
21650: CALL_OW 247
21654: PUSH
21655: LD_INT 2
21657: EQUAL
21658: AND
21659: PUSH
21660: LD_VAR 0 13
21664: PPUSH
21665: CALL_OW 263
21669: PUSH
21670: LD_INT 1
21672: EQUAL
21673: AND
21674: IFFALSE 21838
// begin if IsDrivenBy ( tmp ) then
21676: LD_VAR 0 13
21680: PPUSH
21681: CALL_OW 311
21685: IFFALSE 21689
// continue ;
21687: GO 21488
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21689: LD_VAR 0 6
21693: PPUSH
21694: LD_INT 3
21696: PUSH
21697: LD_INT 60
21699: PUSH
21700: EMPTY
21701: LIST
21702: PUSH
21703: EMPTY
21704: LIST
21705: LIST
21706: PUSH
21707: LD_INT 3
21709: PUSH
21710: LD_INT 55
21712: PUSH
21713: EMPTY
21714: LIST
21715: PUSH
21716: EMPTY
21717: LIST
21718: LIST
21719: PUSH
21720: EMPTY
21721: LIST
21722: LIST
21723: PPUSH
21724: CALL_OW 72
21728: IFFALSE 21836
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21730: LD_ADDR_VAR 0 18
21734: PUSH
21735: LD_VAR 0 6
21739: PPUSH
21740: LD_INT 3
21742: PUSH
21743: LD_INT 60
21745: PUSH
21746: EMPTY
21747: LIST
21748: PUSH
21749: EMPTY
21750: LIST
21751: LIST
21752: PUSH
21753: LD_INT 3
21755: PUSH
21756: LD_INT 55
21758: PUSH
21759: EMPTY
21760: LIST
21761: PUSH
21762: EMPTY
21763: LIST
21764: LIST
21765: PUSH
21766: EMPTY
21767: LIST
21768: LIST
21769: PPUSH
21770: CALL_OW 72
21774: PUSH
21775: LD_INT 1
21777: ARRAY
21778: ST_TO_ADDR
// if IsInUnit ( driver ) then
21779: LD_VAR 0 18
21783: PPUSH
21784: CALL_OW 310
21788: IFFALSE 21799
// ComExit ( driver ) ;
21790: LD_VAR 0 18
21794: PPUSH
21795: CALL 47109 0 1
// AddComEnterUnit ( driver , tmp ) ;
21799: LD_VAR 0 18
21803: PPUSH
21804: LD_VAR 0 13
21808: PPUSH
21809: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21813: LD_VAR 0 18
21817: PPUSH
21818: LD_VAR 0 7
21822: PPUSH
21823: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21827: LD_VAR 0 18
21831: PPUSH
21832: CALL_OW 181
// end ; continue ;
21836: GO 21488
// end ; if not cleaners or not tmp in cleaners then
21838: LD_VAR 0 6
21842: NOT
21843: PUSH
21844: LD_VAR 0 13
21848: PUSH
21849: LD_VAR 0 6
21853: IN
21854: NOT
21855: OR
21856: IFFALSE 22163
// begin if dep then
21858: LD_VAR 0 17
21862: IFFALSE 21998
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21864: LD_ADDR_VAR 0 16
21868: PUSH
21869: LD_VAR 0 17
21873: PUSH
21874: LD_INT 1
21876: ARRAY
21877: PPUSH
21878: CALL_OW 250
21882: PPUSH
21883: LD_VAR 0 17
21887: PUSH
21888: LD_INT 1
21890: ARRAY
21891: PPUSH
21892: CALL_OW 254
21896: PPUSH
21897: LD_INT 5
21899: PPUSH
21900: CALL_OW 272
21904: PUSH
21905: LD_VAR 0 17
21909: PUSH
21910: LD_INT 1
21912: ARRAY
21913: PPUSH
21914: CALL_OW 251
21918: PPUSH
21919: LD_VAR 0 17
21923: PUSH
21924: LD_INT 1
21926: ARRAY
21927: PPUSH
21928: CALL_OW 254
21932: PPUSH
21933: LD_INT 5
21935: PPUSH
21936: CALL_OW 273
21940: PUSH
21941: EMPTY
21942: LIST
21943: LIST
21944: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21945: LD_VAR 0 16
21949: PUSH
21950: LD_INT 1
21952: ARRAY
21953: PPUSH
21954: LD_VAR 0 16
21958: PUSH
21959: LD_INT 2
21961: ARRAY
21962: PPUSH
21963: CALL_OW 488
21967: IFFALSE 21998
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21969: LD_VAR 0 13
21973: PPUSH
21974: LD_VAR 0 16
21978: PUSH
21979: LD_INT 1
21981: ARRAY
21982: PPUSH
21983: LD_VAR 0 16
21987: PUSH
21988: LD_INT 2
21990: ARRAY
21991: PPUSH
21992: CALL_OW 111
// continue ;
21996: GO 21488
// end ; end ; r := GetDir ( tmp ) ;
21998: LD_ADDR_VAR 0 15
22002: PUSH
22003: LD_VAR 0 13
22007: PPUSH
22008: CALL_OW 254
22012: ST_TO_ADDR
// if r = 5 then
22013: LD_VAR 0 15
22017: PUSH
22018: LD_INT 5
22020: EQUAL
22021: IFFALSE 22031
// r := 0 ;
22023: LD_ADDR_VAR 0 15
22027: PUSH
22028: LD_INT 0
22030: ST_TO_ADDR
// for j = r to 5 do
22031: LD_ADDR_VAR 0 10
22035: PUSH
22036: DOUBLE
22037: LD_VAR 0 15
22041: DEC
22042: ST_TO_ADDR
22043: LD_INT 5
22045: PUSH
22046: FOR_TO
22047: IFFALSE 22161
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
22049: LD_ADDR_VAR 0 11
22053: PUSH
22054: LD_VAR 0 13
22058: PPUSH
22059: CALL_OW 250
22063: PPUSH
22064: LD_VAR 0 10
22068: PPUSH
22069: LD_INT 2
22071: PPUSH
22072: CALL_OW 272
22076: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
22077: LD_ADDR_VAR 0 12
22081: PUSH
22082: LD_VAR 0 13
22086: PPUSH
22087: CALL_OW 251
22091: PPUSH
22092: LD_VAR 0 10
22096: PPUSH
22097: LD_INT 2
22099: PPUSH
22100: CALL_OW 273
22104: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
22105: LD_VAR 0 11
22109: PPUSH
22110: LD_VAR 0 12
22114: PPUSH
22115: CALL_OW 488
22119: PUSH
22120: LD_VAR 0 11
22124: PPUSH
22125: LD_VAR 0 12
22129: PPUSH
22130: CALL_OW 428
22134: NOT
22135: AND
22136: IFFALSE 22159
// begin ComMoveXY ( tmp , _x , _y ) ;
22138: LD_VAR 0 13
22142: PPUSH
22143: LD_VAR 0 11
22147: PPUSH
22148: LD_VAR 0 12
22152: PPUSH
22153: CALL_OW 111
// break ;
22157: GO 22161
// end ; end ;
22159: GO 22046
22161: POP
22162: POP
// end ; end ;
22163: GO 21488
22165: POP
22166: POP
// end ;
22167: LD_VAR 0 8
22171: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22172: LD_INT 0
22174: PPUSH
// result := true ;
22175: LD_ADDR_VAR 0 3
22179: PUSH
22180: LD_INT 1
22182: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22183: LD_VAR 0 2
22187: PUSH
22188: LD_INT 24
22190: DOUBLE
22191: EQUAL
22192: IFTRUE 22202
22194: LD_INT 33
22196: DOUBLE
22197: EQUAL
22198: IFTRUE 22202
22200: GO 22227
22202: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22203: LD_ADDR_VAR 0 3
22207: PUSH
22208: LD_INT 32
22210: PPUSH
22211: LD_VAR 0 1
22215: PPUSH
22216: CALL_OW 321
22220: PUSH
22221: LD_INT 2
22223: EQUAL
22224: ST_TO_ADDR
22225: GO 22547
22227: LD_INT 20
22229: DOUBLE
22230: EQUAL
22231: IFTRUE 22235
22233: GO 22260
22235: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22236: LD_ADDR_VAR 0 3
22240: PUSH
22241: LD_INT 6
22243: PPUSH
22244: LD_VAR 0 1
22248: PPUSH
22249: CALL_OW 321
22253: PUSH
22254: LD_INT 2
22256: EQUAL
22257: ST_TO_ADDR
22258: GO 22547
22260: LD_INT 22
22262: DOUBLE
22263: EQUAL
22264: IFTRUE 22274
22266: LD_INT 36
22268: DOUBLE
22269: EQUAL
22270: IFTRUE 22274
22272: GO 22299
22274: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22275: LD_ADDR_VAR 0 3
22279: PUSH
22280: LD_INT 15
22282: PPUSH
22283: LD_VAR 0 1
22287: PPUSH
22288: CALL_OW 321
22292: PUSH
22293: LD_INT 2
22295: EQUAL
22296: ST_TO_ADDR
22297: GO 22547
22299: LD_INT 30
22301: DOUBLE
22302: EQUAL
22303: IFTRUE 22307
22305: GO 22332
22307: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22308: LD_ADDR_VAR 0 3
22312: PUSH
22313: LD_INT 20
22315: PPUSH
22316: LD_VAR 0 1
22320: PPUSH
22321: CALL_OW 321
22325: PUSH
22326: LD_INT 2
22328: EQUAL
22329: ST_TO_ADDR
22330: GO 22547
22332: LD_INT 28
22334: DOUBLE
22335: EQUAL
22336: IFTRUE 22346
22338: LD_INT 21
22340: DOUBLE
22341: EQUAL
22342: IFTRUE 22346
22344: GO 22371
22346: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22347: LD_ADDR_VAR 0 3
22351: PUSH
22352: LD_INT 21
22354: PPUSH
22355: LD_VAR 0 1
22359: PPUSH
22360: CALL_OW 321
22364: PUSH
22365: LD_INT 2
22367: EQUAL
22368: ST_TO_ADDR
22369: GO 22547
22371: LD_INT 16
22373: DOUBLE
22374: EQUAL
22375: IFTRUE 22379
22377: GO 22406
22379: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22380: LD_ADDR_VAR 0 3
22384: PUSH
22385: LD_EXP 75
22389: PPUSH
22390: LD_VAR 0 1
22394: PPUSH
22395: CALL_OW 321
22399: PUSH
22400: LD_INT 2
22402: EQUAL
22403: ST_TO_ADDR
22404: GO 22547
22406: LD_INT 19
22408: DOUBLE
22409: EQUAL
22410: IFTRUE 22420
22412: LD_INT 23
22414: DOUBLE
22415: EQUAL
22416: IFTRUE 22420
22418: GO 22447
22420: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22421: LD_ADDR_VAR 0 3
22425: PUSH
22426: LD_EXP 74
22430: PPUSH
22431: LD_VAR 0 1
22435: PPUSH
22436: CALL_OW 321
22440: PUSH
22441: LD_INT 2
22443: EQUAL
22444: ST_TO_ADDR
22445: GO 22547
22447: LD_INT 17
22449: DOUBLE
22450: EQUAL
22451: IFTRUE 22455
22453: GO 22480
22455: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22456: LD_ADDR_VAR 0 3
22460: PUSH
22461: LD_INT 39
22463: PPUSH
22464: LD_VAR 0 1
22468: PPUSH
22469: CALL_OW 321
22473: PUSH
22474: LD_INT 2
22476: EQUAL
22477: ST_TO_ADDR
22478: GO 22547
22480: LD_INT 18
22482: DOUBLE
22483: EQUAL
22484: IFTRUE 22488
22486: GO 22513
22488: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22489: LD_ADDR_VAR 0 3
22493: PUSH
22494: LD_INT 40
22496: PPUSH
22497: LD_VAR 0 1
22501: PPUSH
22502: CALL_OW 321
22506: PUSH
22507: LD_INT 2
22509: EQUAL
22510: ST_TO_ADDR
22511: GO 22547
22513: LD_INT 27
22515: DOUBLE
22516: EQUAL
22517: IFTRUE 22521
22519: GO 22546
22521: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22522: LD_ADDR_VAR 0 3
22526: PUSH
22527: LD_INT 35
22529: PPUSH
22530: LD_VAR 0 1
22534: PPUSH
22535: CALL_OW 321
22539: PUSH
22540: LD_INT 2
22542: EQUAL
22543: ST_TO_ADDR
22544: GO 22547
22546: POP
// end ;
22547: LD_VAR 0 3
22551: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22552: LD_INT 0
22554: PPUSH
22555: PPUSH
22556: PPUSH
22557: PPUSH
22558: PPUSH
22559: PPUSH
22560: PPUSH
22561: PPUSH
22562: PPUSH
22563: PPUSH
22564: PPUSH
// result := false ;
22565: LD_ADDR_VAR 0 6
22569: PUSH
22570: LD_INT 0
22572: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22573: LD_VAR 0 1
22577: NOT
22578: PUSH
22579: LD_VAR 0 1
22583: PPUSH
22584: CALL_OW 266
22588: PUSH
22589: LD_INT 0
22591: PUSH
22592: LD_INT 1
22594: PUSH
22595: EMPTY
22596: LIST
22597: LIST
22598: IN
22599: NOT
22600: OR
22601: PUSH
22602: LD_VAR 0 2
22606: NOT
22607: OR
22608: PUSH
22609: LD_VAR 0 5
22613: PUSH
22614: LD_INT 0
22616: PUSH
22617: LD_INT 1
22619: PUSH
22620: LD_INT 2
22622: PUSH
22623: LD_INT 3
22625: PUSH
22626: LD_INT 4
22628: PUSH
22629: LD_INT 5
22631: PUSH
22632: EMPTY
22633: LIST
22634: LIST
22635: LIST
22636: LIST
22637: LIST
22638: LIST
22639: IN
22640: NOT
22641: OR
22642: PUSH
22643: LD_VAR 0 3
22647: PPUSH
22648: LD_VAR 0 4
22652: PPUSH
22653: CALL_OW 488
22657: NOT
22658: OR
22659: IFFALSE 22663
// exit ;
22661: GO 23399
// side := GetSide ( depot ) ;
22663: LD_ADDR_VAR 0 9
22667: PUSH
22668: LD_VAR 0 1
22672: PPUSH
22673: CALL_OW 255
22677: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22678: LD_VAR 0 9
22682: PPUSH
22683: LD_VAR 0 2
22687: PPUSH
22688: CALL 22172 0 2
22692: NOT
22693: IFFALSE 22697
// exit ;
22695: GO 23399
// pom := GetBase ( depot ) ;
22697: LD_ADDR_VAR 0 10
22701: PUSH
22702: LD_VAR 0 1
22706: PPUSH
22707: CALL_OW 274
22711: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22712: LD_ADDR_VAR 0 11
22716: PUSH
22717: LD_VAR 0 2
22721: PPUSH
22722: LD_VAR 0 1
22726: PPUSH
22727: CALL_OW 248
22731: PPUSH
22732: CALL_OW 450
22736: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22737: LD_VAR 0 10
22741: PPUSH
22742: LD_INT 1
22744: PPUSH
22745: CALL_OW 275
22749: PUSH
22750: LD_VAR 0 11
22754: PUSH
22755: LD_INT 1
22757: ARRAY
22758: GREATEREQUAL
22759: PUSH
22760: LD_VAR 0 10
22764: PPUSH
22765: LD_INT 2
22767: PPUSH
22768: CALL_OW 275
22772: PUSH
22773: LD_VAR 0 11
22777: PUSH
22778: LD_INT 2
22780: ARRAY
22781: GREATEREQUAL
22782: AND
22783: PUSH
22784: LD_VAR 0 10
22788: PPUSH
22789: LD_INT 3
22791: PPUSH
22792: CALL_OW 275
22796: PUSH
22797: LD_VAR 0 11
22801: PUSH
22802: LD_INT 3
22804: ARRAY
22805: GREATEREQUAL
22806: AND
22807: NOT
22808: IFFALSE 22812
// exit ;
22810: GO 23399
// if GetBType ( depot ) = b_depot then
22812: LD_VAR 0 1
22816: PPUSH
22817: CALL_OW 266
22821: PUSH
22822: LD_INT 0
22824: EQUAL
22825: IFFALSE 22837
// dist := 28 else
22827: LD_ADDR_VAR 0 14
22831: PUSH
22832: LD_INT 28
22834: ST_TO_ADDR
22835: GO 22845
// dist := 36 ;
22837: LD_ADDR_VAR 0 14
22841: PUSH
22842: LD_INT 36
22844: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22845: LD_VAR 0 1
22849: PPUSH
22850: LD_VAR 0 3
22854: PPUSH
22855: LD_VAR 0 4
22859: PPUSH
22860: CALL_OW 297
22864: PUSH
22865: LD_VAR 0 14
22869: GREATER
22870: IFFALSE 22874
// exit ;
22872: GO 23399
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22874: LD_ADDR_VAR 0 12
22878: PUSH
22879: LD_VAR 0 2
22883: PPUSH
22884: LD_VAR 0 3
22888: PPUSH
22889: LD_VAR 0 4
22893: PPUSH
22894: LD_VAR 0 5
22898: PPUSH
22899: LD_VAR 0 1
22903: PPUSH
22904: CALL_OW 248
22908: PPUSH
22909: LD_INT 0
22911: PPUSH
22912: CALL 23404 0 6
22916: ST_TO_ADDR
// if not hexes then
22917: LD_VAR 0 12
22921: NOT
22922: IFFALSE 22926
// exit ;
22924: GO 23399
// hex := GetHexInfo ( x , y ) ;
22926: LD_ADDR_VAR 0 15
22930: PUSH
22931: LD_VAR 0 3
22935: PPUSH
22936: LD_VAR 0 4
22940: PPUSH
22941: CALL_OW 546
22945: ST_TO_ADDR
// if hex [ 1 ] then
22946: LD_VAR 0 15
22950: PUSH
22951: LD_INT 1
22953: ARRAY
22954: IFFALSE 22958
// exit ;
22956: GO 23399
// height := hex [ 2 ] ;
22958: LD_ADDR_VAR 0 13
22962: PUSH
22963: LD_VAR 0 15
22967: PUSH
22968: LD_INT 2
22970: ARRAY
22971: ST_TO_ADDR
// for i = 1 to hexes do
22972: LD_ADDR_VAR 0 7
22976: PUSH
22977: DOUBLE
22978: LD_INT 1
22980: DEC
22981: ST_TO_ADDR
22982: LD_VAR 0 12
22986: PUSH
22987: FOR_TO
22988: IFFALSE 23318
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22990: LD_VAR 0 12
22994: PUSH
22995: LD_VAR 0 7
22999: ARRAY
23000: PUSH
23001: LD_INT 1
23003: ARRAY
23004: PPUSH
23005: LD_VAR 0 12
23009: PUSH
23010: LD_VAR 0 7
23014: ARRAY
23015: PUSH
23016: LD_INT 2
23018: ARRAY
23019: PPUSH
23020: CALL_OW 488
23024: NOT
23025: PUSH
23026: LD_VAR 0 12
23030: PUSH
23031: LD_VAR 0 7
23035: ARRAY
23036: PUSH
23037: LD_INT 1
23039: ARRAY
23040: PPUSH
23041: LD_VAR 0 12
23045: PUSH
23046: LD_VAR 0 7
23050: ARRAY
23051: PUSH
23052: LD_INT 2
23054: ARRAY
23055: PPUSH
23056: CALL_OW 428
23060: PUSH
23061: LD_INT 0
23063: GREATER
23064: OR
23065: PUSH
23066: LD_VAR 0 12
23070: PUSH
23071: LD_VAR 0 7
23075: ARRAY
23076: PUSH
23077: LD_INT 1
23079: ARRAY
23080: PPUSH
23081: LD_VAR 0 12
23085: PUSH
23086: LD_VAR 0 7
23090: ARRAY
23091: PUSH
23092: LD_INT 2
23094: ARRAY
23095: PPUSH
23096: CALL_OW 351
23100: OR
23101: IFFALSE 23107
// exit ;
23103: POP
23104: POP
23105: GO 23399
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
23107: LD_ADDR_VAR 0 8
23111: PUSH
23112: LD_VAR 0 12
23116: PUSH
23117: LD_VAR 0 7
23121: ARRAY
23122: PUSH
23123: LD_INT 1
23125: ARRAY
23126: PPUSH
23127: LD_VAR 0 12
23131: PUSH
23132: LD_VAR 0 7
23136: ARRAY
23137: PUSH
23138: LD_INT 2
23140: ARRAY
23141: PPUSH
23142: CALL_OW 546
23146: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
23147: LD_VAR 0 8
23151: PUSH
23152: LD_INT 1
23154: ARRAY
23155: PUSH
23156: LD_VAR 0 8
23160: PUSH
23161: LD_INT 2
23163: ARRAY
23164: PUSH
23165: LD_VAR 0 13
23169: PUSH
23170: LD_INT 2
23172: PLUS
23173: GREATER
23174: OR
23175: PUSH
23176: LD_VAR 0 8
23180: PUSH
23181: LD_INT 2
23183: ARRAY
23184: PUSH
23185: LD_VAR 0 13
23189: PUSH
23190: LD_INT 2
23192: MINUS
23193: LESS
23194: OR
23195: PUSH
23196: LD_VAR 0 8
23200: PUSH
23201: LD_INT 3
23203: ARRAY
23204: PUSH
23205: LD_INT 0
23207: PUSH
23208: LD_INT 8
23210: PUSH
23211: LD_INT 9
23213: PUSH
23214: LD_INT 10
23216: PUSH
23217: LD_INT 11
23219: PUSH
23220: LD_INT 12
23222: PUSH
23223: LD_INT 13
23225: PUSH
23226: LD_INT 16
23228: PUSH
23229: LD_INT 17
23231: PUSH
23232: LD_INT 18
23234: PUSH
23235: LD_INT 19
23237: PUSH
23238: LD_INT 20
23240: PUSH
23241: LD_INT 21
23243: PUSH
23244: EMPTY
23245: LIST
23246: LIST
23247: LIST
23248: LIST
23249: LIST
23250: LIST
23251: LIST
23252: LIST
23253: LIST
23254: LIST
23255: LIST
23256: LIST
23257: LIST
23258: IN
23259: NOT
23260: OR
23261: PUSH
23262: LD_VAR 0 8
23266: PUSH
23267: LD_INT 5
23269: ARRAY
23270: NOT
23271: OR
23272: PUSH
23273: LD_VAR 0 8
23277: PUSH
23278: LD_INT 6
23280: ARRAY
23281: PUSH
23282: LD_INT 1
23284: PUSH
23285: LD_INT 2
23287: PUSH
23288: LD_INT 7
23290: PUSH
23291: LD_INT 9
23293: PUSH
23294: LD_INT 10
23296: PUSH
23297: LD_INT 11
23299: PUSH
23300: EMPTY
23301: LIST
23302: LIST
23303: LIST
23304: LIST
23305: LIST
23306: LIST
23307: IN
23308: NOT
23309: OR
23310: IFFALSE 23316
// exit ;
23312: POP
23313: POP
23314: GO 23399
// end ;
23316: GO 22987
23318: POP
23319: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23320: LD_VAR 0 9
23324: PPUSH
23325: LD_VAR 0 3
23329: PPUSH
23330: LD_VAR 0 4
23334: PPUSH
23335: LD_INT 20
23337: PPUSH
23338: CALL 15345 0 4
23342: PUSH
23343: LD_INT 4
23345: ARRAY
23346: IFFALSE 23350
// exit ;
23348: GO 23399
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23350: LD_VAR 0 2
23354: PUSH
23355: LD_INT 29
23357: PUSH
23358: LD_INT 30
23360: PUSH
23361: EMPTY
23362: LIST
23363: LIST
23364: IN
23365: PUSH
23366: LD_VAR 0 3
23370: PPUSH
23371: LD_VAR 0 4
23375: PPUSH
23376: LD_VAR 0 9
23380: PPUSH
23381: CALL_OW 440
23385: NOT
23386: AND
23387: IFFALSE 23391
// exit ;
23389: GO 23399
// result := true ;
23391: LD_ADDR_VAR 0 6
23395: PUSH
23396: LD_INT 1
23398: ST_TO_ADDR
// end ;
23399: LD_VAR 0 6
23403: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23404: LD_INT 0
23406: PPUSH
23407: PPUSH
23408: PPUSH
23409: PPUSH
23410: PPUSH
23411: PPUSH
23412: PPUSH
23413: PPUSH
23414: PPUSH
23415: PPUSH
23416: PPUSH
23417: PPUSH
23418: PPUSH
23419: PPUSH
23420: PPUSH
23421: PPUSH
23422: PPUSH
23423: PPUSH
23424: PPUSH
23425: PPUSH
23426: PPUSH
23427: PPUSH
23428: PPUSH
23429: PPUSH
23430: PPUSH
23431: PPUSH
23432: PPUSH
23433: PPUSH
23434: PPUSH
23435: PPUSH
23436: PPUSH
23437: PPUSH
23438: PPUSH
23439: PPUSH
23440: PPUSH
23441: PPUSH
23442: PPUSH
23443: PPUSH
23444: PPUSH
23445: PPUSH
23446: PPUSH
23447: PPUSH
23448: PPUSH
23449: PPUSH
23450: PPUSH
23451: PPUSH
23452: PPUSH
23453: PPUSH
23454: PPUSH
23455: PPUSH
23456: PPUSH
23457: PPUSH
23458: PPUSH
23459: PPUSH
23460: PPUSH
23461: PPUSH
23462: PPUSH
23463: PPUSH
// result = [ ] ;
23464: LD_ADDR_VAR 0 7
23468: PUSH
23469: EMPTY
23470: ST_TO_ADDR
// temp_list = [ ] ;
23471: LD_ADDR_VAR 0 9
23475: PUSH
23476: EMPTY
23477: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23478: LD_VAR 0 4
23482: PUSH
23483: LD_INT 0
23485: PUSH
23486: LD_INT 1
23488: PUSH
23489: LD_INT 2
23491: PUSH
23492: LD_INT 3
23494: PUSH
23495: LD_INT 4
23497: PUSH
23498: LD_INT 5
23500: PUSH
23501: EMPTY
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: IN
23509: NOT
23510: PUSH
23511: LD_VAR 0 1
23515: PUSH
23516: LD_INT 0
23518: PUSH
23519: LD_INT 1
23521: PUSH
23522: EMPTY
23523: LIST
23524: LIST
23525: IN
23526: PUSH
23527: LD_VAR 0 5
23531: PUSH
23532: LD_INT 1
23534: PUSH
23535: LD_INT 2
23537: PUSH
23538: LD_INT 3
23540: PUSH
23541: EMPTY
23542: LIST
23543: LIST
23544: LIST
23545: IN
23546: NOT
23547: AND
23548: OR
23549: IFFALSE 23553
// exit ;
23551: GO 41944
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23553: LD_VAR 0 1
23557: PUSH
23558: LD_INT 6
23560: PUSH
23561: LD_INT 7
23563: PUSH
23564: LD_INT 8
23566: PUSH
23567: LD_INT 13
23569: PUSH
23570: LD_INT 12
23572: PUSH
23573: LD_INT 15
23575: PUSH
23576: LD_INT 11
23578: PUSH
23579: LD_INT 14
23581: PUSH
23582: LD_INT 10
23584: PUSH
23585: EMPTY
23586: LIST
23587: LIST
23588: LIST
23589: LIST
23590: LIST
23591: LIST
23592: LIST
23593: LIST
23594: LIST
23595: IN
23596: IFFALSE 23606
// btype = b_lab ;
23598: LD_ADDR_VAR 0 1
23602: PUSH
23603: LD_INT 6
23605: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23606: LD_VAR 0 6
23610: PUSH
23611: LD_INT 0
23613: PUSH
23614: LD_INT 1
23616: PUSH
23617: LD_INT 2
23619: PUSH
23620: EMPTY
23621: LIST
23622: LIST
23623: LIST
23624: IN
23625: NOT
23626: PUSH
23627: LD_VAR 0 1
23631: PUSH
23632: LD_INT 0
23634: PUSH
23635: LD_INT 1
23637: PUSH
23638: LD_INT 2
23640: PUSH
23641: LD_INT 3
23643: PUSH
23644: LD_INT 6
23646: PUSH
23647: LD_INT 36
23649: PUSH
23650: LD_INT 4
23652: PUSH
23653: LD_INT 5
23655: PUSH
23656: LD_INT 31
23658: PUSH
23659: LD_INT 32
23661: PUSH
23662: LD_INT 33
23664: PUSH
23665: EMPTY
23666: LIST
23667: LIST
23668: LIST
23669: LIST
23670: LIST
23671: LIST
23672: LIST
23673: LIST
23674: LIST
23675: LIST
23676: LIST
23677: IN
23678: NOT
23679: PUSH
23680: LD_VAR 0 6
23684: PUSH
23685: LD_INT 1
23687: EQUAL
23688: AND
23689: OR
23690: PUSH
23691: LD_VAR 0 1
23695: PUSH
23696: LD_INT 2
23698: PUSH
23699: LD_INT 3
23701: PUSH
23702: EMPTY
23703: LIST
23704: LIST
23705: IN
23706: NOT
23707: PUSH
23708: LD_VAR 0 6
23712: PUSH
23713: LD_INT 2
23715: EQUAL
23716: AND
23717: OR
23718: IFFALSE 23728
// mode = 0 ;
23720: LD_ADDR_VAR 0 6
23724: PUSH
23725: LD_INT 0
23727: ST_TO_ADDR
// case mode of 0 :
23728: LD_VAR 0 6
23732: PUSH
23733: LD_INT 0
23735: DOUBLE
23736: EQUAL
23737: IFTRUE 23741
23739: GO 35194
23741: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23742: LD_ADDR_VAR 0 11
23746: PUSH
23747: LD_INT 0
23749: PUSH
23750: LD_INT 0
23752: PUSH
23753: EMPTY
23754: LIST
23755: LIST
23756: PUSH
23757: LD_INT 0
23759: PUSH
23760: LD_INT 1
23762: NEG
23763: PUSH
23764: EMPTY
23765: LIST
23766: LIST
23767: PUSH
23768: LD_INT 1
23770: PUSH
23771: LD_INT 0
23773: PUSH
23774: EMPTY
23775: LIST
23776: LIST
23777: PUSH
23778: LD_INT 1
23780: PUSH
23781: LD_INT 1
23783: PUSH
23784: EMPTY
23785: LIST
23786: LIST
23787: PUSH
23788: LD_INT 0
23790: PUSH
23791: LD_INT 1
23793: PUSH
23794: EMPTY
23795: LIST
23796: LIST
23797: PUSH
23798: LD_INT 1
23800: NEG
23801: PUSH
23802: LD_INT 0
23804: PUSH
23805: EMPTY
23806: LIST
23807: LIST
23808: PUSH
23809: LD_INT 1
23811: NEG
23812: PUSH
23813: LD_INT 1
23815: NEG
23816: PUSH
23817: EMPTY
23818: LIST
23819: LIST
23820: PUSH
23821: LD_INT 1
23823: NEG
23824: PUSH
23825: LD_INT 2
23827: NEG
23828: PUSH
23829: EMPTY
23830: LIST
23831: LIST
23832: PUSH
23833: LD_INT 0
23835: PUSH
23836: LD_INT 2
23838: NEG
23839: PUSH
23840: EMPTY
23841: LIST
23842: LIST
23843: PUSH
23844: LD_INT 1
23846: PUSH
23847: LD_INT 1
23849: NEG
23850: PUSH
23851: EMPTY
23852: LIST
23853: LIST
23854: PUSH
23855: LD_INT 1
23857: PUSH
23858: LD_INT 2
23860: PUSH
23861: EMPTY
23862: LIST
23863: LIST
23864: PUSH
23865: LD_INT 0
23867: PUSH
23868: LD_INT 2
23870: PUSH
23871: EMPTY
23872: LIST
23873: LIST
23874: PUSH
23875: LD_INT 1
23877: NEG
23878: PUSH
23879: LD_INT 1
23881: PUSH
23882: EMPTY
23883: LIST
23884: LIST
23885: PUSH
23886: LD_INT 1
23888: PUSH
23889: LD_INT 3
23891: PUSH
23892: EMPTY
23893: LIST
23894: LIST
23895: PUSH
23896: LD_INT 0
23898: PUSH
23899: LD_INT 3
23901: PUSH
23902: EMPTY
23903: LIST
23904: LIST
23905: PUSH
23906: LD_INT 1
23908: NEG
23909: PUSH
23910: LD_INT 2
23912: PUSH
23913: EMPTY
23914: LIST
23915: LIST
23916: PUSH
23917: EMPTY
23918: LIST
23919: LIST
23920: LIST
23921: LIST
23922: LIST
23923: LIST
23924: LIST
23925: LIST
23926: LIST
23927: LIST
23928: LIST
23929: LIST
23930: LIST
23931: LIST
23932: LIST
23933: LIST
23934: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23935: LD_ADDR_VAR 0 12
23939: PUSH
23940: LD_INT 0
23942: PUSH
23943: LD_INT 0
23945: PUSH
23946: EMPTY
23947: LIST
23948: LIST
23949: PUSH
23950: LD_INT 0
23952: PUSH
23953: LD_INT 1
23955: NEG
23956: PUSH
23957: EMPTY
23958: LIST
23959: LIST
23960: PUSH
23961: LD_INT 1
23963: PUSH
23964: LD_INT 0
23966: PUSH
23967: EMPTY
23968: LIST
23969: LIST
23970: PUSH
23971: LD_INT 1
23973: PUSH
23974: LD_INT 1
23976: PUSH
23977: EMPTY
23978: LIST
23979: LIST
23980: PUSH
23981: LD_INT 0
23983: PUSH
23984: LD_INT 1
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: NEG
23994: PUSH
23995: LD_INT 0
23997: PUSH
23998: EMPTY
23999: LIST
24000: LIST
24001: PUSH
24002: LD_INT 1
24004: NEG
24005: PUSH
24006: LD_INT 1
24008: NEG
24009: PUSH
24010: EMPTY
24011: LIST
24012: LIST
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: LD_INT 1
24019: NEG
24020: PUSH
24021: EMPTY
24022: LIST
24023: LIST
24024: PUSH
24025: LD_INT 2
24027: PUSH
24028: LD_INT 0
24030: PUSH
24031: EMPTY
24032: LIST
24033: LIST
24034: PUSH
24035: LD_INT 2
24037: PUSH
24038: LD_INT 1
24040: PUSH
24041: EMPTY
24042: LIST
24043: LIST
24044: PUSH
24045: LD_INT 1
24047: NEG
24048: PUSH
24049: LD_INT 1
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: NEG
24059: PUSH
24060: LD_INT 0
24062: PUSH
24063: EMPTY
24064: LIST
24065: LIST
24066: PUSH
24067: LD_INT 2
24069: NEG
24070: PUSH
24071: LD_INT 1
24073: NEG
24074: PUSH
24075: EMPTY
24076: LIST
24077: LIST
24078: PUSH
24079: LD_INT 2
24081: NEG
24082: PUSH
24083: LD_INT 1
24085: PUSH
24086: EMPTY
24087: LIST
24088: LIST
24089: PUSH
24090: LD_INT 3
24092: NEG
24093: PUSH
24094: LD_INT 0
24096: PUSH
24097: EMPTY
24098: LIST
24099: LIST
24100: PUSH
24101: LD_INT 3
24103: NEG
24104: PUSH
24105: LD_INT 1
24107: NEG
24108: PUSH
24109: EMPTY
24110: LIST
24111: LIST
24112: PUSH
24113: EMPTY
24114: LIST
24115: LIST
24116: LIST
24117: LIST
24118: LIST
24119: LIST
24120: LIST
24121: LIST
24122: LIST
24123: LIST
24124: LIST
24125: LIST
24126: LIST
24127: LIST
24128: LIST
24129: LIST
24130: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
24131: LD_ADDR_VAR 0 13
24135: PUSH
24136: LD_INT 0
24138: PUSH
24139: LD_INT 0
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: LD_INT 0
24148: PUSH
24149: LD_INT 1
24151: NEG
24152: PUSH
24153: EMPTY
24154: LIST
24155: LIST
24156: PUSH
24157: LD_INT 1
24159: PUSH
24160: LD_INT 0
24162: PUSH
24163: EMPTY
24164: LIST
24165: LIST
24166: PUSH
24167: LD_INT 1
24169: PUSH
24170: LD_INT 1
24172: PUSH
24173: EMPTY
24174: LIST
24175: LIST
24176: PUSH
24177: LD_INT 0
24179: PUSH
24180: LD_INT 1
24182: PUSH
24183: EMPTY
24184: LIST
24185: LIST
24186: PUSH
24187: LD_INT 1
24189: NEG
24190: PUSH
24191: LD_INT 0
24193: PUSH
24194: EMPTY
24195: LIST
24196: LIST
24197: PUSH
24198: LD_INT 1
24200: NEG
24201: PUSH
24202: LD_INT 1
24204: NEG
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 1
24212: NEG
24213: PUSH
24214: LD_INT 2
24216: NEG
24217: PUSH
24218: EMPTY
24219: LIST
24220: LIST
24221: PUSH
24222: LD_INT 2
24224: PUSH
24225: LD_INT 1
24227: PUSH
24228: EMPTY
24229: LIST
24230: LIST
24231: PUSH
24232: LD_INT 2
24234: PUSH
24235: LD_INT 2
24237: PUSH
24238: EMPTY
24239: LIST
24240: LIST
24241: PUSH
24242: LD_INT 1
24244: PUSH
24245: LD_INT 2
24247: PUSH
24248: EMPTY
24249: LIST
24250: LIST
24251: PUSH
24252: LD_INT 2
24254: NEG
24255: PUSH
24256: LD_INT 1
24258: NEG
24259: PUSH
24260: EMPTY
24261: LIST
24262: LIST
24263: PUSH
24264: LD_INT 2
24266: NEG
24267: PUSH
24268: LD_INT 2
24270: NEG
24271: PUSH
24272: EMPTY
24273: LIST
24274: LIST
24275: PUSH
24276: LD_INT 2
24278: NEG
24279: PUSH
24280: LD_INT 3
24282: NEG
24283: PUSH
24284: EMPTY
24285: LIST
24286: LIST
24287: PUSH
24288: LD_INT 3
24290: NEG
24291: PUSH
24292: LD_INT 2
24294: NEG
24295: PUSH
24296: EMPTY
24297: LIST
24298: LIST
24299: PUSH
24300: LD_INT 3
24302: NEG
24303: PUSH
24304: LD_INT 3
24306: NEG
24307: PUSH
24308: EMPTY
24309: LIST
24310: LIST
24311: PUSH
24312: EMPTY
24313: LIST
24314: LIST
24315: LIST
24316: LIST
24317: LIST
24318: LIST
24319: LIST
24320: LIST
24321: LIST
24322: LIST
24323: LIST
24324: LIST
24325: LIST
24326: LIST
24327: LIST
24328: LIST
24329: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24330: LD_ADDR_VAR 0 14
24334: PUSH
24335: LD_INT 0
24337: PUSH
24338: LD_INT 0
24340: PUSH
24341: EMPTY
24342: LIST
24343: LIST
24344: PUSH
24345: LD_INT 0
24347: PUSH
24348: LD_INT 1
24350: NEG
24351: PUSH
24352: EMPTY
24353: LIST
24354: LIST
24355: PUSH
24356: LD_INT 1
24358: PUSH
24359: LD_INT 0
24361: PUSH
24362: EMPTY
24363: LIST
24364: LIST
24365: PUSH
24366: LD_INT 1
24368: PUSH
24369: LD_INT 1
24371: PUSH
24372: EMPTY
24373: LIST
24374: LIST
24375: PUSH
24376: LD_INT 0
24378: PUSH
24379: LD_INT 1
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: NEG
24389: PUSH
24390: LD_INT 0
24392: PUSH
24393: EMPTY
24394: LIST
24395: LIST
24396: PUSH
24397: LD_INT 1
24399: NEG
24400: PUSH
24401: LD_INT 1
24403: NEG
24404: PUSH
24405: EMPTY
24406: LIST
24407: LIST
24408: PUSH
24409: LD_INT 1
24411: NEG
24412: PUSH
24413: LD_INT 2
24415: NEG
24416: PUSH
24417: EMPTY
24418: LIST
24419: LIST
24420: PUSH
24421: LD_INT 0
24423: PUSH
24424: LD_INT 2
24426: NEG
24427: PUSH
24428: EMPTY
24429: LIST
24430: LIST
24431: PUSH
24432: LD_INT 1
24434: PUSH
24435: LD_INT 1
24437: NEG
24438: PUSH
24439: EMPTY
24440: LIST
24441: LIST
24442: PUSH
24443: LD_INT 1
24445: PUSH
24446: LD_INT 2
24448: PUSH
24449: EMPTY
24450: LIST
24451: LIST
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: LD_INT 2
24458: PUSH
24459: EMPTY
24460: LIST
24461: LIST
24462: PUSH
24463: LD_INT 1
24465: NEG
24466: PUSH
24467: LD_INT 1
24469: PUSH
24470: EMPTY
24471: LIST
24472: LIST
24473: PUSH
24474: LD_INT 1
24476: NEG
24477: PUSH
24478: LD_INT 3
24480: NEG
24481: PUSH
24482: EMPTY
24483: LIST
24484: LIST
24485: PUSH
24486: LD_INT 0
24488: PUSH
24489: LD_INT 3
24491: NEG
24492: PUSH
24493: EMPTY
24494: LIST
24495: LIST
24496: PUSH
24497: LD_INT 1
24499: PUSH
24500: LD_INT 2
24502: NEG
24503: PUSH
24504: EMPTY
24505: LIST
24506: LIST
24507: PUSH
24508: EMPTY
24509: LIST
24510: LIST
24511: LIST
24512: LIST
24513: LIST
24514: LIST
24515: LIST
24516: LIST
24517: LIST
24518: LIST
24519: LIST
24520: LIST
24521: LIST
24522: LIST
24523: LIST
24524: LIST
24525: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24526: LD_ADDR_VAR 0 15
24530: PUSH
24531: LD_INT 0
24533: PUSH
24534: LD_INT 0
24536: PUSH
24537: EMPTY
24538: LIST
24539: LIST
24540: PUSH
24541: LD_INT 0
24543: PUSH
24544: LD_INT 1
24546: NEG
24547: PUSH
24548: EMPTY
24549: LIST
24550: LIST
24551: PUSH
24552: LD_INT 1
24554: PUSH
24555: LD_INT 0
24557: PUSH
24558: EMPTY
24559: LIST
24560: LIST
24561: PUSH
24562: LD_INT 1
24564: PUSH
24565: LD_INT 1
24567: PUSH
24568: EMPTY
24569: LIST
24570: LIST
24571: PUSH
24572: LD_INT 0
24574: PUSH
24575: LD_INT 1
24577: PUSH
24578: EMPTY
24579: LIST
24580: LIST
24581: PUSH
24582: LD_INT 1
24584: NEG
24585: PUSH
24586: LD_INT 0
24588: PUSH
24589: EMPTY
24590: LIST
24591: LIST
24592: PUSH
24593: LD_INT 1
24595: NEG
24596: PUSH
24597: LD_INT 1
24599: NEG
24600: PUSH
24601: EMPTY
24602: LIST
24603: LIST
24604: PUSH
24605: LD_INT 1
24607: PUSH
24608: LD_INT 1
24610: NEG
24611: PUSH
24612: EMPTY
24613: LIST
24614: LIST
24615: PUSH
24616: LD_INT 2
24618: PUSH
24619: LD_INT 0
24621: PUSH
24622: EMPTY
24623: LIST
24624: LIST
24625: PUSH
24626: LD_INT 2
24628: PUSH
24629: LD_INT 1
24631: PUSH
24632: EMPTY
24633: LIST
24634: LIST
24635: PUSH
24636: LD_INT 1
24638: NEG
24639: PUSH
24640: LD_INT 1
24642: PUSH
24643: EMPTY
24644: LIST
24645: LIST
24646: PUSH
24647: LD_INT 2
24649: NEG
24650: PUSH
24651: LD_INT 0
24653: PUSH
24654: EMPTY
24655: LIST
24656: LIST
24657: PUSH
24658: LD_INT 2
24660: NEG
24661: PUSH
24662: LD_INT 1
24664: NEG
24665: PUSH
24666: EMPTY
24667: LIST
24668: LIST
24669: PUSH
24670: LD_INT 2
24672: PUSH
24673: LD_INT 1
24675: NEG
24676: PUSH
24677: EMPTY
24678: LIST
24679: LIST
24680: PUSH
24681: LD_INT 3
24683: PUSH
24684: LD_INT 0
24686: PUSH
24687: EMPTY
24688: LIST
24689: LIST
24690: PUSH
24691: LD_INT 3
24693: PUSH
24694: LD_INT 1
24696: PUSH
24697: EMPTY
24698: LIST
24699: LIST
24700: PUSH
24701: EMPTY
24702: LIST
24703: LIST
24704: LIST
24705: LIST
24706: LIST
24707: LIST
24708: LIST
24709: LIST
24710: LIST
24711: LIST
24712: LIST
24713: LIST
24714: LIST
24715: LIST
24716: LIST
24717: LIST
24718: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24719: LD_ADDR_VAR 0 16
24723: PUSH
24724: LD_INT 0
24726: PUSH
24727: LD_INT 0
24729: PUSH
24730: EMPTY
24731: LIST
24732: LIST
24733: PUSH
24734: LD_INT 0
24736: PUSH
24737: LD_INT 1
24739: NEG
24740: PUSH
24741: EMPTY
24742: LIST
24743: LIST
24744: PUSH
24745: LD_INT 1
24747: PUSH
24748: LD_INT 0
24750: PUSH
24751: EMPTY
24752: LIST
24753: LIST
24754: PUSH
24755: LD_INT 1
24757: PUSH
24758: LD_INT 1
24760: PUSH
24761: EMPTY
24762: LIST
24763: LIST
24764: PUSH
24765: LD_INT 0
24767: PUSH
24768: LD_INT 1
24770: PUSH
24771: EMPTY
24772: LIST
24773: LIST
24774: PUSH
24775: LD_INT 1
24777: NEG
24778: PUSH
24779: LD_INT 0
24781: PUSH
24782: EMPTY
24783: LIST
24784: LIST
24785: PUSH
24786: LD_INT 1
24788: NEG
24789: PUSH
24790: LD_INT 1
24792: NEG
24793: PUSH
24794: EMPTY
24795: LIST
24796: LIST
24797: PUSH
24798: LD_INT 1
24800: NEG
24801: PUSH
24802: LD_INT 2
24804: NEG
24805: PUSH
24806: EMPTY
24807: LIST
24808: LIST
24809: PUSH
24810: LD_INT 2
24812: PUSH
24813: LD_INT 1
24815: PUSH
24816: EMPTY
24817: LIST
24818: LIST
24819: PUSH
24820: LD_INT 2
24822: PUSH
24823: LD_INT 2
24825: PUSH
24826: EMPTY
24827: LIST
24828: LIST
24829: PUSH
24830: LD_INT 1
24832: PUSH
24833: LD_INT 2
24835: PUSH
24836: EMPTY
24837: LIST
24838: LIST
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: LD_INT 1
24846: NEG
24847: PUSH
24848: EMPTY
24849: LIST
24850: LIST
24851: PUSH
24852: LD_INT 2
24854: NEG
24855: PUSH
24856: LD_INT 2
24858: NEG
24859: PUSH
24860: EMPTY
24861: LIST
24862: LIST
24863: PUSH
24864: LD_INT 3
24866: PUSH
24867: LD_INT 2
24869: PUSH
24870: EMPTY
24871: LIST
24872: LIST
24873: PUSH
24874: LD_INT 3
24876: PUSH
24877: LD_INT 3
24879: PUSH
24880: EMPTY
24881: LIST
24882: LIST
24883: PUSH
24884: LD_INT 2
24886: PUSH
24887: LD_INT 3
24889: PUSH
24890: EMPTY
24891: LIST
24892: LIST
24893: PUSH
24894: EMPTY
24895: LIST
24896: LIST
24897: LIST
24898: LIST
24899: LIST
24900: LIST
24901: LIST
24902: LIST
24903: LIST
24904: LIST
24905: LIST
24906: LIST
24907: LIST
24908: LIST
24909: LIST
24910: LIST
24911: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24912: LD_ADDR_VAR 0 17
24916: PUSH
24917: LD_INT 0
24919: PUSH
24920: LD_INT 0
24922: PUSH
24923: EMPTY
24924: LIST
24925: LIST
24926: PUSH
24927: LD_INT 0
24929: PUSH
24930: LD_INT 1
24932: NEG
24933: PUSH
24934: EMPTY
24935: LIST
24936: LIST
24937: PUSH
24938: LD_INT 1
24940: PUSH
24941: LD_INT 0
24943: PUSH
24944: EMPTY
24945: LIST
24946: LIST
24947: PUSH
24948: LD_INT 1
24950: PUSH
24951: LD_INT 1
24953: PUSH
24954: EMPTY
24955: LIST
24956: LIST
24957: PUSH
24958: LD_INT 0
24960: PUSH
24961: LD_INT 1
24963: PUSH
24964: EMPTY
24965: LIST
24966: LIST
24967: PUSH
24968: LD_INT 1
24970: NEG
24971: PUSH
24972: LD_INT 0
24974: PUSH
24975: EMPTY
24976: LIST
24977: LIST
24978: PUSH
24979: LD_INT 1
24981: NEG
24982: PUSH
24983: LD_INT 1
24985: NEG
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 1
24993: NEG
24994: PUSH
24995: LD_INT 2
24997: NEG
24998: PUSH
24999: EMPTY
25000: LIST
25001: LIST
25002: PUSH
25003: LD_INT 0
25005: PUSH
25006: LD_INT 2
25008: NEG
25009: PUSH
25010: EMPTY
25011: LIST
25012: LIST
25013: PUSH
25014: LD_INT 1
25016: PUSH
25017: LD_INT 1
25019: NEG
25020: PUSH
25021: EMPTY
25022: LIST
25023: LIST
25024: PUSH
25025: LD_INT 2
25027: PUSH
25028: LD_INT 0
25030: PUSH
25031: EMPTY
25032: LIST
25033: LIST
25034: PUSH
25035: LD_INT 2
25037: PUSH
25038: LD_INT 1
25040: PUSH
25041: EMPTY
25042: LIST
25043: LIST
25044: PUSH
25045: LD_INT 2
25047: PUSH
25048: LD_INT 2
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: PUSH
25058: LD_INT 2
25060: PUSH
25061: EMPTY
25062: LIST
25063: LIST
25064: PUSH
25065: LD_INT 0
25067: PUSH
25068: LD_INT 2
25070: PUSH
25071: EMPTY
25072: LIST
25073: LIST
25074: PUSH
25075: LD_INT 1
25077: NEG
25078: PUSH
25079: LD_INT 1
25081: PUSH
25082: EMPTY
25083: LIST
25084: LIST
25085: PUSH
25086: LD_INT 2
25088: NEG
25089: PUSH
25090: LD_INT 0
25092: PUSH
25093: EMPTY
25094: LIST
25095: LIST
25096: PUSH
25097: LD_INT 2
25099: NEG
25100: PUSH
25101: LD_INT 1
25103: NEG
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: NEG
25112: PUSH
25113: LD_INT 2
25115: NEG
25116: PUSH
25117: EMPTY
25118: LIST
25119: LIST
25120: PUSH
25121: EMPTY
25122: LIST
25123: LIST
25124: LIST
25125: LIST
25126: LIST
25127: LIST
25128: LIST
25129: LIST
25130: LIST
25131: LIST
25132: LIST
25133: LIST
25134: LIST
25135: LIST
25136: LIST
25137: LIST
25138: LIST
25139: LIST
25140: LIST
25141: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25142: LD_ADDR_VAR 0 18
25146: PUSH
25147: LD_INT 0
25149: PUSH
25150: LD_INT 0
25152: PUSH
25153: EMPTY
25154: LIST
25155: LIST
25156: PUSH
25157: LD_INT 0
25159: PUSH
25160: LD_INT 1
25162: NEG
25163: PUSH
25164: EMPTY
25165: LIST
25166: LIST
25167: PUSH
25168: LD_INT 1
25170: PUSH
25171: LD_INT 0
25173: PUSH
25174: EMPTY
25175: LIST
25176: LIST
25177: PUSH
25178: LD_INT 1
25180: PUSH
25181: LD_INT 1
25183: PUSH
25184: EMPTY
25185: LIST
25186: LIST
25187: PUSH
25188: LD_INT 0
25190: PUSH
25191: LD_INT 1
25193: PUSH
25194: EMPTY
25195: LIST
25196: LIST
25197: PUSH
25198: LD_INT 1
25200: NEG
25201: PUSH
25202: LD_INT 0
25204: PUSH
25205: EMPTY
25206: LIST
25207: LIST
25208: PUSH
25209: LD_INT 1
25211: NEG
25212: PUSH
25213: LD_INT 1
25215: NEG
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 1
25223: NEG
25224: PUSH
25225: LD_INT 2
25227: NEG
25228: PUSH
25229: EMPTY
25230: LIST
25231: LIST
25232: PUSH
25233: LD_INT 0
25235: PUSH
25236: LD_INT 2
25238: NEG
25239: PUSH
25240: EMPTY
25241: LIST
25242: LIST
25243: PUSH
25244: LD_INT 1
25246: PUSH
25247: LD_INT 1
25249: NEG
25250: PUSH
25251: EMPTY
25252: LIST
25253: LIST
25254: PUSH
25255: LD_INT 2
25257: PUSH
25258: LD_INT 0
25260: PUSH
25261: EMPTY
25262: LIST
25263: LIST
25264: PUSH
25265: LD_INT 2
25267: PUSH
25268: LD_INT 1
25270: PUSH
25271: EMPTY
25272: LIST
25273: LIST
25274: PUSH
25275: LD_INT 2
25277: PUSH
25278: LD_INT 2
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: PUSH
25288: LD_INT 2
25290: PUSH
25291: EMPTY
25292: LIST
25293: LIST
25294: PUSH
25295: LD_INT 0
25297: PUSH
25298: LD_INT 2
25300: PUSH
25301: EMPTY
25302: LIST
25303: LIST
25304: PUSH
25305: LD_INT 1
25307: NEG
25308: PUSH
25309: LD_INT 1
25311: PUSH
25312: EMPTY
25313: LIST
25314: LIST
25315: PUSH
25316: LD_INT 2
25318: NEG
25319: PUSH
25320: LD_INT 0
25322: PUSH
25323: EMPTY
25324: LIST
25325: LIST
25326: PUSH
25327: LD_INT 2
25329: NEG
25330: PUSH
25331: LD_INT 1
25333: NEG
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: NEG
25342: PUSH
25343: LD_INT 2
25345: NEG
25346: PUSH
25347: EMPTY
25348: LIST
25349: LIST
25350: PUSH
25351: EMPTY
25352: LIST
25353: LIST
25354: LIST
25355: LIST
25356: LIST
25357: LIST
25358: LIST
25359: LIST
25360: LIST
25361: LIST
25362: LIST
25363: LIST
25364: LIST
25365: LIST
25366: LIST
25367: LIST
25368: LIST
25369: LIST
25370: LIST
25371: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25372: LD_ADDR_VAR 0 19
25376: PUSH
25377: LD_INT 0
25379: PUSH
25380: LD_INT 0
25382: PUSH
25383: EMPTY
25384: LIST
25385: LIST
25386: PUSH
25387: LD_INT 0
25389: PUSH
25390: LD_INT 1
25392: NEG
25393: PUSH
25394: EMPTY
25395: LIST
25396: LIST
25397: PUSH
25398: LD_INT 1
25400: PUSH
25401: LD_INT 0
25403: PUSH
25404: EMPTY
25405: LIST
25406: LIST
25407: PUSH
25408: LD_INT 1
25410: PUSH
25411: LD_INT 1
25413: PUSH
25414: EMPTY
25415: LIST
25416: LIST
25417: PUSH
25418: LD_INT 0
25420: PUSH
25421: LD_INT 1
25423: PUSH
25424: EMPTY
25425: LIST
25426: LIST
25427: PUSH
25428: LD_INT 1
25430: NEG
25431: PUSH
25432: LD_INT 0
25434: PUSH
25435: EMPTY
25436: LIST
25437: LIST
25438: PUSH
25439: LD_INT 1
25441: NEG
25442: PUSH
25443: LD_INT 1
25445: NEG
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 1
25453: NEG
25454: PUSH
25455: LD_INT 2
25457: NEG
25458: PUSH
25459: EMPTY
25460: LIST
25461: LIST
25462: PUSH
25463: LD_INT 0
25465: PUSH
25466: LD_INT 2
25468: NEG
25469: PUSH
25470: EMPTY
25471: LIST
25472: LIST
25473: PUSH
25474: LD_INT 1
25476: PUSH
25477: LD_INT 1
25479: NEG
25480: PUSH
25481: EMPTY
25482: LIST
25483: LIST
25484: PUSH
25485: LD_INT 2
25487: PUSH
25488: LD_INT 0
25490: PUSH
25491: EMPTY
25492: LIST
25493: LIST
25494: PUSH
25495: LD_INT 2
25497: PUSH
25498: LD_INT 1
25500: PUSH
25501: EMPTY
25502: LIST
25503: LIST
25504: PUSH
25505: LD_INT 2
25507: PUSH
25508: LD_INT 2
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: PUSH
25518: LD_INT 2
25520: PUSH
25521: EMPTY
25522: LIST
25523: LIST
25524: PUSH
25525: LD_INT 0
25527: PUSH
25528: LD_INT 2
25530: PUSH
25531: EMPTY
25532: LIST
25533: LIST
25534: PUSH
25535: LD_INT 1
25537: NEG
25538: PUSH
25539: LD_INT 1
25541: PUSH
25542: EMPTY
25543: LIST
25544: LIST
25545: PUSH
25546: LD_INT 2
25548: NEG
25549: PUSH
25550: LD_INT 0
25552: PUSH
25553: EMPTY
25554: LIST
25555: LIST
25556: PUSH
25557: LD_INT 2
25559: NEG
25560: PUSH
25561: LD_INT 1
25563: NEG
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: NEG
25572: PUSH
25573: LD_INT 2
25575: NEG
25576: PUSH
25577: EMPTY
25578: LIST
25579: LIST
25580: PUSH
25581: EMPTY
25582: LIST
25583: LIST
25584: LIST
25585: LIST
25586: LIST
25587: LIST
25588: LIST
25589: LIST
25590: LIST
25591: LIST
25592: LIST
25593: LIST
25594: LIST
25595: LIST
25596: LIST
25597: LIST
25598: LIST
25599: LIST
25600: LIST
25601: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25602: LD_ADDR_VAR 0 20
25606: PUSH
25607: LD_INT 0
25609: PUSH
25610: LD_INT 0
25612: PUSH
25613: EMPTY
25614: LIST
25615: LIST
25616: PUSH
25617: LD_INT 0
25619: PUSH
25620: LD_INT 1
25622: NEG
25623: PUSH
25624: EMPTY
25625: LIST
25626: LIST
25627: PUSH
25628: LD_INT 1
25630: PUSH
25631: LD_INT 0
25633: PUSH
25634: EMPTY
25635: LIST
25636: LIST
25637: PUSH
25638: LD_INT 1
25640: PUSH
25641: LD_INT 1
25643: PUSH
25644: EMPTY
25645: LIST
25646: LIST
25647: PUSH
25648: LD_INT 0
25650: PUSH
25651: LD_INT 1
25653: PUSH
25654: EMPTY
25655: LIST
25656: LIST
25657: PUSH
25658: LD_INT 1
25660: NEG
25661: PUSH
25662: LD_INT 0
25664: PUSH
25665: EMPTY
25666: LIST
25667: LIST
25668: PUSH
25669: LD_INT 1
25671: NEG
25672: PUSH
25673: LD_INT 1
25675: NEG
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 1
25683: NEG
25684: PUSH
25685: LD_INT 2
25687: NEG
25688: PUSH
25689: EMPTY
25690: LIST
25691: LIST
25692: PUSH
25693: LD_INT 0
25695: PUSH
25696: LD_INT 2
25698: NEG
25699: PUSH
25700: EMPTY
25701: LIST
25702: LIST
25703: PUSH
25704: LD_INT 1
25706: PUSH
25707: LD_INT 1
25709: NEG
25710: PUSH
25711: EMPTY
25712: LIST
25713: LIST
25714: PUSH
25715: LD_INT 2
25717: PUSH
25718: LD_INT 0
25720: PUSH
25721: EMPTY
25722: LIST
25723: LIST
25724: PUSH
25725: LD_INT 2
25727: PUSH
25728: LD_INT 1
25730: PUSH
25731: EMPTY
25732: LIST
25733: LIST
25734: PUSH
25735: LD_INT 2
25737: PUSH
25738: LD_INT 2
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: PUSH
25748: LD_INT 2
25750: PUSH
25751: EMPTY
25752: LIST
25753: LIST
25754: PUSH
25755: LD_INT 0
25757: PUSH
25758: LD_INT 2
25760: PUSH
25761: EMPTY
25762: LIST
25763: LIST
25764: PUSH
25765: LD_INT 1
25767: NEG
25768: PUSH
25769: LD_INT 1
25771: PUSH
25772: EMPTY
25773: LIST
25774: LIST
25775: PUSH
25776: LD_INT 2
25778: NEG
25779: PUSH
25780: LD_INT 0
25782: PUSH
25783: EMPTY
25784: LIST
25785: LIST
25786: PUSH
25787: LD_INT 2
25789: NEG
25790: PUSH
25791: LD_INT 1
25793: NEG
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: NEG
25802: PUSH
25803: LD_INT 2
25805: NEG
25806: PUSH
25807: EMPTY
25808: LIST
25809: LIST
25810: PUSH
25811: EMPTY
25812: LIST
25813: LIST
25814: LIST
25815: LIST
25816: LIST
25817: LIST
25818: LIST
25819: LIST
25820: LIST
25821: LIST
25822: LIST
25823: LIST
25824: LIST
25825: LIST
25826: LIST
25827: LIST
25828: LIST
25829: LIST
25830: LIST
25831: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25832: LD_ADDR_VAR 0 21
25836: PUSH
25837: LD_INT 0
25839: PUSH
25840: LD_INT 0
25842: PUSH
25843: EMPTY
25844: LIST
25845: LIST
25846: PUSH
25847: LD_INT 0
25849: PUSH
25850: LD_INT 1
25852: NEG
25853: PUSH
25854: EMPTY
25855: LIST
25856: LIST
25857: PUSH
25858: LD_INT 1
25860: PUSH
25861: LD_INT 0
25863: PUSH
25864: EMPTY
25865: LIST
25866: LIST
25867: PUSH
25868: LD_INT 1
25870: PUSH
25871: LD_INT 1
25873: PUSH
25874: EMPTY
25875: LIST
25876: LIST
25877: PUSH
25878: LD_INT 0
25880: PUSH
25881: LD_INT 1
25883: PUSH
25884: EMPTY
25885: LIST
25886: LIST
25887: PUSH
25888: LD_INT 1
25890: NEG
25891: PUSH
25892: LD_INT 0
25894: PUSH
25895: EMPTY
25896: LIST
25897: LIST
25898: PUSH
25899: LD_INT 1
25901: NEG
25902: PUSH
25903: LD_INT 1
25905: NEG
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 1
25913: NEG
25914: PUSH
25915: LD_INT 2
25917: NEG
25918: PUSH
25919: EMPTY
25920: LIST
25921: LIST
25922: PUSH
25923: LD_INT 0
25925: PUSH
25926: LD_INT 2
25928: NEG
25929: PUSH
25930: EMPTY
25931: LIST
25932: LIST
25933: PUSH
25934: LD_INT 1
25936: PUSH
25937: LD_INT 1
25939: NEG
25940: PUSH
25941: EMPTY
25942: LIST
25943: LIST
25944: PUSH
25945: LD_INT 2
25947: PUSH
25948: LD_INT 0
25950: PUSH
25951: EMPTY
25952: LIST
25953: LIST
25954: PUSH
25955: LD_INT 2
25957: PUSH
25958: LD_INT 1
25960: PUSH
25961: EMPTY
25962: LIST
25963: LIST
25964: PUSH
25965: LD_INT 2
25967: PUSH
25968: LD_INT 2
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: PUSH
25978: LD_INT 2
25980: PUSH
25981: EMPTY
25982: LIST
25983: LIST
25984: PUSH
25985: LD_INT 0
25987: PUSH
25988: LD_INT 2
25990: PUSH
25991: EMPTY
25992: LIST
25993: LIST
25994: PUSH
25995: LD_INT 1
25997: NEG
25998: PUSH
25999: LD_INT 1
26001: PUSH
26002: EMPTY
26003: LIST
26004: LIST
26005: PUSH
26006: LD_INT 2
26008: NEG
26009: PUSH
26010: LD_INT 0
26012: PUSH
26013: EMPTY
26014: LIST
26015: LIST
26016: PUSH
26017: LD_INT 2
26019: NEG
26020: PUSH
26021: LD_INT 1
26023: NEG
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: NEG
26032: PUSH
26033: LD_INT 2
26035: NEG
26036: PUSH
26037: EMPTY
26038: LIST
26039: LIST
26040: PUSH
26041: EMPTY
26042: LIST
26043: LIST
26044: LIST
26045: LIST
26046: LIST
26047: LIST
26048: LIST
26049: LIST
26050: LIST
26051: LIST
26052: LIST
26053: LIST
26054: LIST
26055: LIST
26056: LIST
26057: LIST
26058: LIST
26059: LIST
26060: LIST
26061: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
26062: LD_ADDR_VAR 0 22
26066: PUSH
26067: LD_INT 0
26069: PUSH
26070: LD_INT 0
26072: PUSH
26073: EMPTY
26074: LIST
26075: LIST
26076: PUSH
26077: LD_INT 0
26079: PUSH
26080: LD_INT 1
26082: NEG
26083: PUSH
26084: EMPTY
26085: LIST
26086: LIST
26087: PUSH
26088: LD_INT 1
26090: PUSH
26091: LD_INT 0
26093: PUSH
26094: EMPTY
26095: LIST
26096: LIST
26097: PUSH
26098: LD_INT 1
26100: PUSH
26101: LD_INT 1
26103: PUSH
26104: EMPTY
26105: LIST
26106: LIST
26107: PUSH
26108: LD_INT 0
26110: PUSH
26111: LD_INT 1
26113: PUSH
26114: EMPTY
26115: LIST
26116: LIST
26117: PUSH
26118: LD_INT 1
26120: NEG
26121: PUSH
26122: LD_INT 0
26124: PUSH
26125: EMPTY
26126: LIST
26127: LIST
26128: PUSH
26129: LD_INT 1
26131: NEG
26132: PUSH
26133: LD_INT 1
26135: NEG
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 1
26143: NEG
26144: PUSH
26145: LD_INT 2
26147: NEG
26148: PUSH
26149: EMPTY
26150: LIST
26151: LIST
26152: PUSH
26153: LD_INT 0
26155: PUSH
26156: LD_INT 2
26158: NEG
26159: PUSH
26160: EMPTY
26161: LIST
26162: LIST
26163: PUSH
26164: LD_INT 1
26166: PUSH
26167: LD_INT 1
26169: NEG
26170: PUSH
26171: EMPTY
26172: LIST
26173: LIST
26174: PUSH
26175: LD_INT 2
26177: PUSH
26178: LD_INT 0
26180: PUSH
26181: EMPTY
26182: LIST
26183: LIST
26184: PUSH
26185: LD_INT 2
26187: PUSH
26188: LD_INT 1
26190: PUSH
26191: EMPTY
26192: LIST
26193: LIST
26194: PUSH
26195: LD_INT 2
26197: PUSH
26198: LD_INT 2
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: PUSH
26208: LD_INT 2
26210: PUSH
26211: EMPTY
26212: LIST
26213: LIST
26214: PUSH
26215: LD_INT 0
26217: PUSH
26218: LD_INT 2
26220: PUSH
26221: EMPTY
26222: LIST
26223: LIST
26224: PUSH
26225: LD_INT 1
26227: NEG
26228: PUSH
26229: LD_INT 1
26231: PUSH
26232: EMPTY
26233: LIST
26234: LIST
26235: PUSH
26236: LD_INT 2
26238: NEG
26239: PUSH
26240: LD_INT 0
26242: PUSH
26243: EMPTY
26244: LIST
26245: LIST
26246: PUSH
26247: LD_INT 2
26249: NEG
26250: PUSH
26251: LD_INT 1
26253: NEG
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: NEG
26262: PUSH
26263: LD_INT 2
26265: NEG
26266: PUSH
26267: EMPTY
26268: LIST
26269: LIST
26270: PUSH
26271: EMPTY
26272: LIST
26273: LIST
26274: LIST
26275: LIST
26276: LIST
26277: LIST
26278: LIST
26279: LIST
26280: LIST
26281: LIST
26282: LIST
26283: LIST
26284: LIST
26285: LIST
26286: LIST
26287: LIST
26288: LIST
26289: LIST
26290: LIST
26291: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26292: LD_ADDR_VAR 0 23
26296: PUSH
26297: LD_INT 0
26299: PUSH
26300: LD_INT 0
26302: PUSH
26303: EMPTY
26304: LIST
26305: LIST
26306: PUSH
26307: LD_INT 0
26309: PUSH
26310: LD_INT 1
26312: NEG
26313: PUSH
26314: EMPTY
26315: LIST
26316: LIST
26317: PUSH
26318: LD_INT 1
26320: PUSH
26321: LD_INT 0
26323: PUSH
26324: EMPTY
26325: LIST
26326: LIST
26327: PUSH
26328: LD_INT 1
26330: PUSH
26331: LD_INT 1
26333: PUSH
26334: EMPTY
26335: LIST
26336: LIST
26337: PUSH
26338: LD_INT 0
26340: PUSH
26341: LD_INT 1
26343: PUSH
26344: EMPTY
26345: LIST
26346: LIST
26347: PUSH
26348: LD_INT 1
26350: NEG
26351: PUSH
26352: LD_INT 0
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: NEG
26362: PUSH
26363: LD_INT 1
26365: NEG
26366: PUSH
26367: EMPTY
26368: LIST
26369: LIST
26370: PUSH
26371: LD_INT 1
26373: NEG
26374: PUSH
26375: LD_INT 2
26377: NEG
26378: PUSH
26379: EMPTY
26380: LIST
26381: LIST
26382: PUSH
26383: LD_INT 0
26385: PUSH
26386: LD_INT 2
26388: NEG
26389: PUSH
26390: EMPTY
26391: LIST
26392: LIST
26393: PUSH
26394: LD_INT 1
26396: PUSH
26397: LD_INT 1
26399: NEG
26400: PUSH
26401: EMPTY
26402: LIST
26403: LIST
26404: PUSH
26405: LD_INT 2
26407: PUSH
26408: LD_INT 0
26410: PUSH
26411: EMPTY
26412: LIST
26413: LIST
26414: PUSH
26415: LD_INT 2
26417: PUSH
26418: LD_INT 1
26420: PUSH
26421: EMPTY
26422: LIST
26423: LIST
26424: PUSH
26425: LD_INT 2
26427: PUSH
26428: LD_INT 2
26430: PUSH
26431: EMPTY
26432: LIST
26433: LIST
26434: PUSH
26435: LD_INT 1
26437: PUSH
26438: LD_INT 2
26440: PUSH
26441: EMPTY
26442: LIST
26443: LIST
26444: PUSH
26445: LD_INT 0
26447: PUSH
26448: LD_INT 2
26450: PUSH
26451: EMPTY
26452: LIST
26453: LIST
26454: PUSH
26455: LD_INT 1
26457: NEG
26458: PUSH
26459: LD_INT 1
26461: PUSH
26462: EMPTY
26463: LIST
26464: LIST
26465: PUSH
26466: LD_INT 2
26468: NEG
26469: PUSH
26470: LD_INT 0
26472: PUSH
26473: EMPTY
26474: LIST
26475: LIST
26476: PUSH
26477: LD_INT 2
26479: NEG
26480: PUSH
26481: LD_INT 1
26483: NEG
26484: PUSH
26485: EMPTY
26486: LIST
26487: LIST
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: LD_INT 2
26495: NEG
26496: PUSH
26497: EMPTY
26498: LIST
26499: LIST
26500: PUSH
26501: LD_INT 2
26503: NEG
26504: PUSH
26505: LD_INT 3
26507: NEG
26508: PUSH
26509: EMPTY
26510: LIST
26511: LIST
26512: PUSH
26513: LD_INT 1
26515: NEG
26516: PUSH
26517: LD_INT 3
26519: NEG
26520: PUSH
26521: EMPTY
26522: LIST
26523: LIST
26524: PUSH
26525: LD_INT 1
26527: PUSH
26528: LD_INT 2
26530: NEG
26531: PUSH
26532: EMPTY
26533: LIST
26534: LIST
26535: PUSH
26536: LD_INT 2
26538: PUSH
26539: LD_INT 1
26541: NEG
26542: PUSH
26543: EMPTY
26544: LIST
26545: LIST
26546: PUSH
26547: EMPTY
26548: LIST
26549: LIST
26550: LIST
26551: LIST
26552: LIST
26553: LIST
26554: LIST
26555: LIST
26556: LIST
26557: LIST
26558: LIST
26559: LIST
26560: LIST
26561: LIST
26562: LIST
26563: LIST
26564: LIST
26565: LIST
26566: LIST
26567: LIST
26568: LIST
26569: LIST
26570: LIST
26571: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26572: LD_ADDR_VAR 0 24
26576: PUSH
26577: LD_INT 0
26579: PUSH
26580: LD_INT 0
26582: PUSH
26583: EMPTY
26584: LIST
26585: LIST
26586: PUSH
26587: LD_INT 0
26589: PUSH
26590: LD_INT 1
26592: NEG
26593: PUSH
26594: EMPTY
26595: LIST
26596: LIST
26597: PUSH
26598: LD_INT 1
26600: PUSH
26601: LD_INT 0
26603: PUSH
26604: EMPTY
26605: LIST
26606: LIST
26607: PUSH
26608: LD_INT 1
26610: PUSH
26611: LD_INT 1
26613: PUSH
26614: EMPTY
26615: LIST
26616: LIST
26617: PUSH
26618: LD_INT 0
26620: PUSH
26621: LD_INT 1
26623: PUSH
26624: EMPTY
26625: LIST
26626: LIST
26627: PUSH
26628: LD_INT 1
26630: NEG
26631: PUSH
26632: LD_INT 0
26634: PUSH
26635: EMPTY
26636: LIST
26637: LIST
26638: PUSH
26639: LD_INT 1
26641: NEG
26642: PUSH
26643: LD_INT 1
26645: NEG
26646: PUSH
26647: EMPTY
26648: LIST
26649: LIST
26650: PUSH
26651: LD_INT 1
26653: NEG
26654: PUSH
26655: LD_INT 2
26657: NEG
26658: PUSH
26659: EMPTY
26660: LIST
26661: LIST
26662: PUSH
26663: LD_INT 0
26665: PUSH
26666: LD_INT 2
26668: NEG
26669: PUSH
26670: EMPTY
26671: LIST
26672: LIST
26673: PUSH
26674: LD_INT 1
26676: PUSH
26677: LD_INT 1
26679: NEG
26680: PUSH
26681: EMPTY
26682: LIST
26683: LIST
26684: PUSH
26685: LD_INT 2
26687: PUSH
26688: LD_INT 0
26690: PUSH
26691: EMPTY
26692: LIST
26693: LIST
26694: PUSH
26695: LD_INT 2
26697: PUSH
26698: LD_INT 1
26700: PUSH
26701: EMPTY
26702: LIST
26703: LIST
26704: PUSH
26705: LD_INT 2
26707: PUSH
26708: LD_INT 2
26710: PUSH
26711: EMPTY
26712: LIST
26713: LIST
26714: PUSH
26715: LD_INT 1
26717: PUSH
26718: LD_INT 2
26720: PUSH
26721: EMPTY
26722: LIST
26723: LIST
26724: PUSH
26725: LD_INT 0
26727: PUSH
26728: LD_INT 2
26730: PUSH
26731: EMPTY
26732: LIST
26733: LIST
26734: PUSH
26735: LD_INT 1
26737: NEG
26738: PUSH
26739: LD_INT 1
26741: PUSH
26742: EMPTY
26743: LIST
26744: LIST
26745: PUSH
26746: LD_INT 2
26748: NEG
26749: PUSH
26750: LD_INT 0
26752: PUSH
26753: EMPTY
26754: LIST
26755: LIST
26756: PUSH
26757: LD_INT 2
26759: NEG
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: EMPTY
26766: LIST
26767: LIST
26768: PUSH
26769: LD_INT 2
26771: NEG
26772: PUSH
26773: LD_INT 2
26775: NEG
26776: PUSH
26777: EMPTY
26778: LIST
26779: LIST
26780: PUSH
26781: LD_INT 1
26783: PUSH
26784: LD_INT 2
26786: NEG
26787: PUSH
26788: EMPTY
26789: LIST
26790: LIST
26791: PUSH
26792: LD_INT 2
26794: PUSH
26795: LD_INT 1
26797: NEG
26798: PUSH
26799: EMPTY
26800: LIST
26801: LIST
26802: PUSH
26803: LD_INT 3
26805: PUSH
26806: LD_INT 1
26808: PUSH
26809: EMPTY
26810: LIST
26811: LIST
26812: PUSH
26813: LD_INT 3
26815: PUSH
26816: LD_INT 2
26818: PUSH
26819: EMPTY
26820: LIST
26821: LIST
26822: PUSH
26823: EMPTY
26824: LIST
26825: LIST
26826: LIST
26827: LIST
26828: LIST
26829: LIST
26830: LIST
26831: LIST
26832: LIST
26833: LIST
26834: LIST
26835: LIST
26836: LIST
26837: LIST
26838: LIST
26839: LIST
26840: LIST
26841: LIST
26842: LIST
26843: LIST
26844: LIST
26845: LIST
26846: LIST
26847: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26848: LD_ADDR_VAR 0 25
26852: PUSH
26853: LD_INT 0
26855: PUSH
26856: LD_INT 0
26858: PUSH
26859: EMPTY
26860: LIST
26861: LIST
26862: PUSH
26863: LD_INT 0
26865: PUSH
26866: LD_INT 1
26868: NEG
26869: PUSH
26870: EMPTY
26871: LIST
26872: LIST
26873: PUSH
26874: LD_INT 1
26876: PUSH
26877: LD_INT 0
26879: PUSH
26880: EMPTY
26881: LIST
26882: LIST
26883: PUSH
26884: LD_INT 1
26886: PUSH
26887: LD_INT 1
26889: PUSH
26890: EMPTY
26891: LIST
26892: LIST
26893: PUSH
26894: LD_INT 0
26896: PUSH
26897: LD_INT 1
26899: PUSH
26900: EMPTY
26901: LIST
26902: LIST
26903: PUSH
26904: LD_INT 1
26906: NEG
26907: PUSH
26908: LD_INT 0
26910: PUSH
26911: EMPTY
26912: LIST
26913: LIST
26914: PUSH
26915: LD_INT 1
26917: NEG
26918: PUSH
26919: LD_INT 1
26921: NEG
26922: PUSH
26923: EMPTY
26924: LIST
26925: LIST
26926: PUSH
26927: LD_INT 1
26929: NEG
26930: PUSH
26931: LD_INT 2
26933: NEG
26934: PUSH
26935: EMPTY
26936: LIST
26937: LIST
26938: PUSH
26939: LD_INT 0
26941: PUSH
26942: LD_INT 2
26944: NEG
26945: PUSH
26946: EMPTY
26947: LIST
26948: LIST
26949: PUSH
26950: LD_INT 1
26952: PUSH
26953: LD_INT 1
26955: NEG
26956: PUSH
26957: EMPTY
26958: LIST
26959: LIST
26960: PUSH
26961: LD_INT 2
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 2
26973: PUSH
26974: LD_INT 1
26976: PUSH
26977: EMPTY
26978: LIST
26979: LIST
26980: PUSH
26981: LD_INT 2
26983: PUSH
26984: LD_INT 2
26986: PUSH
26987: EMPTY
26988: LIST
26989: LIST
26990: PUSH
26991: LD_INT 1
26993: PUSH
26994: LD_INT 2
26996: PUSH
26997: EMPTY
26998: LIST
26999: LIST
27000: PUSH
27001: LD_INT 0
27003: PUSH
27004: LD_INT 2
27006: PUSH
27007: EMPTY
27008: LIST
27009: LIST
27010: PUSH
27011: LD_INT 1
27013: NEG
27014: PUSH
27015: LD_INT 1
27017: PUSH
27018: EMPTY
27019: LIST
27020: LIST
27021: PUSH
27022: LD_INT 2
27024: NEG
27025: PUSH
27026: LD_INT 0
27028: PUSH
27029: EMPTY
27030: LIST
27031: LIST
27032: PUSH
27033: LD_INT 2
27035: NEG
27036: PUSH
27037: LD_INT 1
27039: NEG
27040: PUSH
27041: EMPTY
27042: LIST
27043: LIST
27044: PUSH
27045: LD_INT 2
27047: NEG
27048: PUSH
27049: LD_INT 2
27051: NEG
27052: PUSH
27053: EMPTY
27054: LIST
27055: LIST
27056: PUSH
27057: LD_INT 3
27059: PUSH
27060: LD_INT 1
27062: PUSH
27063: EMPTY
27064: LIST
27065: LIST
27066: PUSH
27067: LD_INT 3
27069: PUSH
27070: LD_INT 2
27072: PUSH
27073: EMPTY
27074: LIST
27075: LIST
27076: PUSH
27077: LD_INT 2
27079: PUSH
27080: LD_INT 3
27082: PUSH
27083: EMPTY
27084: LIST
27085: LIST
27086: PUSH
27087: LD_INT 1
27089: PUSH
27090: LD_INT 3
27092: PUSH
27093: EMPTY
27094: LIST
27095: LIST
27096: PUSH
27097: EMPTY
27098: LIST
27099: LIST
27100: LIST
27101: LIST
27102: LIST
27103: LIST
27104: LIST
27105: LIST
27106: LIST
27107: LIST
27108: LIST
27109: LIST
27110: LIST
27111: LIST
27112: LIST
27113: LIST
27114: LIST
27115: LIST
27116: LIST
27117: LIST
27118: LIST
27119: LIST
27120: LIST
27121: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
27122: LD_ADDR_VAR 0 26
27126: PUSH
27127: LD_INT 0
27129: PUSH
27130: LD_INT 0
27132: PUSH
27133: EMPTY
27134: LIST
27135: LIST
27136: PUSH
27137: LD_INT 0
27139: PUSH
27140: LD_INT 1
27142: NEG
27143: PUSH
27144: EMPTY
27145: LIST
27146: LIST
27147: PUSH
27148: LD_INT 1
27150: PUSH
27151: LD_INT 0
27153: PUSH
27154: EMPTY
27155: LIST
27156: LIST
27157: PUSH
27158: LD_INT 1
27160: PUSH
27161: LD_INT 1
27163: PUSH
27164: EMPTY
27165: LIST
27166: LIST
27167: PUSH
27168: LD_INT 0
27170: PUSH
27171: LD_INT 1
27173: PUSH
27174: EMPTY
27175: LIST
27176: LIST
27177: PUSH
27178: LD_INT 1
27180: NEG
27181: PUSH
27182: LD_INT 0
27184: PUSH
27185: EMPTY
27186: LIST
27187: LIST
27188: PUSH
27189: LD_INT 1
27191: NEG
27192: PUSH
27193: LD_INT 1
27195: NEG
27196: PUSH
27197: EMPTY
27198: LIST
27199: LIST
27200: PUSH
27201: LD_INT 1
27203: NEG
27204: PUSH
27205: LD_INT 2
27207: NEG
27208: PUSH
27209: EMPTY
27210: LIST
27211: LIST
27212: PUSH
27213: LD_INT 0
27215: PUSH
27216: LD_INT 2
27218: NEG
27219: PUSH
27220: EMPTY
27221: LIST
27222: LIST
27223: PUSH
27224: LD_INT 1
27226: PUSH
27227: LD_INT 1
27229: NEG
27230: PUSH
27231: EMPTY
27232: LIST
27233: LIST
27234: PUSH
27235: LD_INT 2
27237: PUSH
27238: LD_INT 0
27240: PUSH
27241: EMPTY
27242: LIST
27243: LIST
27244: PUSH
27245: LD_INT 2
27247: PUSH
27248: LD_INT 1
27250: PUSH
27251: EMPTY
27252: LIST
27253: LIST
27254: PUSH
27255: LD_INT 2
27257: PUSH
27258: LD_INT 2
27260: PUSH
27261: EMPTY
27262: LIST
27263: LIST
27264: PUSH
27265: LD_INT 1
27267: PUSH
27268: LD_INT 2
27270: PUSH
27271: EMPTY
27272: LIST
27273: LIST
27274: PUSH
27275: LD_INT 0
27277: PUSH
27278: LD_INT 2
27280: PUSH
27281: EMPTY
27282: LIST
27283: LIST
27284: PUSH
27285: LD_INT 1
27287: NEG
27288: PUSH
27289: LD_INT 1
27291: PUSH
27292: EMPTY
27293: LIST
27294: LIST
27295: PUSH
27296: LD_INT 2
27298: NEG
27299: PUSH
27300: LD_INT 0
27302: PUSH
27303: EMPTY
27304: LIST
27305: LIST
27306: PUSH
27307: LD_INT 2
27309: NEG
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: EMPTY
27316: LIST
27317: LIST
27318: PUSH
27319: LD_INT 2
27321: NEG
27322: PUSH
27323: LD_INT 2
27325: NEG
27326: PUSH
27327: EMPTY
27328: LIST
27329: LIST
27330: PUSH
27331: LD_INT 2
27333: PUSH
27334: LD_INT 3
27336: PUSH
27337: EMPTY
27338: LIST
27339: LIST
27340: PUSH
27341: LD_INT 1
27343: PUSH
27344: LD_INT 3
27346: PUSH
27347: EMPTY
27348: LIST
27349: LIST
27350: PUSH
27351: LD_INT 1
27353: NEG
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: EMPTY
27359: LIST
27360: LIST
27361: PUSH
27362: LD_INT 2
27364: NEG
27365: PUSH
27366: LD_INT 1
27368: PUSH
27369: EMPTY
27370: LIST
27371: LIST
27372: PUSH
27373: EMPTY
27374: LIST
27375: LIST
27376: LIST
27377: LIST
27378: LIST
27379: LIST
27380: LIST
27381: LIST
27382: LIST
27383: LIST
27384: LIST
27385: LIST
27386: LIST
27387: LIST
27388: LIST
27389: LIST
27390: LIST
27391: LIST
27392: LIST
27393: LIST
27394: LIST
27395: LIST
27396: LIST
27397: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27398: LD_ADDR_VAR 0 27
27402: PUSH
27403: LD_INT 0
27405: PUSH
27406: LD_INT 0
27408: PUSH
27409: EMPTY
27410: LIST
27411: LIST
27412: PUSH
27413: LD_INT 0
27415: PUSH
27416: LD_INT 1
27418: NEG
27419: PUSH
27420: EMPTY
27421: LIST
27422: LIST
27423: PUSH
27424: LD_INT 1
27426: PUSH
27427: LD_INT 0
27429: PUSH
27430: EMPTY
27431: LIST
27432: LIST
27433: PUSH
27434: LD_INT 1
27436: PUSH
27437: LD_INT 1
27439: PUSH
27440: EMPTY
27441: LIST
27442: LIST
27443: PUSH
27444: LD_INT 0
27446: PUSH
27447: LD_INT 1
27449: PUSH
27450: EMPTY
27451: LIST
27452: LIST
27453: PUSH
27454: LD_INT 1
27456: NEG
27457: PUSH
27458: LD_INT 0
27460: PUSH
27461: EMPTY
27462: LIST
27463: LIST
27464: PUSH
27465: LD_INT 1
27467: NEG
27468: PUSH
27469: LD_INT 1
27471: NEG
27472: PUSH
27473: EMPTY
27474: LIST
27475: LIST
27476: PUSH
27477: LD_INT 1
27479: NEG
27480: PUSH
27481: LD_INT 2
27483: NEG
27484: PUSH
27485: EMPTY
27486: LIST
27487: LIST
27488: PUSH
27489: LD_INT 0
27491: PUSH
27492: LD_INT 2
27494: NEG
27495: PUSH
27496: EMPTY
27497: LIST
27498: LIST
27499: PUSH
27500: LD_INT 1
27502: PUSH
27503: LD_INT 1
27505: NEG
27506: PUSH
27507: EMPTY
27508: LIST
27509: LIST
27510: PUSH
27511: LD_INT 2
27513: PUSH
27514: LD_INT 0
27516: PUSH
27517: EMPTY
27518: LIST
27519: LIST
27520: PUSH
27521: LD_INT 2
27523: PUSH
27524: LD_INT 1
27526: PUSH
27527: EMPTY
27528: LIST
27529: LIST
27530: PUSH
27531: LD_INT 2
27533: PUSH
27534: LD_INT 2
27536: PUSH
27537: EMPTY
27538: LIST
27539: LIST
27540: PUSH
27541: LD_INT 1
27543: PUSH
27544: LD_INT 2
27546: PUSH
27547: EMPTY
27548: LIST
27549: LIST
27550: PUSH
27551: LD_INT 0
27553: PUSH
27554: LD_INT 2
27556: PUSH
27557: EMPTY
27558: LIST
27559: LIST
27560: PUSH
27561: LD_INT 1
27563: NEG
27564: PUSH
27565: LD_INT 1
27567: PUSH
27568: EMPTY
27569: LIST
27570: LIST
27571: PUSH
27572: LD_INT 2
27574: NEG
27575: PUSH
27576: LD_INT 0
27578: PUSH
27579: EMPTY
27580: LIST
27581: LIST
27582: PUSH
27583: LD_INT 2
27585: NEG
27586: PUSH
27587: LD_INT 1
27589: NEG
27590: PUSH
27591: EMPTY
27592: LIST
27593: LIST
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: LD_INT 2
27601: NEG
27602: PUSH
27603: EMPTY
27604: LIST
27605: LIST
27606: PUSH
27607: LD_INT 1
27609: NEG
27610: PUSH
27611: LD_INT 2
27613: PUSH
27614: EMPTY
27615: LIST
27616: LIST
27617: PUSH
27618: LD_INT 2
27620: NEG
27621: PUSH
27622: LD_INT 1
27624: PUSH
27625: EMPTY
27626: LIST
27627: LIST
27628: PUSH
27629: LD_INT 3
27631: NEG
27632: PUSH
27633: LD_INT 1
27635: NEG
27636: PUSH
27637: EMPTY
27638: LIST
27639: LIST
27640: PUSH
27641: LD_INT 3
27643: NEG
27644: PUSH
27645: LD_INT 2
27647: NEG
27648: PUSH
27649: EMPTY
27650: LIST
27651: LIST
27652: PUSH
27653: EMPTY
27654: LIST
27655: LIST
27656: LIST
27657: LIST
27658: LIST
27659: LIST
27660: LIST
27661: LIST
27662: LIST
27663: LIST
27664: LIST
27665: LIST
27666: LIST
27667: LIST
27668: LIST
27669: LIST
27670: LIST
27671: LIST
27672: LIST
27673: LIST
27674: LIST
27675: LIST
27676: LIST
27677: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27678: LD_ADDR_VAR 0 28
27682: PUSH
27683: LD_INT 0
27685: PUSH
27686: LD_INT 0
27688: PUSH
27689: EMPTY
27690: LIST
27691: LIST
27692: PUSH
27693: LD_INT 0
27695: PUSH
27696: LD_INT 1
27698: NEG
27699: PUSH
27700: EMPTY
27701: LIST
27702: LIST
27703: PUSH
27704: LD_INT 1
27706: PUSH
27707: LD_INT 0
27709: PUSH
27710: EMPTY
27711: LIST
27712: LIST
27713: PUSH
27714: LD_INT 1
27716: PUSH
27717: LD_INT 1
27719: PUSH
27720: EMPTY
27721: LIST
27722: LIST
27723: PUSH
27724: LD_INT 0
27726: PUSH
27727: LD_INT 1
27729: PUSH
27730: EMPTY
27731: LIST
27732: LIST
27733: PUSH
27734: LD_INT 1
27736: NEG
27737: PUSH
27738: LD_INT 0
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 1
27747: NEG
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 1
27759: NEG
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: LD_INT 0
27771: PUSH
27772: LD_INT 2
27774: NEG
27775: PUSH
27776: EMPTY
27777: LIST
27778: LIST
27779: PUSH
27780: LD_INT 1
27782: PUSH
27783: LD_INT 1
27785: NEG
27786: PUSH
27787: EMPTY
27788: LIST
27789: LIST
27790: PUSH
27791: LD_INT 2
27793: PUSH
27794: LD_INT 0
27796: PUSH
27797: EMPTY
27798: LIST
27799: LIST
27800: PUSH
27801: LD_INT 2
27803: PUSH
27804: LD_INT 1
27806: PUSH
27807: EMPTY
27808: LIST
27809: LIST
27810: PUSH
27811: LD_INT 2
27813: PUSH
27814: LD_INT 2
27816: PUSH
27817: EMPTY
27818: LIST
27819: LIST
27820: PUSH
27821: LD_INT 1
27823: PUSH
27824: LD_INT 2
27826: PUSH
27827: EMPTY
27828: LIST
27829: LIST
27830: PUSH
27831: LD_INT 0
27833: PUSH
27834: LD_INT 2
27836: PUSH
27837: EMPTY
27838: LIST
27839: LIST
27840: PUSH
27841: LD_INT 1
27843: NEG
27844: PUSH
27845: LD_INT 1
27847: PUSH
27848: EMPTY
27849: LIST
27850: LIST
27851: PUSH
27852: LD_INT 2
27854: NEG
27855: PUSH
27856: LD_INT 0
27858: PUSH
27859: EMPTY
27860: LIST
27861: LIST
27862: PUSH
27863: LD_INT 2
27865: NEG
27866: PUSH
27867: LD_INT 1
27869: NEG
27870: PUSH
27871: EMPTY
27872: LIST
27873: LIST
27874: PUSH
27875: LD_INT 2
27877: NEG
27878: PUSH
27879: LD_INT 2
27881: NEG
27882: PUSH
27883: EMPTY
27884: LIST
27885: LIST
27886: PUSH
27887: LD_INT 2
27889: NEG
27890: PUSH
27891: LD_INT 3
27893: NEG
27894: PUSH
27895: EMPTY
27896: LIST
27897: LIST
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: LD_INT 3
27905: NEG
27906: PUSH
27907: EMPTY
27908: LIST
27909: LIST
27910: PUSH
27911: LD_INT 3
27913: NEG
27914: PUSH
27915: LD_INT 1
27917: NEG
27918: PUSH
27919: EMPTY
27920: LIST
27921: LIST
27922: PUSH
27923: LD_INT 3
27925: NEG
27926: PUSH
27927: LD_INT 2
27929: NEG
27930: PUSH
27931: EMPTY
27932: LIST
27933: LIST
27934: PUSH
27935: EMPTY
27936: LIST
27937: LIST
27938: LIST
27939: LIST
27940: LIST
27941: LIST
27942: LIST
27943: LIST
27944: LIST
27945: LIST
27946: LIST
27947: LIST
27948: LIST
27949: LIST
27950: LIST
27951: LIST
27952: LIST
27953: LIST
27954: LIST
27955: LIST
27956: LIST
27957: LIST
27958: LIST
27959: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27960: LD_ADDR_VAR 0 29
27964: PUSH
27965: LD_INT 0
27967: PUSH
27968: LD_INT 0
27970: PUSH
27971: EMPTY
27972: LIST
27973: LIST
27974: PUSH
27975: LD_INT 0
27977: PUSH
27978: LD_INT 1
27980: NEG
27981: PUSH
27982: EMPTY
27983: LIST
27984: LIST
27985: PUSH
27986: LD_INT 1
27988: PUSH
27989: LD_INT 0
27991: PUSH
27992: EMPTY
27993: LIST
27994: LIST
27995: PUSH
27996: LD_INT 1
27998: PUSH
27999: LD_INT 1
28001: PUSH
28002: EMPTY
28003: LIST
28004: LIST
28005: PUSH
28006: LD_INT 0
28008: PUSH
28009: LD_INT 1
28011: PUSH
28012: EMPTY
28013: LIST
28014: LIST
28015: PUSH
28016: LD_INT 1
28018: NEG
28019: PUSH
28020: LD_INT 0
28022: PUSH
28023: EMPTY
28024: LIST
28025: LIST
28026: PUSH
28027: LD_INT 1
28029: NEG
28030: PUSH
28031: LD_INT 1
28033: NEG
28034: PUSH
28035: EMPTY
28036: LIST
28037: LIST
28038: PUSH
28039: LD_INT 1
28041: NEG
28042: PUSH
28043: LD_INT 2
28045: NEG
28046: PUSH
28047: EMPTY
28048: LIST
28049: LIST
28050: PUSH
28051: LD_INT 0
28053: PUSH
28054: LD_INT 2
28056: NEG
28057: PUSH
28058: EMPTY
28059: LIST
28060: LIST
28061: PUSH
28062: LD_INT 1
28064: PUSH
28065: LD_INT 1
28067: NEG
28068: PUSH
28069: EMPTY
28070: LIST
28071: LIST
28072: PUSH
28073: LD_INT 2
28075: PUSH
28076: LD_INT 0
28078: PUSH
28079: EMPTY
28080: LIST
28081: LIST
28082: PUSH
28083: LD_INT 2
28085: PUSH
28086: LD_INT 1
28088: PUSH
28089: EMPTY
28090: LIST
28091: LIST
28092: PUSH
28093: LD_INT 1
28095: PUSH
28096: LD_INT 2
28098: PUSH
28099: EMPTY
28100: LIST
28101: LIST
28102: PUSH
28103: LD_INT 0
28105: PUSH
28106: LD_INT 2
28108: PUSH
28109: EMPTY
28110: LIST
28111: LIST
28112: PUSH
28113: LD_INT 1
28115: NEG
28116: PUSH
28117: LD_INT 1
28119: PUSH
28120: EMPTY
28121: LIST
28122: LIST
28123: PUSH
28124: LD_INT 2
28126: NEG
28127: PUSH
28128: LD_INT 1
28130: NEG
28131: PUSH
28132: EMPTY
28133: LIST
28134: LIST
28135: PUSH
28136: LD_INT 2
28138: NEG
28139: PUSH
28140: LD_INT 2
28142: NEG
28143: PUSH
28144: EMPTY
28145: LIST
28146: LIST
28147: PUSH
28148: LD_INT 2
28150: NEG
28151: PUSH
28152: LD_INT 3
28154: NEG
28155: PUSH
28156: EMPTY
28157: LIST
28158: LIST
28159: PUSH
28160: LD_INT 2
28162: PUSH
28163: LD_INT 1
28165: NEG
28166: PUSH
28167: EMPTY
28168: LIST
28169: LIST
28170: PUSH
28171: LD_INT 3
28173: PUSH
28174: LD_INT 1
28176: PUSH
28177: EMPTY
28178: LIST
28179: LIST
28180: PUSH
28181: LD_INT 1
28183: PUSH
28184: LD_INT 3
28186: PUSH
28187: EMPTY
28188: LIST
28189: LIST
28190: PUSH
28191: LD_INT 1
28193: NEG
28194: PUSH
28195: LD_INT 2
28197: PUSH
28198: EMPTY
28199: LIST
28200: LIST
28201: PUSH
28202: LD_INT 3
28204: NEG
28205: PUSH
28206: LD_INT 2
28208: NEG
28209: PUSH
28210: EMPTY
28211: LIST
28212: LIST
28213: PUSH
28214: EMPTY
28215: LIST
28216: LIST
28217: LIST
28218: LIST
28219: LIST
28220: LIST
28221: LIST
28222: LIST
28223: LIST
28224: LIST
28225: LIST
28226: LIST
28227: LIST
28228: LIST
28229: LIST
28230: LIST
28231: LIST
28232: LIST
28233: LIST
28234: LIST
28235: LIST
28236: LIST
28237: LIST
28238: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28239: LD_ADDR_VAR 0 30
28243: PUSH
28244: LD_INT 0
28246: PUSH
28247: LD_INT 0
28249: PUSH
28250: EMPTY
28251: LIST
28252: LIST
28253: PUSH
28254: LD_INT 0
28256: PUSH
28257: LD_INT 1
28259: NEG
28260: PUSH
28261: EMPTY
28262: LIST
28263: LIST
28264: PUSH
28265: LD_INT 1
28267: PUSH
28268: LD_INT 0
28270: PUSH
28271: EMPTY
28272: LIST
28273: LIST
28274: PUSH
28275: LD_INT 1
28277: PUSH
28278: LD_INT 1
28280: PUSH
28281: EMPTY
28282: LIST
28283: LIST
28284: PUSH
28285: LD_INT 0
28287: PUSH
28288: LD_INT 1
28290: PUSH
28291: EMPTY
28292: LIST
28293: LIST
28294: PUSH
28295: LD_INT 1
28297: NEG
28298: PUSH
28299: LD_INT 0
28301: PUSH
28302: EMPTY
28303: LIST
28304: LIST
28305: PUSH
28306: LD_INT 1
28308: NEG
28309: PUSH
28310: LD_INT 1
28312: NEG
28313: PUSH
28314: EMPTY
28315: LIST
28316: LIST
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: LD_INT 2
28324: NEG
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: PUSH
28330: LD_INT 0
28332: PUSH
28333: LD_INT 2
28335: NEG
28336: PUSH
28337: EMPTY
28338: LIST
28339: LIST
28340: PUSH
28341: LD_INT 1
28343: PUSH
28344: LD_INT 1
28346: NEG
28347: PUSH
28348: EMPTY
28349: LIST
28350: LIST
28351: PUSH
28352: LD_INT 2
28354: PUSH
28355: LD_INT 0
28357: PUSH
28358: EMPTY
28359: LIST
28360: LIST
28361: PUSH
28362: LD_INT 2
28364: PUSH
28365: LD_INT 1
28367: PUSH
28368: EMPTY
28369: LIST
28370: LIST
28371: PUSH
28372: LD_INT 2
28374: PUSH
28375: LD_INT 2
28377: PUSH
28378: EMPTY
28379: LIST
28380: LIST
28381: PUSH
28382: LD_INT 1
28384: PUSH
28385: LD_INT 2
28387: PUSH
28388: EMPTY
28389: LIST
28390: LIST
28391: PUSH
28392: LD_INT 1
28394: NEG
28395: PUSH
28396: LD_INT 1
28398: PUSH
28399: EMPTY
28400: LIST
28401: LIST
28402: PUSH
28403: LD_INT 2
28405: NEG
28406: PUSH
28407: LD_INT 0
28409: PUSH
28410: EMPTY
28411: LIST
28412: LIST
28413: PUSH
28414: LD_INT 2
28416: NEG
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: EMPTY
28423: LIST
28424: LIST
28425: PUSH
28426: LD_INT 1
28428: NEG
28429: PUSH
28430: LD_INT 3
28432: NEG
28433: PUSH
28434: EMPTY
28435: LIST
28436: LIST
28437: PUSH
28438: LD_INT 1
28440: PUSH
28441: LD_INT 2
28443: NEG
28444: PUSH
28445: EMPTY
28446: LIST
28447: LIST
28448: PUSH
28449: LD_INT 3
28451: PUSH
28452: LD_INT 2
28454: PUSH
28455: EMPTY
28456: LIST
28457: LIST
28458: PUSH
28459: LD_INT 2
28461: PUSH
28462: LD_INT 3
28464: PUSH
28465: EMPTY
28466: LIST
28467: LIST
28468: PUSH
28469: LD_INT 2
28471: NEG
28472: PUSH
28473: LD_INT 1
28475: PUSH
28476: EMPTY
28477: LIST
28478: LIST
28479: PUSH
28480: LD_INT 3
28482: NEG
28483: PUSH
28484: LD_INT 1
28486: NEG
28487: PUSH
28488: EMPTY
28489: LIST
28490: LIST
28491: PUSH
28492: EMPTY
28493: LIST
28494: LIST
28495: LIST
28496: LIST
28497: LIST
28498: LIST
28499: LIST
28500: LIST
28501: LIST
28502: LIST
28503: LIST
28504: LIST
28505: LIST
28506: LIST
28507: LIST
28508: LIST
28509: LIST
28510: LIST
28511: LIST
28512: LIST
28513: LIST
28514: LIST
28515: LIST
28516: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28517: LD_ADDR_VAR 0 31
28521: PUSH
28522: LD_INT 0
28524: PUSH
28525: LD_INT 0
28527: PUSH
28528: EMPTY
28529: LIST
28530: LIST
28531: PUSH
28532: LD_INT 0
28534: PUSH
28535: LD_INT 1
28537: NEG
28538: PUSH
28539: EMPTY
28540: LIST
28541: LIST
28542: PUSH
28543: LD_INT 1
28545: PUSH
28546: LD_INT 0
28548: PUSH
28549: EMPTY
28550: LIST
28551: LIST
28552: PUSH
28553: LD_INT 1
28555: PUSH
28556: LD_INT 1
28558: PUSH
28559: EMPTY
28560: LIST
28561: LIST
28562: PUSH
28563: LD_INT 0
28565: PUSH
28566: LD_INT 1
28568: PUSH
28569: EMPTY
28570: LIST
28571: LIST
28572: PUSH
28573: LD_INT 1
28575: NEG
28576: PUSH
28577: LD_INT 0
28579: PUSH
28580: EMPTY
28581: LIST
28582: LIST
28583: PUSH
28584: LD_INT 1
28586: NEG
28587: PUSH
28588: LD_INT 1
28590: NEG
28591: PUSH
28592: EMPTY
28593: LIST
28594: LIST
28595: PUSH
28596: LD_INT 1
28598: NEG
28599: PUSH
28600: LD_INT 2
28602: NEG
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: PUSH
28608: LD_INT 1
28610: PUSH
28611: LD_INT 1
28613: NEG
28614: PUSH
28615: EMPTY
28616: LIST
28617: LIST
28618: PUSH
28619: LD_INT 2
28621: PUSH
28622: LD_INT 0
28624: PUSH
28625: EMPTY
28626: LIST
28627: LIST
28628: PUSH
28629: LD_INT 2
28631: PUSH
28632: LD_INT 1
28634: PUSH
28635: EMPTY
28636: LIST
28637: LIST
28638: PUSH
28639: LD_INT 2
28641: PUSH
28642: LD_INT 2
28644: PUSH
28645: EMPTY
28646: LIST
28647: LIST
28648: PUSH
28649: LD_INT 1
28651: PUSH
28652: LD_INT 2
28654: PUSH
28655: EMPTY
28656: LIST
28657: LIST
28658: PUSH
28659: LD_INT 0
28661: PUSH
28662: LD_INT 2
28664: PUSH
28665: EMPTY
28666: LIST
28667: LIST
28668: PUSH
28669: LD_INT 1
28671: NEG
28672: PUSH
28673: LD_INT 1
28675: PUSH
28676: EMPTY
28677: LIST
28678: LIST
28679: PUSH
28680: LD_INT 2
28682: NEG
28683: PUSH
28684: LD_INT 1
28686: NEG
28687: PUSH
28688: EMPTY
28689: LIST
28690: LIST
28691: PUSH
28692: LD_INT 2
28694: NEG
28695: PUSH
28696: LD_INT 2
28698: NEG
28699: PUSH
28700: EMPTY
28701: LIST
28702: LIST
28703: PUSH
28704: LD_INT 2
28706: NEG
28707: PUSH
28708: LD_INT 3
28710: NEG
28711: PUSH
28712: EMPTY
28713: LIST
28714: LIST
28715: PUSH
28716: LD_INT 2
28718: PUSH
28719: LD_INT 1
28721: NEG
28722: PUSH
28723: EMPTY
28724: LIST
28725: LIST
28726: PUSH
28727: LD_INT 3
28729: PUSH
28730: LD_INT 1
28732: PUSH
28733: EMPTY
28734: LIST
28735: LIST
28736: PUSH
28737: LD_INT 1
28739: PUSH
28740: LD_INT 3
28742: PUSH
28743: EMPTY
28744: LIST
28745: LIST
28746: PUSH
28747: LD_INT 1
28749: NEG
28750: PUSH
28751: LD_INT 2
28753: PUSH
28754: EMPTY
28755: LIST
28756: LIST
28757: PUSH
28758: LD_INT 3
28760: NEG
28761: PUSH
28762: LD_INT 2
28764: NEG
28765: PUSH
28766: EMPTY
28767: LIST
28768: LIST
28769: PUSH
28770: EMPTY
28771: LIST
28772: LIST
28773: LIST
28774: LIST
28775: LIST
28776: LIST
28777: LIST
28778: LIST
28779: LIST
28780: LIST
28781: LIST
28782: LIST
28783: LIST
28784: LIST
28785: LIST
28786: LIST
28787: LIST
28788: LIST
28789: LIST
28790: LIST
28791: LIST
28792: LIST
28793: LIST
28794: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28795: LD_ADDR_VAR 0 32
28799: PUSH
28800: LD_INT 0
28802: PUSH
28803: LD_INT 0
28805: PUSH
28806: EMPTY
28807: LIST
28808: LIST
28809: PUSH
28810: LD_INT 0
28812: PUSH
28813: LD_INT 1
28815: NEG
28816: PUSH
28817: EMPTY
28818: LIST
28819: LIST
28820: PUSH
28821: LD_INT 1
28823: PUSH
28824: LD_INT 0
28826: PUSH
28827: EMPTY
28828: LIST
28829: LIST
28830: PUSH
28831: LD_INT 1
28833: PUSH
28834: LD_INT 1
28836: PUSH
28837: EMPTY
28838: LIST
28839: LIST
28840: PUSH
28841: LD_INT 0
28843: PUSH
28844: LD_INT 1
28846: PUSH
28847: EMPTY
28848: LIST
28849: LIST
28850: PUSH
28851: LD_INT 1
28853: NEG
28854: PUSH
28855: LD_INT 0
28857: PUSH
28858: EMPTY
28859: LIST
28860: LIST
28861: PUSH
28862: LD_INT 1
28864: NEG
28865: PUSH
28866: LD_INT 1
28868: NEG
28869: PUSH
28870: EMPTY
28871: LIST
28872: LIST
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: LD_INT 2
28880: NEG
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: PUSH
28886: LD_INT 0
28888: PUSH
28889: LD_INT 2
28891: NEG
28892: PUSH
28893: EMPTY
28894: LIST
28895: LIST
28896: PUSH
28897: LD_INT 1
28899: PUSH
28900: LD_INT 1
28902: NEG
28903: PUSH
28904: EMPTY
28905: LIST
28906: LIST
28907: PUSH
28908: LD_INT 2
28910: PUSH
28911: LD_INT 1
28913: PUSH
28914: EMPTY
28915: LIST
28916: LIST
28917: PUSH
28918: LD_INT 2
28920: PUSH
28921: LD_INT 2
28923: PUSH
28924: EMPTY
28925: LIST
28926: LIST
28927: PUSH
28928: LD_INT 1
28930: PUSH
28931: LD_INT 2
28933: PUSH
28934: EMPTY
28935: LIST
28936: LIST
28937: PUSH
28938: LD_INT 0
28940: PUSH
28941: LD_INT 2
28943: PUSH
28944: EMPTY
28945: LIST
28946: LIST
28947: PUSH
28948: LD_INT 1
28950: NEG
28951: PUSH
28952: LD_INT 1
28954: PUSH
28955: EMPTY
28956: LIST
28957: LIST
28958: PUSH
28959: LD_INT 2
28961: NEG
28962: PUSH
28963: LD_INT 0
28965: PUSH
28966: EMPTY
28967: LIST
28968: LIST
28969: PUSH
28970: LD_INT 2
28972: NEG
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: EMPTY
28979: LIST
28980: LIST
28981: PUSH
28982: LD_INT 1
28984: NEG
28985: PUSH
28986: LD_INT 3
28988: NEG
28989: PUSH
28990: EMPTY
28991: LIST
28992: LIST
28993: PUSH
28994: LD_INT 1
28996: PUSH
28997: LD_INT 2
28999: NEG
29000: PUSH
29001: EMPTY
29002: LIST
29003: LIST
29004: PUSH
29005: LD_INT 3
29007: PUSH
29008: LD_INT 2
29010: PUSH
29011: EMPTY
29012: LIST
29013: LIST
29014: PUSH
29015: LD_INT 2
29017: PUSH
29018: LD_INT 3
29020: PUSH
29021: EMPTY
29022: LIST
29023: LIST
29024: PUSH
29025: LD_INT 2
29027: NEG
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: EMPTY
29033: LIST
29034: LIST
29035: PUSH
29036: LD_INT 3
29038: NEG
29039: PUSH
29040: LD_INT 1
29042: NEG
29043: PUSH
29044: EMPTY
29045: LIST
29046: LIST
29047: PUSH
29048: EMPTY
29049: LIST
29050: LIST
29051: LIST
29052: LIST
29053: LIST
29054: LIST
29055: LIST
29056: LIST
29057: LIST
29058: LIST
29059: LIST
29060: LIST
29061: LIST
29062: LIST
29063: LIST
29064: LIST
29065: LIST
29066: LIST
29067: LIST
29068: LIST
29069: LIST
29070: LIST
29071: LIST
29072: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
29073: LD_ADDR_VAR 0 33
29077: PUSH
29078: LD_INT 0
29080: PUSH
29081: LD_INT 0
29083: PUSH
29084: EMPTY
29085: LIST
29086: LIST
29087: PUSH
29088: LD_INT 0
29090: PUSH
29091: LD_INT 1
29093: NEG
29094: PUSH
29095: EMPTY
29096: LIST
29097: LIST
29098: PUSH
29099: LD_INT 1
29101: PUSH
29102: LD_INT 0
29104: PUSH
29105: EMPTY
29106: LIST
29107: LIST
29108: PUSH
29109: LD_INT 1
29111: PUSH
29112: LD_INT 1
29114: PUSH
29115: EMPTY
29116: LIST
29117: LIST
29118: PUSH
29119: LD_INT 0
29121: PUSH
29122: LD_INT 1
29124: PUSH
29125: EMPTY
29126: LIST
29127: LIST
29128: PUSH
29129: LD_INT 1
29131: NEG
29132: PUSH
29133: LD_INT 0
29135: PUSH
29136: EMPTY
29137: LIST
29138: LIST
29139: PUSH
29140: LD_INT 1
29142: NEG
29143: PUSH
29144: LD_INT 1
29146: NEG
29147: PUSH
29148: EMPTY
29149: LIST
29150: LIST
29151: PUSH
29152: LD_INT 1
29154: NEG
29155: PUSH
29156: LD_INT 2
29158: NEG
29159: PUSH
29160: EMPTY
29161: LIST
29162: LIST
29163: PUSH
29164: LD_INT 1
29166: PUSH
29167: LD_INT 1
29169: NEG
29170: PUSH
29171: EMPTY
29172: LIST
29173: LIST
29174: PUSH
29175: LD_INT 2
29177: PUSH
29178: LD_INT 0
29180: PUSH
29181: EMPTY
29182: LIST
29183: LIST
29184: PUSH
29185: LD_INT 2
29187: PUSH
29188: LD_INT 1
29190: PUSH
29191: EMPTY
29192: LIST
29193: LIST
29194: PUSH
29195: LD_INT 1
29197: PUSH
29198: LD_INT 2
29200: PUSH
29201: EMPTY
29202: LIST
29203: LIST
29204: PUSH
29205: LD_INT 0
29207: PUSH
29208: LD_INT 2
29210: PUSH
29211: EMPTY
29212: LIST
29213: LIST
29214: PUSH
29215: LD_INT 1
29217: NEG
29218: PUSH
29219: LD_INT 1
29221: PUSH
29222: EMPTY
29223: LIST
29224: LIST
29225: PUSH
29226: LD_INT 2
29228: NEG
29229: PUSH
29230: LD_INT 0
29232: PUSH
29233: EMPTY
29234: LIST
29235: LIST
29236: PUSH
29237: LD_INT 2
29239: NEG
29240: PUSH
29241: LD_INT 1
29243: NEG
29244: PUSH
29245: EMPTY
29246: LIST
29247: LIST
29248: PUSH
29249: LD_INT 2
29251: NEG
29252: PUSH
29253: LD_INT 2
29255: NEG
29256: PUSH
29257: EMPTY
29258: LIST
29259: LIST
29260: PUSH
29261: LD_INT 2
29263: NEG
29264: PUSH
29265: LD_INT 3
29267: NEG
29268: PUSH
29269: EMPTY
29270: LIST
29271: LIST
29272: PUSH
29273: LD_INT 2
29275: PUSH
29276: LD_INT 1
29278: NEG
29279: PUSH
29280: EMPTY
29281: LIST
29282: LIST
29283: PUSH
29284: LD_INT 3
29286: PUSH
29287: LD_INT 1
29289: PUSH
29290: EMPTY
29291: LIST
29292: LIST
29293: PUSH
29294: LD_INT 1
29296: PUSH
29297: LD_INT 3
29299: PUSH
29300: EMPTY
29301: LIST
29302: LIST
29303: PUSH
29304: LD_INT 1
29306: NEG
29307: PUSH
29308: LD_INT 2
29310: PUSH
29311: EMPTY
29312: LIST
29313: LIST
29314: PUSH
29315: LD_INT 3
29317: NEG
29318: PUSH
29319: LD_INT 2
29321: NEG
29322: PUSH
29323: EMPTY
29324: LIST
29325: LIST
29326: PUSH
29327: EMPTY
29328: LIST
29329: LIST
29330: LIST
29331: LIST
29332: LIST
29333: LIST
29334: LIST
29335: LIST
29336: LIST
29337: LIST
29338: LIST
29339: LIST
29340: LIST
29341: LIST
29342: LIST
29343: LIST
29344: LIST
29345: LIST
29346: LIST
29347: LIST
29348: LIST
29349: LIST
29350: LIST
29351: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29352: LD_ADDR_VAR 0 34
29356: PUSH
29357: LD_INT 0
29359: PUSH
29360: LD_INT 0
29362: PUSH
29363: EMPTY
29364: LIST
29365: LIST
29366: PUSH
29367: LD_INT 0
29369: PUSH
29370: LD_INT 1
29372: NEG
29373: PUSH
29374: EMPTY
29375: LIST
29376: LIST
29377: PUSH
29378: LD_INT 1
29380: PUSH
29381: LD_INT 0
29383: PUSH
29384: EMPTY
29385: LIST
29386: LIST
29387: PUSH
29388: LD_INT 1
29390: PUSH
29391: LD_INT 1
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 0
29400: PUSH
29401: LD_INT 1
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 1
29410: NEG
29411: PUSH
29412: LD_INT 0
29414: PUSH
29415: EMPTY
29416: LIST
29417: LIST
29418: PUSH
29419: LD_INT 1
29421: NEG
29422: PUSH
29423: LD_INT 1
29425: NEG
29426: PUSH
29427: EMPTY
29428: LIST
29429: LIST
29430: PUSH
29431: LD_INT 1
29433: NEG
29434: PUSH
29435: LD_INT 2
29437: NEG
29438: PUSH
29439: EMPTY
29440: LIST
29441: LIST
29442: PUSH
29443: LD_INT 0
29445: PUSH
29446: LD_INT 2
29448: NEG
29449: PUSH
29450: EMPTY
29451: LIST
29452: LIST
29453: PUSH
29454: LD_INT 1
29456: PUSH
29457: LD_INT 1
29459: NEG
29460: PUSH
29461: EMPTY
29462: LIST
29463: LIST
29464: PUSH
29465: LD_INT 2
29467: PUSH
29468: LD_INT 1
29470: PUSH
29471: EMPTY
29472: LIST
29473: LIST
29474: PUSH
29475: LD_INT 2
29477: PUSH
29478: LD_INT 2
29480: PUSH
29481: EMPTY
29482: LIST
29483: LIST
29484: PUSH
29485: LD_INT 1
29487: PUSH
29488: LD_INT 2
29490: PUSH
29491: EMPTY
29492: LIST
29493: LIST
29494: PUSH
29495: LD_INT 1
29497: NEG
29498: PUSH
29499: LD_INT 1
29501: PUSH
29502: EMPTY
29503: LIST
29504: LIST
29505: PUSH
29506: LD_INT 2
29508: NEG
29509: PUSH
29510: LD_INT 0
29512: PUSH
29513: EMPTY
29514: LIST
29515: LIST
29516: PUSH
29517: LD_INT 2
29519: NEG
29520: PUSH
29521: LD_INT 1
29523: NEG
29524: PUSH
29525: EMPTY
29526: LIST
29527: LIST
29528: PUSH
29529: LD_INT 2
29531: NEG
29532: PUSH
29533: LD_INT 2
29535: NEG
29536: PUSH
29537: EMPTY
29538: LIST
29539: LIST
29540: PUSH
29541: LD_INT 1
29543: NEG
29544: PUSH
29545: LD_INT 3
29547: NEG
29548: PUSH
29549: EMPTY
29550: LIST
29551: LIST
29552: PUSH
29553: LD_INT 1
29555: PUSH
29556: LD_INT 2
29558: NEG
29559: PUSH
29560: EMPTY
29561: LIST
29562: LIST
29563: PUSH
29564: LD_INT 3
29566: PUSH
29567: LD_INT 2
29569: PUSH
29570: EMPTY
29571: LIST
29572: LIST
29573: PUSH
29574: LD_INT 2
29576: PUSH
29577: LD_INT 3
29579: PUSH
29580: EMPTY
29581: LIST
29582: LIST
29583: PUSH
29584: LD_INT 2
29586: NEG
29587: PUSH
29588: LD_INT 1
29590: PUSH
29591: EMPTY
29592: LIST
29593: LIST
29594: PUSH
29595: LD_INT 3
29597: NEG
29598: PUSH
29599: LD_INT 1
29601: NEG
29602: PUSH
29603: EMPTY
29604: LIST
29605: LIST
29606: PUSH
29607: EMPTY
29608: LIST
29609: LIST
29610: LIST
29611: LIST
29612: LIST
29613: LIST
29614: LIST
29615: LIST
29616: LIST
29617: LIST
29618: LIST
29619: LIST
29620: LIST
29621: LIST
29622: LIST
29623: LIST
29624: LIST
29625: LIST
29626: LIST
29627: LIST
29628: LIST
29629: LIST
29630: LIST
29631: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29632: LD_ADDR_VAR 0 35
29636: PUSH
29637: LD_INT 0
29639: PUSH
29640: LD_INT 0
29642: PUSH
29643: EMPTY
29644: LIST
29645: LIST
29646: PUSH
29647: LD_INT 0
29649: PUSH
29650: LD_INT 1
29652: NEG
29653: PUSH
29654: EMPTY
29655: LIST
29656: LIST
29657: PUSH
29658: LD_INT 1
29660: PUSH
29661: LD_INT 0
29663: PUSH
29664: EMPTY
29665: LIST
29666: LIST
29667: PUSH
29668: LD_INT 1
29670: PUSH
29671: LD_INT 1
29673: PUSH
29674: EMPTY
29675: LIST
29676: LIST
29677: PUSH
29678: LD_INT 0
29680: PUSH
29681: LD_INT 1
29683: PUSH
29684: EMPTY
29685: LIST
29686: LIST
29687: PUSH
29688: LD_INT 1
29690: NEG
29691: PUSH
29692: LD_INT 0
29694: PUSH
29695: EMPTY
29696: LIST
29697: LIST
29698: PUSH
29699: LD_INT 1
29701: NEG
29702: PUSH
29703: LD_INT 1
29705: NEG
29706: PUSH
29707: EMPTY
29708: LIST
29709: LIST
29710: PUSH
29711: LD_INT 2
29713: PUSH
29714: LD_INT 1
29716: PUSH
29717: EMPTY
29718: LIST
29719: LIST
29720: PUSH
29721: LD_INT 2
29723: NEG
29724: PUSH
29725: LD_INT 1
29727: NEG
29728: PUSH
29729: EMPTY
29730: LIST
29731: LIST
29732: PUSH
29733: EMPTY
29734: LIST
29735: LIST
29736: LIST
29737: LIST
29738: LIST
29739: LIST
29740: LIST
29741: LIST
29742: LIST
29743: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29744: LD_ADDR_VAR 0 36
29748: PUSH
29749: LD_INT 0
29751: PUSH
29752: LD_INT 0
29754: PUSH
29755: EMPTY
29756: LIST
29757: LIST
29758: PUSH
29759: LD_INT 0
29761: PUSH
29762: LD_INT 1
29764: NEG
29765: PUSH
29766: EMPTY
29767: LIST
29768: LIST
29769: PUSH
29770: LD_INT 1
29772: PUSH
29773: LD_INT 0
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: PUSH
29783: LD_INT 1
29785: PUSH
29786: EMPTY
29787: LIST
29788: LIST
29789: PUSH
29790: LD_INT 0
29792: PUSH
29793: LD_INT 1
29795: PUSH
29796: EMPTY
29797: LIST
29798: LIST
29799: PUSH
29800: LD_INT 1
29802: NEG
29803: PUSH
29804: LD_INT 0
29806: PUSH
29807: EMPTY
29808: LIST
29809: LIST
29810: PUSH
29811: LD_INT 1
29813: NEG
29814: PUSH
29815: LD_INT 1
29817: NEG
29818: PUSH
29819: EMPTY
29820: LIST
29821: LIST
29822: PUSH
29823: LD_INT 1
29825: NEG
29826: PUSH
29827: LD_INT 2
29829: NEG
29830: PUSH
29831: EMPTY
29832: LIST
29833: LIST
29834: PUSH
29835: LD_INT 1
29837: PUSH
29838: LD_INT 2
29840: PUSH
29841: EMPTY
29842: LIST
29843: LIST
29844: PUSH
29845: EMPTY
29846: LIST
29847: LIST
29848: LIST
29849: LIST
29850: LIST
29851: LIST
29852: LIST
29853: LIST
29854: LIST
29855: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29856: LD_ADDR_VAR 0 37
29860: PUSH
29861: LD_INT 0
29863: PUSH
29864: LD_INT 0
29866: PUSH
29867: EMPTY
29868: LIST
29869: LIST
29870: PUSH
29871: LD_INT 0
29873: PUSH
29874: LD_INT 1
29876: NEG
29877: PUSH
29878: EMPTY
29879: LIST
29880: LIST
29881: PUSH
29882: LD_INT 1
29884: PUSH
29885: LD_INT 0
29887: PUSH
29888: EMPTY
29889: LIST
29890: LIST
29891: PUSH
29892: LD_INT 1
29894: PUSH
29895: LD_INT 1
29897: PUSH
29898: EMPTY
29899: LIST
29900: LIST
29901: PUSH
29902: LD_INT 0
29904: PUSH
29905: LD_INT 1
29907: PUSH
29908: EMPTY
29909: LIST
29910: LIST
29911: PUSH
29912: LD_INT 1
29914: NEG
29915: PUSH
29916: LD_INT 0
29918: PUSH
29919: EMPTY
29920: LIST
29921: LIST
29922: PUSH
29923: LD_INT 1
29925: NEG
29926: PUSH
29927: LD_INT 1
29929: NEG
29930: PUSH
29931: EMPTY
29932: LIST
29933: LIST
29934: PUSH
29935: LD_INT 1
29937: PUSH
29938: LD_INT 1
29940: NEG
29941: PUSH
29942: EMPTY
29943: LIST
29944: LIST
29945: PUSH
29946: LD_INT 1
29948: NEG
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: EMPTY
29954: LIST
29955: LIST
29956: PUSH
29957: EMPTY
29958: LIST
29959: LIST
29960: LIST
29961: LIST
29962: LIST
29963: LIST
29964: LIST
29965: LIST
29966: LIST
29967: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29968: LD_ADDR_VAR 0 38
29972: PUSH
29973: LD_INT 0
29975: PUSH
29976: LD_INT 0
29978: PUSH
29979: EMPTY
29980: LIST
29981: LIST
29982: PUSH
29983: LD_INT 0
29985: PUSH
29986: LD_INT 1
29988: NEG
29989: PUSH
29990: EMPTY
29991: LIST
29992: LIST
29993: PUSH
29994: LD_INT 1
29996: PUSH
29997: LD_INT 0
29999: PUSH
30000: EMPTY
30001: LIST
30002: LIST
30003: PUSH
30004: LD_INT 1
30006: PUSH
30007: LD_INT 1
30009: PUSH
30010: EMPTY
30011: LIST
30012: LIST
30013: PUSH
30014: LD_INT 0
30016: PUSH
30017: LD_INT 1
30019: PUSH
30020: EMPTY
30021: LIST
30022: LIST
30023: PUSH
30024: LD_INT 1
30026: NEG
30027: PUSH
30028: LD_INT 0
30030: PUSH
30031: EMPTY
30032: LIST
30033: LIST
30034: PUSH
30035: LD_INT 1
30037: NEG
30038: PUSH
30039: LD_INT 1
30041: NEG
30042: PUSH
30043: EMPTY
30044: LIST
30045: LIST
30046: PUSH
30047: LD_INT 2
30049: PUSH
30050: LD_INT 1
30052: PUSH
30053: EMPTY
30054: LIST
30055: LIST
30056: PUSH
30057: LD_INT 2
30059: NEG
30060: PUSH
30061: LD_INT 1
30063: NEG
30064: PUSH
30065: EMPTY
30066: LIST
30067: LIST
30068: PUSH
30069: EMPTY
30070: LIST
30071: LIST
30072: LIST
30073: LIST
30074: LIST
30075: LIST
30076: LIST
30077: LIST
30078: LIST
30079: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
30080: LD_ADDR_VAR 0 39
30084: PUSH
30085: LD_INT 0
30087: PUSH
30088: LD_INT 0
30090: PUSH
30091: EMPTY
30092: LIST
30093: LIST
30094: PUSH
30095: LD_INT 0
30097: PUSH
30098: LD_INT 1
30100: NEG
30101: PUSH
30102: EMPTY
30103: LIST
30104: LIST
30105: PUSH
30106: LD_INT 1
30108: PUSH
30109: LD_INT 0
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: PUSH
30119: LD_INT 1
30121: PUSH
30122: EMPTY
30123: LIST
30124: LIST
30125: PUSH
30126: LD_INT 0
30128: PUSH
30129: LD_INT 1
30131: PUSH
30132: EMPTY
30133: LIST
30134: LIST
30135: PUSH
30136: LD_INT 1
30138: NEG
30139: PUSH
30140: LD_INT 0
30142: PUSH
30143: EMPTY
30144: LIST
30145: LIST
30146: PUSH
30147: LD_INT 1
30149: NEG
30150: PUSH
30151: LD_INT 1
30153: NEG
30154: PUSH
30155: EMPTY
30156: LIST
30157: LIST
30158: PUSH
30159: LD_INT 1
30161: NEG
30162: PUSH
30163: LD_INT 2
30165: NEG
30166: PUSH
30167: EMPTY
30168: LIST
30169: LIST
30170: PUSH
30171: LD_INT 1
30173: PUSH
30174: LD_INT 2
30176: PUSH
30177: EMPTY
30178: LIST
30179: LIST
30180: PUSH
30181: EMPTY
30182: LIST
30183: LIST
30184: LIST
30185: LIST
30186: LIST
30187: LIST
30188: LIST
30189: LIST
30190: LIST
30191: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30192: LD_ADDR_VAR 0 40
30196: PUSH
30197: LD_INT 0
30199: PUSH
30200: LD_INT 0
30202: PUSH
30203: EMPTY
30204: LIST
30205: LIST
30206: PUSH
30207: LD_INT 0
30209: PUSH
30210: LD_INT 1
30212: NEG
30213: PUSH
30214: EMPTY
30215: LIST
30216: LIST
30217: PUSH
30218: LD_INT 1
30220: PUSH
30221: LD_INT 0
30223: PUSH
30224: EMPTY
30225: LIST
30226: LIST
30227: PUSH
30228: LD_INT 1
30230: PUSH
30231: LD_INT 1
30233: PUSH
30234: EMPTY
30235: LIST
30236: LIST
30237: PUSH
30238: LD_INT 0
30240: PUSH
30241: LD_INT 1
30243: PUSH
30244: EMPTY
30245: LIST
30246: LIST
30247: PUSH
30248: LD_INT 1
30250: NEG
30251: PUSH
30252: LD_INT 0
30254: PUSH
30255: EMPTY
30256: LIST
30257: LIST
30258: PUSH
30259: LD_INT 1
30261: NEG
30262: PUSH
30263: LD_INT 1
30265: NEG
30266: PUSH
30267: EMPTY
30268: LIST
30269: LIST
30270: PUSH
30271: LD_INT 1
30273: PUSH
30274: LD_INT 1
30276: NEG
30277: PUSH
30278: EMPTY
30279: LIST
30280: LIST
30281: PUSH
30282: LD_INT 1
30284: NEG
30285: PUSH
30286: LD_INT 1
30288: PUSH
30289: EMPTY
30290: LIST
30291: LIST
30292: PUSH
30293: EMPTY
30294: LIST
30295: LIST
30296: LIST
30297: LIST
30298: LIST
30299: LIST
30300: LIST
30301: LIST
30302: LIST
30303: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30304: LD_ADDR_VAR 0 41
30308: PUSH
30309: LD_INT 0
30311: PUSH
30312: LD_INT 0
30314: PUSH
30315: EMPTY
30316: LIST
30317: LIST
30318: PUSH
30319: LD_INT 0
30321: PUSH
30322: LD_INT 1
30324: NEG
30325: PUSH
30326: EMPTY
30327: LIST
30328: LIST
30329: PUSH
30330: LD_INT 1
30332: PUSH
30333: LD_INT 0
30335: PUSH
30336: EMPTY
30337: LIST
30338: LIST
30339: PUSH
30340: LD_INT 1
30342: PUSH
30343: LD_INT 1
30345: PUSH
30346: EMPTY
30347: LIST
30348: LIST
30349: PUSH
30350: LD_INT 0
30352: PUSH
30353: LD_INT 1
30355: PUSH
30356: EMPTY
30357: LIST
30358: LIST
30359: PUSH
30360: LD_INT 1
30362: NEG
30363: PUSH
30364: LD_INT 0
30366: PUSH
30367: EMPTY
30368: LIST
30369: LIST
30370: PUSH
30371: LD_INT 1
30373: NEG
30374: PUSH
30375: LD_INT 1
30377: NEG
30378: PUSH
30379: EMPTY
30380: LIST
30381: LIST
30382: PUSH
30383: LD_INT 1
30385: NEG
30386: PUSH
30387: LD_INT 2
30389: NEG
30390: PUSH
30391: EMPTY
30392: LIST
30393: LIST
30394: PUSH
30395: LD_INT 1
30397: PUSH
30398: LD_INT 1
30400: NEG
30401: PUSH
30402: EMPTY
30403: LIST
30404: LIST
30405: PUSH
30406: LD_INT 2
30408: PUSH
30409: LD_INT 0
30411: PUSH
30412: EMPTY
30413: LIST
30414: LIST
30415: PUSH
30416: LD_INT 2
30418: PUSH
30419: LD_INT 1
30421: PUSH
30422: EMPTY
30423: LIST
30424: LIST
30425: PUSH
30426: LD_INT 2
30428: PUSH
30429: LD_INT 2
30431: PUSH
30432: EMPTY
30433: LIST
30434: LIST
30435: PUSH
30436: LD_INT 1
30438: PUSH
30439: LD_INT 2
30441: PUSH
30442: EMPTY
30443: LIST
30444: LIST
30445: PUSH
30446: LD_INT 1
30448: NEG
30449: PUSH
30450: LD_INT 1
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: LD_INT 2
30459: NEG
30460: PUSH
30461: LD_INT 0
30463: PUSH
30464: EMPTY
30465: LIST
30466: LIST
30467: PUSH
30468: LD_INT 2
30470: NEG
30471: PUSH
30472: LD_INT 1
30474: NEG
30475: PUSH
30476: EMPTY
30477: LIST
30478: LIST
30479: PUSH
30480: LD_INT 2
30482: NEG
30483: PUSH
30484: LD_INT 2
30486: NEG
30487: PUSH
30488: EMPTY
30489: LIST
30490: LIST
30491: PUSH
30492: LD_INT 2
30494: NEG
30495: PUSH
30496: LD_INT 3
30498: NEG
30499: PUSH
30500: EMPTY
30501: LIST
30502: LIST
30503: PUSH
30504: LD_INT 2
30506: PUSH
30507: LD_INT 1
30509: NEG
30510: PUSH
30511: EMPTY
30512: LIST
30513: LIST
30514: PUSH
30515: LD_INT 3
30517: PUSH
30518: LD_INT 0
30520: PUSH
30521: EMPTY
30522: LIST
30523: LIST
30524: PUSH
30525: LD_INT 3
30527: PUSH
30528: LD_INT 1
30530: PUSH
30531: EMPTY
30532: LIST
30533: LIST
30534: PUSH
30535: LD_INT 3
30537: PUSH
30538: LD_INT 2
30540: PUSH
30541: EMPTY
30542: LIST
30543: LIST
30544: PUSH
30545: LD_INT 3
30547: PUSH
30548: LD_INT 3
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 2
30557: PUSH
30558: LD_INT 3
30560: PUSH
30561: EMPTY
30562: LIST
30563: LIST
30564: PUSH
30565: LD_INT 2
30567: NEG
30568: PUSH
30569: LD_INT 1
30571: PUSH
30572: EMPTY
30573: LIST
30574: LIST
30575: PUSH
30576: LD_INT 3
30578: NEG
30579: PUSH
30580: LD_INT 0
30582: PUSH
30583: EMPTY
30584: LIST
30585: LIST
30586: PUSH
30587: LD_INT 3
30589: NEG
30590: PUSH
30591: LD_INT 1
30593: NEG
30594: PUSH
30595: EMPTY
30596: LIST
30597: LIST
30598: PUSH
30599: LD_INT 3
30601: NEG
30602: PUSH
30603: LD_INT 2
30605: NEG
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 3
30613: NEG
30614: PUSH
30615: LD_INT 3
30617: NEG
30618: PUSH
30619: EMPTY
30620: LIST
30621: LIST
30622: PUSH
30623: EMPTY
30624: LIST
30625: LIST
30626: LIST
30627: LIST
30628: LIST
30629: LIST
30630: LIST
30631: LIST
30632: LIST
30633: LIST
30634: LIST
30635: LIST
30636: LIST
30637: LIST
30638: LIST
30639: LIST
30640: LIST
30641: LIST
30642: LIST
30643: LIST
30644: LIST
30645: LIST
30646: LIST
30647: LIST
30648: LIST
30649: LIST
30650: LIST
30651: LIST
30652: LIST
30653: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30654: LD_ADDR_VAR 0 42
30658: PUSH
30659: LD_INT 0
30661: PUSH
30662: LD_INT 0
30664: PUSH
30665: EMPTY
30666: LIST
30667: LIST
30668: PUSH
30669: LD_INT 0
30671: PUSH
30672: LD_INT 1
30674: NEG
30675: PUSH
30676: EMPTY
30677: LIST
30678: LIST
30679: PUSH
30680: LD_INT 1
30682: PUSH
30683: LD_INT 0
30685: PUSH
30686: EMPTY
30687: LIST
30688: LIST
30689: PUSH
30690: LD_INT 1
30692: PUSH
30693: LD_INT 1
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 1
30705: PUSH
30706: EMPTY
30707: LIST
30708: LIST
30709: PUSH
30710: LD_INT 1
30712: NEG
30713: PUSH
30714: LD_INT 0
30716: PUSH
30717: EMPTY
30718: LIST
30719: LIST
30720: PUSH
30721: LD_INT 1
30723: NEG
30724: PUSH
30725: LD_INT 1
30727: NEG
30728: PUSH
30729: EMPTY
30730: LIST
30731: LIST
30732: PUSH
30733: LD_INT 1
30735: NEG
30736: PUSH
30737: LD_INT 2
30739: NEG
30740: PUSH
30741: EMPTY
30742: LIST
30743: LIST
30744: PUSH
30745: LD_INT 0
30747: PUSH
30748: LD_INT 2
30750: NEG
30751: PUSH
30752: EMPTY
30753: LIST
30754: LIST
30755: PUSH
30756: LD_INT 1
30758: PUSH
30759: LD_INT 1
30761: NEG
30762: PUSH
30763: EMPTY
30764: LIST
30765: LIST
30766: PUSH
30767: LD_INT 2
30769: PUSH
30770: LD_INT 1
30772: PUSH
30773: EMPTY
30774: LIST
30775: LIST
30776: PUSH
30777: LD_INT 2
30779: PUSH
30780: LD_INT 2
30782: PUSH
30783: EMPTY
30784: LIST
30785: LIST
30786: PUSH
30787: LD_INT 1
30789: PUSH
30790: LD_INT 2
30792: PUSH
30793: EMPTY
30794: LIST
30795: LIST
30796: PUSH
30797: LD_INT 0
30799: PUSH
30800: LD_INT 2
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: LD_INT 1
30809: NEG
30810: PUSH
30811: LD_INT 1
30813: PUSH
30814: EMPTY
30815: LIST
30816: LIST
30817: PUSH
30818: LD_INT 2
30820: NEG
30821: PUSH
30822: LD_INT 1
30824: NEG
30825: PUSH
30826: EMPTY
30827: LIST
30828: LIST
30829: PUSH
30830: LD_INT 2
30832: NEG
30833: PUSH
30834: LD_INT 2
30836: NEG
30837: PUSH
30838: EMPTY
30839: LIST
30840: LIST
30841: PUSH
30842: LD_INT 2
30844: NEG
30845: PUSH
30846: LD_INT 3
30848: NEG
30849: PUSH
30850: EMPTY
30851: LIST
30852: LIST
30853: PUSH
30854: LD_INT 1
30856: NEG
30857: PUSH
30858: LD_INT 3
30860: NEG
30861: PUSH
30862: EMPTY
30863: LIST
30864: LIST
30865: PUSH
30866: LD_INT 0
30868: PUSH
30869: LD_INT 3
30871: NEG
30872: PUSH
30873: EMPTY
30874: LIST
30875: LIST
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: LD_INT 2
30882: NEG
30883: PUSH
30884: EMPTY
30885: LIST
30886: LIST
30887: PUSH
30888: LD_INT 3
30890: PUSH
30891: LD_INT 2
30893: PUSH
30894: EMPTY
30895: LIST
30896: LIST
30897: PUSH
30898: LD_INT 3
30900: PUSH
30901: LD_INT 3
30903: PUSH
30904: EMPTY
30905: LIST
30906: LIST
30907: PUSH
30908: LD_INT 2
30910: PUSH
30911: LD_INT 3
30913: PUSH
30914: EMPTY
30915: LIST
30916: LIST
30917: PUSH
30918: LD_INT 1
30920: PUSH
30921: LD_INT 3
30923: PUSH
30924: EMPTY
30925: LIST
30926: LIST
30927: PUSH
30928: LD_INT 0
30930: PUSH
30931: LD_INT 3
30933: PUSH
30934: EMPTY
30935: LIST
30936: LIST
30937: PUSH
30938: LD_INT 1
30940: NEG
30941: PUSH
30942: LD_INT 2
30944: PUSH
30945: EMPTY
30946: LIST
30947: LIST
30948: PUSH
30949: LD_INT 3
30951: NEG
30952: PUSH
30953: LD_INT 2
30955: NEG
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 3
30963: NEG
30964: PUSH
30965: LD_INT 3
30967: NEG
30968: PUSH
30969: EMPTY
30970: LIST
30971: LIST
30972: PUSH
30973: EMPTY
30974: LIST
30975: LIST
30976: LIST
30977: LIST
30978: LIST
30979: LIST
30980: LIST
30981: LIST
30982: LIST
30983: LIST
30984: LIST
30985: LIST
30986: LIST
30987: LIST
30988: LIST
30989: LIST
30990: LIST
30991: LIST
30992: LIST
30993: LIST
30994: LIST
30995: LIST
30996: LIST
30997: LIST
30998: LIST
30999: LIST
31000: LIST
31001: LIST
31002: LIST
31003: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31004: LD_ADDR_VAR 0 43
31008: PUSH
31009: LD_INT 0
31011: PUSH
31012: LD_INT 0
31014: PUSH
31015: EMPTY
31016: LIST
31017: LIST
31018: PUSH
31019: LD_INT 0
31021: PUSH
31022: LD_INT 1
31024: NEG
31025: PUSH
31026: EMPTY
31027: LIST
31028: LIST
31029: PUSH
31030: LD_INT 1
31032: PUSH
31033: LD_INT 0
31035: PUSH
31036: EMPTY
31037: LIST
31038: LIST
31039: PUSH
31040: LD_INT 1
31042: PUSH
31043: LD_INT 1
31045: PUSH
31046: EMPTY
31047: LIST
31048: LIST
31049: PUSH
31050: LD_INT 0
31052: PUSH
31053: LD_INT 1
31055: PUSH
31056: EMPTY
31057: LIST
31058: LIST
31059: PUSH
31060: LD_INT 1
31062: NEG
31063: PUSH
31064: LD_INT 0
31066: PUSH
31067: EMPTY
31068: LIST
31069: LIST
31070: PUSH
31071: LD_INT 1
31073: NEG
31074: PUSH
31075: LD_INT 1
31077: NEG
31078: PUSH
31079: EMPTY
31080: LIST
31081: LIST
31082: PUSH
31083: LD_INT 1
31085: NEG
31086: PUSH
31087: LD_INT 2
31089: NEG
31090: PUSH
31091: EMPTY
31092: LIST
31093: LIST
31094: PUSH
31095: LD_INT 0
31097: PUSH
31098: LD_INT 2
31100: NEG
31101: PUSH
31102: EMPTY
31103: LIST
31104: LIST
31105: PUSH
31106: LD_INT 1
31108: PUSH
31109: LD_INT 1
31111: NEG
31112: PUSH
31113: EMPTY
31114: LIST
31115: LIST
31116: PUSH
31117: LD_INT 2
31119: PUSH
31120: LD_INT 0
31122: PUSH
31123: EMPTY
31124: LIST
31125: LIST
31126: PUSH
31127: LD_INT 2
31129: PUSH
31130: LD_INT 1
31132: PUSH
31133: EMPTY
31134: LIST
31135: LIST
31136: PUSH
31137: LD_INT 1
31139: PUSH
31140: LD_INT 2
31142: PUSH
31143: EMPTY
31144: LIST
31145: LIST
31146: PUSH
31147: LD_INT 0
31149: PUSH
31150: LD_INT 2
31152: PUSH
31153: EMPTY
31154: LIST
31155: LIST
31156: PUSH
31157: LD_INT 1
31159: NEG
31160: PUSH
31161: LD_INT 1
31163: PUSH
31164: EMPTY
31165: LIST
31166: LIST
31167: PUSH
31168: LD_INT 2
31170: NEG
31171: PUSH
31172: LD_INT 0
31174: PUSH
31175: EMPTY
31176: LIST
31177: LIST
31178: PUSH
31179: LD_INT 2
31181: NEG
31182: PUSH
31183: LD_INT 1
31185: NEG
31186: PUSH
31187: EMPTY
31188: LIST
31189: LIST
31190: PUSH
31191: LD_INT 1
31193: NEG
31194: PUSH
31195: LD_INT 3
31197: NEG
31198: PUSH
31199: EMPTY
31200: LIST
31201: LIST
31202: PUSH
31203: LD_INT 0
31205: PUSH
31206: LD_INT 3
31208: NEG
31209: PUSH
31210: EMPTY
31211: LIST
31212: LIST
31213: PUSH
31214: LD_INT 1
31216: PUSH
31217: LD_INT 2
31219: NEG
31220: PUSH
31221: EMPTY
31222: LIST
31223: LIST
31224: PUSH
31225: LD_INT 2
31227: PUSH
31228: LD_INT 1
31230: NEG
31231: PUSH
31232: EMPTY
31233: LIST
31234: LIST
31235: PUSH
31236: LD_INT 3
31238: PUSH
31239: LD_INT 0
31241: PUSH
31242: EMPTY
31243: LIST
31244: LIST
31245: PUSH
31246: LD_INT 3
31248: PUSH
31249: LD_INT 1
31251: PUSH
31252: EMPTY
31253: LIST
31254: LIST
31255: PUSH
31256: LD_INT 1
31258: PUSH
31259: LD_INT 3
31261: PUSH
31262: EMPTY
31263: LIST
31264: LIST
31265: PUSH
31266: LD_INT 0
31268: PUSH
31269: LD_INT 3
31271: PUSH
31272: EMPTY
31273: LIST
31274: LIST
31275: PUSH
31276: LD_INT 1
31278: NEG
31279: PUSH
31280: LD_INT 2
31282: PUSH
31283: EMPTY
31284: LIST
31285: LIST
31286: PUSH
31287: LD_INT 2
31289: NEG
31290: PUSH
31291: LD_INT 1
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 3
31300: NEG
31301: PUSH
31302: LD_INT 0
31304: PUSH
31305: EMPTY
31306: LIST
31307: LIST
31308: PUSH
31309: LD_INT 3
31311: NEG
31312: PUSH
31313: LD_INT 1
31315: NEG
31316: PUSH
31317: EMPTY
31318: LIST
31319: LIST
31320: PUSH
31321: EMPTY
31322: LIST
31323: LIST
31324: LIST
31325: LIST
31326: LIST
31327: LIST
31328: LIST
31329: LIST
31330: LIST
31331: LIST
31332: LIST
31333: LIST
31334: LIST
31335: LIST
31336: LIST
31337: LIST
31338: LIST
31339: LIST
31340: LIST
31341: LIST
31342: LIST
31343: LIST
31344: LIST
31345: LIST
31346: LIST
31347: LIST
31348: LIST
31349: LIST
31350: LIST
31351: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31352: LD_ADDR_VAR 0 44
31356: PUSH
31357: LD_INT 0
31359: PUSH
31360: LD_INT 0
31362: PUSH
31363: EMPTY
31364: LIST
31365: LIST
31366: PUSH
31367: LD_INT 0
31369: PUSH
31370: LD_INT 1
31372: NEG
31373: PUSH
31374: EMPTY
31375: LIST
31376: LIST
31377: PUSH
31378: LD_INT 1
31380: PUSH
31381: LD_INT 0
31383: PUSH
31384: EMPTY
31385: LIST
31386: LIST
31387: PUSH
31388: LD_INT 1
31390: PUSH
31391: LD_INT 1
31393: PUSH
31394: EMPTY
31395: LIST
31396: LIST
31397: PUSH
31398: LD_INT 0
31400: PUSH
31401: LD_INT 1
31403: PUSH
31404: EMPTY
31405: LIST
31406: LIST
31407: PUSH
31408: LD_INT 1
31410: NEG
31411: PUSH
31412: LD_INT 0
31414: PUSH
31415: EMPTY
31416: LIST
31417: LIST
31418: PUSH
31419: LD_INT 1
31421: NEG
31422: PUSH
31423: LD_INT 1
31425: NEG
31426: PUSH
31427: EMPTY
31428: LIST
31429: LIST
31430: PUSH
31431: LD_INT 1
31433: NEG
31434: PUSH
31435: LD_INT 2
31437: NEG
31438: PUSH
31439: EMPTY
31440: LIST
31441: LIST
31442: PUSH
31443: LD_INT 1
31445: PUSH
31446: LD_INT 1
31448: NEG
31449: PUSH
31450: EMPTY
31451: LIST
31452: LIST
31453: PUSH
31454: LD_INT 2
31456: PUSH
31457: LD_INT 0
31459: PUSH
31460: EMPTY
31461: LIST
31462: LIST
31463: PUSH
31464: LD_INT 2
31466: PUSH
31467: LD_INT 1
31469: PUSH
31470: EMPTY
31471: LIST
31472: LIST
31473: PUSH
31474: LD_INT 2
31476: PUSH
31477: LD_INT 2
31479: PUSH
31480: EMPTY
31481: LIST
31482: LIST
31483: PUSH
31484: LD_INT 1
31486: PUSH
31487: LD_INT 2
31489: PUSH
31490: EMPTY
31491: LIST
31492: LIST
31493: PUSH
31494: LD_INT 1
31496: NEG
31497: PUSH
31498: LD_INT 1
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: LD_INT 2
31507: NEG
31508: PUSH
31509: LD_INT 0
31511: PUSH
31512: EMPTY
31513: LIST
31514: LIST
31515: PUSH
31516: LD_INT 2
31518: NEG
31519: PUSH
31520: LD_INT 1
31522: NEG
31523: PUSH
31524: EMPTY
31525: LIST
31526: LIST
31527: PUSH
31528: LD_INT 2
31530: NEG
31531: PUSH
31532: LD_INT 2
31534: NEG
31535: PUSH
31536: EMPTY
31537: LIST
31538: LIST
31539: PUSH
31540: LD_INT 2
31542: NEG
31543: PUSH
31544: LD_INT 3
31546: NEG
31547: PUSH
31548: EMPTY
31549: LIST
31550: LIST
31551: PUSH
31552: LD_INT 2
31554: PUSH
31555: LD_INT 1
31557: NEG
31558: PUSH
31559: EMPTY
31560: LIST
31561: LIST
31562: PUSH
31563: LD_INT 3
31565: PUSH
31566: LD_INT 0
31568: PUSH
31569: EMPTY
31570: LIST
31571: LIST
31572: PUSH
31573: LD_INT 3
31575: PUSH
31576: LD_INT 1
31578: PUSH
31579: EMPTY
31580: LIST
31581: LIST
31582: PUSH
31583: LD_INT 3
31585: PUSH
31586: LD_INT 2
31588: PUSH
31589: EMPTY
31590: LIST
31591: LIST
31592: PUSH
31593: LD_INT 3
31595: PUSH
31596: LD_INT 3
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 2
31605: PUSH
31606: LD_INT 3
31608: PUSH
31609: EMPTY
31610: LIST
31611: LIST
31612: PUSH
31613: LD_INT 2
31615: NEG
31616: PUSH
31617: LD_INT 1
31619: PUSH
31620: EMPTY
31621: LIST
31622: LIST
31623: PUSH
31624: LD_INT 3
31626: NEG
31627: PUSH
31628: LD_INT 0
31630: PUSH
31631: EMPTY
31632: LIST
31633: LIST
31634: PUSH
31635: LD_INT 3
31637: NEG
31638: PUSH
31639: LD_INT 1
31641: NEG
31642: PUSH
31643: EMPTY
31644: LIST
31645: LIST
31646: PUSH
31647: LD_INT 3
31649: NEG
31650: PUSH
31651: LD_INT 2
31653: NEG
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 3
31661: NEG
31662: PUSH
31663: LD_INT 3
31665: NEG
31666: PUSH
31667: EMPTY
31668: LIST
31669: LIST
31670: PUSH
31671: EMPTY
31672: LIST
31673: LIST
31674: LIST
31675: LIST
31676: LIST
31677: LIST
31678: LIST
31679: LIST
31680: LIST
31681: LIST
31682: LIST
31683: LIST
31684: LIST
31685: LIST
31686: LIST
31687: LIST
31688: LIST
31689: LIST
31690: LIST
31691: LIST
31692: LIST
31693: LIST
31694: LIST
31695: LIST
31696: LIST
31697: LIST
31698: LIST
31699: LIST
31700: LIST
31701: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31702: LD_ADDR_VAR 0 45
31706: PUSH
31707: LD_INT 0
31709: PUSH
31710: LD_INT 0
31712: PUSH
31713: EMPTY
31714: LIST
31715: LIST
31716: PUSH
31717: LD_INT 0
31719: PUSH
31720: LD_INT 1
31722: NEG
31723: PUSH
31724: EMPTY
31725: LIST
31726: LIST
31727: PUSH
31728: LD_INT 1
31730: PUSH
31731: LD_INT 0
31733: PUSH
31734: EMPTY
31735: LIST
31736: LIST
31737: PUSH
31738: LD_INT 1
31740: PUSH
31741: LD_INT 1
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 1
31753: PUSH
31754: EMPTY
31755: LIST
31756: LIST
31757: PUSH
31758: LD_INT 1
31760: NEG
31761: PUSH
31762: LD_INT 0
31764: PUSH
31765: EMPTY
31766: LIST
31767: LIST
31768: PUSH
31769: LD_INT 1
31771: NEG
31772: PUSH
31773: LD_INT 1
31775: NEG
31776: PUSH
31777: EMPTY
31778: LIST
31779: LIST
31780: PUSH
31781: LD_INT 1
31783: NEG
31784: PUSH
31785: LD_INT 2
31787: NEG
31788: PUSH
31789: EMPTY
31790: LIST
31791: LIST
31792: PUSH
31793: LD_INT 0
31795: PUSH
31796: LD_INT 2
31798: NEG
31799: PUSH
31800: EMPTY
31801: LIST
31802: LIST
31803: PUSH
31804: LD_INT 1
31806: PUSH
31807: LD_INT 1
31809: NEG
31810: PUSH
31811: EMPTY
31812: LIST
31813: LIST
31814: PUSH
31815: LD_INT 2
31817: PUSH
31818: LD_INT 1
31820: PUSH
31821: EMPTY
31822: LIST
31823: LIST
31824: PUSH
31825: LD_INT 2
31827: PUSH
31828: LD_INT 2
31830: PUSH
31831: EMPTY
31832: LIST
31833: LIST
31834: PUSH
31835: LD_INT 1
31837: PUSH
31838: LD_INT 2
31840: PUSH
31841: EMPTY
31842: LIST
31843: LIST
31844: PUSH
31845: LD_INT 0
31847: PUSH
31848: LD_INT 2
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: LD_INT 1
31857: NEG
31858: PUSH
31859: LD_INT 1
31861: PUSH
31862: EMPTY
31863: LIST
31864: LIST
31865: PUSH
31866: LD_INT 2
31868: NEG
31869: PUSH
31870: LD_INT 1
31872: NEG
31873: PUSH
31874: EMPTY
31875: LIST
31876: LIST
31877: PUSH
31878: LD_INT 2
31880: NEG
31881: PUSH
31882: LD_INT 2
31884: NEG
31885: PUSH
31886: EMPTY
31887: LIST
31888: LIST
31889: PUSH
31890: LD_INT 2
31892: NEG
31893: PUSH
31894: LD_INT 3
31896: NEG
31897: PUSH
31898: EMPTY
31899: LIST
31900: LIST
31901: PUSH
31902: LD_INT 1
31904: NEG
31905: PUSH
31906: LD_INT 3
31908: NEG
31909: PUSH
31910: EMPTY
31911: LIST
31912: LIST
31913: PUSH
31914: LD_INT 0
31916: PUSH
31917: LD_INT 3
31919: NEG
31920: PUSH
31921: EMPTY
31922: LIST
31923: LIST
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: LD_INT 2
31930: NEG
31931: PUSH
31932: EMPTY
31933: LIST
31934: LIST
31935: PUSH
31936: LD_INT 3
31938: PUSH
31939: LD_INT 2
31941: PUSH
31942: EMPTY
31943: LIST
31944: LIST
31945: PUSH
31946: LD_INT 3
31948: PUSH
31949: LD_INT 3
31951: PUSH
31952: EMPTY
31953: LIST
31954: LIST
31955: PUSH
31956: LD_INT 2
31958: PUSH
31959: LD_INT 3
31961: PUSH
31962: EMPTY
31963: LIST
31964: LIST
31965: PUSH
31966: LD_INT 1
31968: PUSH
31969: LD_INT 3
31971: PUSH
31972: EMPTY
31973: LIST
31974: LIST
31975: PUSH
31976: LD_INT 0
31978: PUSH
31979: LD_INT 3
31981: PUSH
31982: EMPTY
31983: LIST
31984: LIST
31985: PUSH
31986: LD_INT 1
31988: NEG
31989: PUSH
31990: LD_INT 2
31992: PUSH
31993: EMPTY
31994: LIST
31995: LIST
31996: PUSH
31997: LD_INT 3
31999: NEG
32000: PUSH
32001: LD_INT 2
32003: NEG
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 3
32011: NEG
32012: PUSH
32013: LD_INT 3
32015: NEG
32016: PUSH
32017: EMPTY
32018: LIST
32019: LIST
32020: PUSH
32021: EMPTY
32022: LIST
32023: LIST
32024: LIST
32025: LIST
32026: LIST
32027: LIST
32028: LIST
32029: LIST
32030: LIST
32031: LIST
32032: LIST
32033: LIST
32034: LIST
32035: LIST
32036: LIST
32037: LIST
32038: LIST
32039: LIST
32040: LIST
32041: LIST
32042: LIST
32043: LIST
32044: LIST
32045: LIST
32046: LIST
32047: LIST
32048: LIST
32049: LIST
32050: LIST
32051: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
32052: LD_ADDR_VAR 0 46
32056: PUSH
32057: LD_INT 0
32059: PUSH
32060: LD_INT 0
32062: PUSH
32063: EMPTY
32064: LIST
32065: LIST
32066: PUSH
32067: LD_INT 0
32069: PUSH
32070: LD_INT 1
32072: NEG
32073: PUSH
32074: EMPTY
32075: LIST
32076: LIST
32077: PUSH
32078: LD_INT 1
32080: PUSH
32081: LD_INT 0
32083: PUSH
32084: EMPTY
32085: LIST
32086: LIST
32087: PUSH
32088: LD_INT 1
32090: PUSH
32091: LD_INT 1
32093: PUSH
32094: EMPTY
32095: LIST
32096: LIST
32097: PUSH
32098: LD_INT 0
32100: PUSH
32101: LD_INT 1
32103: PUSH
32104: EMPTY
32105: LIST
32106: LIST
32107: PUSH
32108: LD_INT 1
32110: NEG
32111: PUSH
32112: LD_INT 0
32114: PUSH
32115: EMPTY
32116: LIST
32117: LIST
32118: PUSH
32119: LD_INT 1
32121: NEG
32122: PUSH
32123: LD_INT 1
32125: NEG
32126: PUSH
32127: EMPTY
32128: LIST
32129: LIST
32130: PUSH
32131: LD_INT 1
32133: NEG
32134: PUSH
32135: LD_INT 2
32137: NEG
32138: PUSH
32139: EMPTY
32140: LIST
32141: LIST
32142: PUSH
32143: LD_INT 0
32145: PUSH
32146: LD_INT 2
32148: NEG
32149: PUSH
32150: EMPTY
32151: LIST
32152: LIST
32153: PUSH
32154: LD_INT 1
32156: PUSH
32157: LD_INT 1
32159: NEG
32160: PUSH
32161: EMPTY
32162: LIST
32163: LIST
32164: PUSH
32165: LD_INT 2
32167: PUSH
32168: LD_INT 0
32170: PUSH
32171: EMPTY
32172: LIST
32173: LIST
32174: PUSH
32175: LD_INT 2
32177: PUSH
32178: LD_INT 1
32180: PUSH
32181: EMPTY
32182: LIST
32183: LIST
32184: PUSH
32185: LD_INT 1
32187: PUSH
32188: LD_INT 2
32190: PUSH
32191: EMPTY
32192: LIST
32193: LIST
32194: PUSH
32195: LD_INT 0
32197: PUSH
32198: LD_INT 2
32200: PUSH
32201: EMPTY
32202: LIST
32203: LIST
32204: PUSH
32205: LD_INT 1
32207: NEG
32208: PUSH
32209: LD_INT 1
32211: PUSH
32212: EMPTY
32213: LIST
32214: LIST
32215: PUSH
32216: LD_INT 2
32218: NEG
32219: PUSH
32220: LD_INT 0
32222: PUSH
32223: EMPTY
32224: LIST
32225: LIST
32226: PUSH
32227: LD_INT 2
32229: NEG
32230: PUSH
32231: LD_INT 1
32233: NEG
32234: PUSH
32235: EMPTY
32236: LIST
32237: LIST
32238: PUSH
32239: LD_INT 1
32241: NEG
32242: PUSH
32243: LD_INT 3
32245: NEG
32246: PUSH
32247: EMPTY
32248: LIST
32249: LIST
32250: PUSH
32251: LD_INT 0
32253: PUSH
32254: LD_INT 3
32256: NEG
32257: PUSH
32258: EMPTY
32259: LIST
32260: LIST
32261: PUSH
32262: LD_INT 1
32264: PUSH
32265: LD_INT 2
32267: NEG
32268: PUSH
32269: EMPTY
32270: LIST
32271: LIST
32272: PUSH
32273: LD_INT 2
32275: PUSH
32276: LD_INT 1
32278: NEG
32279: PUSH
32280: EMPTY
32281: LIST
32282: LIST
32283: PUSH
32284: LD_INT 3
32286: PUSH
32287: LD_INT 0
32289: PUSH
32290: EMPTY
32291: LIST
32292: LIST
32293: PUSH
32294: LD_INT 3
32296: PUSH
32297: LD_INT 1
32299: PUSH
32300: EMPTY
32301: LIST
32302: LIST
32303: PUSH
32304: LD_INT 1
32306: PUSH
32307: LD_INT 3
32309: PUSH
32310: EMPTY
32311: LIST
32312: LIST
32313: PUSH
32314: LD_INT 0
32316: PUSH
32317: LD_INT 3
32319: PUSH
32320: EMPTY
32321: LIST
32322: LIST
32323: PUSH
32324: LD_INT 1
32326: NEG
32327: PUSH
32328: LD_INT 2
32330: PUSH
32331: EMPTY
32332: LIST
32333: LIST
32334: PUSH
32335: LD_INT 2
32337: NEG
32338: PUSH
32339: LD_INT 1
32341: PUSH
32342: EMPTY
32343: LIST
32344: LIST
32345: PUSH
32346: LD_INT 3
32348: NEG
32349: PUSH
32350: LD_INT 0
32352: PUSH
32353: EMPTY
32354: LIST
32355: LIST
32356: PUSH
32357: LD_INT 3
32359: NEG
32360: PUSH
32361: LD_INT 1
32363: NEG
32364: PUSH
32365: EMPTY
32366: LIST
32367: LIST
32368: PUSH
32369: EMPTY
32370: LIST
32371: LIST
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: LIST
32385: LIST
32386: LIST
32387: LIST
32388: LIST
32389: LIST
32390: LIST
32391: LIST
32392: LIST
32393: LIST
32394: LIST
32395: LIST
32396: LIST
32397: LIST
32398: LIST
32399: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32400: LD_ADDR_VAR 0 47
32404: PUSH
32405: LD_INT 0
32407: PUSH
32408: LD_INT 0
32410: PUSH
32411: EMPTY
32412: LIST
32413: LIST
32414: PUSH
32415: LD_INT 0
32417: PUSH
32418: LD_INT 1
32420: NEG
32421: PUSH
32422: EMPTY
32423: LIST
32424: LIST
32425: PUSH
32426: LD_INT 1
32428: PUSH
32429: LD_INT 0
32431: PUSH
32432: EMPTY
32433: LIST
32434: LIST
32435: PUSH
32436: LD_INT 1
32438: PUSH
32439: LD_INT 1
32441: PUSH
32442: EMPTY
32443: LIST
32444: LIST
32445: PUSH
32446: LD_INT 0
32448: PUSH
32449: LD_INT 1
32451: PUSH
32452: EMPTY
32453: LIST
32454: LIST
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: LD_INT 0
32462: PUSH
32463: EMPTY
32464: LIST
32465: LIST
32466: PUSH
32467: LD_INT 1
32469: NEG
32470: PUSH
32471: LD_INT 1
32473: NEG
32474: PUSH
32475: EMPTY
32476: LIST
32477: LIST
32478: PUSH
32479: LD_INT 1
32481: NEG
32482: PUSH
32483: LD_INT 2
32485: NEG
32486: PUSH
32487: EMPTY
32488: LIST
32489: LIST
32490: PUSH
32491: LD_INT 0
32493: PUSH
32494: LD_INT 2
32496: NEG
32497: PUSH
32498: EMPTY
32499: LIST
32500: LIST
32501: PUSH
32502: LD_INT 1
32504: PUSH
32505: LD_INT 1
32507: NEG
32508: PUSH
32509: EMPTY
32510: LIST
32511: LIST
32512: PUSH
32513: LD_INT 2
32515: NEG
32516: PUSH
32517: LD_INT 1
32519: NEG
32520: PUSH
32521: EMPTY
32522: LIST
32523: LIST
32524: PUSH
32525: LD_INT 2
32527: NEG
32528: PUSH
32529: LD_INT 2
32531: NEG
32532: PUSH
32533: EMPTY
32534: LIST
32535: LIST
32536: PUSH
32537: EMPTY
32538: LIST
32539: LIST
32540: LIST
32541: LIST
32542: LIST
32543: LIST
32544: LIST
32545: LIST
32546: LIST
32547: LIST
32548: LIST
32549: LIST
32550: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32551: LD_ADDR_VAR 0 48
32555: PUSH
32556: LD_INT 0
32558: PUSH
32559: LD_INT 0
32561: PUSH
32562: EMPTY
32563: LIST
32564: LIST
32565: PUSH
32566: LD_INT 0
32568: PUSH
32569: LD_INT 1
32571: NEG
32572: PUSH
32573: EMPTY
32574: LIST
32575: LIST
32576: PUSH
32577: LD_INT 1
32579: PUSH
32580: LD_INT 0
32582: PUSH
32583: EMPTY
32584: LIST
32585: LIST
32586: PUSH
32587: LD_INT 1
32589: PUSH
32590: LD_INT 1
32592: PUSH
32593: EMPTY
32594: LIST
32595: LIST
32596: PUSH
32597: LD_INT 0
32599: PUSH
32600: LD_INT 1
32602: PUSH
32603: EMPTY
32604: LIST
32605: LIST
32606: PUSH
32607: LD_INT 1
32609: NEG
32610: PUSH
32611: LD_INT 0
32613: PUSH
32614: EMPTY
32615: LIST
32616: LIST
32617: PUSH
32618: LD_INT 1
32620: NEG
32621: PUSH
32622: LD_INT 1
32624: NEG
32625: PUSH
32626: EMPTY
32627: LIST
32628: LIST
32629: PUSH
32630: LD_INT 1
32632: NEG
32633: PUSH
32634: LD_INT 2
32636: NEG
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 0
32644: PUSH
32645: LD_INT 2
32647: NEG
32648: PUSH
32649: EMPTY
32650: LIST
32651: LIST
32652: PUSH
32653: LD_INT 1
32655: PUSH
32656: LD_INT 1
32658: NEG
32659: PUSH
32660: EMPTY
32661: LIST
32662: LIST
32663: PUSH
32664: LD_INT 2
32666: PUSH
32667: LD_INT 0
32669: PUSH
32670: EMPTY
32671: LIST
32672: LIST
32673: PUSH
32674: LD_INT 2
32676: PUSH
32677: LD_INT 1
32679: PUSH
32680: EMPTY
32681: LIST
32682: LIST
32683: PUSH
32684: EMPTY
32685: LIST
32686: LIST
32687: LIST
32688: LIST
32689: LIST
32690: LIST
32691: LIST
32692: LIST
32693: LIST
32694: LIST
32695: LIST
32696: LIST
32697: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32698: LD_ADDR_VAR 0 49
32702: PUSH
32703: LD_INT 0
32705: PUSH
32706: LD_INT 0
32708: PUSH
32709: EMPTY
32710: LIST
32711: LIST
32712: PUSH
32713: LD_INT 0
32715: PUSH
32716: LD_INT 1
32718: NEG
32719: PUSH
32720: EMPTY
32721: LIST
32722: LIST
32723: PUSH
32724: LD_INT 1
32726: PUSH
32727: LD_INT 0
32729: PUSH
32730: EMPTY
32731: LIST
32732: LIST
32733: PUSH
32734: LD_INT 1
32736: PUSH
32737: LD_INT 1
32739: PUSH
32740: EMPTY
32741: LIST
32742: LIST
32743: PUSH
32744: LD_INT 0
32746: PUSH
32747: LD_INT 1
32749: PUSH
32750: EMPTY
32751: LIST
32752: LIST
32753: PUSH
32754: LD_INT 1
32756: NEG
32757: PUSH
32758: LD_INT 0
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 1
32767: NEG
32768: PUSH
32769: LD_INT 1
32771: NEG
32772: PUSH
32773: EMPTY
32774: LIST
32775: LIST
32776: PUSH
32777: LD_INT 1
32779: PUSH
32780: LD_INT 1
32782: NEG
32783: PUSH
32784: EMPTY
32785: LIST
32786: LIST
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: LD_INT 0
32793: PUSH
32794: EMPTY
32795: LIST
32796: LIST
32797: PUSH
32798: LD_INT 2
32800: PUSH
32801: LD_INT 1
32803: PUSH
32804: EMPTY
32805: LIST
32806: LIST
32807: PUSH
32808: LD_INT 2
32810: PUSH
32811: LD_INT 2
32813: PUSH
32814: EMPTY
32815: LIST
32816: LIST
32817: PUSH
32818: LD_INT 1
32820: PUSH
32821: LD_INT 2
32823: PUSH
32824: EMPTY
32825: LIST
32826: LIST
32827: PUSH
32828: EMPTY
32829: LIST
32830: LIST
32831: LIST
32832: LIST
32833: LIST
32834: LIST
32835: LIST
32836: LIST
32837: LIST
32838: LIST
32839: LIST
32840: LIST
32841: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32842: LD_ADDR_VAR 0 50
32846: PUSH
32847: LD_INT 0
32849: PUSH
32850: LD_INT 0
32852: PUSH
32853: EMPTY
32854: LIST
32855: LIST
32856: PUSH
32857: LD_INT 0
32859: PUSH
32860: LD_INT 1
32862: NEG
32863: PUSH
32864: EMPTY
32865: LIST
32866: LIST
32867: PUSH
32868: LD_INT 1
32870: PUSH
32871: LD_INT 0
32873: PUSH
32874: EMPTY
32875: LIST
32876: LIST
32877: PUSH
32878: LD_INT 1
32880: PUSH
32881: LD_INT 1
32883: PUSH
32884: EMPTY
32885: LIST
32886: LIST
32887: PUSH
32888: LD_INT 0
32890: PUSH
32891: LD_INT 1
32893: PUSH
32894: EMPTY
32895: LIST
32896: LIST
32897: PUSH
32898: LD_INT 1
32900: NEG
32901: PUSH
32902: LD_INT 0
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 1
32911: NEG
32912: PUSH
32913: LD_INT 1
32915: NEG
32916: PUSH
32917: EMPTY
32918: LIST
32919: LIST
32920: PUSH
32921: LD_INT 2
32923: PUSH
32924: LD_INT 1
32926: PUSH
32927: EMPTY
32928: LIST
32929: LIST
32930: PUSH
32931: LD_INT 2
32933: PUSH
32934: LD_INT 2
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 1
32943: PUSH
32944: LD_INT 2
32946: PUSH
32947: EMPTY
32948: LIST
32949: LIST
32950: PUSH
32951: LD_INT 0
32953: PUSH
32954: LD_INT 2
32956: PUSH
32957: EMPTY
32958: LIST
32959: LIST
32960: PUSH
32961: LD_INT 1
32963: NEG
32964: PUSH
32965: LD_INT 1
32967: PUSH
32968: EMPTY
32969: LIST
32970: LIST
32971: PUSH
32972: EMPTY
32973: LIST
32974: LIST
32975: LIST
32976: LIST
32977: LIST
32978: LIST
32979: LIST
32980: LIST
32981: LIST
32982: LIST
32983: LIST
32984: LIST
32985: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32986: LD_ADDR_VAR 0 51
32990: PUSH
32991: LD_INT 0
32993: PUSH
32994: LD_INT 0
32996: PUSH
32997: EMPTY
32998: LIST
32999: LIST
33000: PUSH
33001: LD_INT 0
33003: PUSH
33004: LD_INT 1
33006: NEG
33007: PUSH
33008: EMPTY
33009: LIST
33010: LIST
33011: PUSH
33012: LD_INT 1
33014: PUSH
33015: LD_INT 0
33017: PUSH
33018: EMPTY
33019: LIST
33020: LIST
33021: PUSH
33022: LD_INT 1
33024: PUSH
33025: LD_INT 1
33027: PUSH
33028: EMPTY
33029: LIST
33030: LIST
33031: PUSH
33032: LD_INT 0
33034: PUSH
33035: LD_INT 1
33037: PUSH
33038: EMPTY
33039: LIST
33040: LIST
33041: PUSH
33042: LD_INT 1
33044: NEG
33045: PUSH
33046: LD_INT 0
33048: PUSH
33049: EMPTY
33050: LIST
33051: LIST
33052: PUSH
33053: LD_INT 1
33055: NEG
33056: PUSH
33057: LD_INT 1
33059: NEG
33060: PUSH
33061: EMPTY
33062: LIST
33063: LIST
33064: PUSH
33065: LD_INT 1
33067: PUSH
33068: LD_INT 2
33070: PUSH
33071: EMPTY
33072: LIST
33073: LIST
33074: PUSH
33075: LD_INT 0
33077: PUSH
33078: LD_INT 2
33080: PUSH
33081: EMPTY
33082: LIST
33083: LIST
33084: PUSH
33085: LD_INT 1
33087: NEG
33088: PUSH
33089: LD_INT 1
33091: PUSH
33092: EMPTY
33093: LIST
33094: LIST
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: LD_INT 0
33102: PUSH
33103: EMPTY
33104: LIST
33105: LIST
33106: PUSH
33107: LD_INT 2
33109: NEG
33110: PUSH
33111: LD_INT 1
33113: NEG
33114: PUSH
33115: EMPTY
33116: LIST
33117: LIST
33118: PUSH
33119: EMPTY
33120: LIST
33121: LIST
33122: LIST
33123: LIST
33124: LIST
33125: LIST
33126: LIST
33127: LIST
33128: LIST
33129: LIST
33130: LIST
33131: LIST
33132: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33133: LD_ADDR_VAR 0 52
33137: PUSH
33138: LD_INT 0
33140: PUSH
33141: LD_INT 0
33143: PUSH
33144: EMPTY
33145: LIST
33146: LIST
33147: PUSH
33148: LD_INT 0
33150: PUSH
33151: LD_INT 1
33153: NEG
33154: PUSH
33155: EMPTY
33156: LIST
33157: LIST
33158: PUSH
33159: LD_INT 1
33161: PUSH
33162: LD_INT 0
33164: PUSH
33165: EMPTY
33166: LIST
33167: LIST
33168: PUSH
33169: LD_INT 1
33171: PUSH
33172: LD_INT 1
33174: PUSH
33175: EMPTY
33176: LIST
33177: LIST
33178: PUSH
33179: LD_INT 0
33181: PUSH
33182: LD_INT 1
33184: PUSH
33185: EMPTY
33186: LIST
33187: LIST
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: LD_INT 0
33195: PUSH
33196: EMPTY
33197: LIST
33198: LIST
33199: PUSH
33200: LD_INT 1
33202: NEG
33203: PUSH
33204: LD_INT 1
33206: NEG
33207: PUSH
33208: EMPTY
33209: LIST
33210: LIST
33211: PUSH
33212: LD_INT 1
33214: NEG
33215: PUSH
33216: LD_INT 2
33218: NEG
33219: PUSH
33220: EMPTY
33221: LIST
33222: LIST
33223: PUSH
33224: LD_INT 1
33226: NEG
33227: PUSH
33228: LD_INT 1
33230: PUSH
33231: EMPTY
33232: LIST
33233: LIST
33234: PUSH
33235: LD_INT 2
33237: NEG
33238: PUSH
33239: LD_INT 0
33241: PUSH
33242: EMPTY
33243: LIST
33244: LIST
33245: PUSH
33246: LD_INT 2
33248: NEG
33249: PUSH
33250: LD_INT 1
33252: NEG
33253: PUSH
33254: EMPTY
33255: LIST
33256: LIST
33257: PUSH
33258: LD_INT 2
33260: NEG
33261: PUSH
33262: LD_INT 2
33264: NEG
33265: PUSH
33266: EMPTY
33267: LIST
33268: LIST
33269: PUSH
33270: EMPTY
33271: LIST
33272: LIST
33273: LIST
33274: LIST
33275: LIST
33276: LIST
33277: LIST
33278: LIST
33279: LIST
33280: LIST
33281: LIST
33282: LIST
33283: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33284: LD_ADDR_VAR 0 53
33288: PUSH
33289: LD_INT 0
33291: PUSH
33292: LD_INT 0
33294: PUSH
33295: EMPTY
33296: LIST
33297: LIST
33298: PUSH
33299: LD_INT 0
33301: PUSH
33302: LD_INT 1
33304: NEG
33305: PUSH
33306: EMPTY
33307: LIST
33308: LIST
33309: PUSH
33310: LD_INT 1
33312: PUSH
33313: LD_INT 0
33315: PUSH
33316: EMPTY
33317: LIST
33318: LIST
33319: PUSH
33320: LD_INT 1
33322: PUSH
33323: LD_INT 1
33325: PUSH
33326: EMPTY
33327: LIST
33328: LIST
33329: PUSH
33330: LD_INT 0
33332: PUSH
33333: LD_INT 1
33335: PUSH
33336: EMPTY
33337: LIST
33338: LIST
33339: PUSH
33340: LD_INT 1
33342: NEG
33343: PUSH
33344: LD_INT 0
33346: PUSH
33347: EMPTY
33348: LIST
33349: LIST
33350: PUSH
33351: LD_INT 1
33353: NEG
33354: PUSH
33355: LD_INT 1
33357: NEG
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 1
33365: NEG
33366: PUSH
33367: LD_INT 2
33369: NEG
33370: PUSH
33371: EMPTY
33372: LIST
33373: LIST
33374: PUSH
33375: LD_INT 0
33377: PUSH
33378: LD_INT 2
33380: NEG
33381: PUSH
33382: EMPTY
33383: LIST
33384: LIST
33385: PUSH
33386: LD_INT 1
33388: PUSH
33389: LD_INT 1
33391: NEG
33392: PUSH
33393: EMPTY
33394: LIST
33395: LIST
33396: PUSH
33397: LD_INT 2
33399: PUSH
33400: LD_INT 0
33402: PUSH
33403: EMPTY
33404: LIST
33405: LIST
33406: PUSH
33407: LD_INT 2
33409: PUSH
33410: LD_INT 1
33412: PUSH
33413: EMPTY
33414: LIST
33415: LIST
33416: PUSH
33417: LD_INT 2
33419: PUSH
33420: LD_INT 2
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: PUSH
33430: LD_INT 2
33432: PUSH
33433: EMPTY
33434: LIST
33435: LIST
33436: PUSH
33437: LD_INT 0
33439: PUSH
33440: LD_INT 2
33442: PUSH
33443: EMPTY
33444: LIST
33445: LIST
33446: PUSH
33447: LD_INT 1
33449: NEG
33450: PUSH
33451: LD_INT 1
33453: PUSH
33454: EMPTY
33455: LIST
33456: LIST
33457: PUSH
33458: LD_INT 2
33460: NEG
33461: PUSH
33462: LD_INT 0
33464: PUSH
33465: EMPTY
33466: LIST
33467: LIST
33468: PUSH
33469: LD_INT 2
33471: NEG
33472: PUSH
33473: LD_INT 1
33475: NEG
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: NEG
33484: PUSH
33485: LD_INT 2
33487: NEG
33488: PUSH
33489: EMPTY
33490: LIST
33491: LIST
33492: PUSH
33493: EMPTY
33494: LIST
33495: LIST
33496: LIST
33497: LIST
33498: LIST
33499: LIST
33500: LIST
33501: LIST
33502: LIST
33503: LIST
33504: LIST
33505: LIST
33506: LIST
33507: LIST
33508: LIST
33509: LIST
33510: LIST
33511: LIST
33512: LIST
33513: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33514: LD_ADDR_VAR 0 54
33518: PUSH
33519: LD_INT 0
33521: PUSH
33522: LD_INT 0
33524: PUSH
33525: EMPTY
33526: LIST
33527: LIST
33528: PUSH
33529: LD_INT 0
33531: PUSH
33532: LD_INT 1
33534: NEG
33535: PUSH
33536: EMPTY
33537: LIST
33538: LIST
33539: PUSH
33540: LD_INT 1
33542: PUSH
33543: LD_INT 0
33545: PUSH
33546: EMPTY
33547: LIST
33548: LIST
33549: PUSH
33550: LD_INT 1
33552: PUSH
33553: LD_INT 1
33555: PUSH
33556: EMPTY
33557: LIST
33558: LIST
33559: PUSH
33560: LD_INT 0
33562: PUSH
33563: LD_INT 1
33565: PUSH
33566: EMPTY
33567: LIST
33568: LIST
33569: PUSH
33570: LD_INT 1
33572: NEG
33573: PUSH
33574: LD_INT 0
33576: PUSH
33577: EMPTY
33578: LIST
33579: LIST
33580: PUSH
33581: LD_INT 1
33583: NEG
33584: PUSH
33585: LD_INT 1
33587: NEG
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 1
33595: NEG
33596: PUSH
33597: LD_INT 2
33599: NEG
33600: PUSH
33601: EMPTY
33602: LIST
33603: LIST
33604: PUSH
33605: LD_INT 0
33607: PUSH
33608: LD_INT 2
33610: NEG
33611: PUSH
33612: EMPTY
33613: LIST
33614: LIST
33615: PUSH
33616: LD_INT 1
33618: PUSH
33619: LD_INT 1
33621: NEG
33622: PUSH
33623: EMPTY
33624: LIST
33625: LIST
33626: PUSH
33627: LD_INT 2
33629: PUSH
33630: LD_INT 0
33632: PUSH
33633: EMPTY
33634: LIST
33635: LIST
33636: PUSH
33637: LD_INT 2
33639: PUSH
33640: LD_INT 1
33642: PUSH
33643: EMPTY
33644: LIST
33645: LIST
33646: PUSH
33647: LD_INT 2
33649: PUSH
33650: LD_INT 2
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: PUSH
33660: LD_INT 2
33662: PUSH
33663: EMPTY
33664: LIST
33665: LIST
33666: PUSH
33667: LD_INT 0
33669: PUSH
33670: LD_INT 2
33672: PUSH
33673: EMPTY
33674: LIST
33675: LIST
33676: PUSH
33677: LD_INT 1
33679: NEG
33680: PUSH
33681: LD_INT 1
33683: PUSH
33684: EMPTY
33685: LIST
33686: LIST
33687: PUSH
33688: LD_INT 2
33690: NEG
33691: PUSH
33692: LD_INT 0
33694: PUSH
33695: EMPTY
33696: LIST
33697: LIST
33698: PUSH
33699: LD_INT 2
33701: NEG
33702: PUSH
33703: LD_INT 1
33705: NEG
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: NEG
33714: PUSH
33715: LD_INT 2
33717: NEG
33718: PUSH
33719: EMPTY
33720: LIST
33721: LIST
33722: PUSH
33723: EMPTY
33724: LIST
33725: LIST
33726: LIST
33727: LIST
33728: LIST
33729: LIST
33730: LIST
33731: LIST
33732: LIST
33733: LIST
33734: LIST
33735: LIST
33736: LIST
33737: LIST
33738: LIST
33739: LIST
33740: LIST
33741: LIST
33742: LIST
33743: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33744: LD_ADDR_VAR 0 55
33748: PUSH
33749: LD_INT 0
33751: PUSH
33752: LD_INT 0
33754: PUSH
33755: EMPTY
33756: LIST
33757: LIST
33758: PUSH
33759: LD_INT 0
33761: PUSH
33762: LD_INT 1
33764: NEG
33765: PUSH
33766: EMPTY
33767: LIST
33768: LIST
33769: PUSH
33770: LD_INT 1
33772: PUSH
33773: LD_INT 0
33775: PUSH
33776: EMPTY
33777: LIST
33778: LIST
33779: PUSH
33780: LD_INT 1
33782: PUSH
33783: LD_INT 1
33785: PUSH
33786: EMPTY
33787: LIST
33788: LIST
33789: PUSH
33790: LD_INT 0
33792: PUSH
33793: LD_INT 1
33795: PUSH
33796: EMPTY
33797: LIST
33798: LIST
33799: PUSH
33800: LD_INT 1
33802: NEG
33803: PUSH
33804: LD_INT 0
33806: PUSH
33807: EMPTY
33808: LIST
33809: LIST
33810: PUSH
33811: LD_INT 1
33813: NEG
33814: PUSH
33815: LD_INT 1
33817: NEG
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 1
33825: NEG
33826: PUSH
33827: LD_INT 2
33829: NEG
33830: PUSH
33831: EMPTY
33832: LIST
33833: LIST
33834: PUSH
33835: LD_INT 0
33837: PUSH
33838: LD_INT 2
33840: NEG
33841: PUSH
33842: EMPTY
33843: LIST
33844: LIST
33845: PUSH
33846: LD_INT 1
33848: PUSH
33849: LD_INT 1
33851: NEG
33852: PUSH
33853: EMPTY
33854: LIST
33855: LIST
33856: PUSH
33857: LD_INT 2
33859: PUSH
33860: LD_INT 0
33862: PUSH
33863: EMPTY
33864: LIST
33865: LIST
33866: PUSH
33867: LD_INT 2
33869: PUSH
33870: LD_INT 1
33872: PUSH
33873: EMPTY
33874: LIST
33875: LIST
33876: PUSH
33877: LD_INT 2
33879: PUSH
33880: LD_INT 2
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: PUSH
33890: LD_INT 2
33892: PUSH
33893: EMPTY
33894: LIST
33895: LIST
33896: PUSH
33897: LD_INT 0
33899: PUSH
33900: LD_INT 2
33902: PUSH
33903: EMPTY
33904: LIST
33905: LIST
33906: PUSH
33907: LD_INT 1
33909: NEG
33910: PUSH
33911: LD_INT 1
33913: PUSH
33914: EMPTY
33915: LIST
33916: LIST
33917: PUSH
33918: LD_INT 2
33920: NEG
33921: PUSH
33922: LD_INT 0
33924: PUSH
33925: EMPTY
33926: LIST
33927: LIST
33928: PUSH
33929: LD_INT 2
33931: NEG
33932: PUSH
33933: LD_INT 1
33935: NEG
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: NEG
33944: PUSH
33945: LD_INT 2
33947: NEG
33948: PUSH
33949: EMPTY
33950: LIST
33951: LIST
33952: PUSH
33953: EMPTY
33954: LIST
33955: LIST
33956: LIST
33957: LIST
33958: LIST
33959: LIST
33960: LIST
33961: LIST
33962: LIST
33963: LIST
33964: LIST
33965: LIST
33966: LIST
33967: LIST
33968: LIST
33969: LIST
33970: LIST
33971: LIST
33972: LIST
33973: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33974: LD_ADDR_VAR 0 56
33978: PUSH
33979: LD_INT 0
33981: PUSH
33982: LD_INT 0
33984: PUSH
33985: EMPTY
33986: LIST
33987: LIST
33988: PUSH
33989: LD_INT 0
33991: PUSH
33992: LD_INT 1
33994: NEG
33995: PUSH
33996: EMPTY
33997: LIST
33998: LIST
33999: PUSH
34000: LD_INT 1
34002: PUSH
34003: LD_INT 0
34005: PUSH
34006: EMPTY
34007: LIST
34008: LIST
34009: PUSH
34010: LD_INT 1
34012: PUSH
34013: LD_INT 1
34015: PUSH
34016: EMPTY
34017: LIST
34018: LIST
34019: PUSH
34020: LD_INT 0
34022: PUSH
34023: LD_INT 1
34025: PUSH
34026: EMPTY
34027: LIST
34028: LIST
34029: PUSH
34030: LD_INT 1
34032: NEG
34033: PUSH
34034: LD_INT 0
34036: PUSH
34037: EMPTY
34038: LIST
34039: LIST
34040: PUSH
34041: LD_INT 1
34043: NEG
34044: PUSH
34045: LD_INT 1
34047: NEG
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 1
34055: NEG
34056: PUSH
34057: LD_INT 2
34059: NEG
34060: PUSH
34061: EMPTY
34062: LIST
34063: LIST
34064: PUSH
34065: LD_INT 0
34067: PUSH
34068: LD_INT 2
34070: NEG
34071: PUSH
34072: EMPTY
34073: LIST
34074: LIST
34075: PUSH
34076: LD_INT 1
34078: PUSH
34079: LD_INT 1
34081: NEG
34082: PUSH
34083: EMPTY
34084: LIST
34085: LIST
34086: PUSH
34087: LD_INT 2
34089: PUSH
34090: LD_INT 0
34092: PUSH
34093: EMPTY
34094: LIST
34095: LIST
34096: PUSH
34097: LD_INT 2
34099: PUSH
34100: LD_INT 1
34102: PUSH
34103: EMPTY
34104: LIST
34105: LIST
34106: PUSH
34107: LD_INT 2
34109: PUSH
34110: LD_INT 2
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: PUSH
34120: LD_INT 2
34122: PUSH
34123: EMPTY
34124: LIST
34125: LIST
34126: PUSH
34127: LD_INT 0
34129: PUSH
34130: LD_INT 2
34132: PUSH
34133: EMPTY
34134: LIST
34135: LIST
34136: PUSH
34137: LD_INT 1
34139: NEG
34140: PUSH
34141: LD_INT 1
34143: PUSH
34144: EMPTY
34145: LIST
34146: LIST
34147: PUSH
34148: LD_INT 2
34150: NEG
34151: PUSH
34152: LD_INT 0
34154: PUSH
34155: EMPTY
34156: LIST
34157: LIST
34158: PUSH
34159: LD_INT 2
34161: NEG
34162: PUSH
34163: LD_INT 1
34165: NEG
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: NEG
34174: PUSH
34175: LD_INT 2
34177: NEG
34178: PUSH
34179: EMPTY
34180: LIST
34181: LIST
34182: PUSH
34183: EMPTY
34184: LIST
34185: LIST
34186: LIST
34187: LIST
34188: LIST
34189: LIST
34190: LIST
34191: LIST
34192: LIST
34193: LIST
34194: LIST
34195: LIST
34196: LIST
34197: LIST
34198: LIST
34199: LIST
34200: LIST
34201: LIST
34202: LIST
34203: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34204: LD_ADDR_VAR 0 57
34208: PUSH
34209: LD_INT 0
34211: PUSH
34212: LD_INT 0
34214: PUSH
34215: EMPTY
34216: LIST
34217: LIST
34218: PUSH
34219: LD_INT 0
34221: PUSH
34222: LD_INT 1
34224: NEG
34225: PUSH
34226: EMPTY
34227: LIST
34228: LIST
34229: PUSH
34230: LD_INT 1
34232: PUSH
34233: LD_INT 0
34235: PUSH
34236: EMPTY
34237: LIST
34238: LIST
34239: PUSH
34240: LD_INT 1
34242: PUSH
34243: LD_INT 1
34245: PUSH
34246: EMPTY
34247: LIST
34248: LIST
34249: PUSH
34250: LD_INT 0
34252: PUSH
34253: LD_INT 1
34255: PUSH
34256: EMPTY
34257: LIST
34258: LIST
34259: PUSH
34260: LD_INT 1
34262: NEG
34263: PUSH
34264: LD_INT 0
34266: PUSH
34267: EMPTY
34268: LIST
34269: LIST
34270: PUSH
34271: LD_INT 1
34273: NEG
34274: PUSH
34275: LD_INT 1
34277: NEG
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 1
34285: NEG
34286: PUSH
34287: LD_INT 2
34289: NEG
34290: PUSH
34291: EMPTY
34292: LIST
34293: LIST
34294: PUSH
34295: LD_INT 0
34297: PUSH
34298: LD_INT 2
34300: NEG
34301: PUSH
34302: EMPTY
34303: LIST
34304: LIST
34305: PUSH
34306: LD_INT 1
34308: PUSH
34309: LD_INT 1
34311: NEG
34312: PUSH
34313: EMPTY
34314: LIST
34315: LIST
34316: PUSH
34317: LD_INT 2
34319: PUSH
34320: LD_INT 0
34322: PUSH
34323: EMPTY
34324: LIST
34325: LIST
34326: PUSH
34327: LD_INT 2
34329: PUSH
34330: LD_INT 1
34332: PUSH
34333: EMPTY
34334: LIST
34335: LIST
34336: PUSH
34337: LD_INT 2
34339: PUSH
34340: LD_INT 2
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 1
34349: PUSH
34350: LD_INT 2
34352: PUSH
34353: EMPTY
34354: LIST
34355: LIST
34356: PUSH
34357: LD_INT 0
34359: PUSH
34360: LD_INT 2
34362: PUSH
34363: EMPTY
34364: LIST
34365: LIST
34366: PUSH
34367: LD_INT 1
34369: NEG
34370: PUSH
34371: LD_INT 1
34373: PUSH
34374: EMPTY
34375: LIST
34376: LIST
34377: PUSH
34378: LD_INT 2
34380: NEG
34381: PUSH
34382: LD_INT 0
34384: PUSH
34385: EMPTY
34386: LIST
34387: LIST
34388: PUSH
34389: LD_INT 2
34391: NEG
34392: PUSH
34393: LD_INT 1
34395: NEG
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: NEG
34404: PUSH
34405: LD_INT 2
34407: NEG
34408: PUSH
34409: EMPTY
34410: LIST
34411: LIST
34412: PUSH
34413: EMPTY
34414: LIST
34415: LIST
34416: LIST
34417: LIST
34418: LIST
34419: LIST
34420: LIST
34421: LIST
34422: LIST
34423: LIST
34424: LIST
34425: LIST
34426: LIST
34427: LIST
34428: LIST
34429: LIST
34430: LIST
34431: LIST
34432: LIST
34433: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34434: LD_ADDR_VAR 0 58
34438: PUSH
34439: LD_INT 0
34441: PUSH
34442: LD_INT 0
34444: PUSH
34445: EMPTY
34446: LIST
34447: LIST
34448: PUSH
34449: LD_INT 0
34451: PUSH
34452: LD_INT 1
34454: NEG
34455: PUSH
34456: EMPTY
34457: LIST
34458: LIST
34459: PUSH
34460: LD_INT 1
34462: PUSH
34463: LD_INT 0
34465: PUSH
34466: EMPTY
34467: LIST
34468: LIST
34469: PUSH
34470: LD_INT 1
34472: PUSH
34473: LD_INT 1
34475: PUSH
34476: EMPTY
34477: LIST
34478: LIST
34479: PUSH
34480: LD_INT 0
34482: PUSH
34483: LD_INT 1
34485: PUSH
34486: EMPTY
34487: LIST
34488: LIST
34489: PUSH
34490: LD_INT 1
34492: NEG
34493: PUSH
34494: LD_INT 0
34496: PUSH
34497: EMPTY
34498: LIST
34499: LIST
34500: PUSH
34501: LD_INT 1
34503: NEG
34504: PUSH
34505: LD_INT 1
34507: NEG
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 1
34515: NEG
34516: PUSH
34517: LD_INT 2
34519: NEG
34520: PUSH
34521: EMPTY
34522: LIST
34523: LIST
34524: PUSH
34525: LD_INT 0
34527: PUSH
34528: LD_INT 2
34530: NEG
34531: PUSH
34532: EMPTY
34533: LIST
34534: LIST
34535: PUSH
34536: LD_INT 1
34538: PUSH
34539: LD_INT 1
34541: NEG
34542: PUSH
34543: EMPTY
34544: LIST
34545: LIST
34546: PUSH
34547: LD_INT 2
34549: PUSH
34550: LD_INT 0
34552: PUSH
34553: EMPTY
34554: LIST
34555: LIST
34556: PUSH
34557: LD_INT 2
34559: PUSH
34560: LD_INT 1
34562: PUSH
34563: EMPTY
34564: LIST
34565: LIST
34566: PUSH
34567: LD_INT 2
34569: PUSH
34570: LD_INT 2
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: LD_INT 1
34579: PUSH
34580: LD_INT 2
34582: PUSH
34583: EMPTY
34584: LIST
34585: LIST
34586: PUSH
34587: LD_INT 0
34589: PUSH
34590: LD_INT 2
34592: PUSH
34593: EMPTY
34594: LIST
34595: LIST
34596: PUSH
34597: LD_INT 1
34599: NEG
34600: PUSH
34601: LD_INT 1
34603: PUSH
34604: EMPTY
34605: LIST
34606: LIST
34607: PUSH
34608: LD_INT 2
34610: NEG
34611: PUSH
34612: LD_INT 0
34614: PUSH
34615: EMPTY
34616: LIST
34617: LIST
34618: PUSH
34619: LD_INT 2
34621: NEG
34622: PUSH
34623: LD_INT 1
34625: NEG
34626: PUSH
34627: EMPTY
34628: LIST
34629: LIST
34630: PUSH
34631: LD_INT 2
34633: NEG
34634: PUSH
34635: LD_INT 2
34637: NEG
34638: PUSH
34639: EMPTY
34640: LIST
34641: LIST
34642: PUSH
34643: EMPTY
34644: LIST
34645: LIST
34646: LIST
34647: LIST
34648: LIST
34649: LIST
34650: LIST
34651: LIST
34652: LIST
34653: LIST
34654: LIST
34655: LIST
34656: LIST
34657: LIST
34658: LIST
34659: LIST
34660: LIST
34661: LIST
34662: LIST
34663: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34664: LD_ADDR_VAR 0 59
34668: PUSH
34669: LD_INT 0
34671: PUSH
34672: LD_INT 0
34674: PUSH
34675: EMPTY
34676: LIST
34677: LIST
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 1
34684: NEG
34685: PUSH
34686: EMPTY
34687: LIST
34688: LIST
34689: PUSH
34690: LD_INT 1
34692: PUSH
34693: LD_INT 0
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: LD_INT 1
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 0
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 1
34722: NEG
34723: PUSH
34724: LD_INT 0
34726: PUSH
34727: EMPTY
34728: LIST
34729: LIST
34730: PUSH
34731: LD_INT 1
34733: NEG
34734: PUSH
34735: LD_INT 1
34737: NEG
34738: PUSH
34739: EMPTY
34740: LIST
34741: LIST
34742: PUSH
34743: EMPTY
34744: LIST
34745: LIST
34746: LIST
34747: LIST
34748: LIST
34749: LIST
34750: LIST
34751: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34752: LD_ADDR_VAR 0 60
34756: PUSH
34757: LD_INT 0
34759: PUSH
34760: LD_INT 0
34762: PUSH
34763: EMPTY
34764: LIST
34765: LIST
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 1
34772: NEG
34773: PUSH
34774: EMPTY
34775: LIST
34776: LIST
34777: PUSH
34778: LD_INT 1
34780: PUSH
34781: LD_INT 0
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 1
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 0
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 1
34810: NEG
34811: PUSH
34812: LD_INT 0
34814: PUSH
34815: EMPTY
34816: LIST
34817: LIST
34818: PUSH
34819: LD_INT 1
34821: NEG
34822: PUSH
34823: LD_INT 1
34825: NEG
34826: PUSH
34827: EMPTY
34828: LIST
34829: LIST
34830: PUSH
34831: EMPTY
34832: LIST
34833: LIST
34834: LIST
34835: LIST
34836: LIST
34837: LIST
34838: LIST
34839: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34840: LD_ADDR_VAR 0 61
34844: PUSH
34845: LD_INT 0
34847: PUSH
34848: LD_INT 0
34850: PUSH
34851: EMPTY
34852: LIST
34853: LIST
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 1
34860: NEG
34861: PUSH
34862: EMPTY
34863: LIST
34864: LIST
34865: PUSH
34866: LD_INT 1
34868: PUSH
34869: LD_INT 0
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: LD_INT 1
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 0
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 1
34898: NEG
34899: PUSH
34900: LD_INT 0
34902: PUSH
34903: EMPTY
34904: LIST
34905: LIST
34906: PUSH
34907: LD_INT 1
34909: NEG
34910: PUSH
34911: LD_INT 1
34913: NEG
34914: PUSH
34915: EMPTY
34916: LIST
34917: LIST
34918: PUSH
34919: EMPTY
34920: LIST
34921: LIST
34922: LIST
34923: LIST
34924: LIST
34925: LIST
34926: LIST
34927: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34928: LD_ADDR_VAR 0 62
34932: PUSH
34933: LD_INT 0
34935: PUSH
34936: LD_INT 0
34938: PUSH
34939: EMPTY
34940: LIST
34941: LIST
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 1
34948: NEG
34949: PUSH
34950: EMPTY
34951: LIST
34952: LIST
34953: PUSH
34954: LD_INT 1
34956: PUSH
34957: LD_INT 0
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 1
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 0
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 1
34986: NEG
34987: PUSH
34988: LD_INT 0
34990: PUSH
34991: EMPTY
34992: LIST
34993: LIST
34994: PUSH
34995: LD_INT 1
34997: NEG
34998: PUSH
34999: LD_INT 1
35001: NEG
35002: PUSH
35003: EMPTY
35004: LIST
35005: LIST
35006: PUSH
35007: EMPTY
35008: LIST
35009: LIST
35010: LIST
35011: LIST
35012: LIST
35013: LIST
35014: LIST
35015: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35016: LD_ADDR_VAR 0 63
35020: PUSH
35021: LD_INT 0
35023: PUSH
35024: LD_INT 0
35026: PUSH
35027: EMPTY
35028: LIST
35029: LIST
35030: PUSH
35031: LD_INT 0
35033: PUSH
35034: LD_INT 1
35036: NEG
35037: PUSH
35038: EMPTY
35039: LIST
35040: LIST
35041: PUSH
35042: LD_INT 1
35044: PUSH
35045: LD_INT 0
35047: PUSH
35048: EMPTY
35049: LIST
35050: LIST
35051: PUSH
35052: LD_INT 1
35054: PUSH
35055: LD_INT 1
35057: PUSH
35058: EMPTY
35059: LIST
35060: LIST
35061: PUSH
35062: LD_INT 0
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: EMPTY
35069: LIST
35070: LIST
35071: PUSH
35072: LD_INT 1
35074: NEG
35075: PUSH
35076: LD_INT 0
35078: PUSH
35079: EMPTY
35080: LIST
35081: LIST
35082: PUSH
35083: LD_INT 1
35085: NEG
35086: PUSH
35087: LD_INT 1
35089: NEG
35090: PUSH
35091: EMPTY
35092: LIST
35093: LIST
35094: PUSH
35095: EMPTY
35096: LIST
35097: LIST
35098: LIST
35099: LIST
35100: LIST
35101: LIST
35102: LIST
35103: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
35104: LD_ADDR_VAR 0 64
35108: PUSH
35109: LD_INT 0
35111: PUSH
35112: LD_INT 0
35114: PUSH
35115: EMPTY
35116: LIST
35117: LIST
35118: PUSH
35119: LD_INT 0
35121: PUSH
35122: LD_INT 1
35124: NEG
35125: PUSH
35126: EMPTY
35127: LIST
35128: LIST
35129: PUSH
35130: LD_INT 1
35132: PUSH
35133: LD_INT 0
35135: PUSH
35136: EMPTY
35137: LIST
35138: LIST
35139: PUSH
35140: LD_INT 1
35142: PUSH
35143: LD_INT 1
35145: PUSH
35146: EMPTY
35147: LIST
35148: LIST
35149: PUSH
35150: LD_INT 0
35152: PUSH
35153: LD_INT 1
35155: PUSH
35156: EMPTY
35157: LIST
35158: LIST
35159: PUSH
35160: LD_INT 1
35162: NEG
35163: PUSH
35164: LD_INT 0
35166: PUSH
35167: EMPTY
35168: LIST
35169: LIST
35170: PUSH
35171: LD_INT 1
35173: NEG
35174: PUSH
35175: LD_INT 1
35177: NEG
35178: PUSH
35179: EMPTY
35180: LIST
35181: LIST
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: LIST
35187: LIST
35188: LIST
35189: LIST
35190: LIST
35191: ST_TO_ADDR
// end ; 1 :
35192: GO 41089
35194: LD_INT 1
35196: DOUBLE
35197: EQUAL
35198: IFTRUE 35202
35200: GO 37825
35202: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35203: LD_ADDR_VAR 0 11
35207: PUSH
35208: LD_INT 1
35210: NEG
35211: PUSH
35212: LD_INT 3
35214: NEG
35215: PUSH
35216: EMPTY
35217: LIST
35218: LIST
35219: PUSH
35220: LD_INT 0
35222: PUSH
35223: LD_INT 3
35225: NEG
35226: PUSH
35227: EMPTY
35228: LIST
35229: LIST
35230: PUSH
35231: LD_INT 1
35233: PUSH
35234: LD_INT 2
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35247: LD_ADDR_VAR 0 12
35251: PUSH
35252: LD_INT 2
35254: PUSH
35255: LD_INT 1
35257: NEG
35258: PUSH
35259: EMPTY
35260: LIST
35261: LIST
35262: PUSH
35263: LD_INT 3
35265: PUSH
35266: LD_INT 0
35268: PUSH
35269: EMPTY
35270: LIST
35271: LIST
35272: PUSH
35273: LD_INT 3
35275: PUSH
35276: LD_INT 1
35278: PUSH
35279: EMPTY
35280: LIST
35281: LIST
35282: PUSH
35283: EMPTY
35284: LIST
35285: LIST
35286: LIST
35287: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35288: LD_ADDR_VAR 0 13
35292: PUSH
35293: LD_INT 3
35295: PUSH
35296: LD_INT 2
35298: PUSH
35299: EMPTY
35300: LIST
35301: LIST
35302: PUSH
35303: LD_INT 3
35305: PUSH
35306: LD_INT 3
35308: PUSH
35309: EMPTY
35310: LIST
35311: LIST
35312: PUSH
35313: LD_INT 2
35315: PUSH
35316: LD_INT 3
35318: PUSH
35319: EMPTY
35320: LIST
35321: LIST
35322: PUSH
35323: EMPTY
35324: LIST
35325: LIST
35326: LIST
35327: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35328: LD_ADDR_VAR 0 14
35332: PUSH
35333: LD_INT 1
35335: PUSH
35336: LD_INT 3
35338: PUSH
35339: EMPTY
35340: LIST
35341: LIST
35342: PUSH
35343: LD_INT 0
35345: PUSH
35346: LD_INT 3
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 1
35355: NEG
35356: PUSH
35357: LD_INT 2
35359: PUSH
35360: EMPTY
35361: LIST
35362: LIST
35363: PUSH
35364: EMPTY
35365: LIST
35366: LIST
35367: LIST
35368: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35369: LD_ADDR_VAR 0 15
35373: PUSH
35374: LD_INT 2
35376: NEG
35377: PUSH
35378: LD_INT 1
35380: PUSH
35381: EMPTY
35382: LIST
35383: LIST
35384: PUSH
35385: LD_INT 3
35387: NEG
35388: PUSH
35389: LD_INT 0
35391: PUSH
35392: EMPTY
35393: LIST
35394: LIST
35395: PUSH
35396: LD_INT 3
35398: NEG
35399: PUSH
35400: LD_INT 1
35402: NEG
35403: PUSH
35404: EMPTY
35405: LIST
35406: LIST
35407: PUSH
35408: EMPTY
35409: LIST
35410: LIST
35411: LIST
35412: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35413: LD_ADDR_VAR 0 16
35417: PUSH
35418: LD_INT 2
35420: NEG
35421: PUSH
35422: LD_INT 3
35424: NEG
35425: PUSH
35426: EMPTY
35427: LIST
35428: LIST
35429: PUSH
35430: LD_INT 3
35432: NEG
35433: PUSH
35434: LD_INT 2
35436: NEG
35437: PUSH
35438: EMPTY
35439: LIST
35440: LIST
35441: PUSH
35442: LD_INT 3
35444: NEG
35445: PUSH
35446: LD_INT 3
35448: NEG
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35459: LD_ADDR_VAR 0 17
35463: PUSH
35464: LD_INT 1
35466: NEG
35467: PUSH
35468: LD_INT 3
35470: NEG
35471: PUSH
35472: EMPTY
35473: LIST
35474: LIST
35475: PUSH
35476: LD_INT 0
35478: PUSH
35479: LD_INT 3
35481: NEG
35482: PUSH
35483: EMPTY
35484: LIST
35485: LIST
35486: PUSH
35487: LD_INT 1
35489: PUSH
35490: LD_INT 2
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35503: LD_ADDR_VAR 0 18
35507: PUSH
35508: LD_INT 2
35510: PUSH
35511: LD_INT 1
35513: NEG
35514: PUSH
35515: EMPTY
35516: LIST
35517: LIST
35518: PUSH
35519: LD_INT 3
35521: PUSH
35522: LD_INT 0
35524: PUSH
35525: EMPTY
35526: LIST
35527: LIST
35528: PUSH
35529: LD_INT 3
35531: PUSH
35532: LD_INT 1
35534: PUSH
35535: EMPTY
35536: LIST
35537: LIST
35538: PUSH
35539: EMPTY
35540: LIST
35541: LIST
35542: LIST
35543: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35544: LD_ADDR_VAR 0 19
35548: PUSH
35549: LD_INT 3
35551: PUSH
35552: LD_INT 2
35554: PUSH
35555: EMPTY
35556: LIST
35557: LIST
35558: PUSH
35559: LD_INT 3
35561: PUSH
35562: LD_INT 3
35564: PUSH
35565: EMPTY
35566: LIST
35567: LIST
35568: PUSH
35569: LD_INT 2
35571: PUSH
35572: LD_INT 3
35574: PUSH
35575: EMPTY
35576: LIST
35577: LIST
35578: PUSH
35579: EMPTY
35580: LIST
35581: LIST
35582: LIST
35583: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35584: LD_ADDR_VAR 0 20
35588: PUSH
35589: LD_INT 1
35591: PUSH
35592: LD_INT 3
35594: PUSH
35595: EMPTY
35596: LIST
35597: LIST
35598: PUSH
35599: LD_INT 0
35601: PUSH
35602: LD_INT 3
35604: PUSH
35605: EMPTY
35606: LIST
35607: LIST
35608: PUSH
35609: LD_INT 1
35611: NEG
35612: PUSH
35613: LD_INT 2
35615: PUSH
35616: EMPTY
35617: LIST
35618: LIST
35619: PUSH
35620: EMPTY
35621: LIST
35622: LIST
35623: LIST
35624: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35625: LD_ADDR_VAR 0 21
35629: PUSH
35630: LD_INT 2
35632: NEG
35633: PUSH
35634: LD_INT 1
35636: PUSH
35637: EMPTY
35638: LIST
35639: LIST
35640: PUSH
35641: LD_INT 3
35643: NEG
35644: PUSH
35645: LD_INT 0
35647: PUSH
35648: EMPTY
35649: LIST
35650: LIST
35651: PUSH
35652: LD_INT 3
35654: NEG
35655: PUSH
35656: LD_INT 1
35658: NEG
35659: PUSH
35660: EMPTY
35661: LIST
35662: LIST
35663: PUSH
35664: EMPTY
35665: LIST
35666: LIST
35667: LIST
35668: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35669: LD_ADDR_VAR 0 22
35673: PUSH
35674: LD_INT 2
35676: NEG
35677: PUSH
35678: LD_INT 3
35680: NEG
35681: PUSH
35682: EMPTY
35683: LIST
35684: LIST
35685: PUSH
35686: LD_INT 3
35688: NEG
35689: PUSH
35690: LD_INT 2
35692: NEG
35693: PUSH
35694: EMPTY
35695: LIST
35696: LIST
35697: PUSH
35698: LD_INT 3
35700: NEG
35701: PUSH
35702: LD_INT 3
35704: NEG
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35715: LD_ADDR_VAR 0 23
35719: PUSH
35720: LD_INT 0
35722: PUSH
35723: LD_INT 3
35725: NEG
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 1
35733: NEG
35734: PUSH
35735: LD_INT 4
35737: NEG
35738: PUSH
35739: EMPTY
35740: LIST
35741: LIST
35742: PUSH
35743: LD_INT 1
35745: PUSH
35746: LD_INT 3
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35759: LD_ADDR_VAR 0 24
35763: PUSH
35764: LD_INT 3
35766: PUSH
35767: LD_INT 0
35769: PUSH
35770: EMPTY
35771: LIST
35772: LIST
35773: PUSH
35774: LD_INT 3
35776: PUSH
35777: LD_INT 1
35779: NEG
35780: PUSH
35781: EMPTY
35782: LIST
35783: LIST
35784: PUSH
35785: LD_INT 4
35787: PUSH
35788: LD_INT 1
35790: PUSH
35791: EMPTY
35792: LIST
35793: LIST
35794: PUSH
35795: EMPTY
35796: LIST
35797: LIST
35798: LIST
35799: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35800: LD_ADDR_VAR 0 25
35804: PUSH
35805: LD_INT 3
35807: PUSH
35808: LD_INT 3
35810: PUSH
35811: EMPTY
35812: LIST
35813: LIST
35814: PUSH
35815: LD_INT 4
35817: PUSH
35818: LD_INT 3
35820: PUSH
35821: EMPTY
35822: LIST
35823: LIST
35824: PUSH
35825: LD_INT 3
35827: PUSH
35828: LD_INT 4
35830: PUSH
35831: EMPTY
35832: LIST
35833: LIST
35834: PUSH
35835: EMPTY
35836: LIST
35837: LIST
35838: LIST
35839: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35840: LD_ADDR_VAR 0 26
35844: PUSH
35845: LD_INT 0
35847: PUSH
35848: LD_INT 3
35850: PUSH
35851: EMPTY
35852: LIST
35853: LIST
35854: PUSH
35855: LD_INT 1
35857: PUSH
35858: LD_INT 4
35860: PUSH
35861: EMPTY
35862: LIST
35863: LIST
35864: PUSH
35865: LD_INT 1
35867: NEG
35868: PUSH
35869: LD_INT 3
35871: PUSH
35872: EMPTY
35873: LIST
35874: LIST
35875: PUSH
35876: EMPTY
35877: LIST
35878: LIST
35879: LIST
35880: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35881: LD_ADDR_VAR 0 27
35885: PUSH
35886: LD_INT 3
35888: NEG
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: EMPTY
35894: LIST
35895: LIST
35896: PUSH
35897: LD_INT 3
35899: NEG
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: EMPTY
35905: LIST
35906: LIST
35907: PUSH
35908: LD_INT 4
35910: NEG
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: EMPTY
35917: LIST
35918: LIST
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: LIST
35924: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35925: LD_ADDR_VAR 0 28
35929: PUSH
35930: LD_INT 3
35932: NEG
35933: PUSH
35934: LD_INT 3
35936: NEG
35937: PUSH
35938: EMPTY
35939: LIST
35940: LIST
35941: PUSH
35942: LD_INT 3
35944: NEG
35945: PUSH
35946: LD_INT 4
35948: NEG
35949: PUSH
35950: EMPTY
35951: LIST
35952: LIST
35953: PUSH
35954: LD_INT 4
35956: NEG
35957: PUSH
35958: LD_INT 3
35960: NEG
35961: PUSH
35962: EMPTY
35963: LIST
35964: LIST
35965: PUSH
35966: EMPTY
35967: LIST
35968: LIST
35969: LIST
35970: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35971: LD_ADDR_VAR 0 29
35975: PUSH
35976: LD_INT 1
35978: NEG
35979: PUSH
35980: LD_INT 3
35982: NEG
35983: PUSH
35984: EMPTY
35985: LIST
35986: LIST
35987: PUSH
35988: LD_INT 0
35990: PUSH
35991: LD_INT 3
35993: NEG
35994: PUSH
35995: EMPTY
35996: LIST
35997: LIST
35998: PUSH
35999: LD_INT 1
36001: PUSH
36002: LD_INT 2
36004: NEG
36005: PUSH
36006: EMPTY
36007: LIST
36008: LIST
36009: PUSH
36010: LD_INT 1
36012: NEG
36013: PUSH
36014: LD_INT 4
36016: NEG
36017: PUSH
36018: EMPTY
36019: LIST
36020: LIST
36021: PUSH
36022: LD_INT 0
36024: PUSH
36025: LD_INT 4
36027: NEG
36028: PUSH
36029: EMPTY
36030: LIST
36031: LIST
36032: PUSH
36033: LD_INT 1
36035: PUSH
36036: LD_INT 3
36038: NEG
36039: PUSH
36040: EMPTY
36041: LIST
36042: LIST
36043: PUSH
36044: LD_INT 1
36046: NEG
36047: PUSH
36048: LD_INT 5
36050: NEG
36051: PUSH
36052: EMPTY
36053: LIST
36054: LIST
36055: PUSH
36056: LD_INT 0
36058: PUSH
36059: LD_INT 5
36061: NEG
36062: PUSH
36063: EMPTY
36064: LIST
36065: LIST
36066: PUSH
36067: LD_INT 1
36069: PUSH
36070: LD_INT 4
36072: NEG
36073: PUSH
36074: EMPTY
36075: LIST
36076: LIST
36077: PUSH
36078: LD_INT 1
36080: NEG
36081: PUSH
36082: LD_INT 6
36084: NEG
36085: PUSH
36086: EMPTY
36087: LIST
36088: LIST
36089: PUSH
36090: LD_INT 0
36092: PUSH
36093: LD_INT 6
36095: NEG
36096: PUSH
36097: EMPTY
36098: LIST
36099: LIST
36100: PUSH
36101: LD_INT 1
36103: PUSH
36104: LD_INT 5
36106: NEG
36107: PUSH
36108: EMPTY
36109: LIST
36110: LIST
36111: PUSH
36112: EMPTY
36113: LIST
36114: LIST
36115: LIST
36116: LIST
36117: LIST
36118: LIST
36119: LIST
36120: LIST
36121: LIST
36122: LIST
36123: LIST
36124: LIST
36125: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
36126: LD_ADDR_VAR 0 30
36130: PUSH
36131: LD_INT 2
36133: PUSH
36134: LD_INT 1
36136: NEG
36137: PUSH
36138: EMPTY
36139: LIST
36140: LIST
36141: PUSH
36142: LD_INT 3
36144: PUSH
36145: LD_INT 0
36147: PUSH
36148: EMPTY
36149: LIST
36150: LIST
36151: PUSH
36152: LD_INT 3
36154: PUSH
36155: LD_INT 1
36157: PUSH
36158: EMPTY
36159: LIST
36160: LIST
36161: PUSH
36162: LD_INT 3
36164: PUSH
36165: LD_INT 1
36167: NEG
36168: PUSH
36169: EMPTY
36170: LIST
36171: LIST
36172: PUSH
36173: LD_INT 4
36175: PUSH
36176: LD_INT 0
36178: PUSH
36179: EMPTY
36180: LIST
36181: LIST
36182: PUSH
36183: LD_INT 4
36185: PUSH
36186: LD_INT 1
36188: PUSH
36189: EMPTY
36190: LIST
36191: LIST
36192: PUSH
36193: LD_INT 4
36195: PUSH
36196: LD_INT 1
36198: NEG
36199: PUSH
36200: EMPTY
36201: LIST
36202: LIST
36203: PUSH
36204: LD_INT 5
36206: PUSH
36207: LD_INT 0
36209: PUSH
36210: EMPTY
36211: LIST
36212: LIST
36213: PUSH
36214: LD_INT 5
36216: PUSH
36217: LD_INT 1
36219: PUSH
36220: EMPTY
36221: LIST
36222: LIST
36223: PUSH
36224: LD_INT 5
36226: PUSH
36227: LD_INT 1
36229: NEG
36230: PUSH
36231: EMPTY
36232: LIST
36233: LIST
36234: PUSH
36235: LD_INT 6
36237: PUSH
36238: LD_INT 0
36240: PUSH
36241: EMPTY
36242: LIST
36243: LIST
36244: PUSH
36245: LD_INT 6
36247: PUSH
36248: LD_INT 1
36250: PUSH
36251: EMPTY
36252: LIST
36253: LIST
36254: PUSH
36255: EMPTY
36256: LIST
36257: LIST
36258: LIST
36259: LIST
36260: LIST
36261: LIST
36262: LIST
36263: LIST
36264: LIST
36265: LIST
36266: LIST
36267: LIST
36268: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36269: LD_ADDR_VAR 0 31
36273: PUSH
36274: LD_INT 3
36276: PUSH
36277: LD_INT 2
36279: PUSH
36280: EMPTY
36281: LIST
36282: LIST
36283: PUSH
36284: LD_INT 3
36286: PUSH
36287: LD_INT 3
36289: PUSH
36290: EMPTY
36291: LIST
36292: LIST
36293: PUSH
36294: LD_INT 2
36296: PUSH
36297: LD_INT 3
36299: PUSH
36300: EMPTY
36301: LIST
36302: LIST
36303: PUSH
36304: LD_INT 4
36306: PUSH
36307: LD_INT 3
36309: PUSH
36310: EMPTY
36311: LIST
36312: LIST
36313: PUSH
36314: LD_INT 4
36316: PUSH
36317: LD_INT 4
36319: PUSH
36320: EMPTY
36321: LIST
36322: LIST
36323: PUSH
36324: LD_INT 3
36326: PUSH
36327: LD_INT 4
36329: PUSH
36330: EMPTY
36331: LIST
36332: LIST
36333: PUSH
36334: LD_INT 5
36336: PUSH
36337: LD_INT 4
36339: PUSH
36340: EMPTY
36341: LIST
36342: LIST
36343: PUSH
36344: LD_INT 5
36346: PUSH
36347: LD_INT 5
36349: PUSH
36350: EMPTY
36351: LIST
36352: LIST
36353: PUSH
36354: LD_INT 4
36356: PUSH
36357: LD_INT 5
36359: PUSH
36360: EMPTY
36361: LIST
36362: LIST
36363: PUSH
36364: LD_INT 6
36366: PUSH
36367: LD_INT 5
36369: PUSH
36370: EMPTY
36371: LIST
36372: LIST
36373: PUSH
36374: LD_INT 6
36376: PUSH
36377: LD_INT 6
36379: PUSH
36380: EMPTY
36381: LIST
36382: LIST
36383: PUSH
36384: LD_INT 5
36386: PUSH
36387: LD_INT 6
36389: PUSH
36390: EMPTY
36391: LIST
36392: LIST
36393: PUSH
36394: EMPTY
36395: LIST
36396: LIST
36397: LIST
36398: LIST
36399: LIST
36400: LIST
36401: LIST
36402: LIST
36403: LIST
36404: LIST
36405: LIST
36406: LIST
36407: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36408: LD_ADDR_VAR 0 32
36412: PUSH
36413: LD_INT 1
36415: PUSH
36416: LD_INT 3
36418: PUSH
36419: EMPTY
36420: LIST
36421: LIST
36422: PUSH
36423: LD_INT 0
36425: PUSH
36426: LD_INT 3
36428: PUSH
36429: EMPTY
36430: LIST
36431: LIST
36432: PUSH
36433: LD_INT 1
36435: NEG
36436: PUSH
36437: LD_INT 2
36439: PUSH
36440: EMPTY
36441: LIST
36442: LIST
36443: PUSH
36444: LD_INT 1
36446: PUSH
36447: LD_INT 4
36449: PUSH
36450: EMPTY
36451: LIST
36452: LIST
36453: PUSH
36454: LD_INT 0
36456: PUSH
36457: LD_INT 4
36459: PUSH
36460: EMPTY
36461: LIST
36462: LIST
36463: PUSH
36464: LD_INT 1
36466: NEG
36467: PUSH
36468: LD_INT 3
36470: PUSH
36471: EMPTY
36472: LIST
36473: LIST
36474: PUSH
36475: LD_INT 1
36477: PUSH
36478: LD_INT 5
36480: PUSH
36481: EMPTY
36482: LIST
36483: LIST
36484: PUSH
36485: LD_INT 0
36487: PUSH
36488: LD_INT 5
36490: PUSH
36491: EMPTY
36492: LIST
36493: LIST
36494: PUSH
36495: LD_INT 1
36497: NEG
36498: PUSH
36499: LD_INT 4
36501: PUSH
36502: EMPTY
36503: LIST
36504: LIST
36505: PUSH
36506: LD_INT 1
36508: PUSH
36509: LD_INT 6
36511: PUSH
36512: EMPTY
36513: LIST
36514: LIST
36515: PUSH
36516: LD_INT 0
36518: PUSH
36519: LD_INT 6
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: LD_INT 1
36528: NEG
36529: PUSH
36530: LD_INT 5
36532: PUSH
36533: EMPTY
36534: LIST
36535: LIST
36536: PUSH
36537: EMPTY
36538: LIST
36539: LIST
36540: LIST
36541: LIST
36542: LIST
36543: LIST
36544: LIST
36545: LIST
36546: LIST
36547: LIST
36548: LIST
36549: LIST
36550: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36551: LD_ADDR_VAR 0 33
36555: PUSH
36556: LD_INT 2
36558: NEG
36559: PUSH
36560: LD_INT 1
36562: PUSH
36563: EMPTY
36564: LIST
36565: LIST
36566: PUSH
36567: LD_INT 3
36569: NEG
36570: PUSH
36571: LD_INT 0
36573: PUSH
36574: EMPTY
36575: LIST
36576: LIST
36577: PUSH
36578: LD_INT 3
36580: NEG
36581: PUSH
36582: LD_INT 1
36584: NEG
36585: PUSH
36586: EMPTY
36587: LIST
36588: LIST
36589: PUSH
36590: LD_INT 3
36592: NEG
36593: PUSH
36594: LD_INT 1
36596: PUSH
36597: EMPTY
36598: LIST
36599: LIST
36600: PUSH
36601: LD_INT 4
36603: NEG
36604: PUSH
36605: LD_INT 0
36607: PUSH
36608: EMPTY
36609: LIST
36610: LIST
36611: PUSH
36612: LD_INT 4
36614: NEG
36615: PUSH
36616: LD_INT 1
36618: NEG
36619: PUSH
36620: EMPTY
36621: LIST
36622: LIST
36623: PUSH
36624: LD_INT 4
36626: NEG
36627: PUSH
36628: LD_INT 1
36630: PUSH
36631: EMPTY
36632: LIST
36633: LIST
36634: PUSH
36635: LD_INT 5
36637: NEG
36638: PUSH
36639: LD_INT 0
36641: PUSH
36642: EMPTY
36643: LIST
36644: LIST
36645: PUSH
36646: LD_INT 5
36648: NEG
36649: PUSH
36650: LD_INT 1
36652: NEG
36653: PUSH
36654: EMPTY
36655: LIST
36656: LIST
36657: PUSH
36658: LD_INT 5
36660: NEG
36661: PUSH
36662: LD_INT 1
36664: PUSH
36665: EMPTY
36666: LIST
36667: LIST
36668: PUSH
36669: LD_INT 6
36671: NEG
36672: PUSH
36673: LD_INT 0
36675: PUSH
36676: EMPTY
36677: LIST
36678: LIST
36679: PUSH
36680: LD_INT 6
36682: NEG
36683: PUSH
36684: LD_INT 1
36686: NEG
36687: PUSH
36688: EMPTY
36689: LIST
36690: LIST
36691: PUSH
36692: EMPTY
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: LIST
36703: LIST
36704: LIST
36705: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36706: LD_ADDR_VAR 0 34
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: LD_INT 3
36717: NEG
36718: PUSH
36719: EMPTY
36720: LIST
36721: LIST
36722: PUSH
36723: LD_INT 3
36725: NEG
36726: PUSH
36727: LD_INT 2
36729: NEG
36730: PUSH
36731: EMPTY
36732: LIST
36733: LIST
36734: PUSH
36735: LD_INT 3
36737: NEG
36738: PUSH
36739: LD_INT 3
36741: NEG
36742: PUSH
36743: EMPTY
36744: LIST
36745: LIST
36746: PUSH
36747: LD_INT 3
36749: NEG
36750: PUSH
36751: LD_INT 4
36753: NEG
36754: PUSH
36755: EMPTY
36756: LIST
36757: LIST
36758: PUSH
36759: LD_INT 4
36761: NEG
36762: PUSH
36763: LD_INT 3
36765: NEG
36766: PUSH
36767: EMPTY
36768: LIST
36769: LIST
36770: PUSH
36771: LD_INT 4
36773: NEG
36774: PUSH
36775: LD_INT 4
36777: NEG
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: LD_INT 4
36785: NEG
36786: PUSH
36787: LD_INT 5
36789: NEG
36790: PUSH
36791: EMPTY
36792: LIST
36793: LIST
36794: PUSH
36795: LD_INT 5
36797: NEG
36798: PUSH
36799: LD_INT 4
36801: NEG
36802: PUSH
36803: EMPTY
36804: LIST
36805: LIST
36806: PUSH
36807: LD_INT 5
36809: NEG
36810: PUSH
36811: LD_INT 5
36813: NEG
36814: PUSH
36815: EMPTY
36816: LIST
36817: LIST
36818: PUSH
36819: LD_INT 5
36821: NEG
36822: PUSH
36823: LD_INT 6
36825: NEG
36826: PUSH
36827: EMPTY
36828: LIST
36829: LIST
36830: PUSH
36831: LD_INT 6
36833: NEG
36834: PUSH
36835: LD_INT 5
36837: NEG
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 6
36845: NEG
36846: PUSH
36847: LD_INT 6
36849: NEG
36850: PUSH
36851: EMPTY
36852: LIST
36853: LIST
36854: PUSH
36855: EMPTY
36856: LIST
36857: LIST
36858: LIST
36859: LIST
36860: LIST
36861: LIST
36862: LIST
36863: LIST
36864: LIST
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36869: LD_ADDR_VAR 0 41
36873: PUSH
36874: LD_INT 0
36876: PUSH
36877: LD_INT 2
36879: NEG
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 1
36887: NEG
36888: PUSH
36889: LD_INT 3
36891: NEG
36892: PUSH
36893: EMPTY
36894: LIST
36895: LIST
36896: PUSH
36897: LD_INT 1
36899: PUSH
36900: LD_INT 2
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36913: LD_ADDR_VAR 0 42
36917: PUSH
36918: LD_INT 2
36920: PUSH
36921: LD_INT 0
36923: PUSH
36924: EMPTY
36925: LIST
36926: LIST
36927: PUSH
36928: LD_INT 2
36930: PUSH
36931: LD_INT 1
36933: NEG
36934: PUSH
36935: EMPTY
36936: LIST
36937: LIST
36938: PUSH
36939: LD_INT 3
36941: PUSH
36942: LD_INT 1
36944: PUSH
36945: EMPTY
36946: LIST
36947: LIST
36948: PUSH
36949: EMPTY
36950: LIST
36951: LIST
36952: LIST
36953: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36954: LD_ADDR_VAR 0 43
36958: PUSH
36959: LD_INT 2
36961: PUSH
36962: LD_INT 2
36964: PUSH
36965: EMPTY
36966: LIST
36967: LIST
36968: PUSH
36969: LD_INT 3
36971: PUSH
36972: LD_INT 2
36974: PUSH
36975: EMPTY
36976: LIST
36977: LIST
36978: PUSH
36979: LD_INT 2
36981: PUSH
36982: LD_INT 3
36984: PUSH
36985: EMPTY
36986: LIST
36987: LIST
36988: PUSH
36989: EMPTY
36990: LIST
36991: LIST
36992: LIST
36993: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36994: LD_ADDR_VAR 0 44
36998: PUSH
36999: LD_INT 0
37001: PUSH
37002: LD_INT 2
37004: PUSH
37005: EMPTY
37006: LIST
37007: LIST
37008: PUSH
37009: LD_INT 1
37011: PUSH
37012: LD_INT 3
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: LD_INT 1
37021: NEG
37022: PUSH
37023: LD_INT 2
37025: PUSH
37026: EMPTY
37027: LIST
37028: LIST
37029: PUSH
37030: EMPTY
37031: LIST
37032: LIST
37033: LIST
37034: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
37035: LD_ADDR_VAR 0 45
37039: PUSH
37040: LD_INT 2
37042: NEG
37043: PUSH
37044: LD_INT 0
37046: PUSH
37047: EMPTY
37048: LIST
37049: LIST
37050: PUSH
37051: LD_INT 2
37053: NEG
37054: PUSH
37055: LD_INT 1
37057: PUSH
37058: EMPTY
37059: LIST
37060: LIST
37061: PUSH
37062: LD_INT 3
37064: NEG
37065: PUSH
37066: LD_INT 1
37068: NEG
37069: PUSH
37070: EMPTY
37071: LIST
37072: LIST
37073: PUSH
37074: EMPTY
37075: LIST
37076: LIST
37077: LIST
37078: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
37079: LD_ADDR_VAR 0 46
37083: PUSH
37084: LD_INT 2
37086: NEG
37087: PUSH
37088: LD_INT 2
37090: NEG
37091: PUSH
37092: EMPTY
37093: LIST
37094: LIST
37095: PUSH
37096: LD_INT 2
37098: NEG
37099: PUSH
37100: LD_INT 3
37102: NEG
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: LD_INT 3
37110: NEG
37111: PUSH
37112: LD_INT 2
37114: NEG
37115: PUSH
37116: EMPTY
37117: LIST
37118: LIST
37119: PUSH
37120: EMPTY
37121: LIST
37122: LIST
37123: LIST
37124: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
37125: LD_ADDR_VAR 0 47
37129: PUSH
37130: LD_INT 2
37132: NEG
37133: PUSH
37134: LD_INT 3
37136: NEG
37137: PUSH
37138: EMPTY
37139: LIST
37140: LIST
37141: PUSH
37142: LD_INT 1
37144: NEG
37145: PUSH
37146: LD_INT 3
37148: NEG
37149: PUSH
37150: EMPTY
37151: LIST
37152: LIST
37153: PUSH
37154: EMPTY
37155: LIST
37156: LIST
37157: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
37158: LD_ADDR_VAR 0 48
37162: PUSH
37163: LD_INT 1
37165: PUSH
37166: LD_INT 2
37168: NEG
37169: PUSH
37170: EMPTY
37171: LIST
37172: LIST
37173: PUSH
37174: LD_INT 2
37176: PUSH
37177: LD_INT 1
37179: NEG
37180: PUSH
37181: EMPTY
37182: LIST
37183: LIST
37184: PUSH
37185: EMPTY
37186: LIST
37187: LIST
37188: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37189: LD_ADDR_VAR 0 49
37193: PUSH
37194: LD_INT 3
37196: PUSH
37197: LD_INT 1
37199: PUSH
37200: EMPTY
37201: LIST
37202: LIST
37203: PUSH
37204: LD_INT 3
37206: PUSH
37207: LD_INT 2
37209: PUSH
37210: EMPTY
37211: LIST
37212: LIST
37213: PUSH
37214: EMPTY
37215: LIST
37216: LIST
37217: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37218: LD_ADDR_VAR 0 50
37222: PUSH
37223: LD_INT 2
37225: PUSH
37226: LD_INT 3
37228: PUSH
37229: EMPTY
37230: LIST
37231: LIST
37232: PUSH
37233: LD_INT 1
37235: PUSH
37236: LD_INT 3
37238: PUSH
37239: EMPTY
37240: LIST
37241: LIST
37242: PUSH
37243: EMPTY
37244: LIST
37245: LIST
37246: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37247: LD_ADDR_VAR 0 51
37251: PUSH
37252: LD_INT 1
37254: NEG
37255: PUSH
37256: LD_INT 2
37258: PUSH
37259: EMPTY
37260: LIST
37261: LIST
37262: PUSH
37263: LD_INT 2
37265: NEG
37266: PUSH
37267: LD_INT 1
37269: PUSH
37270: EMPTY
37271: LIST
37272: LIST
37273: PUSH
37274: EMPTY
37275: LIST
37276: LIST
37277: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37278: LD_ADDR_VAR 0 52
37282: PUSH
37283: LD_INT 3
37285: NEG
37286: PUSH
37287: LD_INT 1
37289: NEG
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 3
37297: NEG
37298: PUSH
37299: LD_INT 2
37301: NEG
37302: PUSH
37303: EMPTY
37304: LIST
37305: LIST
37306: PUSH
37307: EMPTY
37308: LIST
37309: LIST
37310: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37311: LD_ADDR_VAR 0 53
37315: PUSH
37316: LD_INT 1
37318: NEG
37319: PUSH
37320: LD_INT 3
37322: NEG
37323: PUSH
37324: EMPTY
37325: LIST
37326: LIST
37327: PUSH
37328: LD_INT 0
37330: PUSH
37331: LD_INT 3
37333: NEG
37334: PUSH
37335: EMPTY
37336: LIST
37337: LIST
37338: PUSH
37339: LD_INT 1
37341: PUSH
37342: LD_INT 2
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37355: LD_ADDR_VAR 0 54
37359: PUSH
37360: LD_INT 2
37362: PUSH
37363: LD_INT 1
37365: NEG
37366: PUSH
37367: EMPTY
37368: LIST
37369: LIST
37370: PUSH
37371: LD_INT 3
37373: PUSH
37374: LD_INT 0
37376: PUSH
37377: EMPTY
37378: LIST
37379: LIST
37380: PUSH
37381: LD_INT 3
37383: PUSH
37384: LD_INT 1
37386: PUSH
37387: EMPTY
37388: LIST
37389: LIST
37390: PUSH
37391: EMPTY
37392: LIST
37393: LIST
37394: LIST
37395: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37396: LD_ADDR_VAR 0 55
37400: PUSH
37401: LD_INT 3
37403: PUSH
37404: LD_INT 2
37406: PUSH
37407: EMPTY
37408: LIST
37409: LIST
37410: PUSH
37411: LD_INT 3
37413: PUSH
37414: LD_INT 3
37416: PUSH
37417: EMPTY
37418: LIST
37419: LIST
37420: PUSH
37421: LD_INT 2
37423: PUSH
37424: LD_INT 3
37426: PUSH
37427: EMPTY
37428: LIST
37429: LIST
37430: PUSH
37431: EMPTY
37432: LIST
37433: LIST
37434: LIST
37435: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37436: LD_ADDR_VAR 0 56
37440: PUSH
37441: LD_INT 1
37443: PUSH
37444: LD_INT 3
37446: PUSH
37447: EMPTY
37448: LIST
37449: LIST
37450: PUSH
37451: LD_INT 0
37453: PUSH
37454: LD_INT 3
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 1
37463: NEG
37464: PUSH
37465: LD_INT 2
37467: PUSH
37468: EMPTY
37469: LIST
37470: LIST
37471: PUSH
37472: EMPTY
37473: LIST
37474: LIST
37475: LIST
37476: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37477: LD_ADDR_VAR 0 57
37481: PUSH
37482: LD_INT 2
37484: NEG
37485: PUSH
37486: LD_INT 1
37488: PUSH
37489: EMPTY
37490: LIST
37491: LIST
37492: PUSH
37493: LD_INT 3
37495: NEG
37496: PUSH
37497: LD_INT 0
37499: PUSH
37500: EMPTY
37501: LIST
37502: LIST
37503: PUSH
37504: LD_INT 3
37506: NEG
37507: PUSH
37508: LD_INT 1
37510: NEG
37511: PUSH
37512: EMPTY
37513: LIST
37514: LIST
37515: PUSH
37516: EMPTY
37517: LIST
37518: LIST
37519: LIST
37520: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37521: LD_ADDR_VAR 0 58
37525: PUSH
37526: LD_INT 2
37528: NEG
37529: PUSH
37530: LD_INT 3
37532: NEG
37533: PUSH
37534: EMPTY
37535: LIST
37536: LIST
37537: PUSH
37538: LD_INT 3
37540: NEG
37541: PUSH
37542: LD_INT 2
37544: NEG
37545: PUSH
37546: EMPTY
37547: LIST
37548: LIST
37549: PUSH
37550: LD_INT 3
37552: NEG
37553: PUSH
37554: LD_INT 3
37556: NEG
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37567: LD_ADDR_VAR 0 59
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 2
37578: NEG
37579: PUSH
37580: EMPTY
37581: LIST
37582: LIST
37583: PUSH
37584: LD_INT 0
37586: PUSH
37587: LD_INT 2
37589: NEG
37590: PUSH
37591: EMPTY
37592: LIST
37593: LIST
37594: PUSH
37595: LD_INT 1
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37611: LD_ADDR_VAR 0 60
37615: PUSH
37616: LD_INT 1
37618: PUSH
37619: LD_INT 1
37621: NEG
37622: PUSH
37623: EMPTY
37624: LIST
37625: LIST
37626: PUSH
37627: LD_INT 2
37629: PUSH
37630: LD_INT 0
37632: PUSH
37633: EMPTY
37634: LIST
37635: LIST
37636: PUSH
37637: LD_INT 2
37639: PUSH
37640: LD_INT 1
37642: PUSH
37643: EMPTY
37644: LIST
37645: LIST
37646: PUSH
37647: EMPTY
37648: LIST
37649: LIST
37650: LIST
37651: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37652: LD_ADDR_VAR 0 61
37656: PUSH
37657: LD_INT 2
37659: PUSH
37660: LD_INT 1
37662: PUSH
37663: EMPTY
37664: LIST
37665: LIST
37666: PUSH
37667: LD_INT 2
37669: PUSH
37670: LD_INT 2
37672: PUSH
37673: EMPTY
37674: LIST
37675: LIST
37676: PUSH
37677: LD_INT 1
37679: PUSH
37680: LD_INT 2
37682: PUSH
37683: EMPTY
37684: LIST
37685: LIST
37686: PUSH
37687: EMPTY
37688: LIST
37689: LIST
37690: LIST
37691: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37692: LD_ADDR_VAR 0 62
37696: PUSH
37697: LD_INT 1
37699: PUSH
37700: LD_INT 2
37702: PUSH
37703: EMPTY
37704: LIST
37705: LIST
37706: PUSH
37707: LD_INT 0
37709: PUSH
37710: LD_INT 2
37712: PUSH
37713: EMPTY
37714: LIST
37715: LIST
37716: PUSH
37717: LD_INT 1
37719: NEG
37720: PUSH
37721: LD_INT 1
37723: PUSH
37724: EMPTY
37725: LIST
37726: LIST
37727: PUSH
37728: EMPTY
37729: LIST
37730: LIST
37731: LIST
37732: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37733: LD_ADDR_VAR 0 63
37737: PUSH
37738: LD_INT 1
37740: NEG
37741: PUSH
37742: LD_INT 1
37744: PUSH
37745: EMPTY
37746: LIST
37747: LIST
37748: PUSH
37749: LD_INT 2
37751: NEG
37752: PUSH
37753: LD_INT 0
37755: PUSH
37756: EMPTY
37757: LIST
37758: LIST
37759: PUSH
37760: LD_INT 2
37762: NEG
37763: PUSH
37764: LD_INT 1
37766: NEG
37767: PUSH
37768: EMPTY
37769: LIST
37770: LIST
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: LIST
37776: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37777: LD_ADDR_VAR 0 64
37781: PUSH
37782: LD_INT 1
37784: NEG
37785: PUSH
37786: LD_INT 2
37788: NEG
37789: PUSH
37790: EMPTY
37791: LIST
37792: LIST
37793: PUSH
37794: LD_INT 2
37796: NEG
37797: PUSH
37798: LD_INT 1
37800: NEG
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 2
37808: NEG
37809: PUSH
37810: LD_INT 2
37812: NEG
37813: PUSH
37814: EMPTY
37815: LIST
37816: LIST
37817: PUSH
37818: EMPTY
37819: LIST
37820: LIST
37821: LIST
37822: ST_TO_ADDR
// end ; 2 :
37823: GO 41089
37825: LD_INT 2
37827: DOUBLE
37828: EQUAL
37829: IFTRUE 37833
37831: GO 41088
37833: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37834: LD_ADDR_VAR 0 29
37838: PUSH
37839: LD_INT 4
37841: PUSH
37842: LD_INT 0
37844: PUSH
37845: EMPTY
37846: LIST
37847: LIST
37848: PUSH
37849: LD_INT 4
37851: PUSH
37852: LD_INT 1
37854: NEG
37855: PUSH
37856: EMPTY
37857: LIST
37858: LIST
37859: PUSH
37860: LD_INT 5
37862: PUSH
37863: LD_INT 0
37865: PUSH
37866: EMPTY
37867: LIST
37868: LIST
37869: PUSH
37870: LD_INT 5
37872: PUSH
37873: LD_INT 1
37875: PUSH
37876: EMPTY
37877: LIST
37878: LIST
37879: PUSH
37880: LD_INT 4
37882: PUSH
37883: LD_INT 1
37885: PUSH
37886: EMPTY
37887: LIST
37888: LIST
37889: PUSH
37890: LD_INT 3
37892: PUSH
37893: LD_INT 0
37895: PUSH
37896: EMPTY
37897: LIST
37898: LIST
37899: PUSH
37900: LD_INT 3
37902: PUSH
37903: LD_INT 1
37905: NEG
37906: PUSH
37907: EMPTY
37908: LIST
37909: LIST
37910: PUSH
37911: LD_INT 3
37913: PUSH
37914: LD_INT 2
37916: NEG
37917: PUSH
37918: EMPTY
37919: LIST
37920: LIST
37921: PUSH
37922: LD_INT 5
37924: PUSH
37925: LD_INT 2
37927: PUSH
37928: EMPTY
37929: LIST
37930: LIST
37931: PUSH
37932: LD_INT 3
37934: PUSH
37935: LD_INT 3
37937: PUSH
37938: EMPTY
37939: LIST
37940: LIST
37941: PUSH
37942: LD_INT 3
37944: PUSH
37945: LD_INT 2
37947: PUSH
37948: EMPTY
37949: LIST
37950: LIST
37951: PUSH
37952: LD_INT 4
37954: PUSH
37955: LD_INT 3
37957: PUSH
37958: EMPTY
37959: LIST
37960: LIST
37961: PUSH
37962: LD_INT 4
37964: PUSH
37965: LD_INT 4
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 3
37974: PUSH
37975: LD_INT 4
37977: PUSH
37978: EMPTY
37979: LIST
37980: LIST
37981: PUSH
37982: LD_INT 2
37984: PUSH
37985: LD_INT 3
37987: PUSH
37988: EMPTY
37989: LIST
37990: LIST
37991: PUSH
37992: LD_INT 2
37994: PUSH
37995: LD_INT 2
37997: PUSH
37998: EMPTY
37999: LIST
38000: LIST
38001: PUSH
38002: LD_INT 4
38004: PUSH
38005: LD_INT 2
38007: PUSH
38008: EMPTY
38009: LIST
38010: LIST
38011: PUSH
38012: LD_INT 2
38014: PUSH
38015: LD_INT 4
38017: PUSH
38018: EMPTY
38019: LIST
38020: LIST
38021: PUSH
38022: LD_INT 0
38024: PUSH
38025: LD_INT 4
38027: PUSH
38028: EMPTY
38029: LIST
38030: LIST
38031: PUSH
38032: LD_INT 0
38034: PUSH
38035: LD_INT 3
38037: PUSH
38038: EMPTY
38039: LIST
38040: LIST
38041: PUSH
38042: LD_INT 1
38044: PUSH
38045: LD_INT 4
38047: PUSH
38048: EMPTY
38049: LIST
38050: LIST
38051: PUSH
38052: LD_INT 1
38054: PUSH
38055: LD_INT 5
38057: PUSH
38058: EMPTY
38059: LIST
38060: LIST
38061: PUSH
38062: LD_INT 0
38064: PUSH
38065: LD_INT 5
38067: PUSH
38068: EMPTY
38069: LIST
38070: LIST
38071: PUSH
38072: LD_INT 1
38074: NEG
38075: PUSH
38076: LD_INT 4
38078: PUSH
38079: EMPTY
38080: LIST
38081: LIST
38082: PUSH
38083: LD_INT 1
38085: NEG
38086: PUSH
38087: LD_INT 3
38089: PUSH
38090: EMPTY
38091: LIST
38092: LIST
38093: PUSH
38094: LD_INT 2
38096: PUSH
38097: LD_INT 5
38099: PUSH
38100: EMPTY
38101: LIST
38102: LIST
38103: PUSH
38104: LD_INT 2
38106: NEG
38107: PUSH
38108: LD_INT 3
38110: PUSH
38111: EMPTY
38112: LIST
38113: LIST
38114: PUSH
38115: LD_INT 3
38117: NEG
38118: PUSH
38119: LD_INT 0
38121: PUSH
38122: EMPTY
38123: LIST
38124: LIST
38125: PUSH
38126: LD_INT 3
38128: NEG
38129: PUSH
38130: LD_INT 1
38132: NEG
38133: PUSH
38134: EMPTY
38135: LIST
38136: LIST
38137: PUSH
38138: LD_INT 2
38140: NEG
38141: PUSH
38142: LD_INT 0
38144: PUSH
38145: EMPTY
38146: LIST
38147: LIST
38148: PUSH
38149: LD_INT 2
38151: NEG
38152: PUSH
38153: LD_INT 1
38155: PUSH
38156: EMPTY
38157: LIST
38158: LIST
38159: PUSH
38160: LD_INT 3
38162: NEG
38163: PUSH
38164: LD_INT 1
38166: PUSH
38167: EMPTY
38168: LIST
38169: LIST
38170: PUSH
38171: LD_INT 4
38173: NEG
38174: PUSH
38175: LD_INT 0
38177: PUSH
38178: EMPTY
38179: LIST
38180: LIST
38181: PUSH
38182: LD_INT 4
38184: NEG
38185: PUSH
38186: LD_INT 1
38188: NEG
38189: PUSH
38190: EMPTY
38191: LIST
38192: LIST
38193: PUSH
38194: LD_INT 4
38196: NEG
38197: PUSH
38198: LD_INT 2
38200: NEG
38201: PUSH
38202: EMPTY
38203: LIST
38204: LIST
38205: PUSH
38206: LD_INT 2
38208: NEG
38209: PUSH
38210: LD_INT 2
38212: PUSH
38213: EMPTY
38214: LIST
38215: LIST
38216: PUSH
38217: LD_INT 4
38219: NEG
38220: PUSH
38221: LD_INT 4
38223: NEG
38224: PUSH
38225: EMPTY
38226: LIST
38227: LIST
38228: PUSH
38229: LD_INT 4
38231: NEG
38232: PUSH
38233: LD_INT 5
38235: NEG
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 3
38243: NEG
38244: PUSH
38245: LD_INT 4
38247: NEG
38248: PUSH
38249: EMPTY
38250: LIST
38251: LIST
38252: PUSH
38253: LD_INT 3
38255: NEG
38256: PUSH
38257: LD_INT 3
38259: NEG
38260: PUSH
38261: EMPTY
38262: LIST
38263: LIST
38264: PUSH
38265: LD_INT 4
38267: NEG
38268: PUSH
38269: LD_INT 3
38271: NEG
38272: PUSH
38273: EMPTY
38274: LIST
38275: LIST
38276: PUSH
38277: LD_INT 5
38279: NEG
38280: PUSH
38281: LD_INT 4
38283: NEG
38284: PUSH
38285: EMPTY
38286: LIST
38287: LIST
38288: PUSH
38289: LD_INT 5
38291: NEG
38292: PUSH
38293: LD_INT 5
38295: NEG
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 3
38303: NEG
38304: PUSH
38305: LD_INT 5
38307: NEG
38308: PUSH
38309: EMPTY
38310: LIST
38311: LIST
38312: PUSH
38313: LD_INT 5
38315: NEG
38316: PUSH
38317: LD_INT 3
38319: NEG
38320: PUSH
38321: EMPTY
38322: LIST
38323: LIST
38324: PUSH
38325: EMPTY
38326: LIST
38327: LIST
38328: LIST
38329: LIST
38330: LIST
38331: LIST
38332: LIST
38333: LIST
38334: LIST
38335: LIST
38336: LIST
38337: LIST
38338: LIST
38339: LIST
38340: LIST
38341: LIST
38342: LIST
38343: LIST
38344: LIST
38345: LIST
38346: LIST
38347: LIST
38348: LIST
38349: LIST
38350: LIST
38351: LIST
38352: LIST
38353: LIST
38354: LIST
38355: LIST
38356: LIST
38357: LIST
38358: LIST
38359: LIST
38360: LIST
38361: LIST
38362: LIST
38363: LIST
38364: LIST
38365: LIST
38366: LIST
38367: LIST
38368: LIST
38369: LIST
38370: LIST
38371: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38372: LD_ADDR_VAR 0 30
38376: PUSH
38377: LD_INT 4
38379: PUSH
38380: LD_INT 4
38382: PUSH
38383: EMPTY
38384: LIST
38385: LIST
38386: PUSH
38387: LD_INT 4
38389: PUSH
38390: LD_INT 3
38392: PUSH
38393: EMPTY
38394: LIST
38395: LIST
38396: PUSH
38397: LD_INT 5
38399: PUSH
38400: LD_INT 4
38402: PUSH
38403: EMPTY
38404: LIST
38405: LIST
38406: PUSH
38407: LD_INT 5
38409: PUSH
38410: LD_INT 5
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 4
38419: PUSH
38420: LD_INT 5
38422: PUSH
38423: EMPTY
38424: LIST
38425: LIST
38426: PUSH
38427: LD_INT 3
38429: PUSH
38430: LD_INT 4
38432: PUSH
38433: EMPTY
38434: LIST
38435: LIST
38436: PUSH
38437: LD_INT 3
38439: PUSH
38440: LD_INT 3
38442: PUSH
38443: EMPTY
38444: LIST
38445: LIST
38446: PUSH
38447: LD_INT 5
38449: PUSH
38450: LD_INT 3
38452: PUSH
38453: EMPTY
38454: LIST
38455: LIST
38456: PUSH
38457: LD_INT 3
38459: PUSH
38460: LD_INT 5
38462: PUSH
38463: EMPTY
38464: LIST
38465: LIST
38466: PUSH
38467: LD_INT 0
38469: PUSH
38470: LD_INT 3
38472: PUSH
38473: EMPTY
38474: LIST
38475: LIST
38476: PUSH
38477: LD_INT 0
38479: PUSH
38480: LD_INT 2
38482: PUSH
38483: EMPTY
38484: LIST
38485: LIST
38486: PUSH
38487: LD_INT 1
38489: PUSH
38490: LD_INT 3
38492: PUSH
38493: EMPTY
38494: LIST
38495: LIST
38496: PUSH
38497: LD_INT 1
38499: PUSH
38500: LD_INT 4
38502: PUSH
38503: EMPTY
38504: LIST
38505: LIST
38506: PUSH
38507: LD_INT 0
38509: PUSH
38510: LD_INT 4
38512: PUSH
38513: EMPTY
38514: LIST
38515: LIST
38516: PUSH
38517: LD_INT 1
38519: NEG
38520: PUSH
38521: LD_INT 3
38523: PUSH
38524: EMPTY
38525: LIST
38526: LIST
38527: PUSH
38528: LD_INT 1
38530: NEG
38531: PUSH
38532: LD_INT 2
38534: PUSH
38535: EMPTY
38536: LIST
38537: LIST
38538: PUSH
38539: LD_INT 2
38541: PUSH
38542: LD_INT 4
38544: PUSH
38545: EMPTY
38546: LIST
38547: LIST
38548: PUSH
38549: LD_INT 2
38551: NEG
38552: PUSH
38553: LD_INT 2
38555: PUSH
38556: EMPTY
38557: LIST
38558: LIST
38559: PUSH
38560: LD_INT 4
38562: NEG
38563: PUSH
38564: LD_INT 0
38566: PUSH
38567: EMPTY
38568: LIST
38569: LIST
38570: PUSH
38571: LD_INT 4
38573: NEG
38574: PUSH
38575: LD_INT 1
38577: NEG
38578: PUSH
38579: EMPTY
38580: LIST
38581: LIST
38582: PUSH
38583: LD_INT 3
38585: NEG
38586: PUSH
38587: LD_INT 0
38589: PUSH
38590: EMPTY
38591: LIST
38592: LIST
38593: PUSH
38594: LD_INT 3
38596: NEG
38597: PUSH
38598: LD_INT 1
38600: PUSH
38601: EMPTY
38602: LIST
38603: LIST
38604: PUSH
38605: LD_INT 4
38607: NEG
38608: PUSH
38609: LD_INT 1
38611: PUSH
38612: EMPTY
38613: LIST
38614: LIST
38615: PUSH
38616: LD_INT 5
38618: NEG
38619: PUSH
38620: LD_INT 0
38622: PUSH
38623: EMPTY
38624: LIST
38625: LIST
38626: PUSH
38627: LD_INT 5
38629: NEG
38630: PUSH
38631: LD_INT 1
38633: NEG
38634: PUSH
38635: EMPTY
38636: LIST
38637: LIST
38638: PUSH
38639: LD_INT 5
38641: NEG
38642: PUSH
38643: LD_INT 2
38645: NEG
38646: PUSH
38647: EMPTY
38648: LIST
38649: LIST
38650: PUSH
38651: LD_INT 3
38653: NEG
38654: PUSH
38655: LD_INT 2
38657: PUSH
38658: EMPTY
38659: LIST
38660: LIST
38661: PUSH
38662: LD_INT 3
38664: NEG
38665: PUSH
38666: LD_INT 3
38668: NEG
38669: PUSH
38670: EMPTY
38671: LIST
38672: LIST
38673: PUSH
38674: LD_INT 3
38676: NEG
38677: PUSH
38678: LD_INT 4
38680: NEG
38681: PUSH
38682: EMPTY
38683: LIST
38684: LIST
38685: PUSH
38686: LD_INT 2
38688: NEG
38689: PUSH
38690: LD_INT 3
38692: NEG
38693: PUSH
38694: EMPTY
38695: LIST
38696: LIST
38697: PUSH
38698: LD_INT 2
38700: NEG
38701: PUSH
38702: LD_INT 2
38704: NEG
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: PUSH
38710: LD_INT 3
38712: NEG
38713: PUSH
38714: LD_INT 2
38716: NEG
38717: PUSH
38718: EMPTY
38719: LIST
38720: LIST
38721: PUSH
38722: LD_INT 4
38724: NEG
38725: PUSH
38726: LD_INT 3
38728: NEG
38729: PUSH
38730: EMPTY
38731: LIST
38732: LIST
38733: PUSH
38734: LD_INT 4
38736: NEG
38737: PUSH
38738: LD_INT 4
38740: NEG
38741: PUSH
38742: EMPTY
38743: LIST
38744: LIST
38745: PUSH
38746: LD_INT 2
38748: NEG
38749: PUSH
38750: LD_INT 4
38752: NEG
38753: PUSH
38754: EMPTY
38755: LIST
38756: LIST
38757: PUSH
38758: LD_INT 4
38760: NEG
38761: PUSH
38762: LD_INT 2
38764: NEG
38765: PUSH
38766: EMPTY
38767: LIST
38768: LIST
38769: PUSH
38770: LD_INT 0
38772: PUSH
38773: LD_INT 4
38775: NEG
38776: PUSH
38777: EMPTY
38778: LIST
38779: LIST
38780: PUSH
38781: LD_INT 0
38783: PUSH
38784: LD_INT 5
38786: NEG
38787: PUSH
38788: EMPTY
38789: LIST
38790: LIST
38791: PUSH
38792: LD_INT 1
38794: PUSH
38795: LD_INT 4
38797: NEG
38798: PUSH
38799: EMPTY
38800: LIST
38801: LIST
38802: PUSH
38803: LD_INT 1
38805: PUSH
38806: LD_INT 3
38808: NEG
38809: PUSH
38810: EMPTY
38811: LIST
38812: LIST
38813: PUSH
38814: LD_INT 0
38816: PUSH
38817: LD_INT 3
38819: NEG
38820: PUSH
38821: EMPTY
38822: LIST
38823: LIST
38824: PUSH
38825: LD_INT 1
38827: NEG
38828: PUSH
38829: LD_INT 4
38831: NEG
38832: PUSH
38833: EMPTY
38834: LIST
38835: LIST
38836: PUSH
38837: LD_INT 1
38839: NEG
38840: PUSH
38841: LD_INT 5
38843: NEG
38844: PUSH
38845: EMPTY
38846: LIST
38847: LIST
38848: PUSH
38849: LD_INT 2
38851: PUSH
38852: LD_INT 3
38854: NEG
38855: PUSH
38856: EMPTY
38857: LIST
38858: LIST
38859: PUSH
38860: LD_INT 2
38862: NEG
38863: PUSH
38864: LD_INT 5
38866: NEG
38867: PUSH
38868: EMPTY
38869: LIST
38870: LIST
38871: PUSH
38872: EMPTY
38873: LIST
38874: LIST
38875: LIST
38876: LIST
38877: LIST
38878: LIST
38879: LIST
38880: LIST
38881: LIST
38882: LIST
38883: LIST
38884: LIST
38885: LIST
38886: LIST
38887: LIST
38888: LIST
38889: LIST
38890: LIST
38891: LIST
38892: LIST
38893: LIST
38894: LIST
38895: LIST
38896: LIST
38897: LIST
38898: LIST
38899: LIST
38900: LIST
38901: LIST
38902: LIST
38903: LIST
38904: LIST
38905: LIST
38906: LIST
38907: LIST
38908: LIST
38909: LIST
38910: LIST
38911: LIST
38912: LIST
38913: LIST
38914: LIST
38915: LIST
38916: LIST
38917: LIST
38918: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38919: LD_ADDR_VAR 0 31
38923: PUSH
38924: LD_INT 0
38926: PUSH
38927: LD_INT 4
38929: PUSH
38930: EMPTY
38931: LIST
38932: LIST
38933: PUSH
38934: LD_INT 0
38936: PUSH
38937: LD_INT 3
38939: PUSH
38940: EMPTY
38941: LIST
38942: LIST
38943: PUSH
38944: LD_INT 1
38946: PUSH
38947: LD_INT 4
38949: PUSH
38950: EMPTY
38951: LIST
38952: LIST
38953: PUSH
38954: LD_INT 1
38956: PUSH
38957: LD_INT 5
38959: PUSH
38960: EMPTY
38961: LIST
38962: LIST
38963: PUSH
38964: LD_INT 0
38966: PUSH
38967: LD_INT 5
38969: PUSH
38970: EMPTY
38971: LIST
38972: LIST
38973: PUSH
38974: LD_INT 1
38976: NEG
38977: PUSH
38978: LD_INT 4
38980: PUSH
38981: EMPTY
38982: LIST
38983: LIST
38984: PUSH
38985: LD_INT 1
38987: NEG
38988: PUSH
38989: LD_INT 3
38991: PUSH
38992: EMPTY
38993: LIST
38994: LIST
38995: PUSH
38996: LD_INT 2
38998: PUSH
38999: LD_INT 5
39001: PUSH
39002: EMPTY
39003: LIST
39004: LIST
39005: PUSH
39006: LD_INT 2
39008: NEG
39009: PUSH
39010: LD_INT 3
39012: PUSH
39013: EMPTY
39014: LIST
39015: LIST
39016: PUSH
39017: LD_INT 3
39019: NEG
39020: PUSH
39021: LD_INT 0
39023: PUSH
39024: EMPTY
39025: LIST
39026: LIST
39027: PUSH
39028: LD_INT 3
39030: NEG
39031: PUSH
39032: LD_INT 1
39034: NEG
39035: PUSH
39036: EMPTY
39037: LIST
39038: LIST
39039: PUSH
39040: LD_INT 2
39042: NEG
39043: PUSH
39044: LD_INT 0
39046: PUSH
39047: EMPTY
39048: LIST
39049: LIST
39050: PUSH
39051: LD_INT 2
39053: NEG
39054: PUSH
39055: LD_INT 1
39057: PUSH
39058: EMPTY
39059: LIST
39060: LIST
39061: PUSH
39062: LD_INT 3
39064: NEG
39065: PUSH
39066: LD_INT 1
39068: PUSH
39069: EMPTY
39070: LIST
39071: LIST
39072: PUSH
39073: LD_INT 4
39075: NEG
39076: PUSH
39077: LD_INT 0
39079: PUSH
39080: EMPTY
39081: LIST
39082: LIST
39083: PUSH
39084: LD_INT 4
39086: NEG
39087: PUSH
39088: LD_INT 1
39090: NEG
39091: PUSH
39092: EMPTY
39093: LIST
39094: LIST
39095: PUSH
39096: LD_INT 4
39098: NEG
39099: PUSH
39100: LD_INT 2
39102: NEG
39103: PUSH
39104: EMPTY
39105: LIST
39106: LIST
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: LD_INT 2
39114: PUSH
39115: EMPTY
39116: LIST
39117: LIST
39118: PUSH
39119: LD_INT 4
39121: NEG
39122: PUSH
39123: LD_INT 4
39125: NEG
39126: PUSH
39127: EMPTY
39128: LIST
39129: LIST
39130: PUSH
39131: LD_INT 4
39133: NEG
39134: PUSH
39135: LD_INT 5
39137: NEG
39138: PUSH
39139: EMPTY
39140: LIST
39141: LIST
39142: PUSH
39143: LD_INT 3
39145: NEG
39146: PUSH
39147: LD_INT 4
39149: NEG
39150: PUSH
39151: EMPTY
39152: LIST
39153: LIST
39154: PUSH
39155: LD_INT 3
39157: NEG
39158: PUSH
39159: LD_INT 3
39161: NEG
39162: PUSH
39163: EMPTY
39164: LIST
39165: LIST
39166: PUSH
39167: LD_INT 4
39169: NEG
39170: PUSH
39171: LD_INT 3
39173: NEG
39174: PUSH
39175: EMPTY
39176: LIST
39177: LIST
39178: PUSH
39179: LD_INT 5
39181: NEG
39182: PUSH
39183: LD_INT 4
39185: NEG
39186: PUSH
39187: EMPTY
39188: LIST
39189: LIST
39190: PUSH
39191: LD_INT 5
39193: NEG
39194: PUSH
39195: LD_INT 5
39197: NEG
39198: PUSH
39199: EMPTY
39200: LIST
39201: LIST
39202: PUSH
39203: LD_INT 3
39205: NEG
39206: PUSH
39207: LD_INT 5
39209: NEG
39210: PUSH
39211: EMPTY
39212: LIST
39213: LIST
39214: PUSH
39215: LD_INT 5
39217: NEG
39218: PUSH
39219: LD_INT 3
39221: NEG
39222: PUSH
39223: EMPTY
39224: LIST
39225: LIST
39226: PUSH
39227: LD_INT 0
39229: PUSH
39230: LD_INT 3
39232: NEG
39233: PUSH
39234: EMPTY
39235: LIST
39236: LIST
39237: PUSH
39238: LD_INT 0
39240: PUSH
39241: LD_INT 4
39243: NEG
39244: PUSH
39245: EMPTY
39246: LIST
39247: LIST
39248: PUSH
39249: LD_INT 1
39251: PUSH
39252: LD_INT 3
39254: NEG
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: PUSH
39260: LD_INT 1
39262: PUSH
39263: LD_INT 2
39265: NEG
39266: PUSH
39267: EMPTY
39268: LIST
39269: LIST
39270: PUSH
39271: LD_INT 0
39273: PUSH
39274: LD_INT 2
39276: NEG
39277: PUSH
39278: EMPTY
39279: LIST
39280: LIST
39281: PUSH
39282: LD_INT 1
39284: NEG
39285: PUSH
39286: LD_INT 3
39288: NEG
39289: PUSH
39290: EMPTY
39291: LIST
39292: LIST
39293: PUSH
39294: LD_INT 1
39296: NEG
39297: PUSH
39298: LD_INT 4
39300: NEG
39301: PUSH
39302: EMPTY
39303: LIST
39304: LIST
39305: PUSH
39306: LD_INT 2
39308: PUSH
39309: LD_INT 2
39311: NEG
39312: PUSH
39313: EMPTY
39314: LIST
39315: LIST
39316: PUSH
39317: LD_INT 2
39319: NEG
39320: PUSH
39321: LD_INT 4
39323: NEG
39324: PUSH
39325: EMPTY
39326: LIST
39327: LIST
39328: PUSH
39329: LD_INT 4
39331: PUSH
39332: LD_INT 0
39334: PUSH
39335: EMPTY
39336: LIST
39337: LIST
39338: PUSH
39339: LD_INT 4
39341: PUSH
39342: LD_INT 1
39344: NEG
39345: PUSH
39346: EMPTY
39347: LIST
39348: LIST
39349: PUSH
39350: LD_INT 5
39352: PUSH
39353: LD_INT 0
39355: PUSH
39356: EMPTY
39357: LIST
39358: LIST
39359: PUSH
39360: LD_INT 5
39362: PUSH
39363: LD_INT 1
39365: PUSH
39366: EMPTY
39367: LIST
39368: LIST
39369: PUSH
39370: LD_INT 4
39372: PUSH
39373: LD_INT 1
39375: PUSH
39376: EMPTY
39377: LIST
39378: LIST
39379: PUSH
39380: LD_INT 3
39382: PUSH
39383: LD_INT 0
39385: PUSH
39386: EMPTY
39387: LIST
39388: LIST
39389: PUSH
39390: LD_INT 3
39392: PUSH
39393: LD_INT 1
39395: NEG
39396: PUSH
39397: EMPTY
39398: LIST
39399: LIST
39400: PUSH
39401: LD_INT 3
39403: PUSH
39404: LD_INT 2
39406: NEG
39407: PUSH
39408: EMPTY
39409: LIST
39410: LIST
39411: PUSH
39412: LD_INT 5
39414: PUSH
39415: LD_INT 2
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: EMPTY
39423: LIST
39424: LIST
39425: LIST
39426: LIST
39427: LIST
39428: LIST
39429: LIST
39430: LIST
39431: LIST
39432: LIST
39433: LIST
39434: LIST
39435: LIST
39436: LIST
39437: LIST
39438: LIST
39439: LIST
39440: LIST
39441: LIST
39442: LIST
39443: LIST
39444: LIST
39445: LIST
39446: LIST
39447: LIST
39448: LIST
39449: LIST
39450: LIST
39451: LIST
39452: LIST
39453: LIST
39454: LIST
39455: LIST
39456: LIST
39457: LIST
39458: LIST
39459: LIST
39460: LIST
39461: LIST
39462: LIST
39463: LIST
39464: LIST
39465: LIST
39466: LIST
39467: LIST
39468: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39469: LD_ADDR_VAR 0 32
39473: PUSH
39474: LD_INT 4
39476: NEG
39477: PUSH
39478: LD_INT 0
39480: PUSH
39481: EMPTY
39482: LIST
39483: LIST
39484: PUSH
39485: LD_INT 4
39487: NEG
39488: PUSH
39489: LD_INT 1
39491: NEG
39492: PUSH
39493: EMPTY
39494: LIST
39495: LIST
39496: PUSH
39497: LD_INT 3
39499: NEG
39500: PUSH
39501: LD_INT 0
39503: PUSH
39504: EMPTY
39505: LIST
39506: LIST
39507: PUSH
39508: LD_INT 3
39510: NEG
39511: PUSH
39512: LD_INT 1
39514: PUSH
39515: EMPTY
39516: LIST
39517: LIST
39518: PUSH
39519: LD_INT 4
39521: NEG
39522: PUSH
39523: LD_INT 1
39525: PUSH
39526: EMPTY
39527: LIST
39528: LIST
39529: PUSH
39530: LD_INT 5
39532: NEG
39533: PUSH
39534: LD_INT 0
39536: PUSH
39537: EMPTY
39538: LIST
39539: LIST
39540: PUSH
39541: LD_INT 5
39543: NEG
39544: PUSH
39545: LD_INT 1
39547: NEG
39548: PUSH
39549: EMPTY
39550: LIST
39551: LIST
39552: PUSH
39553: LD_INT 5
39555: NEG
39556: PUSH
39557: LD_INT 2
39559: NEG
39560: PUSH
39561: EMPTY
39562: LIST
39563: LIST
39564: PUSH
39565: LD_INT 3
39567: NEG
39568: PUSH
39569: LD_INT 2
39571: PUSH
39572: EMPTY
39573: LIST
39574: LIST
39575: PUSH
39576: LD_INT 3
39578: NEG
39579: PUSH
39580: LD_INT 3
39582: NEG
39583: PUSH
39584: EMPTY
39585: LIST
39586: LIST
39587: PUSH
39588: LD_INT 3
39590: NEG
39591: PUSH
39592: LD_INT 4
39594: NEG
39595: PUSH
39596: EMPTY
39597: LIST
39598: LIST
39599: PUSH
39600: LD_INT 2
39602: NEG
39603: PUSH
39604: LD_INT 3
39606: NEG
39607: PUSH
39608: EMPTY
39609: LIST
39610: LIST
39611: PUSH
39612: LD_INT 2
39614: NEG
39615: PUSH
39616: LD_INT 2
39618: NEG
39619: PUSH
39620: EMPTY
39621: LIST
39622: LIST
39623: PUSH
39624: LD_INT 3
39626: NEG
39627: PUSH
39628: LD_INT 2
39630: NEG
39631: PUSH
39632: EMPTY
39633: LIST
39634: LIST
39635: PUSH
39636: LD_INT 4
39638: NEG
39639: PUSH
39640: LD_INT 3
39642: NEG
39643: PUSH
39644: EMPTY
39645: LIST
39646: LIST
39647: PUSH
39648: LD_INT 4
39650: NEG
39651: PUSH
39652: LD_INT 4
39654: NEG
39655: PUSH
39656: EMPTY
39657: LIST
39658: LIST
39659: PUSH
39660: LD_INT 2
39662: NEG
39663: PUSH
39664: LD_INT 4
39666: NEG
39667: PUSH
39668: EMPTY
39669: LIST
39670: LIST
39671: PUSH
39672: LD_INT 4
39674: NEG
39675: PUSH
39676: LD_INT 2
39678: NEG
39679: PUSH
39680: EMPTY
39681: LIST
39682: LIST
39683: PUSH
39684: LD_INT 0
39686: PUSH
39687: LD_INT 4
39689: NEG
39690: PUSH
39691: EMPTY
39692: LIST
39693: LIST
39694: PUSH
39695: LD_INT 0
39697: PUSH
39698: LD_INT 5
39700: NEG
39701: PUSH
39702: EMPTY
39703: LIST
39704: LIST
39705: PUSH
39706: LD_INT 1
39708: PUSH
39709: LD_INT 4
39711: NEG
39712: PUSH
39713: EMPTY
39714: LIST
39715: LIST
39716: PUSH
39717: LD_INT 1
39719: PUSH
39720: LD_INT 3
39722: NEG
39723: PUSH
39724: EMPTY
39725: LIST
39726: LIST
39727: PUSH
39728: LD_INT 0
39730: PUSH
39731: LD_INT 3
39733: NEG
39734: PUSH
39735: EMPTY
39736: LIST
39737: LIST
39738: PUSH
39739: LD_INT 1
39741: NEG
39742: PUSH
39743: LD_INT 4
39745: NEG
39746: PUSH
39747: EMPTY
39748: LIST
39749: LIST
39750: PUSH
39751: LD_INT 1
39753: NEG
39754: PUSH
39755: LD_INT 5
39757: NEG
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 2
39765: PUSH
39766: LD_INT 3
39768: NEG
39769: PUSH
39770: EMPTY
39771: LIST
39772: LIST
39773: PUSH
39774: LD_INT 2
39776: NEG
39777: PUSH
39778: LD_INT 5
39780: NEG
39781: PUSH
39782: EMPTY
39783: LIST
39784: LIST
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: LD_INT 0
39791: PUSH
39792: EMPTY
39793: LIST
39794: LIST
39795: PUSH
39796: LD_INT 3
39798: PUSH
39799: LD_INT 1
39801: NEG
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: PUSH
39807: LD_INT 4
39809: PUSH
39810: LD_INT 0
39812: PUSH
39813: EMPTY
39814: LIST
39815: LIST
39816: PUSH
39817: LD_INT 4
39819: PUSH
39820: LD_INT 1
39822: PUSH
39823: EMPTY
39824: LIST
39825: LIST
39826: PUSH
39827: LD_INT 3
39829: PUSH
39830: LD_INT 1
39832: PUSH
39833: EMPTY
39834: LIST
39835: LIST
39836: PUSH
39837: LD_INT 2
39839: PUSH
39840: LD_INT 0
39842: PUSH
39843: EMPTY
39844: LIST
39845: LIST
39846: PUSH
39847: LD_INT 2
39849: PUSH
39850: LD_INT 1
39852: NEG
39853: PUSH
39854: EMPTY
39855: LIST
39856: LIST
39857: PUSH
39858: LD_INT 2
39860: PUSH
39861: LD_INT 2
39863: NEG
39864: PUSH
39865: EMPTY
39866: LIST
39867: LIST
39868: PUSH
39869: LD_INT 4
39871: PUSH
39872: LD_INT 2
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 4
39881: PUSH
39882: LD_INT 4
39884: PUSH
39885: EMPTY
39886: LIST
39887: LIST
39888: PUSH
39889: LD_INT 4
39891: PUSH
39892: LD_INT 3
39894: PUSH
39895: EMPTY
39896: LIST
39897: LIST
39898: PUSH
39899: LD_INT 5
39901: PUSH
39902: LD_INT 4
39904: PUSH
39905: EMPTY
39906: LIST
39907: LIST
39908: PUSH
39909: LD_INT 5
39911: PUSH
39912: LD_INT 5
39914: PUSH
39915: EMPTY
39916: LIST
39917: LIST
39918: PUSH
39919: LD_INT 4
39921: PUSH
39922: LD_INT 5
39924: PUSH
39925: EMPTY
39926: LIST
39927: LIST
39928: PUSH
39929: LD_INT 3
39931: PUSH
39932: LD_INT 4
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 3
39941: PUSH
39942: LD_INT 3
39944: PUSH
39945: EMPTY
39946: LIST
39947: LIST
39948: PUSH
39949: LD_INT 5
39951: PUSH
39952: LD_INT 3
39954: PUSH
39955: EMPTY
39956: LIST
39957: LIST
39958: PUSH
39959: LD_INT 3
39961: PUSH
39962: LD_INT 5
39964: PUSH
39965: EMPTY
39966: LIST
39967: LIST
39968: PUSH
39969: EMPTY
39970: LIST
39971: LIST
39972: LIST
39973: LIST
39974: LIST
39975: LIST
39976: LIST
39977: LIST
39978: LIST
39979: LIST
39980: LIST
39981: LIST
39982: LIST
39983: LIST
39984: LIST
39985: LIST
39986: LIST
39987: LIST
39988: LIST
39989: LIST
39990: LIST
39991: LIST
39992: LIST
39993: LIST
39994: LIST
39995: LIST
39996: LIST
39997: LIST
39998: LIST
39999: LIST
40000: LIST
40001: LIST
40002: LIST
40003: LIST
40004: LIST
40005: LIST
40006: LIST
40007: LIST
40008: LIST
40009: LIST
40010: LIST
40011: LIST
40012: LIST
40013: LIST
40014: LIST
40015: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
40016: LD_ADDR_VAR 0 33
40020: PUSH
40021: LD_INT 4
40023: NEG
40024: PUSH
40025: LD_INT 4
40027: NEG
40028: PUSH
40029: EMPTY
40030: LIST
40031: LIST
40032: PUSH
40033: LD_INT 4
40035: NEG
40036: PUSH
40037: LD_INT 5
40039: NEG
40040: PUSH
40041: EMPTY
40042: LIST
40043: LIST
40044: PUSH
40045: LD_INT 3
40047: NEG
40048: PUSH
40049: LD_INT 4
40051: NEG
40052: PUSH
40053: EMPTY
40054: LIST
40055: LIST
40056: PUSH
40057: LD_INT 3
40059: NEG
40060: PUSH
40061: LD_INT 3
40063: NEG
40064: PUSH
40065: EMPTY
40066: LIST
40067: LIST
40068: PUSH
40069: LD_INT 4
40071: NEG
40072: PUSH
40073: LD_INT 3
40075: NEG
40076: PUSH
40077: EMPTY
40078: LIST
40079: LIST
40080: PUSH
40081: LD_INT 5
40083: NEG
40084: PUSH
40085: LD_INT 4
40087: NEG
40088: PUSH
40089: EMPTY
40090: LIST
40091: LIST
40092: PUSH
40093: LD_INT 5
40095: NEG
40096: PUSH
40097: LD_INT 5
40099: NEG
40100: PUSH
40101: EMPTY
40102: LIST
40103: LIST
40104: PUSH
40105: LD_INT 3
40107: NEG
40108: PUSH
40109: LD_INT 5
40111: NEG
40112: PUSH
40113: EMPTY
40114: LIST
40115: LIST
40116: PUSH
40117: LD_INT 5
40119: NEG
40120: PUSH
40121: LD_INT 3
40123: NEG
40124: PUSH
40125: EMPTY
40126: LIST
40127: LIST
40128: PUSH
40129: LD_INT 0
40131: PUSH
40132: LD_INT 3
40134: NEG
40135: PUSH
40136: EMPTY
40137: LIST
40138: LIST
40139: PUSH
40140: LD_INT 0
40142: PUSH
40143: LD_INT 4
40145: NEG
40146: PUSH
40147: EMPTY
40148: LIST
40149: LIST
40150: PUSH
40151: LD_INT 1
40153: PUSH
40154: LD_INT 3
40156: NEG
40157: PUSH
40158: EMPTY
40159: LIST
40160: LIST
40161: PUSH
40162: LD_INT 1
40164: PUSH
40165: LD_INT 2
40167: NEG
40168: PUSH
40169: EMPTY
40170: LIST
40171: LIST
40172: PUSH
40173: LD_INT 0
40175: PUSH
40176: LD_INT 2
40178: NEG
40179: PUSH
40180: EMPTY
40181: LIST
40182: LIST
40183: PUSH
40184: LD_INT 1
40186: NEG
40187: PUSH
40188: LD_INT 3
40190: NEG
40191: PUSH
40192: EMPTY
40193: LIST
40194: LIST
40195: PUSH
40196: LD_INT 1
40198: NEG
40199: PUSH
40200: LD_INT 4
40202: NEG
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 2
40213: NEG
40214: PUSH
40215: EMPTY
40216: LIST
40217: LIST
40218: PUSH
40219: LD_INT 2
40221: NEG
40222: PUSH
40223: LD_INT 4
40225: NEG
40226: PUSH
40227: EMPTY
40228: LIST
40229: LIST
40230: PUSH
40231: LD_INT 4
40233: PUSH
40234: LD_INT 0
40236: PUSH
40237: EMPTY
40238: LIST
40239: LIST
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: LD_INT 1
40246: NEG
40247: PUSH
40248: EMPTY
40249: LIST
40250: LIST
40251: PUSH
40252: LD_INT 5
40254: PUSH
40255: LD_INT 0
40257: PUSH
40258: EMPTY
40259: LIST
40260: LIST
40261: PUSH
40262: LD_INT 5
40264: PUSH
40265: LD_INT 1
40267: PUSH
40268: EMPTY
40269: LIST
40270: LIST
40271: PUSH
40272: LD_INT 4
40274: PUSH
40275: LD_INT 1
40277: PUSH
40278: EMPTY
40279: LIST
40280: LIST
40281: PUSH
40282: LD_INT 3
40284: PUSH
40285: LD_INT 0
40287: PUSH
40288: EMPTY
40289: LIST
40290: LIST
40291: PUSH
40292: LD_INT 3
40294: PUSH
40295: LD_INT 1
40297: NEG
40298: PUSH
40299: EMPTY
40300: LIST
40301: LIST
40302: PUSH
40303: LD_INT 3
40305: PUSH
40306: LD_INT 2
40308: NEG
40309: PUSH
40310: EMPTY
40311: LIST
40312: LIST
40313: PUSH
40314: LD_INT 5
40316: PUSH
40317: LD_INT 2
40319: PUSH
40320: EMPTY
40321: LIST
40322: LIST
40323: PUSH
40324: LD_INT 3
40326: PUSH
40327: LD_INT 3
40329: PUSH
40330: EMPTY
40331: LIST
40332: LIST
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: LD_INT 2
40339: PUSH
40340: EMPTY
40341: LIST
40342: LIST
40343: PUSH
40344: LD_INT 4
40346: PUSH
40347: LD_INT 3
40349: PUSH
40350: EMPTY
40351: LIST
40352: LIST
40353: PUSH
40354: LD_INT 4
40356: PUSH
40357: LD_INT 4
40359: PUSH
40360: EMPTY
40361: LIST
40362: LIST
40363: PUSH
40364: LD_INT 3
40366: PUSH
40367: LD_INT 4
40369: PUSH
40370: EMPTY
40371: LIST
40372: LIST
40373: PUSH
40374: LD_INT 2
40376: PUSH
40377: LD_INT 3
40379: PUSH
40380: EMPTY
40381: LIST
40382: LIST
40383: PUSH
40384: LD_INT 2
40386: PUSH
40387: LD_INT 2
40389: PUSH
40390: EMPTY
40391: LIST
40392: LIST
40393: PUSH
40394: LD_INT 4
40396: PUSH
40397: LD_INT 2
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 2
40406: PUSH
40407: LD_INT 4
40409: PUSH
40410: EMPTY
40411: LIST
40412: LIST
40413: PUSH
40414: LD_INT 0
40416: PUSH
40417: LD_INT 4
40419: PUSH
40420: EMPTY
40421: LIST
40422: LIST
40423: PUSH
40424: LD_INT 0
40426: PUSH
40427: LD_INT 3
40429: PUSH
40430: EMPTY
40431: LIST
40432: LIST
40433: PUSH
40434: LD_INT 1
40436: PUSH
40437: LD_INT 4
40439: PUSH
40440: EMPTY
40441: LIST
40442: LIST
40443: PUSH
40444: LD_INT 1
40446: PUSH
40447: LD_INT 5
40449: PUSH
40450: EMPTY
40451: LIST
40452: LIST
40453: PUSH
40454: LD_INT 0
40456: PUSH
40457: LD_INT 5
40459: PUSH
40460: EMPTY
40461: LIST
40462: LIST
40463: PUSH
40464: LD_INT 1
40466: NEG
40467: PUSH
40468: LD_INT 4
40470: PUSH
40471: EMPTY
40472: LIST
40473: LIST
40474: PUSH
40475: LD_INT 1
40477: NEG
40478: PUSH
40479: LD_INT 3
40481: PUSH
40482: EMPTY
40483: LIST
40484: LIST
40485: PUSH
40486: LD_INT 2
40488: PUSH
40489: LD_INT 5
40491: PUSH
40492: EMPTY
40493: LIST
40494: LIST
40495: PUSH
40496: LD_INT 2
40498: NEG
40499: PUSH
40500: LD_INT 3
40502: PUSH
40503: EMPTY
40504: LIST
40505: LIST
40506: PUSH
40507: EMPTY
40508: LIST
40509: LIST
40510: LIST
40511: LIST
40512: LIST
40513: LIST
40514: LIST
40515: LIST
40516: LIST
40517: LIST
40518: LIST
40519: LIST
40520: LIST
40521: LIST
40522: LIST
40523: LIST
40524: LIST
40525: LIST
40526: LIST
40527: LIST
40528: LIST
40529: LIST
40530: LIST
40531: LIST
40532: LIST
40533: LIST
40534: LIST
40535: LIST
40536: LIST
40537: LIST
40538: LIST
40539: LIST
40540: LIST
40541: LIST
40542: LIST
40543: LIST
40544: LIST
40545: LIST
40546: LIST
40547: LIST
40548: LIST
40549: LIST
40550: LIST
40551: LIST
40552: LIST
40553: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40554: LD_ADDR_VAR 0 34
40558: PUSH
40559: LD_INT 0
40561: PUSH
40562: LD_INT 4
40564: NEG
40565: PUSH
40566: EMPTY
40567: LIST
40568: LIST
40569: PUSH
40570: LD_INT 0
40572: PUSH
40573: LD_INT 5
40575: NEG
40576: PUSH
40577: EMPTY
40578: LIST
40579: LIST
40580: PUSH
40581: LD_INT 1
40583: PUSH
40584: LD_INT 4
40586: NEG
40587: PUSH
40588: EMPTY
40589: LIST
40590: LIST
40591: PUSH
40592: LD_INT 1
40594: PUSH
40595: LD_INT 3
40597: NEG
40598: PUSH
40599: EMPTY
40600: LIST
40601: LIST
40602: PUSH
40603: LD_INT 0
40605: PUSH
40606: LD_INT 3
40608: NEG
40609: PUSH
40610: EMPTY
40611: LIST
40612: LIST
40613: PUSH
40614: LD_INT 1
40616: NEG
40617: PUSH
40618: LD_INT 4
40620: NEG
40621: PUSH
40622: EMPTY
40623: LIST
40624: LIST
40625: PUSH
40626: LD_INT 1
40628: NEG
40629: PUSH
40630: LD_INT 5
40632: NEG
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 2
40640: PUSH
40641: LD_INT 3
40643: NEG
40644: PUSH
40645: EMPTY
40646: LIST
40647: LIST
40648: PUSH
40649: LD_INT 2
40651: NEG
40652: PUSH
40653: LD_INT 5
40655: NEG
40656: PUSH
40657: EMPTY
40658: LIST
40659: LIST
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: LD_INT 0
40666: PUSH
40667: EMPTY
40668: LIST
40669: LIST
40670: PUSH
40671: LD_INT 3
40673: PUSH
40674: LD_INT 1
40676: NEG
40677: PUSH
40678: EMPTY
40679: LIST
40680: LIST
40681: PUSH
40682: LD_INT 4
40684: PUSH
40685: LD_INT 0
40687: PUSH
40688: EMPTY
40689: LIST
40690: LIST
40691: PUSH
40692: LD_INT 4
40694: PUSH
40695: LD_INT 1
40697: PUSH
40698: EMPTY
40699: LIST
40700: LIST
40701: PUSH
40702: LD_INT 3
40704: PUSH
40705: LD_INT 1
40707: PUSH
40708: EMPTY
40709: LIST
40710: LIST
40711: PUSH
40712: LD_INT 2
40714: PUSH
40715: LD_INT 0
40717: PUSH
40718: EMPTY
40719: LIST
40720: LIST
40721: PUSH
40722: LD_INT 2
40724: PUSH
40725: LD_INT 1
40727: NEG
40728: PUSH
40729: EMPTY
40730: LIST
40731: LIST
40732: PUSH
40733: LD_INT 2
40735: PUSH
40736: LD_INT 2
40738: NEG
40739: PUSH
40740: EMPTY
40741: LIST
40742: LIST
40743: PUSH
40744: LD_INT 4
40746: PUSH
40747: LD_INT 2
40749: PUSH
40750: EMPTY
40751: LIST
40752: LIST
40753: PUSH
40754: LD_INT 4
40756: PUSH
40757: LD_INT 4
40759: PUSH
40760: EMPTY
40761: LIST
40762: LIST
40763: PUSH
40764: LD_INT 4
40766: PUSH
40767: LD_INT 3
40769: PUSH
40770: EMPTY
40771: LIST
40772: LIST
40773: PUSH
40774: LD_INT 5
40776: PUSH
40777: LD_INT 4
40779: PUSH
40780: EMPTY
40781: LIST
40782: LIST
40783: PUSH
40784: LD_INT 5
40786: PUSH
40787: LD_INT 5
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 4
40796: PUSH
40797: LD_INT 5
40799: PUSH
40800: EMPTY
40801: LIST
40802: LIST
40803: PUSH
40804: LD_INT 3
40806: PUSH
40807: LD_INT 4
40809: PUSH
40810: EMPTY
40811: LIST
40812: LIST
40813: PUSH
40814: LD_INT 3
40816: PUSH
40817: LD_INT 3
40819: PUSH
40820: EMPTY
40821: LIST
40822: LIST
40823: PUSH
40824: LD_INT 5
40826: PUSH
40827: LD_INT 3
40829: PUSH
40830: EMPTY
40831: LIST
40832: LIST
40833: PUSH
40834: LD_INT 3
40836: PUSH
40837: LD_INT 5
40839: PUSH
40840: EMPTY
40841: LIST
40842: LIST
40843: PUSH
40844: LD_INT 0
40846: PUSH
40847: LD_INT 3
40849: PUSH
40850: EMPTY
40851: LIST
40852: LIST
40853: PUSH
40854: LD_INT 0
40856: PUSH
40857: LD_INT 2
40859: PUSH
40860: EMPTY
40861: LIST
40862: LIST
40863: PUSH
40864: LD_INT 1
40866: PUSH
40867: LD_INT 3
40869: PUSH
40870: EMPTY
40871: LIST
40872: LIST
40873: PUSH
40874: LD_INT 1
40876: PUSH
40877: LD_INT 4
40879: PUSH
40880: EMPTY
40881: LIST
40882: LIST
40883: PUSH
40884: LD_INT 0
40886: PUSH
40887: LD_INT 4
40889: PUSH
40890: EMPTY
40891: LIST
40892: LIST
40893: PUSH
40894: LD_INT 1
40896: NEG
40897: PUSH
40898: LD_INT 3
40900: PUSH
40901: EMPTY
40902: LIST
40903: LIST
40904: PUSH
40905: LD_INT 1
40907: NEG
40908: PUSH
40909: LD_INT 2
40911: PUSH
40912: EMPTY
40913: LIST
40914: LIST
40915: PUSH
40916: LD_INT 2
40918: PUSH
40919: LD_INT 4
40921: PUSH
40922: EMPTY
40923: LIST
40924: LIST
40925: PUSH
40926: LD_INT 2
40928: NEG
40929: PUSH
40930: LD_INT 2
40932: PUSH
40933: EMPTY
40934: LIST
40935: LIST
40936: PUSH
40937: LD_INT 4
40939: NEG
40940: PUSH
40941: LD_INT 0
40943: PUSH
40944: EMPTY
40945: LIST
40946: LIST
40947: PUSH
40948: LD_INT 4
40950: NEG
40951: PUSH
40952: LD_INT 1
40954: NEG
40955: PUSH
40956: EMPTY
40957: LIST
40958: LIST
40959: PUSH
40960: LD_INT 3
40962: NEG
40963: PUSH
40964: LD_INT 0
40966: PUSH
40967: EMPTY
40968: LIST
40969: LIST
40970: PUSH
40971: LD_INT 3
40973: NEG
40974: PUSH
40975: LD_INT 1
40977: PUSH
40978: EMPTY
40979: LIST
40980: LIST
40981: PUSH
40982: LD_INT 4
40984: NEG
40985: PUSH
40986: LD_INT 1
40988: PUSH
40989: EMPTY
40990: LIST
40991: LIST
40992: PUSH
40993: LD_INT 5
40995: NEG
40996: PUSH
40997: LD_INT 0
40999: PUSH
41000: EMPTY
41001: LIST
41002: LIST
41003: PUSH
41004: LD_INT 5
41006: NEG
41007: PUSH
41008: LD_INT 1
41010: NEG
41011: PUSH
41012: EMPTY
41013: LIST
41014: LIST
41015: PUSH
41016: LD_INT 5
41018: NEG
41019: PUSH
41020: LD_INT 2
41022: NEG
41023: PUSH
41024: EMPTY
41025: LIST
41026: LIST
41027: PUSH
41028: LD_INT 3
41030: NEG
41031: PUSH
41032: LD_INT 2
41034: PUSH
41035: EMPTY
41036: LIST
41037: LIST
41038: PUSH
41039: EMPTY
41040: LIST
41041: LIST
41042: LIST
41043: LIST
41044: LIST
41045: LIST
41046: LIST
41047: LIST
41048: LIST
41049: LIST
41050: LIST
41051: LIST
41052: LIST
41053: LIST
41054: LIST
41055: LIST
41056: LIST
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: LIST
41064: LIST
41065: LIST
41066: LIST
41067: LIST
41068: LIST
41069: LIST
41070: LIST
41071: LIST
41072: LIST
41073: LIST
41074: LIST
41075: LIST
41076: LIST
41077: LIST
41078: LIST
41079: LIST
41080: LIST
41081: LIST
41082: LIST
41083: LIST
41084: LIST
41085: ST_TO_ADDR
// end ; end ;
41086: GO 41089
41088: POP
// case btype of b_depot , b_warehouse :
41089: LD_VAR 0 1
41093: PUSH
41094: LD_INT 0
41096: DOUBLE
41097: EQUAL
41098: IFTRUE 41108
41100: LD_INT 1
41102: DOUBLE
41103: EQUAL
41104: IFTRUE 41108
41106: GO 41309
41108: POP
// case nation of nation_american :
41109: LD_VAR 0 5
41113: PUSH
41114: LD_INT 1
41116: DOUBLE
41117: EQUAL
41118: IFTRUE 41122
41120: GO 41178
41122: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
41123: LD_ADDR_VAR 0 9
41127: PUSH
41128: LD_VAR 0 11
41132: PUSH
41133: LD_VAR 0 12
41137: PUSH
41138: LD_VAR 0 13
41142: PUSH
41143: LD_VAR 0 14
41147: PUSH
41148: LD_VAR 0 15
41152: PUSH
41153: LD_VAR 0 16
41157: PUSH
41158: EMPTY
41159: LIST
41160: LIST
41161: LIST
41162: LIST
41163: LIST
41164: LIST
41165: PUSH
41166: LD_VAR 0 4
41170: PUSH
41171: LD_INT 1
41173: PLUS
41174: ARRAY
41175: ST_TO_ADDR
41176: GO 41307
41178: LD_INT 2
41180: DOUBLE
41181: EQUAL
41182: IFTRUE 41186
41184: GO 41242
41186: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41187: LD_ADDR_VAR 0 9
41191: PUSH
41192: LD_VAR 0 17
41196: PUSH
41197: LD_VAR 0 18
41201: PUSH
41202: LD_VAR 0 19
41206: PUSH
41207: LD_VAR 0 20
41211: PUSH
41212: LD_VAR 0 21
41216: PUSH
41217: LD_VAR 0 22
41221: PUSH
41222: EMPTY
41223: LIST
41224: LIST
41225: LIST
41226: LIST
41227: LIST
41228: LIST
41229: PUSH
41230: LD_VAR 0 4
41234: PUSH
41235: LD_INT 1
41237: PLUS
41238: ARRAY
41239: ST_TO_ADDR
41240: GO 41307
41242: LD_INT 3
41244: DOUBLE
41245: EQUAL
41246: IFTRUE 41250
41248: GO 41306
41250: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41251: LD_ADDR_VAR 0 9
41255: PUSH
41256: LD_VAR 0 23
41260: PUSH
41261: LD_VAR 0 24
41265: PUSH
41266: LD_VAR 0 25
41270: PUSH
41271: LD_VAR 0 26
41275: PUSH
41276: LD_VAR 0 27
41280: PUSH
41281: LD_VAR 0 28
41285: PUSH
41286: EMPTY
41287: LIST
41288: LIST
41289: LIST
41290: LIST
41291: LIST
41292: LIST
41293: PUSH
41294: LD_VAR 0 4
41298: PUSH
41299: LD_INT 1
41301: PLUS
41302: ARRAY
41303: ST_TO_ADDR
41304: GO 41307
41306: POP
41307: GO 41862
41309: LD_INT 2
41311: DOUBLE
41312: EQUAL
41313: IFTRUE 41323
41315: LD_INT 3
41317: DOUBLE
41318: EQUAL
41319: IFTRUE 41323
41321: GO 41379
41323: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41324: LD_ADDR_VAR 0 9
41328: PUSH
41329: LD_VAR 0 29
41333: PUSH
41334: LD_VAR 0 30
41338: PUSH
41339: LD_VAR 0 31
41343: PUSH
41344: LD_VAR 0 32
41348: PUSH
41349: LD_VAR 0 33
41353: PUSH
41354: LD_VAR 0 34
41358: PUSH
41359: EMPTY
41360: LIST
41361: LIST
41362: LIST
41363: LIST
41364: LIST
41365: LIST
41366: PUSH
41367: LD_VAR 0 4
41371: PUSH
41372: LD_INT 1
41374: PLUS
41375: ARRAY
41376: ST_TO_ADDR
41377: GO 41862
41379: LD_INT 16
41381: DOUBLE
41382: EQUAL
41383: IFTRUE 41441
41385: LD_INT 17
41387: DOUBLE
41388: EQUAL
41389: IFTRUE 41441
41391: LD_INT 18
41393: DOUBLE
41394: EQUAL
41395: IFTRUE 41441
41397: LD_INT 19
41399: DOUBLE
41400: EQUAL
41401: IFTRUE 41441
41403: LD_INT 22
41405: DOUBLE
41406: EQUAL
41407: IFTRUE 41441
41409: LD_INT 20
41411: DOUBLE
41412: EQUAL
41413: IFTRUE 41441
41415: LD_INT 21
41417: DOUBLE
41418: EQUAL
41419: IFTRUE 41441
41421: LD_INT 23
41423: DOUBLE
41424: EQUAL
41425: IFTRUE 41441
41427: LD_INT 24
41429: DOUBLE
41430: EQUAL
41431: IFTRUE 41441
41433: LD_INT 25
41435: DOUBLE
41436: EQUAL
41437: IFTRUE 41441
41439: GO 41497
41441: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41442: LD_ADDR_VAR 0 9
41446: PUSH
41447: LD_VAR 0 35
41451: PUSH
41452: LD_VAR 0 36
41456: PUSH
41457: LD_VAR 0 37
41461: PUSH
41462: LD_VAR 0 38
41466: PUSH
41467: LD_VAR 0 39
41471: PUSH
41472: LD_VAR 0 40
41476: PUSH
41477: EMPTY
41478: LIST
41479: LIST
41480: LIST
41481: LIST
41482: LIST
41483: LIST
41484: PUSH
41485: LD_VAR 0 4
41489: PUSH
41490: LD_INT 1
41492: PLUS
41493: ARRAY
41494: ST_TO_ADDR
41495: GO 41862
41497: LD_INT 6
41499: DOUBLE
41500: EQUAL
41501: IFTRUE 41553
41503: LD_INT 7
41505: DOUBLE
41506: EQUAL
41507: IFTRUE 41553
41509: LD_INT 8
41511: DOUBLE
41512: EQUAL
41513: IFTRUE 41553
41515: LD_INT 13
41517: DOUBLE
41518: EQUAL
41519: IFTRUE 41553
41521: LD_INT 12
41523: DOUBLE
41524: EQUAL
41525: IFTRUE 41553
41527: LD_INT 15
41529: DOUBLE
41530: EQUAL
41531: IFTRUE 41553
41533: LD_INT 11
41535: DOUBLE
41536: EQUAL
41537: IFTRUE 41553
41539: LD_INT 14
41541: DOUBLE
41542: EQUAL
41543: IFTRUE 41553
41545: LD_INT 10
41547: DOUBLE
41548: EQUAL
41549: IFTRUE 41553
41551: GO 41609
41553: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41554: LD_ADDR_VAR 0 9
41558: PUSH
41559: LD_VAR 0 41
41563: PUSH
41564: LD_VAR 0 42
41568: PUSH
41569: LD_VAR 0 43
41573: PUSH
41574: LD_VAR 0 44
41578: PUSH
41579: LD_VAR 0 45
41583: PUSH
41584: LD_VAR 0 46
41588: PUSH
41589: EMPTY
41590: LIST
41591: LIST
41592: LIST
41593: LIST
41594: LIST
41595: LIST
41596: PUSH
41597: LD_VAR 0 4
41601: PUSH
41602: LD_INT 1
41604: PLUS
41605: ARRAY
41606: ST_TO_ADDR
41607: GO 41862
41609: LD_INT 36
41611: DOUBLE
41612: EQUAL
41613: IFTRUE 41617
41615: GO 41673
41617: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41618: LD_ADDR_VAR 0 9
41622: PUSH
41623: LD_VAR 0 47
41627: PUSH
41628: LD_VAR 0 48
41632: PUSH
41633: LD_VAR 0 49
41637: PUSH
41638: LD_VAR 0 50
41642: PUSH
41643: LD_VAR 0 51
41647: PUSH
41648: LD_VAR 0 52
41652: PUSH
41653: EMPTY
41654: LIST
41655: LIST
41656: LIST
41657: LIST
41658: LIST
41659: LIST
41660: PUSH
41661: LD_VAR 0 4
41665: PUSH
41666: LD_INT 1
41668: PLUS
41669: ARRAY
41670: ST_TO_ADDR
41671: GO 41862
41673: LD_INT 4
41675: DOUBLE
41676: EQUAL
41677: IFTRUE 41699
41679: LD_INT 5
41681: DOUBLE
41682: EQUAL
41683: IFTRUE 41699
41685: LD_INT 34
41687: DOUBLE
41688: EQUAL
41689: IFTRUE 41699
41691: LD_INT 37
41693: DOUBLE
41694: EQUAL
41695: IFTRUE 41699
41697: GO 41755
41699: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41700: LD_ADDR_VAR 0 9
41704: PUSH
41705: LD_VAR 0 53
41709: PUSH
41710: LD_VAR 0 54
41714: PUSH
41715: LD_VAR 0 55
41719: PUSH
41720: LD_VAR 0 56
41724: PUSH
41725: LD_VAR 0 57
41729: PUSH
41730: LD_VAR 0 58
41734: PUSH
41735: EMPTY
41736: LIST
41737: LIST
41738: LIST
41739: LIST
41740: LIST
41741: LIST
41742: PUSH
41743: LD_VAR 0 4
41747: PUSH
41748: LD_INT 1
41750: PLUS
41751: ARRAY
41752: ST_TO_ADDR
41753: GO 41862
41755: LD_INT 31
41757: DOUBLE
41758: EQUAL
41759: IFTRUE 41805
41761: LD_INT 32
41763: DOUBLE
41764: EQUAL
41765: IFTRUE 41805
41767: LD_INT 33
41769: DOUBLE
41770: EQUAL
41771: IFTRUE 41805
41773: LD_INT 27
41775: DOUBLE
41776: EQUAL
41777: IFTRUE 41805
41779: LD_INT 26
41781: DOUBLE
41782: EQUAL
41783: IFTRUE 41805
41785: LD_INT 28
41787: DOUBLE
41788: EQUAL
41789: IFTRUE 41805
41791: LD_INT 29
41793: DOUBLE
41794: EQUAL
41795: IFTRUE 41805
41797: LD_INT 30
41799: DOUBLE
41800: EQUAL
41801: IFTRUE 41805
41803: GO 41861
41805: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41806: LD_ADDR_VAR 0 9
41810: PUSH
41811: LD_VAR 0 59
41815: PUSH
41816: LD_VAR 0 60
41820: PUSH
41821: LD_VAR 0 61
41825: PUSH
41826: LD_VAR 0 62
41830: PUSH
41831: LD_VAR 0 63
41835: PUSH
41836: LD_VAR 0 64
41840: PUSH
41841: EMPTY
41842: LIST
41843: LIST
41844: LIST
41845: LIST
41846: LIST
41847: LIST
41848: PUSH
41849: LD_VAR 0 4
41853: PUSH
41854: LD_INT 1
41856: PLUS
41857: ARRAY
41858: ST_TO_ADDR
41859: GO 41862
41861: POP
// temp_list2 = [ ] ;
41862: LD_ADDR_VAR 0 10
41866: PUSH
41867: EMPTY
41868: ST_TO_ADDR
// for i in temp_list do
41869: LD_ADDR_VAR 0 8
41873: PUSH
41874: LD_VAR 0 9
41878: PUSH
41879: FOR_IN
41880: IFFALSE 41932
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41882: LD_ADDR_VAR 0 10
41886: PUSH
41887: LD_VAR 0 10
41891: PUSH
41892: LD_VAR 0 8
41896: PUSH
41897: LD_INT 1
41899: ARRAY
41900: PUSH
41901: LD_VAR 0 2
41905: PLUS
41906: PUSH
41907: LD_VAR 0 8
41911: PUSH
41912: LD_INT 2
41914: ARRAY
41915: PUSH
41916: LD_VAR 0 3
41920: PLUS
41921: PUSH
41922: EMPTY
41923: LIST
41924: LIST
41925: PUSH
41926: EMPTY
41927: LIST
41928: ADD
41929: ST_TO_ADDR
41930: GO 41879
41932: POP
41933: POP
// result = temp_list2 ;
41934: LD_ADDR_VAR 0 7
41938: PUSH
41939: LD_VAR 0 10
41943: ST_TO_ADDR
// end ;
41944: LD_VAR 0 7
41948: RET
// export function EnemyInRange ( unit , dist ) ; begin
41949: LD_INT 0
41951: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41952: LD_ADDR_VAR 0 3
41956: PUSH
41957: LD_VAR 0 1
41961: PPUSH
41962: CALL_OW 255
41966: PPUSH
41967: LD_VAR 0 1
41971: PPUSH
41972: CALL_OW 250
41976: PPUSH
41977: LD_VAR 0 1
41981: PPUSH
41982: CALL_OW 251
41986: PPUSH
41987: LD_VAR 0 2
41991: PPUSH
41992: CALL 15345 0 4
41996: PUSH
41997: LD_INT 4
41999: ARRAY
42000: ST_TO_ADDR
// end ;
42001: LD_VAR 0 3
42005: RET
// export function PlayerSeeMe ( unit ) ; begin
42006: LD_INT 0
42008: PPUSH
// result := See ( your_side , unit ) ;
42009: LD_ADDR_VAR 0 2
42013: PUSH
42014: LD_OWVAR 2
42018: PPUSH
42019: LD_VAR 0 1
42023: PPUSH
42024: CALL_OW 292
42028: ST_TO_ADDR
// end ;
42029: LD_VAR 0 2
42033: RET
// export function ReverseDir ( unit ) ; begin
42034: LD_INT 0
42036: PPUSH
// if not unit then
42037: LD_VAR 0 1
42041: NOT
42042: IFFALSE 42046
// exit ;
42044: GO 42069
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
42046: LD_ADDR_VAR 0 2
42050: PUSH
42051: LD_VAR 0 1
42055: PPUSH
42056: CALL_OW 254
42060: PUSH
42061: LD_INT 3
42063: PLUS
42064: PUSH
42065: LD_INT 6
42067: MOD
42068: ST_TO_ADDR
// end ;
42069: LD_VAR 0 2
42073: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
42074: LD_INT 0
42076: PPUSH
42077: PPUSH
42078: PPUSH
42079: PPUSH
42080: PPUSH
// if not hexes then
42081: LD_VAR 0 2
42085: NOT
42086: IFFALSE 42090
// exit ;
42088: GO 42238
// dist := 9999 ;
42090: LD_ADDR_VAR 0 5
42094: PUSH
42095: LD_INT 9999
42097: ST_TO_ADDR
// for i = 1 to hexes do
42098: LD_ADDR_VAR 0 4
42102: PUSH
42103: DOUBLE
42104: LD_INT 1
42106: DEC
42107: ST_TO_ADDR
42108: LD_VAR 0 2
42112: PUSH
42113: FOR_TO
42114: IFFALSE 42226
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
42116: LD_VAR 0 1
42120: PPUSH
42121: LD_VAR 0 2
42125: PUSH
42126: LD_VAR 0 4
42130: ARRAY
42131: PUSH
42132: LD_INT 1
42134: ARRAY
42135: PPUSH
42136: LD_VAR 0 2
42140: PUSH
42141: LD_VAR 0 4
42145: ARRAY
42146: PUSH
42147: LD_INT 2
42149: ARRAY
42150: PPUSH
42151: CALL_OW 297
42155: PUSH
42156: LD_VAR 0 5
42160: LESS
42161: IFFALSE 42224
// begin hex := hexes [ i ] ;
42163: LD_ADDR_VAR 0 7
42167: PUSH
42168: LD_VAR 0 2
42172: PUSH
42173: LD_VAR 0 4
42177: ARRAY
42178: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42179: LD_ADDR_VAR 0 5
42183: PUSH
42184: LD_VAR 0 1
42188: PPUSH
42189: LD_VAR 0 2
42193: PUSH
42194: LD_VAR 0 4
42198: ARRAY
42199: PUSH
42200: LD_INT 1
42202: ARRAY
42203: PPUSH
42204: LD_VAR 0 2
42208: PUSH
42209: LD_VAR 0 4
42213: ARRAY
42214: PUSH
42215: LD_INT 2
42217: ARRAY
42218: PPUSH
42219: CALL_OW 297
42223: ST_TO_ADDR
// end ; end ;
42224: GO 42113
42226: POP
42227: POP
// result := hex ;
42228: LD_ADDR_VAR 0 3
42232: PUSH
42233: LD_VAR 0 7
42237: ST_TO_ADDR
// end ;
42238: LD_VAR 0 3
42242: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42243: LD_INT 0
42245: PPUSH
42246: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42247: LD_VAR 0 1
42251: NOT
42252: PUSH
42253: LD_VAR 0 1
42257: PUSH
42258: LD_INT 21
42260: PUSH
42261: LD_INT 2
42263: PUSH
42264: EMPTY
42265: LIST
42266: LIST
42267: PUSH
42268: LD_INT 23
42270: PUSH
42271: LD_INT 2
42273: PUSH
42274: EMPTY
42275: LIST
42276: LIST
42277: PUSH
42278: EMPTY
42279: LIST
42280: LIST
42281: PPUSH
42282: CALL_OW 69
42286: IN
42287: NOT
42288: OR
42289: IFFALSE 42293
// exit ;
42291: GO 42340
// for i = 1 to 3 do
42293: LD_ADDR_VAR 0 3
42297: PUSH
42298: DOUBLE
42299: LD_INT 1
42301: DEC
42302: ST_TO_ADDR
42303: LD_INT 3
42305: PUSH
42306: FOR_TO
42307: IFFALSE 42338
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42309: LD_VAR 0 1
42313: PPUSH
42314: CALL_OW 250
42318: PPUSH
42319: LD_VAR 0 1
42323: PPUSH
42324: CALL_OW 251
42328: PPUSH
42329: LD_INT 1
42331: PPUSH
42332: CALL_OW 453
42336: GO 42306
42338: POP
42339: POP
// end ;
42340: LD_VAR 0 2
42344: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42345: LD_INT 0
42347: PPUSH
42348: PPUSH
42349: PPUSH
42350: PPUSH
42351: PPUSH
42352: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42353: LD_VAR 0 1
42357: NOT
42358: PUSH
42359: LD_VAR 0 2
42363: NOT
42364: OR
42365: PUSH
42366: LD_VAR 0 1
42370: PPUSH
42371: CALL_OW 314
42375: OR
42376: IFFALSE 42380
// exit ;
42378: GO 42821
// x := GetX ( enemy_unit ) ;
42380: LD_ADDR_VAR 0 7
42384: PUSH
42385: LD_VAR 0 2
42389: PPUSH
42390: CALL_OW 250
42394: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42395: LD_ADDR_VAR 0 8
42399: PUSH
42400: LD_VAR 0 2
42404: PPUSH
42405: CALL_OW 251
42409: ST_TO_ADDR
// if not x or not y then
42410: LD_VAR 0 7
42414: NOT
42415: PUSH
42416: LD_VAR 0 8
42420: NOT
42421: OR
42422: IFFALSE 42426
// exit ;
42424: GO 42821
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42426: LD_ADDR_VAR 0 6
42430: PUSH
42431: LD_VAR 0 7
42435: PPUSH
42436: LD_INT 0
42438: PPUSH
42439: LD_INT 4
42441: PPUSH
42442: CALL_OW 272
42446: PUSH
42447: LD_VAR 0 8
42451: PPUSH
42452: LD_INT 0
42454: PPUSH
42455: LD_INT 4
42457: PPUSH
42458: CALL_OW 273
42462: PUSH
42463: EMPTY
42464: LIST
42465: LIST
42466: PUSH
42467: LD_VAR 0 7
42471: PPUSH
42472: LD_INT 1
42474: PPUSH
42475: LD_INT 4
42477: PPUSH
42478: CALL_OW 272
42482: PUSH
42483: LD_VAR 0 8
42487: PPUSH
42488: LD_INT 1
42490: PPUSH
42491: LD_INT 4
42493: PPUSH
42494: CALL_OW 273
42498: PUSH
42499: EMPTY
42500: LIST
42501: LIST
42502: PUSH
42503: LD_VAR 0 7
42507: PPUSH
42508: LD_INT 2
42510: PPUSH
42511: LD_INT 4
42513: PPUSH
42514: CALL_OW 272
42518: PUSH
42519: LD_VAR 0 8
42523: PPUSH
42524: LD_INT 2
42526: PPUSH
42527: LD_INT 4
42529: PPUSH
42530: CALL_OW 273
42534: PUSH
42535: EMPTY
42536: LIST
42537: LIST
42538: PUSH
42539: LD_VAR 0 7
42543: PPUSH
42544: LD_INT 3
42546: PPUSH
42547: LD_INT 4
42549: PPUSH
42550: CALL_OW 272
42554: PUSH
42555: LD_VAR 0 8
42559: PPUSH
42560: LD_INT 3
42562: PPUSH
42563: LD_INT 4
42565: PPUSH
42566: CALL_OW 273
42570: PUSH
42571: EMPTY
42572: LIST
42573: LIST
42574: PUSH
42575: LD_VAR 0 7
42579: PPUSH
42580: LD_INT 4
42582: PPUSH
42583: LD_INT 4
42585: PPUSH
42586: CALL_OW 272
42590: PUSH
42591: LD_VAR 0 8
42595: PPUSH
42596: LD_INT 4
42598: PPUSH
42599: LD_INT 4
42601: PPUSH
42602: CALL_OW 273
42606: PUSH
42607: EMPTY
42608: LIST
42609: LIST
42610: PUSH
42611: LD_VAR 0 7
42615: PPUSH
42616: LD_INT 5
42618: PPUSH
42619: LD_INT 4
42621: PPUSH
42622: CALL_OW 272
42626: PUSH
42627: LD_VAR 0 8
42631: PPUSH
42632: LD_INT 5
42634: PPUSH
42635: LD_INT 4
42637: PPUSH
42638: CALL_OW 273
42642: PUSH
42643: EMPTY
42644: LIST
42645: LIST
42646: PUSH
42647: EMPTY
42648: LIST
42649: LIST
42650: LIST
42651: LIST
42652: LIST
42653: LIST
42654: ST_TO_ADDR
// for i = tmp downto 1 do
42655: LD_ADDR_VAR 0 4
42659: PUSH
42660: DOUBLE
42661: LD_VAR 0 6
42665: INC
42666: ST_TO_ADDR
42667: LD_INT 1
42669: PUSH
42670: FOR_DOWNTO
42671: IFFALSE 42772
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42673: LD_VAR 0 6
42677: PUSH
42678: LD_VAR 0 4
42682: ARRAY
42683: PUSH
42684: LD_INT 1
42686: ARRAY
42687: PPUSH
42688: LD_VAR 0 6
42692: PUSH
42693: LD_VAR 0 4
42697: ARRAY
42698: PUSH
42699: LD_INT 2
42701: ARRAY
42702: PPUSH
42703: CALL_OW 488
42707: NOT
42708: PUSH
42709: LD_VAR 0 6
42713: PUSH
42714: LD_VAR 0 4
42718: ARRAY
42719: PUSH
42720: LD_INT 1
42722: ARRAY
42723: PPUSH
42724: LD_VAR 0 6
42728: PUSH
42729: LD_VAR 0 4
42733: ARRAY
42734: PUSH
42735: LD_INT 2
42737: ARRAY
42738: PPUSH
42739: CALL_OW 428
42743: PUSH
42744: LD_INT 0
42746: NONEQUAL
42747: OR
42748: IFFALSE 42770
// tmp := Delete ( tmp , i ) ;
42750: LD_ADDR_VAR 0 6
42754: PUSH
42755: LD_VAR 0 6
42759: PPUSH
42760: LD_VAR 0 4
42764: PPUSH
42765: CALL_OW 3
42769: ST_TO_ADDR
42770: GO 42670
42772: POP
42773: POP
// j := GetClosestHex ( unit , tmp ) ;
42774: LD_ADDR_VAR 0 5
42778: PUSH
42779: LD_VAR 0 1
42783: PPUSH
42784: LD_VAR 0 6
42788: PPUSH
42789: CALL 42074 0 2
42793: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42794: LD_VAR 0 1
42798: PPUSH
42799: LD_VAR 0 5
42803: PUSH
42804: LD_INT 1
42806: ARRAY
42807: PPUSH
42808: LD_VAR 0 5
42812: PUSH
42813: LD_INT 2
42815: ARRAY
42816: PPUSH
42817: CALL_OW 111
// end ;
42821: LD_VAR 0 3
42825: RET
// export function PrepareApemanSoldier ( ) ; begin
42826: LD_INT 0
42828: PPUSH
// uc_nation := 0 ;
42829: LD_ADDR_OWVAR 21
42833: PUSH
42834: LD_INT 0
42836: ST_TO_ADDR
// hc_sex := sex_male ;
42837: LD_ADDR_OWVAR 27
42841: PUSH
42842: LD_INT 1
42844: ST_TO_ADDR
// hc_class := class_apeman_soldier ;
42845: LD_ADDR_OWVAR 28
42849: PUSH
42850: LD_INT 15
42852: ST_TO_ADDR
// hc_gallery :=  ;
42853: LD_ADDR_OWVAR 33
42857: PUSH
42858: LD_STRING 
42860: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42861: LD_ADDR_OWVAR 31
42865: PUSH
42866: LD_INT 0
42868: PPUSH
42869: LD_INT 3
42871: PPUSH
42872: CALL_OW 12
42876: PUSH
42877: LD_INT 0
42879: PPUSH
42880: LD_INT 3
42882: PPUSH
42883: CALL_OW 12
42887: PUSH
42888: LD_INT 0
42890: PUSH
42891: LD_INT 0
42893: PUSH
42894: EMPTY
42895: LIST
42896: LIST
42897: LIST
42898: LIST
42899: ST_TO_ADDR
// end ;
42900: LD_VAR 0 1
42904: RET
// export function PrepareApemanEngineer ( ) ; begin
42905: LD_INT 0
42907: PPUSH
// uc_nation := 0 ;
42908: LD_ADDR_OWVAR 21
42912: PUSH
42913: LD_INT 0
42915: ST_TO_ADDR
// hc_sex := sex_male ;
42916: LD_ADDR_OWVAR 27
42920: PUSH
42921: LD_INT 1
42923: ST_TO_ADDR
// hc_class := class_apeman_engineer ;
42924: LD_ADDR_OWVAR 28
42928: PUSH
42929: LD_INT 16
42931: ST_TO_ADDR
// hc_gallery :=  ;
42932: LD_ADDR_OWVAR 33
42936: PUSH
42937: LD_STRING 
42939: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
42940: LD_ADDR_OWVAR 31
42944: PUSH
42945: LD_INT 0
42947: PPUSH
42948: LD_INT 3
42950: PPUSH
42951: CALL_OW 12
42955: PUSH
42956: LD_INT 0
42958: PPUSH
42959: LD_INT 3
42961: PPUSH
42962: CALL_OW 12
42966: PUSH
42967: LD_INT 0
42969: PUSH
42970: LD_INT 0
42972: PUSH
42973: EMPTY
42974: LIST
42975: LIST
42976: LIST
42977: LIST
42978: ST_TO_ADDR
// end ;
42979: LD_VAR 0 1
42983: RET
// export function PrepareApeman ( agressivity ) ; begin
42984: LD_INT 0
42986: PPUSH
// uc_side := 0 ;
42987: LD_ADDR_OWVAR 20
42991: PUSH
42992: LD_INT 0
42994: ST_TO_ADDR
// uc_nation := 0 ;
42995: LD_ADDR_OWVAR 21
42999: PUSH
43000: LD_INT 0
43002: ST_TO_ADDR
// hc_sex := sex_male ;
43003: LD_ADDR_OWVAR 27
43007: PUSH
43008: LD_INT 1
43010: ST_TO_ADDR
// hc_class := class_apeman ;
43011: LD_ADDR_OWVAR 28
43015: PUSH
43016: LD_INT 12
43018: ST_TO_ADDR
// hc_gallery :=  ;
43019: LD_ADDR_OWVAR 33
43023: PUSH
43024: LD_STRING 
43026: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43027: LD_ADDR_OWVAR 35
43031: PUSH
43032: LD_VAR 0 1
43036: NEG
43037: PPUSH
43038: LD_VAR 0 1
43042: PPUSH
43043: CALL_OW 12
43047: ST_TO_ADDR
// hc_skills := [ rand ( 0 , 3 ) , rand ( 0 , 3 ) , 0 , 0 ] ;
43048: LD_ADDR_OWVAR 31
43052: PUSH
43053: LD_INT 0
43055: PPUSH
43056: LD_INT 3
43058: PPUSH
43059: CALL_OW 12
43063: PUSH
43064: LD_INT 0
43066: PPUSH
43067: LD_INT 3
43069: PPUSH
43070: CALL_OW 12
43074: PUSH
43075: LD_INT 0
43077: PUSH
43078: LD_INT 0
43080: PUSH
43081: EMPTY
43082: LIST
43083: LIST
43084: LIST
43085: LIST
43086: ST_TO_ADDR
// end ;
43087: LD_VAR 0 2
43091: RET
// export function PrepareTiger ( agressivity ) ; begin
43092: LD_INT 0
43094: PPUSH
// uc_side := 0 ;
43095: LD_ADDR_OWVAR 20
43099: PUSH
43100: LD_INT 0
43102: ST_TO_ADDR
// uc_nation := 0 ;
43103: LD_ADDR_OWVAR 21
43107: PUSH
43108: LD_INT 0
43110: ST_TO_ADDR
// hc_class := class_tiger ;
43111: LD_ADDR_OWVAR 28
43115: PUSH
43116: LD_INT 14
43118: ST_TO_ADDR
// hc_gallery :=  ;
43119: LD_ADDR_OWVAR 33
43123: PUSH
43124: LD_STRING 
43126: ST_TO_ADDR
// hc_agressivity := rand ( - agressivity , agressivity ) ;
43127: LD_ADDR_OWVAR 35
43131: PUSH
43132: LD_VAR 0 1
43136: NEG
43137: PPUSH
43138: LD_VAR 0 1
43142: PPUSH
43143: CALL_OW 12
43147: ST_TO_ADDR
// end ;
43148: LD_VAR 0 2
43152: RET
// export function PrepareEnchidna ( ) ; begin
43153: LD_INT 0
43155: PPUSH
// uc_side := 0 ;
43156: LD_ADDR_OWVAR 20
43160: PUSH
43161: LD_INT 0
43163: ST_TO_ADDR
// uc_nation := 0 ;
43164: LD_ADDR_OWVAR 21
43168: PUSH
43169: LD_INT 0
43171: ST_TO_ADDR
// hc_class := class_baggie ;
43172: LD_ADDR_OWVAR 28
43176: PUSH
43177: LD_INT 13
43179: ST_TO_ADDR
// hc_gallery :=  ;
43180: LD_ADDR_OWVAR 33
43184: PUSH
43185: LD_STRING 
43187: ST_TO_ADDR
// end ;
43188: LD_VAR 0 1
43192: RET
// export function PrepareFrog ( ) ; begin
43193: LD_INT 0
43195: PPUSH
// uc_side := 0 ;
43196: LD_ADDR_OWVAR 20
43200: PUSH
43201: LD_INT 0
43203: ST_TO_ADDR
// uc_nation := 0 ;
43204: LD_ADDR_OWVAR 21
43208: PUSH
43209: LD_INT 0
43211: ST_TO_ADDR
// hc_class := class_frog ;
43212: LD_ADDR_OWVAR 28
43216: PUSH
43217: LD_INT 19
43219: ST_TO_ADDR
// hc_gallery :=  ;
43220: LD_ADDR_OWVAR 33
43224: PUSH
43225: LD_STRING 
43227: ST_TO_ADDR
// end ;
43228: LD_VAR 0 1
43232: RET
// export function PrepareFish ( ) ; begin
43233: LD_INT 0
43235: PPUSH
// uc_side := 0 ;
43236: LD_ADDR_OWVAR 20
43240: PUSH
43241: LD_INT 0
43243: ST_TO_ADDR
// uc_nation := 0 ;
43244: LD_ADDR_OWVAR 21
43248: PUSH
43249: LD_INT 0
43251: ST_TO_ADDR
// hc_class := class_fish ;
43252: LD_ADDR_OWVAR 28
43256: PUSH
43257: LD_INT 20
43259: ST_TO_ADDR
// hc_gallery :=  ;
43260: LD_ADDR_OWVAR 33
43264: PUSH
43265: LD_STRING 
43267: ST_TO_ADDR
// end ;
43268: LD_VAR 0 1
43272: RET
// export function PrepareBird ( ) ; begin
43273: LD_INT 0
43275: PPUSH
// uc_side := 0 ;
43276: LD_ADDR_OWVAR 20
43280: PUSH
43281: LD_INT 0
43283: ST_TO_ADDR
// uc_nation := 0 ;
43284: LD_ADDR_OWVAR 21
43288: PUSH
43289: LD_INT 0
43291: ST_TO_ADDR
// hc_class := class_phororhacos ;
43292: LD_ADDR_OWVAR 28
43296: PUSH
43297: LD_INT 18
43299: ST_TO_ADDR
// hc_gallery :=  ;
43300: LD_ADDR_OWVAR 33
43304: PUSH
43305: LD_STRING 
43307: ST_TO_ADDR
// end ;
43308: LD_VAR 0 1
43312: RET
// export function PrepareHorse ( ) ; begin
43313: LD_INT 0
43315: PPUSH
// uc_side := 0 ;
43316: LD_ADDR_OWVAR 20
43320: PUSH
43321: LD_INT 0
43323: ST_TO_ADDR
// uc_nation := 0 ;
43324: LD_ADDR_OWVAR 21
43328: PUSH
43329: LD_INT 0
43331: ST_TO_ADDR
// hc_class := 21 ;
43332: LD_ADDR_OWVAR 28
43336: PUSH
43337: LD_INT 21
43339: ST_TO_ADDR
// hc_gallery :=  ;
43340: LD_ADDR_OWVAR 33
43344: PUSH
43345: LD_STRING 
43347: ST_TO_ADDR
// end ;
43348: LD_VAR 0 1
43352: RET
// export function PrepareMastodont ( ) ; begin
43353: LD_INT 0
43355: PPUSH
// uc_side := 0 ;
43356: LD_ADDR_OWVAR 20
43360: PUSH
43361: LD_INT 0
43363: ST_TO_ADDR
// uc_nation := 0 ;
43364: LD_ADDR_OWVAR 21
43368: PUSH
43369: LD_INT 0
43371: ST_TO_ADDR
// vc_chassis := 31 ;
43372: LD_ADDR_OWVAR 37
43376: PUSH
43377: LD_INT 31
43379: ST_TO_ADDR
// vc_control := control_rider ;
43380: LD_ADDR_OWVAR 38
43384: PUSH
43385: LD_INT 4
43387: ST_TO_ADDR
// end ;
43388: LD_VAR 0 1
43392: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
43393: LD_INT 0
43395: PPUSH
43396: PPUSH
43397: PPUSH
// uc_side = 0 ;
43398: LD_ADDR_OWVAR 20
43402: PUSH
43403: LD_INT 0
43405: ST_TO_ADDR
// uc_nation = 0 ;
43406: LD_ADDR_OWVAR 21
43410: PUSH
43411: LD_INT 0
43413: ST_TO_ADDR
// InitHc_All ( ) ;
43414: CALL_OW 584
// InitVc ;
43418: CALL_OW 20
// if mastodonts then
43422: LD_VAR 0 6
43426: IFFALSE 43493
// for i = 1 to mastodonts do
43428: LD_ADDR_VAR 0 11
43432: PUSH
43433: DOUBLE
43434: LD_INT 1
43436: DEC
43437: ST_TO_ADDR
43438: LD_VAR 0 6
43442: PUSH
43443: FOR_TO
43444: IFFALSE 43491
// begin vc_chassis := 31 ;
43446: LD_ADDR_OWVAR 37
43450: PUSH
43451: LD_INT 31
43453: ST_TO_ADDR
// vc_control := control_rider ;
43454: LD_ADDR_OWVAR 38
43458: PUSH
43459: LD_INT 4
43461: ST_TO_ADDR
// animal := CreateVehicle ;
43462: LD_ADDR_VAR 0 12
43466: PUSH
43467: CALL_OW 45
43471: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43472: LD_VAR 0 12
43476: PPUSH
43477: LD_VAR 0 8
43481: PPUSH
43482: LD_INT 0
43484: PPUSH
43485: CALL 45628 0 3
// end ;
43489: GO 43443
43491: POP
43492: POP
// if horses then
43493: LD_VAR 0 5
43497: IFFALSE 43564
// for i = 1 to horses do
43499: LD_ADDR_VAR 0 11
43503: PUSH
43504: DOUBLE
43505: LD_INT 1
43507: DEC
43508: ST_TO_ADDR
43509: LD_VAR 0 5
43513: PUSH
43514: FOR_TO
43515: IFFALSE 43562
// begin hc_class := 21 ;
43517: LD_ADDR_OWVAR 28
43521: PUSH
43522: LD_INT 21
43524: ST_TO_ADDR
// hc_gallery :=  ;
43525: LD_ADDR_OWVAR 33
43529: PUSH
43530: LD_STRING 
43532: ST_TO_ADDR
// animal := CreateHuman ;
43533: LD_ADDR_VAR 0 12
43537: PUSH
43538: CALL_OW 44
43542: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43543: LD_VAR 0 12
43547: PPUSH
43548: LD_VAR 0 8
43552: PPUSH
43553: LD_INT 0
43555: PPUSH
43556: CALL 45628 0 3
// end ;
43560: GO 43514
43562: POP
43563: POP
// if birds then
43564: LD_VAR 0 1
43568: IFFALSE 43635
// for i = 1 to birds do
43570: LD_ADDR_VAR 0 11
43574: PUSH
43575: DOUBLE
43576: LD_INT 1
43578: DEC
43579: ST_TO_ADDR
43580: LD_VAR 0 1
43584: PUSH
43585: FOR_TO
43586: IFFALSE 43633
// begin hc_class = 18 ;
43588: LD_ADDR_OWVAR 28
43592: PUSH
43593: LD_INT 18
43595: ST_TO_ADDR
// hc_gallery =  ;
43596: LD_ADDR_OWVAR 33
43600: PUSH
43601: LD_STRING 
43603: ST_TO_ADDR
// animal := CreateHuman ;
43604: LD_ADDR_VAR 0 12
43608: PUSH
43609: CALL_OW 44
43613: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43614: LD_VAR 0 12
43618: PPUSH
43619: LD_VAR 0 8
43623: PPUSH
43624: LD_INT 0
43626: PPUSH
43627: CALL 45628 0 3
// end ;
43631: GO 43585
43633: POP
43634: POP
// if tigers then
43635: LD_VAR 0 2
43639: IFFALSE 43723
// for i = 1 to tigers do
43641: LD_ADDR_VAR 0 11
43645: PUSH
43646: DOUBLE
43647: LD_INT 1
43649: DEC
43650: ST_TO_ADDR
43651: LD_VAR 0 2
43655: PUSH
43656: FOR_TO
43657: IFFALSE 43721
// begin hc_class = class_tiger ;
43659: LD_ADDR_OWVAR 28
43663: PUSH
43664: LD_INT 14
43666: ST_TO_ADDR
// hc_gallery =  ;
43667: LD_ADDR_OWVAR 33
43671: PUSH
43672: LD_STRING 
43674: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
43675: LD_ADDR_OWVAR 35
43679: PUSH
43680: LD_INT 7
43682: NEG
43683: PPUSH
43684: LD_INT 7
43686: PPUSH
43687: CALL_OW 12
43691: ST_TO_ADDR
// animal := CreateHuman ;
43692: LD_ADDR_VAR 0 12
43696: PUSH
43697: CALL_OW 44
43701: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43702: LD_VAR 0 12
43706: PPUSH
43707: LD_VAR 0 8
43711: PPUSH
43712: LD_INT 0
43714: PPUSH
43715: CALL 45628 0 3
// end ;
43719: GO 43656
43721: POP
43722: POP
// if apemans then
43723: LD_VAR 0 3
43727: IFFALSE 43850
// for i = 1 to apemans do
43729: LD_ADDR_VAR 0 11
43733: PUSH
43734: DOUBLE
43735: LD_INT 1
43737: DEC
43738: ST_TO_ADDR
43739: LD_VAR 0 3
43743: PUSH
43744: FOR_TO
43745: IFFALSE 43848
// begin hc_class = class_apeman ;
43747: LD_ADDR_OWVAR 28
43751: PUSH
43752: LD_INT 12
43754: ST_TO_ADDR
// hc_gallery =  ;
43755: LD_ADDR_OWVAR 33
43759: PUSH
43760: LD_STRING 
43762: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43763: LD_ADDR_OWVAR 35
43767: PUSH
43768: LD_INT 2
43770: NEG
43771: PPUSH
43772: LD_INT 2
43774: PPUSH
43775: CALL_OW 12
43779: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43780: LD_ADDR_OWVAR 31
43784: PUSH
43785: LD_INT 1
43787: PPUSH
43788: LD_INT 3
43790: PPUSH
43791: CALL_OW 12
43795: PUSH
43796: LD_INT 1
43798: PPUSH
43799: LD_INT 3
43801: PPUSH
43802: CALL_OW 12
43806: PUSH
43807: LD_INT 0
43809: PUSH
43810: LD_INT 0
43812: PUSH
43813: EMPTY
43814: LIST
43815: LIST
43816: LIST
43817: LIST
43818: ST_TO_ADDR
// animal := CreateHuman ;
43819: LD_ADDR_VAR 0 12
43823: PUSH
43824: CALL_OW 44
43828: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43829: LD_VAR 0 12
43833: PPUSH
43834: LD_VAR 0 8
43838: PPUSH
43839: LD_INT 0
43841: PPUSH
43842: CALL 45628 0 3
// end ;
43846: GO 43744
43848: POP
43849: POP
// if enchidnas then
43850: LD_VAR 0 4
43854: IFFALSE 43921
// for i = 1 to enchidnas do
43856: LD_ADDR_VAR 0 11
43860: PUSH
43861: DOUBLE
43862: LD_INT 1
43864: DEC
43865: ST_TO_ADDR
43866: LD_VAR 0 4
43870: PUSH
43871: FOR_TO
43872: IFFALSE 43919
// begin hc_class = 13 ;
43874: LD_ADDR_OWVAR 28
43878: PUSH
43879: LD_INT 13
43881: ST_TO_ADDR
// hc_gallery =  ;
43882: LD_ADDR_OWVAR 33
43886: PUSH
43887: LD_STRING 
43889: ST_TO_ADDR
// animal := CreateHuman ;
43890: LD_ADDR_VAR 0 12
43894: PUSH
43895: CALL_OW 44
43899: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43900: LD_VAR 0 12
43904: PPUSH
43905: LD_VAR 0 8
43909: PPUSH
43910: LD_INT 0
43912: PPUSH
43913: CALL 45628 0 3
// end ;
43917: GO 43871
43919: POP
43920: POP
// if fishes then
43921: LD_VAR 0 7
43925: IFFALSE 43992
// for i = 1 to fishes do
43927: LD_ADDR_VAR 0 11
43931: PUSH
43932: DOUBLE
43933: LD_INT 1
43935: DEC
43936: ST_TO_ADDR
43937: LD_VAR 0 7
43941: PUSH
43942: FOR_TO
43943: IFFALSE 43990
// begin hc_class = 20 ;
43945: LD_ADDR_OWVAR 28
43949: PUSH
43950: LD_INT 20
43952: ST_TO_ADDR
// hc_gallery =  ;
43953: LD_ADDR_OWVAR 33
43957: PUSH
43958: LD_STRING 
43960: ST_TO_ADDR
// animal := CreateHuman ;
43961: LD_ADDR_VAR 0 12
43965: PUSH
43966: CALL_OW 44
43970: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43971: LD_VAR 0 12
43975: PPUSH
43976: LD_VAR 0 9
43980: PPUSH
43981: LD_INT 0
43983: PPUSH
43984: CALL 45628 0 3
// end ;
43988: GO 43942
43990: POP
43991: POP
// end ;
43992: LD_VAR 0 10
43996: RET
// export function WantHeal ( sci , unit ) ; begin
43997: LD_INT 0
43999: PPUSH
// if GetTaskList ( sci ) > 0 then
44000: LD_VAR 0 1
44004: PPUSH
44005: CALL_OW 437
44009: PUSH
44010: LD_INT 0
44012: GREATER
44013: IFFALSE 44083
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
44015: LD_VAR 0 1
44019: PPUSH
44020: CALL_OW 437
44024: PUSH
44025: LD_INT 1
44027: ARRAY
44028: PUSH
44029: LD_INT 1
44031: ARRAY
44032: PUSH
44033: LD_STRING l
44035: EQUAL
44036: PUSH
44037: LD_VAR 0 1
44041: PPUSH
44042: CALL_OW 437
44046: PUSH
44047: LD_INT 1
44049: ARRAY
44050: PUSH
44051: LD_INT 4
44053: ARRAY
44054: PUSH
44055: LD_VAR 0 2
44059: EQUAL
44060: AND
44061: IFFALSE 44073
// result := true else
44063: LD_ADDR_VAR 0 3
44067: PUSH
44068: LD_INT 1
44070: ST_TO_ADDR
44071: GO 44081
// result := false ;
44073: LD_ADDR_VAR 0 3
44077: PUSH
44078: LD_INT 0
44080: ST_TO_ADDR
// end else
44081: GO 44091
// result := false ;
44083: LD_ADDR_VAR 0 3
44087: PUSH
44088: LD_INT 0
44090: ST_TO_ADDR
// end ;
44091: LD_VAR 0 3
44095: RET
// export function HealTarget ( sci ) ; begin
44096: LD_INT 0
44098: PPUSH
// if not sci then
44099: LD_VAR 0 1
44103: NOT
44104: IFFALSE 44108
// exit ;
44106: GO 44173
// result := 0 ;
44108: LD_ADDR_VAR 0 2
44112: PUSH
44113: LD_INT 0
44115: ST_TO_ADDR
// if GetTaskList ( sci ) then
44116: LD_VAR 0 1
44120: PPUSH
44121: CALL_OW 437
44125: IFFALSE 44173
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
44127: LD_VAR 0 1
44131: PPUSH
44132: CALL_OW 437
44136: PUSH
44137: LD_INT 1
44139: ARRAY
44140: PUSH
44141: LD_INT 1
44143: ARRAY
44144: PUSH
44145: LD_STRING l
44147: EQUAL
44148: IFFALSE 44173
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
44150: LD_ADDR_VAR 0 2
44154: PUSH
44155: LD_VAR 0 1
44159: PPUSH
44160: CALL_OW 437
44164: PUSH
44165: LD_INT 1
44167: ARRAY
44168: PUSH
44169: LD_INT 4
44171: ARRAY
44172: ST_TO_ADDR
// end ;
44173: LD_VAR 0 2
44177: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
44178: LD_INT 0
44180: PPUSH
44181: PPUSH
44182: PPUSH
44183: PPUSH
// if not base_units then
44184: LD_VAR 0 1
44188: NOT
44189: IFFALSE 44193
// exit ;
44191: GO 44280
// result := false ;
44193: LD_ADDR_VAR 0 2
44197: PUSH
44198: LD_INT 0
44200: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
44201: LD_ADDR_VAR 0 5
44205: PUSH
44206: LD_VAR 0 1
44210: PPUSH
44211: LD_INT 21
44213: PUSH
44214: LD_INT 3
44216: PUSH
44217: EMPTY
44218: LIST
44219: LIST
44220: PPUSH
44221: CALL_OW 72
44225: ST_TO_ADDR
// if not tmp then
44226: LD_VAR 0 5
44230: NOT
44231: IFFALSE 44235
// exit ;
44233: GO 44280
// for i in tmp do
44235: LD_ADDR_VAR 0 3
44239: PUSH
44240: LD_VAR 0 5
44244: PUSH
44245: FOR_IN
44246: IFFALSE 44278
// begin result := EnemyInRange ( i , 22 ) ;
44248: LD_ADDR_VAR 0 2
44252: PUSH
44253: LD_VAR 0 3
44257: PPUSH
44258: LD_INT 22
44260: PPUSH
44261: CALL 41949 0 2
44265: ST_TO_ADDR
// if result then
44266: LD_VAR 0 2
44270: IFFALSE 44276
// exit ;
44272: POP
44273: POP
44274: GO 44280
// end ;
44276: GO 44245
44278: POP
44279: POP
// end ;
44280: LD_VAR 0 2
44284: RET
// export function FilterByTag ( units , tag ) ; begin
44285: LD_INT 0
44287: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
44288: LD_ADDR_VAR 0 3
44292: PUSH
44293: LD_VAR 0 1
44297: PPUSH
44298: LD_INT 120
44300: PUSH
44301: LD_VAR 0 2
44305: PUSH
44306: EMPTY
44307: LIST
44308: LIST
44309: PPUSH
44310: CALL_OW 72
44314: ST_TO_ADDR
// end ;
44315: LD_VAR 0 3
44319: RET
// export function IsDriver ( un ) ; begin
44320: LD_INT 0
44322: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
44323: LD_ADDR_VAR 0 2
44327: PUSH
44328: LD_VAR 0 1
44332: PUSH
44333: LD_INT 55
44335: PUSH
44336: EMPTY
44337: LIST
44338: PPUSH
44339: CALL_OW 69
44343: IN
44344: ST_TO_ADDR
// end ;
44345: LD_VAR 0 2
44349: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
44350: LD_INT 0
44352: PPUSH
44353: PPUSH
// list := [ ] ;
44354: LD_ADDR_VAR 0 5
44358: PUSH
44359: EMPTY
44360: ST_TO_ADDR
// case d of 0 :
44361: LD_VAR 0 3
44365: PUSH
44366: LD_INT 0
44368: DOUBLE
44369: EQUAL
44370: IFTRUE 44374
44372: GO 44507
44374: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
44375: LD_ADDR_VAR 0 5
44379: PUSH
44380: LD_VAR 0 1
44384: PUSH
44385: LD_INT 4
44387: MINUS
44388: PUSH
44389: LD_VAR 0 2
44393: PUSH
44394: LD_INT 4
44396: MINUS
44397: PUSH
44398: LD_INT 2
44400: PUSH
44401: EMPTY
44402: LIST
44403: LIST
44404: LIST
44405: PUSH
44406: LD_VAR 0 1
44410: PUSH
44411: LD_INT 3
44413: MINUS
44414: PUSH
44415: LD_VAR 0 2
44419: PUSH
44420: LD_INT 1
44422: PUSH
44423: EMPTY
44424: LIST
44425: LIST
44426: LIST
44427: PUSH
44428: LD_VAR 0 1
44432: PUSH
44433: LD_INT 4
44435: PLUS
44436: PUSH
44437: LD_VAR 0 2
44441: PUSH
44442: LD_INT 4
44444: PUSH
44445: EMPTY
44446: LIST
44447: LIST
44448: LIST
44449: PUSH
44450: LD_VAR 0 1
44454: PUSH
44455: LD_INT 3
44457: PLUS
44458: PUSH
44459: LD_VAR 0 2
44463: PUSH
44464: LD_INT 3
44466: PLUS
44467: PUSH
44468: LD_INT 5
44470: PUSH
44471: EMPTY
44472: LIST
44473: LIST
44474: LIST
44475: PUSH
44476: LD_VAR 0 1
44480: PUSH
44481: LD_VAR 0 2
44485: PUSH
44486: LD_INT 4
44488: PLUS
44489: PUSH
44490: LD_INT 0
44492: PUSH
44493: EMPTY
44494: LIST
44495: LIST
44496: LIST
44497: PUSH
44498: EMPTY
44499: LIST
44500: LIST
44501: LIST
44502: LIST
44503: LIST
44504: ST_TO_ADDR
// end ; 1 :
44505: GO 45205
44507: LD_INT 1
44509: DOUBLE
44510: EQUAL
44511: IFTRUE 44515
44513: GO 44648
44515: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
44516: LD_ADDR_VAR 0 5
44520: PUSH
44521: LD_VAR 0 1
44525: PUSH
44526: LD_VAR 0 2
44530: PUSH
44531: LD_INT 4
44533: MINUS
44534: PUSH
44535: LD_INT 3
44537: PUSH
44538: EMPTY
44539: LIST
44540: LIST
44541: LIST
44542: PUSH
44543: LD_VAR 0 1
44547: PUSH
44548: LD_INT 3
44550: MINUS
44551: PUSH
44552: LD_VAR 0 2
44556: PUSH
44557: LD_INT 3
44559: MINUS
44560: PUSH
44561: LD_INT 2
44563: PUSH
44564: EMPTY
44565: LIST
44566: LIST
44567: LIST
44568: PUSH
44569: LD_VAR 0 1
44573: PUSH
44574: LD_INT 4
44576: MINUS
44577: PUSH
44578: LD_VAR 0 2
44582: PUSH
44583: LD_INT 1
44585: PUSH
44586: EMPTY
44587: LIST
44588: LIST
44589: LIST
44590: PUSH
44591: LD_VAR 0 1
44595: PUSH
44596: LD_VAR 0 2
44600: PUSH
44601: LD_INT 3
44603: PLUS
44604: PUSH
44605: LD_INT 0
44607: PUSH
44608: EMPTY
44609: LIST
44610: LIST
44611: LIST
44612: PUSH
44613: LD_VAR 0 1
44617: PUSH
44618: LD_INT 4
44620: PLUS
44621: PUSH
44622: LD_VAR 0 2
44626: PUSH
44627: LD_INT 4
44629: PLUS
44630: PUSH
44631: LD_INT 5
44633: PUSH
44634: EMPTY
44635: LIST
44636: LIST
44637: LIST
44638: PUSH
44639: EMPTY
44640: LIST
44641: LIST
44642: LIST
44643: LIST
44644: LIST
44645: ST_TO_ADDR
// end ; 2 :
44646: GO 45205
44648: LD_INT 2
44650: DOUBLE
44651: EQUAL
44652: IFTRUE 44656
44654: GO 44785
44656: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
44657: LD_ADDR_VAR 0 5
44661: PUSH
44662: LD_VAR 0 1
44666: PUSH
44667: LD_VAR 0 2
44671: PUSH
44672: LD_INT 3
44674: MINUS
44675: PUSH
44676: LD_INT 3
44678: PUSH
44679: EMPTY
44680: LIST
44681: LIST
44682: LIST
44683: PUSH
44684: LD_VAR 0 1
44688: PUSH
44689: LD_INT 4
44691: PLUS
44692: PUSH
44693: LD_VAR 0 2
44697: PUSH
44698: LD_INT 4
44700: PUSH
44701: EMPTY
44702: LIST
44703: LIST
44704: LIST
44705: PUSH
44706: LD_VAR 0 1
44710: PUSH
44711: LD_VAR 0 2
44715: PUSH
44716: LD_INT 4
44718: PLUS
44719: PUSH
44720: LD_INT 0
44722: PUSH
44723: EMPTY
44724: LIST
44725: LIST
44726: LIST
44727: PUSH
44728: LD_VAR 0 1
44732: PUSH
44733: LD_INT 3
44735: MINUS
44736: PUSH
44737: LD_VAR 0 2
44741: PUSH
44742: LD_INT 1
44744: PUSH
44745: EMPTY
44746: LIST
44747: LIST
44748: LIST
44749: PUSH
44750: LD_VAR 0 1
44754: PUSH
44755: LD_INT 4
44757: MINUS
44758: PUSH
44759: LD_VAR 0 2
44763: PUSH
44764: LD_INT 4
44766: MINUS
44767: PUSH
44768: LD_INT 2
44770: PUSH
44771: EMPTY
44772: LIST
44773: LIST
44774: LIST
44775: PUSH
44776: EMPTY
44777: LIST
44778: LIST
44779: LIST
44780: LIST
44781: LIST
44782: ST_TO_ADDR
// end ; 3 :
44783: GO 45205
44785: LD_INT 3
44787: DOUBLE
44788: EQUAL
44789: IFTRUE 44793
44791: GO 44926
44793: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44794: LD_ADDR_VAR 0 5
44798: PUSH
44799: LD_VAR 0 1
44803: PUSH
44804: LD_INT 3
44806: PLUS
44807: PUSH
44808: LD_VAR 0 2
44812: PUSH
44813: LD_INT 4
44815: PUSH
44816: EMPTY
44817: LIST
44818: LIST
44819: LIST
44820: PUSH
44821: LD_VAR 0 1
44825: PUSH
44826: LD_INT 4
44828: PLUS
44829: PUSH
44830: LD_VAR 0 2
44834: PUSH
44835: LD_INT 4
44837: PLUS
44838: PUSH
44839: LD_INT 5
44841: PUSH
44842: EMPTY
44843: LIST
44844: LIST
44845: LIST
44846: PUSH
44847: LD_VAR 0 1
44851: PUSH
44852: LD_INT 4
44854: MINUS
44855: PUSH
44856: LD_VAR 0 2
44860: PUSH
44861: LD_INT 1
44863: PUSH
44864: EMPTY
44865: LIST
44866: LIST
44867: LIST
44868: PUSH
44869: LD_VAR 0 1
44873: PUSH
44874: LD_VAR 0 2
44878: PUSH
44879: LD_INT 4
44881: MINUS
44882: PUSH
44883: LD_INT 3
44885: PUSH
44886: EMPTY
44887: LIST
44888: LIST
44889: LIST
44890: PUSH
44891: LD_VAR 0 1
44895: PUSH
44896: LD_INT 3
44898: MINUS
44899: PUSH
44900: LD_VAR 0 2
44904: PUSH
44905: LD_INT 3
44907: MINUS
44908: PUSH
44909: LD_INT 2
44911: PUSH
44912: EMPTY
44913: LIST
44914: LIST
44915: LIST
44916: PUSH
44917: EMPTY
44918: LIST
44919: LIST
44920: LIST
44921: LIST
44922: LIST
44923: ST_TO_ADDR
// end ; 4 :
44924: GO 45205
44926: LD_INT 4
44928: DOUBLE
44929: EQUAL
44930: IFTRUE 44934
44932: GO 45067
44934: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44935: LD_ADDR_VAR 0 5
44939: PUSH
44940: LD_VAR 0 1
44944: PUSH
44945: LD_VAR 0 2
44949: PUSH
44950: LD_INT 4
44952: PLUS
44953: PUSH
44954: LD_INT 0
44956: PUSH
44957: EMPTY
44958: LIST
44959: LIST
44960: LIST
44961: PUSH
44962: LD_VAR 0 1
44966: PUSH
44967: LD_INT 3
44969: PLUS
44970: PUSH
44971: LD_VAR 0 2
44975: PUSH
44976: LD_INT 3
44978: PLUS
44979: PUSH
44980: LD_INT 5
44982: PUSH
44983: EMPTY
44984: LIST
44985: LIST
44986: LIST
44987: PUSH
44988: LD_VAR 0 1
44992: PUSH
44993: LD_INT 4
44995: PLUS
44996: PUSH
44997: LD_VAR 0 2
45001: PUSH
45002: LD_INT 4
45004: PUSH
45005: EMPTY
45006: LIST
45007: LIST
45008: LIST
45009: PUSH
45010: LD_VAR 0 1
45014: PUSH
45015: LD_VAR 0 2
45019: PUSH
45020: LD_INT 3
45022: MINUS
45023: PUSH
45024: LD_INT 3
45026: PUSH
45027: EMPTY
45028: LIST
45029: LIST
45030: LIST
45031: PUSH
45032: LD_VAR 0 1
45036: PUSH
45037: LD_INT 4
45039: MINUS
45040: PUSH
45041: LD_VAR 0 2
45045: PUSH
45046: LD_INT 4
45048: MINUS
45049: PUSH
45050: LD_INT 2
45052: PUSH
45053: EMPTY
45054: LIST
45055: LIST
45056: LIST
45057: PUSH
45058: EMPTY
45059: LIST
45060: LIST
45061: LIST
45062: LIST
45063: LIST
45064: ST_TO_ADDR
// end ; 5 :
45065: GO 45205
45067: LD_INT 5
45069: DOUBLE
45070: EQUAL
45071: IFTRUE 45075
45073: GO 45204
45075: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
45076: LD_ADDR_VAR 0 5
45080: PUSH
45081: LD_VAR 0 1
45085: PUSH
45086: LD_INT 4
45088: MINUS
45089: PUSH
45090: LD_VAR 0 2
45094: PUSH
45095: LD_INT 1
45097: PUSH
45098: EMPTY
45099: LIST
45100: LIST
45101: LIST
45102: PUSH
45103: LD_VAR 0 1
45107: PUSH
45108: LD_VAR 0 2
45112: PUSH
45113: LD_INT 4
45115: MINUS
45116: PUSH
45117: LD_INT 3
45119: PUSH
45120: EMPTY
45121: LIST
45122: LIST
45123: LIST
45124: PUSH
45125: LD_VAR 0 1
45129: PUSH
45130: LD_INT 4
45132: PLUS
45133: PUSH
45134: LD_VAR 0 2
45138: PUSH
45139: LD_INT 4
45141: PLUS
45142: PUSH
45143: LD_INT 5
45145: PUSH
45146: EMPTY
45147: LIST
45148: LIST
45149: LIST
45150: PUSH
45151: LD_VAR 0 1
45155: PUSH
45156: LD_INT 3
45158: PLUS
45159: PUSH
45160: LD_VAR 0 2
45164: PUSH
45165: LD_INT 4
45167: PUSH
45168: EMPTY
45169: LIST
45170: LIST
45171: LIST
45172: PUSH
45173: LD_VAR 0 1
45177: PUSH
45178: LD_VAR 0 2
45182: PUSH
45183: LD_INT 3
45185: PLUS
45186: PUSH
45187: LD_INT 0
45189: PUSH
45190: EMPTY
45191: LIST
45192: LIST
45193: LIST
45194: PUSH
45195: EMPTY
45196: LIST
45197: LIST
45198: LIST
45199: LIST
45200: LIST
45201: ST_TO_ADDR
// end ; end ;
45202: GO 45205
45204: POP
// result := list ;
45205: LD_ADDR_VAR 0 4
45209: PUSH
45210: LD_VAR 0 5
45214: ST_TO_ADDR
// end ;
45215: LD_VAR 0 4
45219: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
45220: LD_INT 0
45222: PPUSH
45223: PPUSH
45224: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
45225: LD_VAR 0 1
45229: NOT
45230: PUSH
45231: LD_VAR 0 2
45235: PUSH
45236: LD_INT 1
45238: PUSH
45239: LD_INT 2
45241: PUSH
45242: LD_INT 3
45244: PUSH
45245: LD_INT 4
45247: PUSH
45248: EMPTY
45249: LIST
45250: LIST
45251: LIST
45252: LIST
45253: IN
45254: NOT
45255: OR
45256: IFFALSE 45260
// exit ;
45258: GO 45352
// tmp := [ ] ;
45260: LD_ADDR_VAR 0 5
45264: PUSH
45265: EMPTY
45266: ST_TO_ADDR
// for i in units do
45267: LD_ADDR_VAR 0 4
45271: PUSH
45272: LD_VAR 0 1
45276: PUSH
45277: FOR_IN
45278: IFFALSE 45321
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
45280: LD_ADDR_VAR 0 5
45284: PUSH
45285: LD_VAR 0 5
45289: PPUSH
45290: LD_VAR 0 5
45294: PUSH
45295: LD_INT 1
45297: PLUS
45298: PPUSH
45299: LD_VAR 0 4
45303: PPUSH
45304: LD_VAR 0 2
45308: PPUSH
45309: CALL_OW 259
45313: PPUSH
45314: CALL_OW 2
45318: ST_TO_ADDR
45319: GO 45277
45321: POP
45322: POP
// if not tmp then
45323: LD_VAR 0 5
45327: NOT
45328: IFFALSE 45332
// exit ;
45330: GO 45352
// result := SortListByListDesc ( units , tmp ) ;
45332: LD_ADDR_VAR 0 3
45336: PUSH
45337: LD_VAR 0 1
45341: PPUSH
45342: LD_VAR 0 5
45346: PPUSH
45347: CALL_OW 77
45351: ST_TO_ADDR
// end ;
45352: LD_VAR 0 3
45356: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
45357: LD_INT 0
45359: PPUSH
45360: PPUSH
45361: PPUSH
// result := false ;
45362: LD_ADDR_VAR 0 3
45366: PUSH
45367: LD_INT 0
45369: ST_TO_ADDR
// x := GetX ( building ) ;
45370: LD_ADDR_VAR 0 4
45374: PUSH
45375: LD_VAR 0 2
45379: PPUSH
45380: CALL_OW 250
45384: ST_TO_ADDR
// y := GetY ( building ) ;
45385: LD_ADDR_VAR 0 5
45389: PUSH
45390: LD_VAR 0 2
45394: PPUSH
45395: CALL_OW 251
45399: ST_TO_ADDR
// if not building or not x or not y then
45400: LD_VAR 0 2
45404: NOT
45405: PUSH
45406: LD_VAR 0 4
45410: NOT
45411: OR
45412: PUSH
45413: LD_VAR 0 5
45417: NOT
45418: OR
45419: IFFALSE 45423
// exit ;
45421: GO 45515
// if GetTaskList ( unit ) then
45423: LD_VAR 0 1
45427: PPUSH
45428: CALL_OW 437
45432: IFFALSE 45515
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45434: LD_STRING e
45436: PUSH
45437: LD_VAR 0 1
45441: PPUSH
45442: CALL_OW 437
45446: PUSH
45447: LD_INT 1
45449: ARRAY
45450: PUSH
45451: LD_INT 1
45453: ARRAY
45454: EQUAL
45455: PUSH
45456: LD_VAR 0 4
45460: PUSH
45461: LD_VAR 0 1
45465: PPUSH
45466: CALL_OW 437
45470: PUSH
45471: LD_INT 1
45473: ARRAY
45474: PUSH
45475: LD_INT 2
45477: ARRAY
45478: EQUAL
45479: AND
45480: PUSH
45481: LD_VAR 0 5
45485: PUSH
45486: LD_VAR 0 1
45490: PPUSH
45491: CALL_OW 437
45495: PUSH
45496: LD_INT 1
45498: ARRAY
45499: PUSH
45500: LD_INT 3
45502: ARRAY
45503: EQUAL
45504: AND
45505: IFFALSE 45515
// result := true end ;
45507: LD_ADDR_VAR 0 3
45511: PUSH
45512: LD_INT 1
45514: ST_TO_ADDR
// end ;
45515: LD_VAR 0 3
45519: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
45520: LD_INT 0
45522: PPUSH
// result := false ;
45523: LD_ADDR_VAR 0 4
45527: PUSH
45528: LD_INT 0
45530: ST_TO_ADDR
// if GetTaskList ( unit ) then
45531: LD_VAR 0 1
45535: PPUSH
45536: CALL_OW 437
45540: IFFALSE 45623
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
45542: LD_STRING M
45544: PUSH
45545: LD_VAR 0 1
45549: PPUSH
45550: CALL_OW 437
45554: PUSH
45555: LD_INT 1
45557: ARRAY
45558: PUSH
45559: LD_INT 1
45561: ARRAY
45562: EQUAL
45563: PUSH
45564: LD_VAR 0 2
45568: PUSH
45569: LD_VAR 0 1
45573: PPUSH
45574: CALL_OW 437
45578: PUSH
45579: LD_INT 1
45581: ARRAY
45582: PUSH
45583: LD_INT 2
45585: ARRAY
45586: EQUAL
45587: AND
45588: PUSH
45589: LD_VAR 0 3
45593: PUSH
45594: LD_VAR 0 1
45598: PPUSH
45599: CALL_OW 437
45603: PUSH
45604: LD_INT 1
45606: ARRAY
45607: PUSH
45608: LD_INT 3
45610: ARRAY
45611: EQUAL
45612: AND
45613: IFFALSE 45623
// result := true ;
45615: LD_ADDR_VAR 0 4
45619: PUSH
45620: LD_INT 1
45622: ST_TO_ADDR
// end ; end ;
45623: LD_VAR 0 4
45627: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
45628: LD_INT 0
45630: PPUSH
45631: PPUSH
45632: PPUSH
45633: PPUSH
// if not unit or not area then
45634: LD_VAR 0 1
45638: NOT
45639: PUSH
45640: LD_VAR 0 2
45644: NOT
45645: OR
45646: IFFALSE 45650
// exit ;
45648: GO 45814
// tmp := AreaToList ( area , i ) ;
45650: LD_ADDR_VAR 0 6
45654: PUSH
45655: LD_VAR 0 2
45659: PPUSH
45660: LD_VAR 0 5
45664: PPUSH
45665: CALL_OW 517
45669: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
45670: LD_ADDR_VAR 0 5
45674: PUSH
45675: DOUBLE
45676: LD_INT 1
45678: DEC
45679: ST_TO_ADDR
45680: LD_VAR 0 6
45684: PUSH
45685: LD_INT 1
45687: ARRAY
45688: PUSH
45689: FOR_TO
45690: IFFALSE 45812
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
45692: LD_ADDR_VAR 0 7
45696: PUSH
45697: LD_VAR 0 6
45701: PUSH
45702: LD_INT 1
45704: ARRAY
45705: PUSH
45706: LD_VAR 0 5
45710: ARRAY
45711: PUSH
45712: LD_VAR 0 6
45716: PUSH
45717: LD_INT 2
45719: ARRAY
45720: PUSH
45721: LD_VAR 0 5
45725: ARRAY
45726: PUSH
45727: EMPTY
45728: LIST
45729: LIST
45730: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
45731: LD_VAR 0 7
45735: PUSH
45736: LD_INT 1
45738: ARRAY
45739: PPUSH
45740: LD_VAR 0 7
45744: PUSH
45745: LD_INT 2
45747: ARRAY
45748: PPUSH
45749: CALL_OW 428
45753: PUSH
45754: LD_INT 0
45756: EQUAL
45757: IFFALSE 45810
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45759: LD_VAR 0 1
45763: PPUSH
45764: LD_VAR 0 7
45768: PUSH
45769: LD_INT 1
45771: ARRAY
45772: PPUSH
45773: LD_VAR 0 7
45777: PUSH
45778: LD_INT 2
45780: ARRAY
45781: PPUSH
45782: LD_VAR 0 3
45786: PPUSH
45787: CALL_OW 48
// result := IsPlaced ( unit ) ;
45791: LD_ADDR_VAR 0 4
45795: PUSH
45796: LD_VAR 0 1
45800: PPUSH
45801: CALL_OW 305
45805: ST_TO_ADDR
// exit ;
45806: POP
45807: POP
45808: GO 45814
// end ; end ;
45810: GO 45689
45812: POP
45813: POP
// end ;
45814: LD_VAR 0 4
45818: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45819: LD_INT 0
45821: PPUSH
45822: PPUSH
45823: PPUSH
// if not side or side > 8 then
45824: LD_VAR 0 1
45828: NOT
45829: PUSH
45830: LD_VAR 0 1
45834: PUSH
45835: LD_INT 8
45837: GREATER
45838: OR
45839: IFFALSE 45843
// exit ;
45841: GO 46030
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45843: LD_ADDR_VAR 0 4
45847: PUSH
45848: LD_INT 22
45850: PUSH
45851: LD_VAR 0 1
45855: PUSH
45856: EMPTY
45857: LIST
45858: LIST
45859: PUSH
45860: LD_INT 21
45862: PUSH
45863: LD_INT 3
45865: PUSH
45866: EMPTY
45867: LIST
45868: LIST
45869: PUSH
45870: EMPTY
45871: LIST
45872: LIST
45873: PPUSH
45874: CALL_OW 69
45878: ST_TO_ADDR
// if not tmp then
45879: LD_VAR 0 4
45883: NOT
45884: IFFALSE 45888
// exit ;
45886: GO 46030
// enable_addtolog := true ;
45888: LD_ADDR_OWVAR 81
45892: PUSH
45893: LD_INT 1
45895: ST_TO_ADDR
// AddToLog ( [ ) ;
45896: LD_STRING [
45898: PPUSH
45899: CALL_OW 561
// for i in tmp do
45903: LD_ADDR_VAR 0 3
45907: PUSH
45908: LD_VAR 0 4
45912: PUSH
45913: FOR_IN
45914: IFFALSE 46021
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45916: LD_STRING [
45918: PUSH
45919: LD_VAR 0 3
45923: PPUSH
45924: CALL_OW 266
45928: STR
45929: PUSH
45930: LD_STRING , 
45932: STR
45933: PUSH
45934: LD_VAR 0 3
45938: PPUSH
45939: CALL_OW 250
45943: STR
45944: PUSH
45945: LD_STRING , 
45947: STR
45948: PUSH
45949: LD_VAR 0 3
45953: PPUSH
45954: CALL_OW 251
45958: STR
45959: PUSH
45960: LD_STRING , 
45962: STR
45963: PUSH
45964: LD_VAR 0 3
45968: PPUSH
45969: CALL_OW 254
45973: STR
45974: PUSH
45975: LD_STRING , 
45977: STR
45978: PUSH
45979: LD_VAR 0 3
45983: PPUSH
45984: LD_INT 1
45986: PPUSH
45987: CALL_OW 268
45991: STR
45992: PUSH
45993: LD_STRING , 
45995: STR
45996: PUSH
45997: LD_VAR 0 3
46001: PPUSH
46002: LD_INT 2
46004: PPUSH
46005: CALL_OW 268
46009: STR
46010: PUSH
46011: LD_STRING ],
46013: STR
46014: PPUSH
46015: CALL_OW 561
// end ;
46019: GO 45913
46021: POP
46022: POP
// AddToLog ( ]; ) ;
46023: LD_STRING ];
46025: PPUSH
46026: CALL_OW 561
// end ;
46030: LD_VAR 0 2
46034: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
46035: LD_INT 0
46037: PPUSH
46038: PPUSH
46039: PPUSH
46040: PPUSH
46041: PPUSH
// if not area or not rate or not max then
46042: LD_VAR 0 1
46046: NOT
46047: PUSH
46048: LD_VAR 0 2
46052: NOT
46053: OR
46054: PUSH
46055: LD_VAR 0 4
46059: NOT
46060: OR
46061: IFFALSE 46065
// exit ;
46063: GO 46254
// while 1 do
46065: LD_INT 1
46067: IFFALSE 46254
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
46069: LD_ADDR_VAR 0 9
46073: PUSH
46074: LD_VAR 0 1
46078: PPUSH
46079: LD_INT 1
46081: PPUSH
46082: CALL_OW 287
46086: PUSH
46087: LD_INT 10
46089: MUL
46090: ST_TO_ADDR
// r := rate / 10 ;
46091: LD_ADDR_VAR 0 7
46095: PUSH
46096: LD_VAR 0 2
46100: PUSH
46101: LD_INT 10
46103: DIVREAL
46104: ST_TO_ADDR
// time := 1 1$00 ;
46105: LD_ADDR_VAR 0 8
46109: PUSH
46110: LD_INT 2100
46112: ST_TO_ADDR
// if amount < min then
46113: LD_VAR 0 9
46117: PUSH
46118: LD_VAR 0 3
46122: LESS
46123: IFFALSE 46141
// r := r * 2 else
46125: LD_ADDR_VAR 0 7
46129: PUSH
46130: LD_VAR 0 7
46134: PUSH
46135: LD_INT 2
46137: MUL
46138: ST_TO_ADDR
46139: GO 46167
// if amount > max then
46141: LD_VAR 0 9
46145: PUSH
46146: LD_VAR 0 4
46150: GREATER
46151: IFFALSE 46167
// r := r / 2 ;
46153: LD_ADDR_VAR 0 7
46157: PUSH
46158: LD_VAR 0 7
46162: PUSH
46163: LD_INT 2
46165: DIVREAL
46166: ST_TO_ADDR
// time := time / r ;
46167: LD_ADDR_VAR 0 8
46171: PUSH
46172: LD_VAR 0 8
46176: PUSH
46177: LD_VAR 0 7
46181: DIVREAL
46182: ST_TO_ADDR
// if time < 0 then
46183: LD_VAR 0 8
46187: PUSH
46188: LD_INT 0
46190: LESS
46191: IFFALSE 46208
// time := time * - 1 ;
46193: LD_ADDR_VAR 0 8
46197: PUSH
46198: LD_VAR 0 8
46202: PUSH
46203: LD_INT 1
46205: NEG
46206: MUL
46207: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
46208: LD_VAR 0 8
46212: PUSH
46213: LD_INT 35
46215: PPUSH
46216: LD_INT 875
46218: PPUSH
46219: CALL_OW 12
46223: PLUS
46224: PPUSH
46225: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
46229: LD_INT 1
46231: PPUSH
46232: LD_INT 5
46234: PPUSH
46235: CALL_OW 12
46239: PPUSH
46240: LD_VAR 0 1
46244: PPUSH
46245: LD_INT 1
46247: PPUSH
46248: CALL_OW 55
// end ;
46252: GO 46065
// end ;
46254: LD_VAR 0 5
46258: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
46259: LD_INT 0
46261: PPUSH
46262: PPUSH
46263: PPUSH
46264: PPUSH
46265: PPUSH
46266: PPUSH
46267: PPUSH
46268: PPUSH
// if not turrets or not factories then
46269: LD_VAR 0 1
46273: NOT
46274: PUSH
46275: LD_VAR 0 2
46279: NOT
46280: OR
46281: IFFALSE 46285
// exit ;
46283: GO 46592
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
46285: LD_ADDR_VAR 0 10
46289: PUSH
46290: LD_INT 5
46292: PUSH
46293: LD_INT 6
46295: PUSH
46296: EMPTY
46297: LIST
46298: LIST
46299: PUSH
46300: LD_INT 2
46302: PUSH
46303: LD_INT 4
46305: PUSH
46306: EMPTY
46307: LIST
46308: LIST
46309: PUSH
46310: LD_INT 3
46312: PUSH
46313: LD_INT 5
46315: PUSH
46316: EMPTY
46317: LIST
46318: LIST
46319: PUSH
46320: EMPTY
46321: LIST
46322: LIST
46323: LIST
46324: PUSH
46325: LD_INT 24
46327: PUSH
46328: LD_INT 25
46330: PUSH
46331: EMPTY
46332: LIST
46333: LIST
46334: PUSH
46335: LD_INT 23
46337: PUSH
46338: LD_INT 27
46340: PUSH
46341: EMPTY
46342: LIST
46343: LIST
46344: PUSH
46345: EMPTY
46346: LIST
46347: LIST
46348: PUSH
46349: LD_INT 42
46351: PUSH
46352: LD_INT 43
46354: PUSH
46355: EMPTY
46356: LIST
46357: LIST
46358: PUSH
46359: LD_INT 44
46361: PUSH
46362: LD_INT 46
46364: PUSH
46365: EMPTY
46366: LIST
46367: LIST
46368: PUSH
46369: LD_INT 45
46371: PUSH
46372: LD_INT 47
46374: PUSH
46375: EMPTY
46376: LIST
46377: LIST
46378: PUSH
46379: EMPTY
46380: LIST
46381: LIST
46382: LIST
46383: PUSH
46384: EMPTY
46385: LIST
46386: LIST
46387: LIST
46388: ST_TO_ADDR
// result := [ ] ;
46389: LD_ADDR_VAR 0 3
46393: PUSH
46394: EMPTY
46395: ST_TO_ADDR
// for i in turrets do
46396: LD_ADDR_VAR 0 4
46400: PUSH
46401: LD_VAR 0 1
46405: PUSH
46406: FOR_IN
46407: IFFALSE 46590
// begin nat := GetNation ( i ) ;
46409: LD_ADDR_VAR 0 7
46413: PUSH
46414: LD_VAR 0 4
46418: PPUSH
46419: CALL_OW 248
46423: ST_TO_ADDR
// weapon := 0 ;
46424: LD_ADDR_VAR 0 8
46428: PUSH
46429: LD_INT 0
46431: ST_TO_ADDR
// if not nat then
46432: LD_VAR 0 7
46436: NOT
46437: IFFALSE 46441
// continue ;
46439: GO 46406
// for j in list [ nat ] do
46441: LD_ADDR_VAR 0 5
46445: PUSH
46446: LD_VAR 0 10
46450: PUSH
46451: LD_VAR 0 7
46455: ARRAY
46456: PUSH
46457: FOR_IN
46458: IFFALSE 46499
// if GetBWeapon ( i ) = j [ 1 ] then
46460: LD_VAR 0 4
46464: PPUSH
46465: CALL_OW 269
46469: PUSH
46470: LD_VAR 0 5
46474: PUSH
46475: LD_INT 1
46477: ARRAY
46478: EQUAL
46479: IFFALSE 46497
// begin weapon := j [ 2 ] ;
46481: LD_ADDR_VAR 0 8
46485: PUSH
46486: LD_VAR 0 5
46490: PUSH
46491: LD_INT 2
46493: ARRAY
46494: ST_TO_ADDR
// break ;
46495: GO 46499
// end ;
46497: GO 46457
46499: POP
46500: POP
// if not weapon then
46501: LD_VAR 0 8
46505: NOT
46506: IFFALSE 46510
// continue ;
46508: GO 46406
// for k in factories do
46510: LD_ADDR_VAR 0 6
46514: PUSH
46515: LD_VAR 0 2
46519: PUSH
46520: FOR_IN
46521: IFFALSE 46586
// begin weapons := AvailableWeaponList ( k ) ;
46523: LD_ADDR_VAR 0 9
46527: PUSH
46528: LD_VAR 0 6
46532: PPUSH
46533: CALL_OW 478
46537: ST_TO_ADDR
// if not weapons then
46538: LD_VAR 0 9
46542: NOT
46543: IFFALSE 46547
// continue ;
46545: GO 46520
// if weapon in weapons then
46547: LD_VAR 0 8
46551: PUSH
46552: LD_VAR 0 9
46556: IN
46557: IFFALSE 46584
// begin result := [ i , weapon ] ;
46559: LD_ADDR_VAR 0 3
46563: PUSH
46564: LD_VAR 0 4
46568: PUSH
46569: LD_VAR 0 8
46573: PUSH
46574: EMPTY
46575: LIST
46576: LIST
46577: ST_TO_ADDR
// exit ;
46578: POP
46579: POP
46580: POP
46581: POP
46582: GO 46592
// end ; end ;
46584: GO 46520
46586: POP
46587: POP
// end ;
46588: GO 46406
46590: POP
46591: POP
// end ;
46592: LD_VAR 0 3
46596: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
46597: LD_INT 0
46599: PPUSH
// if not side or side > 8 then
46600: LD_VAR 0 3
46604: NOT
46605: PUSH
46606: LD_VAR 0 3
46610: PUSH
46611: LD_INT 8
46613: GREATER
46614: OR
46615: IFFALSE 46619
// exit ;
46617: GO 46678
// if not range then
46619: LD_VAR 0 4
46623: NOT
46624: IFFALSE 46635
// range := - 12 ;
46626: LD_ADDR_VAR 0 4
46630: PUSH
46631: LD_INT 12
46633: NEG
46634: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
46635: LD_VAR 0 1
46639: PPUSH
46640: LD_VAR 0 2
46644: PPUSH
46645: LD_VAR 0 3
46649: PPUSH
46650: LD_VAR 0 4
46654: PPUSH
46655: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
46659: LD_VAR 0 1
46663: PPUSH
46664: LD_VAR 0 2
46668: PPUSH
46669: LD_VAR 0 3
46673: PPUSH
46674: CALL_OW 331
// end ;
46678: LD_VAR 0 5
46682: RET
// export function Video ( mode ) ; begin
46683: LD_INT 0
46685: PPUSH
// ingame_video = mode ;
46686: LD_ADDR_OWVAR 52
46690: PUSH
46691: LD_VAR 0 1
46695: ST_TO_ADDR
// interface_hidden = mode ;
46696: LD_ADDR_OWVAR 54
46700: PUSH
46701: LD_VAR 0 1
46705: ST_TO_ADDR
// end ;
46706: LD_VAR 0 2
46710: RET
// export function Join ( array , element ) ; begin
46711: LD_INT 0
46713: PPUSH
// result := Replace ( array , array + 1 , element ) ;
46714: LD_ADDR_VAR 0 3
46718: PUSH
46719: LD_VAR 0 1
46723: PPUSH
46724: LD_VAR 0 1
46728: PUSH
46729: LD_INT 1
46731: PLUS
46732: PPUSH
46733: LD_VAR 0 2
46737: PPUSH
46738: CALL_OW 1
46742: ST_TO_ADDR
// end ;
46743: LD_VAR 0 3
46747: RET
// export function JoinUnion ( array , element ) ; begin
46748: LD_INT 0
46750: PPUSH
// result := array union element ;
46751: LD_ADDR_VAR 0 3
46755: PUSH
46756: LD_VAR 0 1
46760: PUSH
46761: LD_VAR 0 2
46765: UNION
46766: ST_TO_ADDR
// end ;
46767: LD_VAR 0 3
46771: RET
// export function GetBehemoths ( side ) ; begin
46772: LD_INT 0
46774: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
46775: LD_ADDR_VAR 0 2
46779: PUSH
46780: LD_INT 22
46782: PUSH
46783: LD_VAR 0 1
46787: PUSH
46788: EMPTY
46789: LIST
46790: LIST
46791: PUSH
46792: LD_INT 31
46794: PUSH
46795: LD_INT 25
46797: PUSH
46798: EMPTY
46799: LIST
46800: LIST
46801: PUSH
46802: EMPTY
46803: LIST
46804: LIST
46805: PPUSH
46806: CALL_OW 69
46810: ST_TO_ADDR
// end ;
46811: LD_VAR 0 2
46815: RET
// export function Shuffle ( array ) ; var i , index ; begin
46816: LD_INT 0
46818: PPUSH
46819: PPUSH
46820: PPUSH
// result := [ ] ;
46821: LD_ADDR_VAR 0 2
46825: PUSH
46826: EMPTY
46827: ST_TO_ADDR
// if not array then
46828: LD_VAR 0 1
46832: NOT
46833: IFFALSE 46837
// exit ;
46835: GO 46936
// Randomize ;
46837: CALL_OW 10
// for i = array downto 1 do
46841: LD_ADDR_VAR 0 3
46845: PUSH
46846: DOUBLE
46847: LD_VAR 0 1
46851: INC
46852: ST_TO_ADDR
46853: LD_INT 1
46855: PUSH
46856: FOR_DOWNTO
46857: IFFALSE 46934
// begin index := rand ( 1 , array ) ;
46859: LD_ADDR_VAR 0 4
46863: PUSH
46864: LD_INT 1
46866: PPUSH
46867: LD_VAR 0 1
46871: PPUSH
46872: CALL_OW 12
46876: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46877: LD_ADDR_VAR 0 2
46881: PUSH
46882: LD_VAR 0 2
46886: PPUSH
46887: LD_VAR 0 2
46891: PUSH
46892: LD_INT 1
46894: PLUS
46895: PPUSH
46896: LD_VAR 0 1
46900: PUSH
46901: LD_VAR 0 4
46905: ARRAY
46906: PPUSH
46907: CALL_OW 2
46911: ST_TO_ADDR
// array := Delete ( array , index ) ;
46912: LD_ADDR_VAR 0 1
46916: PUSH
46917: LD_VAR 0 1
46921: PPUSH
46922: LD_VAR 0 4
46926: PPUSH
46927: CALL_OW 3
46931: ST_TO_ADDR
// end ;
46932: GO 46856
46934: POP
46935: POP
// end ;
46936: LD_VAR 0 2
46940: RET
// export function GetBaseMaterials ( base ) ; begin
46941: LD_INT 0
46943: PPUSH
// result := [ 0 , 0 , 0 ] ;
46944: LD_ADDR_VAR 0 2
46948: PUSH
46949: LD_INT 0
46951: PUSH
46952: LD_INT 0
46954: PUSH
46955: LD_INT 0
46957: PUSH
46958: EMPTY
46959: LIST
46960: LIST
46961: LIST
46962: ST_TO_ADDR
// if not base then
46963: LD_VAR 0 1
46967: NOT
46968: IFFALSE 46972
// exit ;
46970: GO 47021
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46972: LD_ADDR_VAR 0 2
46976: PUSH
46977: LD_VAR 0 1
46981: PPUSH
46982: LD_INT 1
46984: PPUSH
46985: CALL_OW 275
46989: PUSH
46990: LD_VAR 0 1
46994: PPUSH
46995: LD_INT 2
46997: PPUSH
46998: CALL_OW 275
47002: PUSH
47003: LD_VAR 0 1
47007: PPUSH
47008: LD_INT 3
47010: PPUSH
47011: CALL_OW 275
47015: PUSH
47016: EMPTY
47017: LIST
47018: LIST
47019: LIST
47020: ST_TO_ADDR
// end ;
47021: LD_VAR 0 2
47025: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
47026: LD_INT 0
47028: PPUSH
47029: PPUSH
// result := array ;
47030: LD_ADDR_VAR 0 3
47034: PUSH
47035: LD_VAR 0 1
47039: ST_TO_ADDR
// if size >= result then
47040: LD_VAR 0 2
47044: PUSH
47045: LD_VAR 0 3
47049: GREATEREQUAL
47050: IFFALSE 47054
// exit ;
47052: GO 47104
// if size then
47054: LD_VAR 0 2
47058: IFFALSE 47104
// for i := array downto size do
47060: LD_ADDR_VAR 0 4
47064: PUSH
47065: DOUBLE
47066: LD_VAR 0 1
47070: INC
47071: ST_TO_ADDR
47072: LD_VAR 0 2
47076: PUSH
47077: FOR_DOWNTO
47078: IFFALSE 47102
// result := Delete ( result , result ) ;
47080: LD_ADDR_VAR 0 3
47084: PUSH
47085: LD_VAR 0 3
47089: PPUSH
47090: LD_VAR 0 3
47094: PPUSH
47095: CALL_OW 3
47099: ST_TO_ADDR
47100: GO 47077
47102: POP
47103: POP
// end ;
47104: LD_VAR 0 3
47108: RET
// export function ComExit ( unit ) ; var tmp ; begin
47109: LD_INT 0
47111: PPUSH
47112: PPUSH
// if not IsInUnit ( unit ) then
47113: LD_VAR 0 1
47117: PPUSH
47118: CALL_OW 310
47122: NOT
47123: IFFALSE 47127
// exit ;
47125: GO 47187
// tmp := IsInUnit ( unit ) ;
47127: LD_ADDR_VAR 0 3
47131: PUSH
47132: LD_VAR 0 1
47136: PPUSH
47137: CALL_OW 310
47141: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
47142: LD_VAR 0 3
47146: PPUSH
47147: CALL_OW 247
47151: PUSH
47152: LD_INT 2
47154: EQUAL
47155: IFFALSE 47168
// ComExitVehicle ( unit ) else
47157: LD_VAR 0 1
47161: PPUSH
47162: CALL_OW 121
47166: GO 47177
// ComExitBuilding ( unit ) ;
47168: LD_VAR 0 1
47172: PPUSH
47173: CALL_OW 122
// result := tmp ;
47177: LD_ADDR_VAR 0 2
47181: PUSH
47182: LD_VAR 0 3
47186: ST_TO_ADDR
// end ;
47187: LD_VAR 0 2
47191: RET
// export function ComExitAll ( units ) ; var i ; begin
47192: LD_INT 0
47194: PPUSH
47195: PPUSH
// if not units then
47196: LD_VAR 0 1
47200: NOT
47201: IFFALSE 47205
// exit ;
47203: GO 47231
// for i in units do
47205: LD_ADDR_VAR 0 3
47209: PUSH
47210: LD_VAR 0 1
47214: PUSH
47215: FOR_IN
47216: IFFALSE 47229
// ComExit ( i ) ;
47218: LD_VAR 0 3
47222: PPUSH
47223: CALL 47109 0 1
47227: GO 47215
47229: POP
47230: POP
// end ;
47231: LD_VAR 0 2
47235: RET
// export function ResetHc ; begin
47236: LD_INT 0
47238: PPUSH
// InitHc ;
47239: CALL_OW 19
// hc_importance := 0 ;
47243: LD_ADDR_OWVAR 32
47247: PUSH
47248: LD_INT 0
47250: ST_TO_ADDR
// end ;
47251: LD_VAR 0 1
47255: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
47256: LD_INT 0
47258: PPUSH
47259: PPUSH
47260: PPUSH
// _x := ( x1 + x2 ) div 2 ;
47261: LD_ADDR_VAR 0 6
47265: PUSH
47266: LD_VAR 0 1
47270: PUSH
47271: LD_VAR 0 3
47275: PLUS
47276: PUSH
47277: LD_INT 2
47279: DIV
47280: ST_TO_ADDR
// if _x < 0 then
47281: LD_VAR 0 6
47285: PUSH
47286: LD_INT 0
47288: LESS
47289: IFFALSE 47306
// _x := _x * - 1 ;
47291: LD_ADDR_VAR 0 6
47295: PUSH
47296: LD_VAR 0 6
47300: PUSH
47301: LD_INT 1
47303: NEG
47304: MUL
47305: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
47306: LD_ADDR_VAR 0 7
47310: PUSH
47311: LD_VAR 0 2
47315: PUSH
47316: LD_VAR 0 4
47320: PLUS
47321: PUSH
47322: LD_INT 2
47324: DIV
47325: ST_TO_ADDR
// if _y < 0 then
47326: LD_VAR 0 7
47330: PUSH
47331: LD_INT 0
47333: LESS
47334: IFFALSE 47351
// _y := _y * - 1 ;
47336: LD_ADDR_VAR 0 7
47340: PUSH
47341: LD_VAR 0 7
47345: PUSH
47346: LD_INT 1
47348: NEG
47349: MUL
47350: ST_TO_ADDR
// result := [ _x , _y ] ;
47351: LD_ADDR_VAR 0 5
47355: PUSH
47356: LD_VAR 0 6
47360: PUSH
47361: LD_VAR 0 7
47365: PUSH
47366: EMPTY
47367: LIST
47368: LIST
47369: ST_TO_ADDR
// end ;
47370: LD_VAR 0 5
47374: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
47375: LD_INT 0
47377: PPUSH
47378: PPUSH
47379: PPUSH
47380: PPUSH
// task := GetTaskList ( unit ) ;
47381: LD_ADDR_VAR 0 7
47385: PUSH
47386: LD_VAR 0 1
47390: PPUSH
47391: CALL_OW 437
47395: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
47396: LD_VAR 0 7
47400: NOT
47401: PUSH
47402: LD_VAR 0 1
47406: PPUSH
47407: LD_VAR 0 2
47411: PPUSH
47412: CALL_OW 308
47416: NOT
47417: AND
47418: IFFALSE 47422
// exit ;
47420: GO 47540
// if IsInArea ( unit , area ) then
47422: LD_VAR 0 1
47426: PPUSH
47427: LD_VAR 0 2
47431: PPUSH
47432: CALL_OW 308
47436: IFFALSE 47454
// begin ComMoveToArea ( unit , goAway ) ;
47438: LD_VAR 0 1
47442: PPUSH
47443: LD_VAR 0 3
47447: PPUSH
47448: CALL_OW 113
// exit ;
47452: GO 47540
// end ; if task [ 1 ] [ 1 ] <> M then
47454: LD_VAR 0 7
47458: PUSH
47459: LD_INT 1
47461: ARRAY
47462: PUSH
47463: LD_INT 1
47465: ARRAY
47466: PUSH
47467: LD_STRING M
47469: NONEQUAL
47470: IFFALSE 47474
// exit ;
47472: GO 47540
// x := task [ 1 ] [ 2 ] ;
47474: LD_ADDR_VAR 0 5
47478: PUSH
47479: LD_VAR 0 7
47483: PUSH
47484: LD_INT 1
47486: ARRAY
47487: PUSH
47488: LD_INT 2
47490: ARRAY
47491: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
47492: LD_ADDR_VAR 0 6
47496: PUSH
47497: LD_VAR 0 7
47501: PUSH
47502: LD_INT 1
47504: ARRAY
47505: PUSH
47506: LD_INT 3
47508: ARRAY
47509: ST_TO_ADDR
// if InArea ( x , y , area ) then
47510: LD_VAR 0 5
47514: PPUSH
47515: LD_VAR 0 6
47519: PPUSH
47520: LD_VAR 0 2
47524: PPUSH
47525: CALL_OW 309
47529: IFFALSE 47540
// ComStop ( unit ) ;
47531: LD_VAR 0 1
47535: PPUSH
47536: CALL_OW 141
// end ;
47540: LD_VAR 0 4
47544: RET
// export function Abs ( value ) ; begin
47545: LD_INT 0
47547: PPUSH
// result := value ;
47548: LD_ADDR_VAR 0 2
47552: PUSH
47553: LD_VAR 0 1
47557: ST_TO_ADDR
// if value < 0 then
47558: LD_VAR 0 1
47562: PUSH
47563: LD_INT 0
47565: LESS
47566: IFFALSE 47583
// result := value * - 1 ;
47568: LD_ADDR_VAR 0 2
47572: PUSH
47573: LD_VAR 0 1
47577: PUSH
47578: LD_INT 1
47580: NEG
47581: MUL
47582: ST_TO_ADDR
// end ;
47583: LD_VAR 0 2
47587: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
47588: LD_INT 0
47590: PPUSH
47591: PPUSH
47592: PPUSH
47593: PPUSH
47594: PPUSH
47595: PPUSH
47596: PPUSH
47597: PPUSH
// if not unit or not building then
47598: LD_VAR 0 1
47602: NOT
47603: PUSH
47604: LD_VAR 0 2
47608: NOT
47609: OR
47610: IFFALSE 47614
// exit ;
47612: GO 47840
// x := GetX ( building ) ;
47614: LD_ADDR_VAR 0 4
47618: PUSH
47619: LD_VAR 0 2
47623: PPUSH
47624: CALL_OW 250
47628: ST_TO_ADDR
// y := GetY ( building ) ;
47629: LD_ADDR_VAR 0 6
47633: PUSH
47634: LD_VAR 0 2
47638: PPUSH
47639: CALL_OW 251
47643: ST_TO_ADDR
// d := GetDir ( building ) ;
47644: LD_ADDR_VAR 0 8
47648: PUSH
47649: LD_VAR 0 2
47653: PPUSH
47654: CALL_OW 254
47658: ST_TO_ADDR
// r := 4 ;
47659: LD_ADDR_VAR 0 9
47663: PUSH
47664: LD_INT 4
47666: ST_TO_ADDR
// for i := 1 to 5 do
47667: LD_ADDR_VAR 0 10
47671: PUSH
47672: DOUBLE
47673: LD_INT 1
47675: DEC
47676: ST_TO_ADDR
47677: LD_INT 5
47679: PUSH
47680: FOR_TO
47681: IFFALSE 47838
// begin _x := ShiftX ( x , d , r + i ) ;
47683: LD_ADDR_VAR 0 5
47687: PUSH
47688: LD_VAR 0 4
47692: PPUSH
47693: LD_VAR 0 8
47697: PPUSH
47698: LD_VAR 0 9
47702: PUSH
47703: LD_VAR 0 10
47707: PLUS
47708: PPUSH
47709: CALL_OW 272
47713: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
47714: LD_ADDR_VAR 0 7
47718: PUSH
47719: LD_VAR 0 6
47723: PPUSH
47724: LD_VAR 0 8
47728: PPUSH
47729: LD_VAR 0 9
47733: PUSH
47734: LD_VAR 0 10
47738: PLUS
47739: PPUSH
47740: CALL_OW 273
47744: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47745: LD_VAR 0 5
47749: PPUSH
47750: LD_VAR 0 7
47754: PPUSH
47755: CALL_OW 488
47759: PUSH
47760: LD_VAR 0 5
47764: PPUSH
47765: LD_VAR 0 7
47769: PPUSH
47770: CALL_OW 428
47774: PPUSH
47775: CALL_OW 247
47779: PUSH
47780: LD_INT 3
47782: PUSH
47783: LD_INT 2
47785: PUSH
47786: EMPTY
47787: LIST
47788: LIST
47789: IN
47790: NOT
47791: AND
47792: IFFALSE 47836
// begin ComMoveXY ( unit , _x , _y ) ;
47794: LD_VAR 0 1
47798: PPUSH
47799: LD_VAR 0 5
47803: PPUSH
47804: LD_VAR 0 7
47808: PPUSH
47809: CALL_OW 111
// result := [ _x , _y ] ;
47813: LD_ADDR_VAR 0 3
47817: PUSH
47818: LD_VAR 0 5
47822: PUSH
47823: LD_VAR 0 7
47827: PUSH
47828: EMPTY
47829: LIST
47830: LIST
47831: ST_TO_ADDR
// exit ;
47832: POP
47833: POP
47834: GO 47840
// end ; end ;
47836: GO 47680
47838: POP
47839: POP
// end ;
47840: LD_VAR 0 3
47844: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47845: LD_INT 0
47847: PPUSH
47848: PPUSH
47849: PPUSH
// result := 0 ;
47850: LD_ADDR_VAR 0 3
47854: PUSH
47855: LD_INT 0
47857: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47858: LD_VAR 0 1
47862: PUSH
47863: LD_INT 0
47865: LESS
47866: PUSH
47867: LD_VAR 0 1
47871: PUSH
47872: LD_INT 8
47874: GREATER
47875: OR
47876: PUSH
47877: LD_VAR 0 2
47881: PUSH
47882: LD_INT 0
47884: LESS
47885: OR
47886: PUSH
47887: LD_VAR 0 2
47891: PUSH
47892: LD_INT 8
47894: GREATER
47895: OR
47896: IFFALSE 47900
// exit ;
47898: GO 47975
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47900: LD_ADDR_VAR 0 4
47904: PUSH
47905: LD_INT 22
47907: PUSH
47908: LD_VAR 0 2
47912: PUSH
47913: EMPTY
47914: LIST
47915: LIST
47916: PPUSH
47917: CALL_OW 69
47921: PUSH
47922: FOR_IN
47923: IFFALSE 47973
// begin un := UnitShoot ( i ) ;
47925: LD_ADDR_VAR 0 5
47929: PUSH
47930: LD_VAR 0 4
47934: PPUSH
47935: CALL_OW 504
47939: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47940: LD_VAR 0 5
47944: PPUSH
47945: CALL_OW 255
47949: PUSH
47950: LD_VAR 0 1
47954: EQUAL
47955: IFFALSE 47971
// begin result := un ;
47957: LD_ADDR_VAR 0 3
47961: PUSH
47962: LD_VAR 0 5
47966: ST_TO_ADDR
// exit ;
47967: POP
47968: POP
47969: GO 47975
// end ; end ;
47971: GO 47922
47973: POP
47974: POP
// end ;
47975: LD_VAR 0 3
47979: RET
// export function GetCargoBay ( units ) ; begin
47980: LD_INT 0
47982: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47983: LD_ADDR_VAR 0 2
47987: PUSH
47988: LD_VAR 0 1
47992: PPUSH
47993: LD_INT 2
47995: PUSH
47996: LD_INT 34
47998: PUSH
47999: LD_INT 12
48001: PUSH
48002: EMPTY
48003: LIST
48004: LIST
48005: PUSH
48006: LD_INT 34
48008: PUSH
48009: LD_INT 51
48011: PUSH
48012: EMPTY
48013: LIST
48014: LIST
48015: PUSH
48016: LD_INT 34
48018: PUSH
48019: LD_INT 32
48021: PUSH
48022: EMPTY
48023: LIST
48024: LIST
48025: PUSH
48026: LD_INT 34
48028: PUSH
48029: LD_EXP 63
48033: PUSH
48034: EMPTY
48035: LIST
48036: LIST
48037: PUSH
48038: EMPTY
48039: LIST
48040: LIST
48041: LIST
48042: LIST
48043: LIST
48044: PPUSH
48045: CALL_OW 72
48049: ST_TO_ADDR
// end ;
48050: LD_VAR 0 2
48054: RET
// export function Negate ( value ) ; begin
48055: LD_INT 0
48057: PPUSH
// result := not value ;
48058: LD_ADDR_VAR 0 2
48062: PUSH
48063: LD_VAR 0 1
48067: NOT
48068: ST_TO_ADDR
// end ;
48069: LD_VAR 0 2
48073: RET
// export function Inc ( value ) ; begin
48074: LD_INT 0
48076: PPUSH
// result := value + 1 ;
48077: LD_ADDR_VAR 0 2
48081: PUSH
48082: LD_VAR 0 1
48086: PUSH
48087: LD_INT 1
48089: PLUS
48090: ST_TO_ADDR
// end ;
48091: LD_VAR 0 2
48095: RET
// export function Dec ( value ) ; begin
48096: LD_INT 0
48098: PPUSH
// result := value - 1 ;
48099: LD_ADDR_VAR 0 2
48103: PUSH
48104: LD_VAR 0 1
48108: PUSH
48109: LD_INT 1
48111: MINUS
48112: ST_TO_ADDR
// end ;
48113: LD_VAR 0 2
48117: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
48118: LD_INT 0
48120: PPUSH
48121: PPUSH
48122: PPUSH
48123: PPUSH
48124: PPUSH
48125: PPUSH
48126: PPUSH
48127: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
48128: LD_VAR 0 1
48132: PPUSH
48133: LD_VAR 0 2
48137: PPUSH
48138: CALL_OW 488
48142: NOT
48143: PUSH
48144: LD_VAR 0 3
48148: PPUSH
48149: LD_VAR 0 4
48153: PPUSH
48154: CALL_OW 488
48158: NOT
48159: OR
48160: IFFALSE 48173
// begin result := - 1 ;
48162: LD_ADDR_VAR 0 5
48166: PUSH
48167: LD_INT 1
48169: NEG
48170: ST_TO_ADDR
// exit ;
48171: GO 48408
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
48173: LD_ADDR_VAR 0 12
48177: PUSH
48178: LD_VAR 0 1
48182: PPUSH
48183: LD_VAR 0 2
48187: PPUSH
48188: LD_VAR 0 3
48192: PPUSH
48193: LD_VAR 0 4
48197: PPUSH
48198: CALL 47256 0 4
48202: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
48203: LD_ADDR_VAR 0 11
48207: PUSH
48208: LD_VAR 0 1
48212: PPUSH
48213: LD_VAR 0 2
48217: PPUSH
48218: LD_VAR 0 12
48222: PUSH
48223: LD_INT 1
48225: ARRAY
48226: PPUSH
48227: LD_VAR 0 12
48231: PUSH
48232: LD_INT 2
48234: ARRAY
48235: PPUSH
48236: CALL_OW 298
48240: ST_TO_ADDR
// distance := 9999 ;
48241: LD_ADDR_VAR 0 10
48245: PUSH
48246: LD_INT 9999
48248: ST_TO_ADDR
// for i := 0 to 5 do
48249: LD_ADDR_VAR 0 6
48253: PUSH
48254: DOUBLE
48255: LD_INT 0
48257: DEC
48258: ST_TO_ADDR
48259: LD_INT 5
48261: PUSH
48262: FOR_TO
48263: IFFALSE 48406
// begin _x := ShiftX ( x1 , i , centerDist ) ;
48265: LD_ADDR_VAR 0 7
48269: PUSH
48270: LD_VAR 0 1
48274: PPUSH
48275: LD_VAR 0 6
48279: PPUSH
48280: LD_VAR 0 11
48284: PPUSH
48285: CALL_OW 272
48289: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
48290: LD_ADDR_VAR 0 8
48294: PUSH
48295: LD_VAR 0 2
48299: PPUSH
48300: LD_VAR 0 6
48304: PPUSH
48305: LD_VAR 0 11
48309: PPUSH
48310: CALL_OW 273
48314: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
48315: LD_VAR 0 7
48319: PPUSH
48320: LD_VAR 0 8
48324: PPUSH
48325: CALL_OW 488
48329: NOT
48330: IFFALSE 48334
// continue ;
48332: GO 48262
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
48334: LD_ADDR_VAR 0 9
48338: PUSH
48339: LD_VAR 0 12
48343: PUSH
48344: LD_INT 1
48346: ARRAY
48347: PPUSH
48348: LD_VAR 0 12
48352: PUSH
48353: LD_INT 2
48355: ARRAY
48356: PPUSH
48357: LD_VAR 0 7
48361: PPUSH
48362: LD_VAR 0 8
48366: PPUSH
48367: CALL_OW 298
48371: ST_TO_ADDR
// if tmp < distance then
48372: LD_VAR 0 9
48376: PUSH
48377: LD_VAR 0 10
48381: LESS
48382: IFFALSE 48404
// begin result := i ;
48384: LD_ADDR_VAR 0 5
48388: PUSH
48389: LD_VAR 0 6
48393: ST_TO_ADDR
// distance := tmp ;
48394: LD_ADDR_VAR 0 10
48398: PUSH
48399: LD_VAR 0 9
48403: ST_TO_ADDR
// end ; end ;
48404: GO 48262
48406: POP
48407: POP
// end ;
48408: LD_VAR 0 5
48412: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48413: LD_INT 0
48415: PPUSH
48416: PPUSH
// if not driver or not IsInUnit ( driver ) then
48417: LD_VAR 0 1
48421: NOT
48422: PUSH
48423: LD_VAR 0 1
48427: PPUSH
48428: CALL_OW 310
48432: NOT
48433: OR
48434: IFFALSE 48438
// exit ;
48436: GO 48528
// vehicle := IsInUnit ( driver ) ;
48438: LD_ADDR_VAR 0 3
48442: PUSH
48443: LD_VAR 0 1
48447: PPUSH
48448: CALL_OW 310
48452: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48453: LD_VAR 0 1
48457: PPUSH
48458: LD_STRING \
48460: PUSH
48461: LD_INT 0
48463: PUSH
48464: LD_INT 0
48466: PUSH
48467: LD_INT 0
48469: PUSH
48470: LD_INT 0
48472: PUSH
48473: LD_INT 0
48475: PUSH
48476: LD_INT 0
48478: PUSH
48479: EMPTY
48480: LIST
48481: LIST
48482: LIST
48483: LIST
48484: LIST
48485: LIST
48486: LIST
48487: PUSH
48488: LD_STRING E
48490: PUSH
48491: LD_INT 0
48493: PUSH
48494: LD_INT 0
48496: PUSH
48497: LD_VAR 0 3
48501: PUSH
48502: LD_INT 0
48504: PUSH
48505: LD_INT 0
48507: PUSH
48508: LD_INT 0
48510: PUSH
48511: EMPTY
48512: LIST
48513: LIST
48514: LIST
48515: LIST
48516: LIST
48517: LIST
48518: LIST
48519: PUSH
48520: EMPTY
48521: LIST
48522: LIST
48523: PPUSH
48524: CALL_OW 446
// end ;
48528: LD_VAR 0 2
48532: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
48533: LD_INT 0
48535: PPUSH
48536: PPUSH
// if not driver or not IsInUnit ( driver ) then
48537: LD_VAR 0 1
48541: NOT
48542: PUSH
48543: LD_VAR 0 1
48547: PPUSH
48548: CALL_OW 310
48552: NOT
48553: OR
48554: IFFALSE 48558
// exit ;
48556: GO 48648
// vehicle := IsInUnit ( driver ) ;
48558: LD_ADDR_VAR 0 3
48562: PUSH
48563: LD_VAR 0 1
48567: PPUSH
48568: CALL_OW 310
48572: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
48573: LD_VAR 0 1
48577: PPUSH
48578: LD_STRING \
48580: PUSH
48581: LD_INT 0
48583: PUSH
48584: LD_INT 0
48586: PUSH
48587: LD_INT 0
48589: PUSH
48590: LD_INT 0
48592: PUSH
48593: LD_INT 0
48595: PUSH
48596: LD_INT 0
48598: PUSH
48599: EMPTY
48600: LIST
48601: LIST
48602: LIST
48603: LIST
48604: LIST
48605: LIST
48606: LIST
48607: PUSH
48608: LD_STRING E
48610: PUSH
48611: LD_INT 0
48613: PUSH
48614: LD_INT 0
48616: PUSH
48617: LD_VAR 0 3
48621: PUSH
48622: LD_INT 0
48624: PUSH
48625: LD_INT 0
48627: PUSH
48628: LD_INT 0
48630: PUSH
48631: EMPTY
48632: LIST
48633: LIST
48634: LIST
48635: LIST
48636: LIST
48637: LIST
48638: LIST
48639: PUSH
48640: EMPTY
48641: LIST
48642: LIST
48643: PPUSH
48644: CALL_OW 447
// end ;
48648: LD_VAR 0 2
48652: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
48653: LD_INT 0
48655: PPUSH
48656: PPUSH
48657: PPUSH
// tmp := [ ] ;
48658: LD_ADDR_VAR 0 5
48662: PUSH
48663: EMPTY
48664: ST_TO_ADDR
// for i in units do
48665: LD_ADDR_VAR 0 4
48669: PUSH
48670: LD_VAR 0 1
48674: PUSH
48675: FOR_IN
48676: IFFALSE 48714
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
48678: LD_ADDR_VAR 0 5
48682: PUSH
48683: LD_VAR 0 5
48687: PPUSH
48688: LD_VAR 0 5
48692: PUSH
48693: LD_INT 1
48695: PLUS
48696: PPUSH
48697: LD_VAR 0 4
48701: PPUSH
48702: CALL_OW 256
48706: PPUSH
48707: CALL_OW 2
48711: ST_TO_ADDR
48712: GO 48675
48714: POP
48715: POP
// if not tmp then
48716: LD_VAR 0 5
48720: NOT
48721: IFFALSE 48725
// exit ;
48723: GO 48773
// if asc then
48725: LD_VAR 0 2
48729: IFFALSE 48753
// result := SortListByListAsc ( units , tmp ) else
48731: LD_ADDR_VAR 0 3
48735: PUSH
48736: LD_VAR 0 1
48740: PPUSH
48741: LD_VAR 0 5
48745: PPUSH
48746: CALL_OW 76
48750: ST_TO_ADDR
48751: GO 48773
// result := SortListByListDesc ( units , tmp ) ;
48753: LD_ADDR_VAR 0 3
48757: PUSH
48758: LD_VAR 0 1
48762: PPUSH
48763: LD_VAR 0 5
48767: PPUSH
48768: CALL_OW 77
48772: ST_TO_ADDR
// end ;
48773: LD_VAR 0 3
48777: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48778: LD_INT 0
48780: PPUSH
48781: PPUSH
// task := GetTaskList ( mech ) ;
48782: LD_ADDR_VAR 0 4
48786: PUSH
48787: LD_VAR 0 1
48791: PPUSH
48792: CALL_OW 437
48796: ST_TO_ADDR
// if not task then
48797: LD_VAR 0 4
48801: NOT
48802: IFFALSE 48806
// exit ;
48804: GO 48848
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48806: LD_ADDR_VAR 0 3
48810: PUSH
48811: LD_VAR 0 4
48815: PUSH
48816: LD_INT 1
48818: ARRAY
48819: PUSH
48820: LD_INT 1
48822: ARRAY
48823: PUSH
48824: LD_STRING r
48826: EQUAL
48827: PUSH
48828: LD_VAR 0 4
48832: PUSH
48833: LD_INT 1
48835: ARRAY
48836: PUSH
48837: LD_INT 4
48839: ARRAY
48840: PUSH
48841: LD_VAR 0 2
48845: EQUAL
48846: AND
48847: ST_TO_ADDR
// end ;
48848: LD_VAR 0 3
48852: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48853: LD_INT 0
48855: PPUSH
// SetDir ( unit , d ) ;
48856: LD_VAR 0 1
48860: PPUSH
48861: LD_VAR 0 4
48865: PPUSH
48866: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48870: LD_VAR 0 1
48874: PPUSH
48875: LD_VAR 0 2
48879: PPUSH
48880: LD_VAR 0 3
48884: PPUSH
48885: LD_VAR 0 5
48889: PPUSH
48890: CALL_OW 48
// end ;
48894: LD_VAR 0 6
48898: RET
// export function ToNaturalNumber ( number ) ; begin
48899: LD_INT 0
48901: PPUSH
// result := number div 1 ;
48902: LD_ADDR_VAR 0 2
48906: PUSH
48907: LD_VAR 0 1
48911: PUSH
48912: LD_INT 1
48914: DIV
48915: ST_TO_ADDR
// if number < 0 then
48916: LD_VAR 0 1
48920: PUSH
48921: LD_INT 0
48923: LESS
48924: IFFALSE 48934
// result := 0 ;
48926: LD_ADDR_VAR 0 2
48930: PUSH
48931: LD_INT 0
48933: ST_TO_ADDR
// end ;
48934: LD_VAR 0 2
48938: RET
// export function SortByClass ( units , class ) ; var un ; begin
48939: LD_INT 0
48941: PPUSH
48942: PPUSH
// if not units or not class then
48943: LD_VAR 0 1
48947: NOT
48948: PUSH
48949: LD_VAR 0 2
48953: NOT
48954: OR
48955: IFFALSE 48959
// exit ;
48957: GO 49054
// result := [ ] ;
48959: LD_ADDR_VAR 0 3
48963: PUSH
48964: EMPTY
48965: ST_TO_ADDR
// for un in units do
48966: LD_ADDR_VAR 0 4
48970: PUSH
48971: LD_VAR 0 1
48975: PUSH
48976: FOR_IN
48977: IFFALSE 49052
// if GetClass ( un ) = class then
48979: LD_VAR 0 4
48983: PPUSH
48984: CALL_OW 257
48988: PUSH
48989: LD_VAR 0 2
48993: EQUAL
48994: IFFALSE 49021
// result := Insert ( result , 1 , un ) else
48996: LD_ADDR_VAR 0 3
49000: PUSH
49001: LD_VAR 0 3
49005: PPUSH
49006: LD_INT 1
49008: PPUSH
49009: LD_VAR 0 4
49013: PPUSH
49014: CALL_OW 2
49018: ST_TO_ADDR
49019: GO 49050
// result := Replace ( result , result + 1 , un ) ;
49021: LD_ADDR_VAR 0 3
49025: PUSH
49026: LD_VAR 0 3
49030: PPUSH
49031: LD_VAR 0 3
49035: PUSH
49036: LD_INT 1
49038: PLUS
49039: PPUSH
49040: LD_VAR 0 4
49044: PPUSH
49045: CALL_OW 1
49049: ST_TO_ADDR
49050: GO 48976
49052: POP
49053: POP
// end ;
49054: LD_VAR 0 3
49058: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
49059: LD_INT 0
49061: PPUSH
49062: PPUSH
49063: PPUSH
49064: PPUSH
49065: PPUSH
49066: PPUSH
49067: PPUSH
// result := [ ] ;
49068: LD_ADDR_VAR 0 4
49072: PUSH
49073: EMPTY
49074: ST_TO_ADDR
// if x - r < 0 then
49075: LD_VAR 0 1
49079: PUSH
49080: LD_VAR 0 3
49084: MINUS
49085: PUSH
49086: LD_INT 0
49088: LESS
49089: IFFALSE 49101
// min_x := 0 else
49091: LD_ADDR_VAR 0 8
49095: PUSH
49096: LD_INT 0
49098: ST_TO_ADDR
49099: GO 49117
// min_x := x - r ;
49101: LD_ADDR_VAR 0 8
49105: PUSH
49106: LD_VAR 0 1
49110: PUSH
49111: LD_VAR 0 3
49115: MINUS
49116: ST_TO_ADDR
// if y - r < 0 then
49117: LD_VAR 0 2
49121: PUSH
49122: LD_VAR 0 3
49126: MINUS
49127: PUSH
49128: LD_INT 0
49130: LESS
49131: IFFALSE 49143
// min_y := 0 else
49133: LD_ADDR_VAR 0 7
49137: PUSH
49138: LD_INT 0
49140: ST_TO_ADDR
49141: GO 49159
// min_y := y - r ;
49143: LD_ADDR_VAR 0 7
49147: PUSH
49148: LD_VAR 0 2
49152: PUSH
49153: LD_VAR 0 3
49157: MINUS
49158: ST_TO_ADDR
// max_x := x + r ;
49159: LD_ADDR_VAR 0 9
49163: PUSH
49164: LD_VAR 0 1
49168: PUSH
49169: LD_VAR 0 3
49173: PLUS
49174: ST_TO_ADDR
// max_y := y + r ;
49175: LD_ADDR_VAR 0 10
49179: PUSH
49180: LD_VAR 0 2
49184: PUSH
49185: LD_VAR 0 3
49189: PLUS
49190: ST_TO_ADDR
// for _x = min_x to max_x do
49191: LD_ADDR_VAR 0 5
49195: PUSH
49196: DOUBLE
49197: LD_VAR 0 8
49201: DEC
49202: ST_TO_ADDR
49203: LD_VAR 0 9
49207: PUSH
49208: FOR_TO
49209: IFFALSE 49310
// for _y = min_y to max_y do
49211: LD_ADDR_VAR 0 6
49215: PUSH
49216: DOUBLE
49217: LD_VAR 0 7
49221: DEC
49222: ST_TO_ADDR
49223: LD_VAR 0 10
49227: PUSH
49228: FOR_TO
49229: IFFALSE 49306
// begin if not ValidHex ( _x , _y ) then
49231: LD_VAR 0 5
49235: PPUSH
49236: LD_VAR 0 6
49240: PPUSH
49241: CALL_OW 488
49245: NOT
49246: IFFALSE 49250
// continue ;
49248: GO 49228
// if GetResourceTypeXY ( _x , _y ) then
49250: LD_VAR 0 5
49254: PPUSH
49255: LD_VAR 0 6
49259: PPUSH
49260: CALL_OW 283
49264: IFFALSE 49304
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
49266: LD_ADDR_VAR 0 4
49270: PUSH
49271: LD_VAR 0 4
49275: PPUSH
49276: LD_VAR 0 4
49280: PUSH
49281: LD_INT 1
49283: PLUS
49284: PPUSH
49285: LD_VAR 0 5
49289: PUSH
49290: LD_VAR 0 6
49294: PUSH
49295: EMPTY
49296: LIST
49297: LIST
49298: PPUSH
49299: CALL_OW 1
49303: ST_TO_ADDR
// end ;
49304: GO 49228
49306: POP
49307: POP
49308: GO 49208
49310: POP
49311: POP
// end ;
49312: LD_VAR 0 4
49316: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
49317: LD_INT 0
49319: PPUSH
49320: PPUSH
49321: PPUSH
49322: PPUSH
49323: PPUSH
49324: PPUSH
49325: PPUSH
49326: PPUSH
// if not units then
49327: LD_VAR 0 1
49331: NOT
49332: IFFALSE 49336
// exit ;
49334: GO 49862
// result := UnitFilter ( units , [ f_ok ] ) ;
49336: LD_ADDR_VAR 0 3
49340: PUSH
49341: LD_VAR 0 1
49345: PPUSH
49346: LD_INT 50
49348: PUSH
49349: EMPTY
49350: LIST
49351: PPUSH
49352: CALL_OW 72
49356: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
49357: LD_ADDR_VAR 0 8
49361: PUSH
49362: LD_VAR 0 1
49366: PUSH
49367: LD_INT 1
49369: ARRAY
49370: PPUSH
49371: CALL_OW 255
49375: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb , ru_time_lapser ] ;
49376: LD_ADDR_VAR 0 10
49380: PUSH
49381: LD_INT 29
49383: PUSH
49384: LD_EXP 66
49388: PUSH
49389: LD_INT 49
49391: PUSH
49392: EMPTY
49393: LIST
49394: LIST
49395: LIST
49396: ST_TO_ADDR
// if not result then
49397: LD_VAR 0 3
49401: NOT
49402: IFFALSE 49406
// exit ;
49404: GO 49862
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
49406: LD_ADDR_VAR 0 5
49410: PUSH
49411: LD_INT 81
49413: PUSH
49414: LD_VAR 0 8
49418: PUSH
49419: EMPTY
49420: LIST
49421: LIST
49422: PPUSH
49423: CALL_OW 69
49427: ST_TO_ADDR
// for i in result do
49428: LD_ADDR_VAR 0 4
49432: PUSH
49433: LD_VAR 0 3
49437: PUSH
49438: FOR_IN
49439: IFFALSE 49860
// begin tag := GetTag ( i ) + 1 ;
49441: LD_ADDR_VAR 0 9
49445: PUSH
49446: LD_VAR 0 4
49450: PPUSH
49451: CALL_OW 110
49455: PUSH
49456: LD_INT 1
49458: PLUS
49459: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
49460: LD_ADDR_VAR 0 7
49464: PUSH
49465: LD_VAR 0 4
49469: PPUSH
49470: CALL_OW 250
49474: PPUSH
49475: LD_VAR 0 4
49479: PPUSH
49480: CALL_OW 251
49484: PPUSH
49485: LD_INT 6
49487: PPUSH
49488: CALL 49059 0 3
49492: ST_TO_ADDR
// if GetType ( i ) = unit_vehicle and cr and not GetWeapon ( i ) in ignoreCratesWeapon then
49493: LD_VAR 0 4
49497: PPUSH
49498: CALL_OW 247
49502: PUSH
49503: LD_INT 2
49505: EQUAL
49506: PUSH
49507: LD_VAR 0 7
49511: AND
49512: PUSH
49513: LD_VAR 0 4
49517: PPUSH
49518: CALL_OW 264
49522: PUSH
49523: LD_VAR 0 10
49527: IN
49528: NOT
49529: AND
49530: IFFALSE 49569
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
49532: LD_VAR 0 4
49536: PPUSH
49537: LD_VAR 0 7
49541: PUSH
49542: LD_INT 1
49544: ARRAY
49545: PUSH
49546: LD_INT 1
49548: ARRAY
49549: PPUSH
49550: LD_VAR 0 7
49554: PUSH
49555: LD_INT 1
49557: ARRAY
49558: PUSH
49559: LD_INT 2
49561: ARRAY
49562: PPUSH
49563: CALL_OW 116
49567: GO 49858
// if path > tag then
49569: LD_VAR 0 2
49573: PUSH
49574: LD_VAR 0 9
49578: GREATER
49579: IFFALSE 49787
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 8 ] ) ;
49581: LD_ADDR_VAR 0 6
49585: PUSH
49586: LD_VAR 0 5
49590: PPUSH
49591: LD_INT 91
49593: PUSH
49594: LD_VAR 0 4
49598: PUSH
49599: LD_INT 8
49601: PUSH
49602: EMPTY
49603: LIST
49604: LIST
49605: LIST
49606: PPUSH
49607: CALL_OW 72
49611: ST_TO_ADDR
// if nearEnemy then
49612: LD_VAR 0 6
49616: IFFALSE 49685
// begin if GetWeapon ( i ) = ru_time_lapser then
49618: LD_VAR 0 4
49622: PPUSH
49623: CALL_OW 264
49627: PUSH
49628: LD_INT 49
49630: EQUAL
49631: IFFALSE 49659
// ComMoveUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
49633: LD_VAR 0 4
49637: PPUSH
49638: LD_VAR 0 6
49642: PPUSH
49643: LD_VAR 0 4
49647: PPUSH
49648: CALL_OW 74
49652: PPUSH
49653: CALL_OW 112
49657: GO 49683
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) ;
49659: LD_VAR 0 4
49663: PPUSH
49664: LD_VAR 0 6
49668: PPUSH
49669: LD_VAR 0 4
49673: PPUSH
49674: CALL_OW 74
49678: PPUSH
49679: CALL_OW 115
// end else
49683: GO 49785
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
49685: LD_VAR 0 4
49689: PPUSH
49690: LD_VAR 0 2
49694: PUSH
49695: LD_VAR 0 9
49699: ARRAY
49700: PUSH
49701: LD_INT 1
49703: ARRAY
49704: PPUSH
49705: LD_VAR 0 2
49709: PUSH
49710: LD_VAR 0 9
49714: ARRAY
49715: PUSH
49716: LD_INT 2
49718: ARRAY
49719: PPUSH
49720: CALL_OW 297
49724: PUSH
49725: LD_INT 6
49727: GREATER
49728: IFFALSE 49771
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
49730: LD_VAR 0 4
49734: PPUSH
49735: LD_VAR 0 2
49739: PUSH
49740: LD_VAR 0 9
49744: ARRAY
49745: PUSH
49746: LD_INT 1
49748: ARRAY
49749: PPUSH
49750: LD_VAR 0 2
49754: PUSH
49755: LD_VAR 0 9
49759: ARRAY
49760: PUSH
49761: LD_INT 2
49763: ARRAY
49764: PPUSH
49765: CALL_OW 114
49769: GO 49785
// SetTag ( i , tag ) ;
49771: LD_VAR 0 4
49775: PPUSH
49776: LD_VAR 0 9
49780: PPUSH
49781: CALL_OW 109
// end else
49785: GO 49858
// if enemy then
49787: LD_VAR 0 5
49791: IFFALSE 49858
// begin if GetWeapon ( i ) = ru_time_lapser then
49793: LD_VAR 0 4
49797: PPUSH
49798: CALL_OW 264
49802: PUSH
49803: LD_INT 49
49805: EQUAL
49806: IFFALSE 49834
// ComMoveUnit ( i , NearestUnitToUnit ( enemy , i ) ) else
49808: LD_VAR 0 4
49812: PPUSH
49813: LD_VAR 0 5
49817: PPUSH
49818: LD_VAR 0 4
49822: PPUSH
49823: CALL_OW 74
49827: PPUSH
49828: CALL_OW 112
49832: GO 49858
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
49834: LD_VAR 0 4
49838: PPUSH
49839: LD_VAR 0 5
49843: PPUSH
49844: LD_VAR 0 4
49848: PPUSH
49849: CALL_OW 74
49853: PPUSH
49854: CALL_OW 115
// end ; end ;
49858: GO 49438
49860: POP
49861: POP
// end ;
49862: LD_VAR 0 3
49866: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49867: LD_INT 0
49869: PPUSH
49870: PPUSH
49871: PPUSH
// if not unit or IsInUnit ( unit ) then
49872: LD_VAR 0 1
49876: NOT
49877: PUSH
49878: LD_VAR 0 1
49882: PPUSH
49883: CALL_OW 310
49887: OR
49888: IFFALSE 49892
// exit ;
49890: GO 49983
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49892: LD_ADDR_VAR 0 4
49896: PUSH
49897: LD_VAR 0 1
49901: PPUSH
49902: CALL_OW 250
49906: PPUSH
49907: LD_VAR 0 2
49911: PPUSH
49912: LD_INT 1
49914: PPUSH
49915: CALL_OW 272
49919: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49920: LD_ADDR_VAR 0 5
49924: PUSH
49925: LD_VAR 0 1
49929: PPUSH
49930: CALL_OW 251
49934: PPUSH
49935: LD_VAR 0 2
49939: PPUSH
49940: LD_INT 1
49942: PPUSH
49943: CALL_OW 273
49947: ST_TO_ADDR
// if ValidHex ( x , y ) then
49948: LD_VAR 0 4
49952: PPUSH
49953: LD_VAR 0 5
49957: PPUSH
49958: CALL_OW 488
49962: IFFALSE 49983
// ComTurnXY ( unit , x , y ) ;
49964: LD_VAR 0 1
49968: PPUSH
49969: LD_VAR 0 4
49973: PPUSH
49974: LD_VAR 0 5
49978: PPUSH
49979: CALL_OW 118
// end ;
49983: LD_VAR 0 3
49987: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49988: LD_INT 0
49990: PPUSH
49991: PPUSH
// result := false ;
49992: LD_ADDR_VAR 0 3
49996: PUSH
49997: LD_INT 0
49999: ST_TO_ADDR
// if not units then
50000: LD_VAR 0 2
50004: NOT
50005: IFFALSE 50009
// exit ;
50007: GO 50054
// for i in units do
50009: LD_ADDR_VAR 0 4
50013: PUSH
50014: LD_VAR 0 2
50018: PUSH
50019: FOR_IN
50020: IFFALSE 50052
// if See ( side , i ) then
50022: LD_VAR 0 1
50026: PPUSH
50027: LD_VAR 0 4
50031: PPUSH
50032: CALL_OW 292
50036: IFFALSE 50050
// begin result := true ;
50038: LD_ADDR_VAR 0 3
50042: PUSH
50043: LD_INT 1
50045: ST_TO_ADDR
// exit ;
50046: POP
50047: POP
50048: GO 50054
// end ;
50050: GO 50019
50052: POP
50053: POP
// end ;
50054: LD_VAR 0 3
50058: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
50059: LD_INT 0
50061: PPUSH
50062: PPUSH
50063: PPUSH
50064: PPUSH
// if not unit or not points then
50065: LD_VAR 0 1
50069: NOT
50070: PUSH
50071: LD_VAR 0 2
50075: NOT
50076: OR
50077: IFFALSE 50081
// exit ;
50079: GO 50171
// dist := 99999 ;
50081: LD_ADDR_VAR 0 5
50085: PUSH
50086: LD_INT 99999
50088: ST_TO_ADDR
// for i in points do
50089: LD_ADDR_VAR 0 4
50093: PUSH
50094: LD_VAR 0 2
50098: PUSH
50099: FOR_IN
50100: IFFALSE 50169
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
50102: LD_ADDR_VAR 0 6
50106: PUSH
50107: LD_VAR 0 1
50111: PPUSH
50112: LD_VAR 0 4
50116: PUSH
50117: LD_INT 1
50119: ARRAY
50120: PPUSH
50121: LD_VAR 0 4
50125: PUSH
50126: LD_INT 2
50128: ARRAY
50129: PPUSH
50130: CALL_OW 297
50134: ST_TO_ADDR
// if tmpDist < dist then
50135: LD_VAR 0 6
50139: PUSH
50140: LD_VAR 0 5
50144: LESS
50145: IFFALSE 50167
// begin result := i ;
50147: LD_ADDR_VAR 0 3
50151: PUSH
50152: LD_VAR 0 4
50156: ST_TO_ADDR
// dist := tmpDist ;
50157: LD_ADDR_VAR 0 5
50161: PUSH
50162: LD_VAR 0 6
50166: ST_TO_ADDR
// end ; end ;
50167: GO 50099
50169: POP
50170: POP
// end ;
50171: LD_VAR 0 3
50175: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
50176: LD_INT 0
50178: PPUSH
// uc_side := side ;
50179: LD_ADDR_OWVAR 20
50183: PUSH
50184: LD_VAR 0 1
50188: ST_TO_ADDR
// uc_nation := 3 ;
50189: LD_ADDR_OWVAR 21
50193: PUSH
50194: LD_INT 3
50196: ST_TO_ADDR
// vc_chassis := 25 ;
50197: LD_ADDR_OWVAR 37
50201: PUSH
50202: LD_INT 25
50204: ST_TO_ADDR
// vc_engine := engine_siberite ;
50205: LD_ADDR_OWVAR 39
50209: PUSH
50210: LD_INT 3
50212: ST_TO_ADDR
// vc_control := control_computer ;
50213: LD_ADDR_OWVAR 38
50217: PUSH
50218: LD_INT 3
50220: ST_TO_ADDR
// vc_weapon := 59 ;
50221: LD_ADDR_OWVAR 40
50225: PUSH
50226: LD_INT 59
50228: ST_TO_ADDR
// result := CreateVehicle ;
50229: LD_ADDR_VAR 0 5
50233: PUSH
50234: CALL_OW 45
50238: ST_TO_ADDR
// SetDir ( result , d ) ;
50239: LD_VAR 0 5
50243: PPUSH
50244: LD_VAR 0 4
50248: PPUSH
50249: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
50253: LD_VAR 0 5
50257: PPUSH
50258: LD_VAR 0 2
50262: PPUSH
50263: LD_VAR 0 3
50267: PPUSH
50268: LD_INT 0
50270: PPUSH
50271: CALL_OW 48
// end ;
50275: LD_VAR 0 5
50279: RET
// export function GetMultiCargo ( cargo ) ; var i , tmp ; begin
50280: LD_INT 0
50282: PPUSH
50283: PPUSH
50284: PPUSH
// result := [ 0 , 0 , 0 , 0 ] ;
50285: LD_ADDR_VAR 0 2
50289: PUSH
50290: LD_INT 0
50292: PUSH
50293: LD_INT 0
50295: PUSH
50296: LD_INT 0
50298: PUSH
50299: LD_INT 0
50301: PUSH
50302: EMPTY
50303: LIST
50304: LIST
50305: LIST
50306: LIST
50307: ST_TO_ADDR
// if not cargo or not GetWeapon ( cargo ) in [ us_cargo_bay , ru_cargo_bay , ar_cargo_bay , ru_big_cargo_bay ] then
50308: LD_VAR 0 1
50312: NOT
50313: PUSH
50314: LD_VAR 0 1
50318: PPUSH
50319: CALL_OW 264
50323: PUSH
50324: LD_INT 12
50326: PUSH
50327: LD_INT 51
50329: PUSH
50330: LD_INT 32
50332: PUSH
50333: LD_EXP 63
50337: PUSH
50338: EMPTY
50339: LIST
50340: LIST
50341: LIST
50342: LIST
50343: IN
50344: NOT
50345: OR
50346: IFFALSE 50350
// exit ;
50348: GO 50448
// for i := 1 to 3 do
50350: LD_ADDR_VAR 0 3
50354: PUSH
50355: DOUBLE
50356: LD_INT 1
50358: DEC
50359: ST_TO_ADDR
50360: LD_INT 3
50362: PUSH
50363: FOR_TO
50364: IFFALSE 50446
// begin tmp := GetCargo ( cargo , i ) ;
50366: LD_ADDR_VAR 0 4
50370: PUSH
50371: LD_VAR 0 1
50375: PPUSH
50376: LD_VAR 0 3
50380: PPUSH
50381: CALL_OW 289
50385: ST_TO_ADDR
// result := Replace ( result , i , tmp ) ;
50386: LD_ADDR_VAR 0 2
50390: PUSH
50391: LD_VAR 0 2
50395: PPUSH
50396: LD_VAR 0 3
50400: PPUSH
50401: LD_VAR 0 4
50405: PPUSH
50406: CALL_OW 1
50410: ST_TO_ADDR
// result := Replace ( result , 4 , result [ 4 ] + tmp ) ;
50411: LD_ADDR_VAR 0 2
50415: PUSH
50416: LD_VAR 0 2
50420: PPUSH
50421: LD_INT 4
50423: PPUSH
50424: LD_VAR 0 2
50428: PUSH
50429: LD_INT 4
50431: ARRAY
50432: PUSH
50433: LD_VAR 0 4
50437: PLUS
50438: PPUSH
50439: CALL_OW 1
50443: ST_TO_ADDR
// end ;
50444: GO 50363
50446: POP
50447: POP
// end ;
50448: LD_VAR 0 2
50452: RET
// export function Length ( array ) ; begin
50453: LD_INT 0
50455: PPUSH
// result := array + 0 ;
50456: LD_ADDR_VAR 0 2
50460: PUSH
50461: LD_VAR 0 1
50465: PUSH
50466: LD_INT 0
50468: PLUS
50469: ST_TO_ADDR
// end ; end_of_file
50470: LD_VAR 0 2
50474: RET
// every 0 0$1 do
50475: GO 50477
50477: DISABLE
// begin enable ;
50478: ENABLE
// ToLua ( updateTimer( & tick & ); ) ;
50479: LD_STRING updateTimer(
50481: PUSH
50482: LD_OWVAR 1
50486: STR
50487: PUSH
50488: LD_STRING );
50490: STR
50491: PPUSH
50492: CALL_OW 559
// end ;
50496: END
// export function SOS_MapStart ( ) ; begin
50497: LD_INT 0
50499: PPUSH
// if streamModeActive then
50500: LD_EXP 81
50504: IFFALSE 50513
// DefineStreamItems ( true ) ;
50506: LD_INT 1
50508: PPUSH
50509: CALL 52167 0 1
// UpdateFactoryWaypoints ( ) ;
50513: CALL 65028 0 0
// UpdateWarhouseGatheringPoints ( ) ;
50517: CALL 65281 0 0
// end ;
50521: LD_VAR 0 1
50525: RET
// export function SOS_CustomCommand ( p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
50526: LD_INT 0
50528: PPUSH
// if p2 = 100 then
50529: LD_VAR 0 2
50533: PUSH
50534: LD_INT 100
50536: EQUAL
50537: IFFALSE 51540
// begin if not StreamModeActive then
50539: LD_EXP 81
50543: NOT
50544: IFFALSE 50554
// StreamModeActive := true ;
50546: LD_ADDR_EXP 81
50550: PUSH
50551: LD_INT 1
50553: ST_TO_ADDR
// if p3 = 0 then
50554: LD_VAR 0 3
50558: PUSH
50559: LD_INT 0
50561: EQUAL
50562: IFFALSE 50568
// InitStreamMode ;
50564: CALL 51703 0 0
// if p3 = 1 then
50568: LD_VAR 0 3
50572: PUSH
50573: LD_INT 1
50575: EQUAL
50576: IFFALSE 50586
// sRocket := true ;
50578: LD_ADDR_EXP 86
50582: PUSH
50583: LD_INT 1
50585: ST_TO_ADDR
// if p3 = 2 then
50586: LD_VAR 0 3
50590: PUSH
50591: LD_INT 2
50593: EQUAL
50594: IFFALSE 50604
// sSpeed := true ;
50596: LD_ADDR_EXP 85
50600: PUSH
50601: LD_INT 1
50603: ST_TO_ADDR
// if p3 = 3 then
50604: LD_VAR 0 3
50608: PUSH
50609: LD_INT 3
50611: EQUAL
50612: IFFALSE 50622
// sEngine := true ;
50614: LD_ADDR_EXP 87
50618: PUSH
50619: LD_INT 1
50621: ST_TO_ADDR
// if p3 = 4 then
50622: LD_VAR 0 3
50626: PUSH
50627: LD_INT 4
50629: EQUAL
50630: IFFALSE 50640
// sSpec := true ;
50632: LD_ADDR_EXP 84
50636: PUSH
50637: LD_INT 1
50639: ST_TO_ADDR
// if p3 = 5 then
50640: LD_VAR 0 3
50644: PUSH
50645: LD_INT 5
50647: EQUAL
50648: IFFALSE 50658
// sLevel := true ;
50650: LD_ADDR_EXP 88
50654: PUSH
50655: LD_INT 1
50657: ST_TO_ADDR
// if p3 = 6 then
50658: LD_VAR 0 3
50662: PUSH
50663: LD_INT 6
50665: EQUAL
50666: IFFALSE 50676
// sArmoury := true ;
50668: LD_ADDR_EXP 89
50672: PUSH
50673: LD_INT 1
50675: ST_TO_ADDR
// if p3 = 7 then
50676: LD_VAR 0 3
50680: PUSH
50681: LD_INT 7
50683: EQUAL
50684: IFFALSE 50694
// sRadar := true ;
50686: LD_ADDR_EXP 90
50690: PUSH
50691: LD_INT 1
50693: ST_TO_ADDR
// if p3 = 8 then
50694: LD_VAR 0 3
50698: PUSH
50699: LD_INT 8
50701: EQUAL
50702: IFFALSE 50712
// sBunker := true ;
50704: LD_ADDR_EXP 91
50708: PUSH
50709: LD_INT 1
50711: ST_TO_ADDR
// if p3 = 9 then
50712: LD_VAR 0 3
50716: PUSH
50717: LD_INT 9
50719: EQUAL
50720: IFFALSE 50730
// sHack := true ;
50722: LD_ADDR_EXP 92
50726: PUSH
50727: LD_INT 1
50729: ST_TO_ADDR
// if p3 = 10 then
50730: LD_VAR 0 3
50734: PUSH
50735: LD_INT 10
50737: EQUAL
50738: IFFALSE 50748
// sFire := true ;
50740: LD_ADDR_EXP 93
50744: PUSH
50745: LD_INT 1
50747: ST_TO_ADDR
// if p3 = 11 then
50748: LD_VAR 0 3
50752: PUSH
50753: LD_INT 11
50755: EQUAL
50756: IFFALSE 50766
// sRefresh := true ;
50758: LD_ADDR_EXP 94
50762: PUSH
50763: LD_INT 1
50765: ST_TO_ADDR
// if p3 = 12 then
50766: LD_VAR 0 3
50770: PUSH
50771: LD_INT 12
50773: EQUAL
50774: IFFALSE 50784
// sExp := true ;
50776: LD_ADDR_EXP 95
50780: PUSH
50781: LD_INT 1
50783: ST_TO_ADDR
// if p3 = 13 then
50784: LD_VAR 0 3
50788: PUSH
50789: LD_INT 13
50791: EQUAL
50792: IFFALSE 50802
// sDepot := true ;
50794: LD_ADDR_EXP 96
50798: PUSH
50799: LD_INT 1
50801: ST_TO_ADDR
// if p3 = 14 then
50802: LD_VAR 0 3
50806: PUSH
50807: LD_INT 14
50809: EQUAL
50810: IFFALSE 50820
// sFlag := true ;
50812: LD_ADDR_EXP 97
50816: PUSH
50817: LD_INT 1
50819: ST_TO_ADDR
// if p3 = 15 then
50820: LD_VAR 0 3
50824: PUSH
50825: LD_INT 15
50827: EQUAL
50828: IFFALSE 50838
// sKamikadze := true ;
50830: LD_ADDR_EXP 105
50834: PUSH
50835: LD_INT 1
50837: ST_TO_ADDR
// if p3 = 16 then
50838: LD_VAR 0 3
50842: PUSH
50843: LD_INT 16
50845: EQUAL
50846: IFFALSE 50856
// sTroll := true ;
50848: LD_ADDR_EXP 106
50852: PUSH
50853: LD_INT 1
50855: ST_TO_ADDR
// if p3 = 17 then
50856: LD_VAR 0 3
50860: PUSH
50861: LD_INT 17
50863: EQUAL
50864: IFFALSE 50874
// sSlow := true ;
50866: LD_ADDR_EXP 107
50870: PUSH
50871: LD_INT 1
50873: ST_TO_ADDR
// if p3 = 18 then
50874: LD_VAR 0 3
50878: PUSH
50879: LD_INT 18
50881: EQUAL
50882: IFFALSE 50892
// sLack := true ;
50884: LD_ADDR_EXP 108
50888: PUSH
50889: LD_INT 1
50891: ST_TO_ADDR
// if p3 = 19 then
50892: LD_VAR 0 3
50896: PUSH
50897: LD_INT 19
50899: EQUAL
50900: IFFALSE 50910
// sTank := true ;
50902: LD_ADDR_EXP 110
50906: PUSH
50907: LD_INT 1
50909: ST_TO_ADDR
// if p3 = 20 then
50910: LD_VAR 0 3
50914: PUSH
50915: LD_INT 20
50917: EQUAL
50918: IFFALSE 50928
// sRemote := true ;
50920: LD_ADDR_EXP 111
50924: PUSH
50925: LD_INT 1
50927: ST_TO_ADDR
// if p3 = 21 then
50928: LD_VAR 0 3
50932: PUSH
50933: LD_INT 21
50935: EQUAL
50936: IFFALSE 50946
// sPowell := true ;
50938: LD_ADDR_EXP 112
50942: PUSH
50943: LD_INT 1
50945: ST_TO_ADDR
// if p3 = 22 then
50946: LD_VAR 0 3
50950: PUSH
50951: LD_INT 22
50953: EQUAL
50954: IFFALSE 50964
// sTeleport := true ;
50956: LD_ADDR_EXP 115
50960: PUSH
50961: LD_INT 1
50963: ST_TO_ADDR
// if p3 = 23 then
50964: LD_VAR 0 3
50968: PUSH
50969: LD_INT 23
50971: EQUAL
50972: IFFALSE 50982
// sOilTower := true ;
50974: LD_ADDR_EXP 117
50978: PUSH
50979: LD_INT 1
50981: ST_TO_ADDR
// if p3 = 24 then
50982: LD_VAR 0 3
50986: PUSH
50987: LD_INT 24
50989: EQUAL
50990: IFFALSE 51000
// sShovel := true ;
50992: LD_ADDR_EXP 118
50996: PUSH
50997: LD_INT 1
50999: ST_TO_ADDR
// if p3 = 25 then
51000: LD_VAR 0 3
51004: PUSH
51005: LD_INT 25
51007: EQUAL
51008: IFFALSE 51018
// sSheik := true ;
51010: LD_ADDR_EXP 119
51014: PUSH
51015: LD_INT 1
51017: ST_TO_ADDR
// if p3 = 26 then
51018: LD_VAR 0 3
51022: PUSH
51023: LD_INT 26
51025: EQUAL
51026: IFFALSE 51036
// sEarthquake := true ;
51028: LD_ADDR_EXP 121
51032: PUSH
51033: LD_INT 1
51035: ST_TO_ADDR
// if p3 = 27 then
51036: LD_VAR 0 3
51040: PUSH
51041: LD_INT 27
51043: EQUAL
51044: IFFALSE 51054
// sAI := true ;
51046: LD_ADDR_EXP 122
51050: PUSH
51051: LD_INT 1
51053: ST_TO_ADDR
// if p3 = 28 then
51054: LD_VAR 0 3
51058: PUSH
51059: LD_INT 28
51061: EQUAL
51062: IFFALSE 51072
// sCargo := true ;
51064: LD_ADDR_EXP 125
51068: PUSH
51069: LD_INT 1
51071: ST_TO_ADDR
// if p3 = 29 then
51072: LD_VAR 0 3
51076: PUSH
51077: LD_INT 29
51079: EQUAL
51080: IFFALSE 51090
// sDLaser := true ;
51082: LD_ADDR_EXP 126
51086: PUSH
51087: LD_INT 1
51089: ST_TO_ADDR
// if p3 = 30 then
51090: LD_VAR 0 3
51094: PUSH
51095: LD_INT 30
51097: EQUAL
51098: IFFALSE 51108
// sExchange := true ;
51100: LD_ADDR_EXP 127
51104: PUSH
51105: LD_INT 1
51107: ST_TO_ADDR
// if p3 = 31 then
51108: LD_VAR 0 3
51112: PUSH
51113: LD_INT 31
51115: EQUAL
51116: IFFALSE 51126
// sFac := true ;
51118: LD_ADDR_EXP 128
51122: PUSH
51123: LD_INT 1
51125: ST_TO_ADDR
// if p3 = 32 then
51126: LD_VAR 0 3
51130: PUSH
51131: LD_INT 32
51133: EQUAL
51134: IFFALSE 51144
// sPower := true ;
51136: LD_ADDR_EXP 129
51140: PUSH
51141: LD_INT 1
51143: ST_TO_ADDR
// if p3 = 33 then
51144: LD_VAR 0 3
51148: PUSH
51149: LD_INT 33
51151: EQUAL
51152: IFFALSE 51162
// sRandom := true ;
51154: LD_ADDR_EXP 130
51158: PUSH
51159: LD_INT 1
51161: ST_TO_ADDR
// if p3 = 34 then
51162: LD_VAR 0 3
51166: PUSH
51167: LD_INT 34
51169: EQUAL
51170: IFFALSE 51180
// sShield := true ;
51172: LD_ADDR_EXP 131
51176: PUSH
51177: LD_INT 1
51179: ST_TO_ADDR
// if p3 = 35 then
51180: LD_VAR 0 3
51184: PUSH
51185: LD_INT 35
51187: EQUAL
51188: IFFALSE 51198
// sTime := true ;
51190: LD_ADDR_EXP 132
51194: PUSH
51195: LD_INT 1
51197: ST_TO_ADDR
// if p3 = 36 then
51198: LD_VAR 0 3
51202: PUSH
51203: LD_INT 36
51205: EQUAL
51206: IFFALSE 51216
// sTools := true ;
51208: LD_ADDR_EXP 133
51212: PUSH
51213: LD_INT 1
51215: ST_TO_ADDR
// if p3 = 101 then
51216: LD_VAR 0 3
51220: PUSH
51221: LD_INT 101
51223: EQUAL
51224: IFFALSE 51234
// sSold := true ;
51226: LD_ADDR_EXP 98
51230: PUSH
51231: LD_INT 1
51233: ST_TO_ADDR
// if p3 = 102 then
51234: LD_VAR 0 3
51238: PUSH
51239: LD_INT 102
51241: EQUAL
51242: IFFALSE 51252
// sDiff := true ;
51244: LD_ADDR_EXP 99
51248: PUSH
51249: LD_INT 1
51251: ST_TO_ADDR
// if p3 = 103 then
51252: LD_VAR 0 3
51256: PUSH
51257: LD_INT 103
51259: EQUAL
51260: IFFALSE 51270
// sFog := true ;
51262: LD_ADDR_EXP 102
51266: PUSH
51267: LD_INT 1
51269: ST_TO_ADDR
// if p3 = 104 then
51270: LD_VAR 0 3
51274: PUSH
51275: LD_INT 104
51277: EQUAL
51278: IFFALSE 51288
// sReset := true ;
51280: LD_ADDR_EXP 103
51284: PUSH
51285: LD_INT 1
51287: ST_TO_ADDR
// if p3 = 105 then
51288: LD_VAR 0 3
51292: PUSH
51293: LD_INT 105
51295: EQUAL
51296: IFFALSE 51306
// sSun := true ;
51298: LD_ADDR_EXP 104
51302: PUSH
51303: LD_INT 1
51305: ST_TO_ADDR
// if p3 = 106 then
51306: LD_VAR 0 3
51310: PUSH
51311: LD_INT 106
51313: EQUAL
51314: IFFALSE 51324
// sTiger := true ;
51316: LD_ADDR_EXP 100
51320: PUSH
51321: LD_INT 1
51323: ST_TO_ADDR
// if p3 = 107 then
51324: LD_VAR 0 3
51328: PUSH
51329: LD_INT 107
51331: EQUAL
51332: IFFALSE 51342
// sBomb := true ;
51334: LD_ADDR_EXP 101
51338: PUSH
51339: LD_INT 1
51341: ST_TO_ADDR
// if p3 = 108 then
51342: LD_VAR 0 3
51346: PUSH
51347: LD_INT 108
51349: EQUAL
51350: IFFALSE 51360
// sWound := true ;
51352: LD_ADDR_EXP 109
51356: PUSH
51357: LD_INT 1
51359: ST_TO_ADDR
// if p3 = 109 then
51360: LD_VAR 0 3
51364: PUSH
51365: LD_INT 109
51367: EQUAL
51368: IFFALSE 51378
// sBetray := true ;
51370: LD_ADDR_EXP 113
51374: PUSH
51375: LD_INT 1
51377: ST_TO_ADDR
// if p3 = 110 then
51378: LD_VAR 0 3
51382: PUSH
51383: LD_INT 110
51385: EQUAL
51386: IFFALSE 51396
// sContamin := true ;
51388: LD_ADDR_EXP 114
51392: PUSH
51393: LD_INT 1
51395: ST_TO_ADDR
// if p3 = 111 then
51396: LD_VAR 0 3
51400: PUSH
51401: LD_INT 111
51403: EQUAL
51404: IFFALSE 51414
// sOil := true ;
51406: LD_ADDR_EXP 116
51410: PUSH
51411: LD_INT 1
51413: ST_TO_ADDR
// if p3 = 112 then
51414: LD_VAR 0 3
51418: PUSH
51419: LD_INT 112
51421: EQUAL
51422: IFFALSE 51432
// sStu := true ;
51424: LD_ADDR_EXP 120
51428: PUSH
51429: LD_INT 1
51431: ST_TO_ADDR
// if p3 = 113 then
51432: LD_VAR 0 3
51436: PUSH
51437: LD_INT 113
51439: EQUAL
51440: IFFALSE 51450
// sBazooka := true ;
51442: LD_ADDR_EXP 123
51446: PUSH
51447: LD_INT 1
51449: ST_TO_ADDR
// if p3 = 114 then
51450: LD_VAR 0 3
51454: PUSH
51455: LD_INT 114
51457: EQUAL
51458: IFFALSE 51468
// sMortar := true ;
51460: LD_ADDR_EXP 124
51464: PUSH
51465: LD_INT 1
51467: ST_TO_ADDR
// if p3 = 115 then
51468: LD_VAR 0 3
51472: PUSH
51473: LD_INT 115
51475: EQUAL
51476: IFFALSE 51486
// sRanger := true ;
51478: LD_ADDR_EXP 134
51482: PUSH
51483: LD_INT 1
51485: ST_TO_ADDR
// if p3 = 116 then
51486: LD_VAR 0 3
51490: PUSH
51491: LD_INT 116
51493: EQUAL
51494: IFFALSE 51504
// sComputer := true ;
51496: LD_ADDR_EXP 135
51500: PUSH
51501: LD_INT 1
51503: ST_TO_ADDR
// if p3 = 117 then
51504: LD_VAR 0 3
51508: PUSH
51509: LD_INT 117
51511: EQUAL
51512: IFFALSE 51522
// s30 := true ;
51514: LD_ADDR_EXP 136
51518: PUSH
51519: LD_INT 1
51521: ST_TO_ADDR
// if p3 = 118 then
51522: LD_VAR 0 3
51526: PUSH
51527: LD_INT 118
51529: EQUAL
51530: IFFALSE 51540
// s60 := true ;
51532: LD_ADDR_EXP 137
51536: PUSH
51537: LD_INT 1
51539: ST_TO_ADDR
// end ; if p2 = 101 then
51540: LD_VAR 0 2
51544: PUSH
51545: LD_INT 101
51547: EQUAL
51548: IFFALSE 51676
// begin case p3 of 1 :
51550: LD_VAR 0 3
51554: PUSH
51555: LD_INT 1
51557: DOUBLE
51558: EQUAL
51559: IFTRUE 51563
51561: GO 51570
51563: POP
// hHackUnlimitedResources ; 2 :
51564: CALL 63774 0 0
51568: GO 51676
51570: LD_INT 2
51572: DOUBLE
51573: EQUAL
51574: IFTRUE 51578
51576: GO 51585
51578: POP
// hHackSetLevel10 ; 3 :
51579: CALL 63907 0 0
51583: GO 51676
51585: LD_INT 3
51587: DOUBLE
51588: EQUAL
51589: IFTRUE 51593
51591: GO 51600
51593: POP
// hHackSetLevel10YourUnits ; 4 :
51594: CALL 63992 0 0
51598: GO 51676
51600: LD_INT 4
51602: DOUBLE
51603: EQUAL
51604: IFTRUE 51608
51606: GO 51615
51608: POP
// hHackInvincible ; 5 :
51609: CALL 64440 0 0
51613: GO 51676
51615: LD_INT 5
51617: DOUBLE
51618: EQUAL
51619: IFTRUE 51623
51621: GO 51630
51623: POP
// hHackInvisible ; 6 :
51624: CALL 64551 0 0
51628: GO 51676
51630: LD_INT 6
51632: DOUBLE
51633: EQUAL
51634: IFTRUE 51638
51636: GO 51645
51638: POP
// hHackChangeYourSide ; 7 :
51639: CALL 64608 0 0
51643: GO 51676
51645: LD_INT 7
51647: DOUBLE
51648: EQUAL
51649: IFTRUE 51653
51651: GO 51660
51653: POP
// hHackChangeUnitSide ; 8 :
51654: CALL 64650 0 0
51658: GO 51676
51660: LD_INT 8
51662: DOUBLE
51663: EQUAL
51664: IFTRUE 51668
51666: GO 51675
51668: POP
// hHackFog ; end ;
51669: CALL 64751 0 0
51673: GO 51676
51675: POP
// end ; end ;
51676: LD_VAR 0 7
51680: RET
// export StreamModeActive , normalCounter , hardcoreCounter , sSpec , sSpeed , sRocket , sEngine , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sSold , sDiff , sTiger , sBomb , sFog , sReset , sSun , sKamikadze , sTroll , sSlow , sLack , sWound , sTank , sRemote , sPowell , sBetray , sContamin , sTeleport , sOil , sOilTower , sShovel , sSheik , sStu , sEarthquake , sAI , sBazooka , sMortar , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sRanger , sComputer , s30 , s60 ; every 0 0$1 do
51681: GO 51683
51683: DISABLE
// begin ToLua ( initStreamRollete(); ) ;
51684: LD_STRING initStreamRollete();
51686: PPUSH
51687: CALL_OW 559
// InitStreamMode ;
51691: CALL 51703 0 0
// DefineStreamItems ( false ) ;
51695: LD_INT 0
51697: PPUSH
51698: CALL 52167 0 1
// end ;
51702: END
// function InitStreamMode ; begin
51703: LD_INT 0
51705: PPUSH
// streamModeActive := false ;
51706: LD_ADDR_EXP 81
51710: PUSH
51711: LD_INT 0
51713: ST_TO_ADDR
// normalCounter := 36 ;
51714: LD_ADDR_EXP 82
51718: PUSH
51719: LD_INT 36
51721: ST_TO_ADDR
// hardcoreCounter := 18 ;
51722: LD_ADDR_EXP 83
51726: PUSH
51727: LD_INT 18
51729: ST_TO_ADDR
// sRocket := false ;
51730: LD_ADDR_EXP 86
51734: PUSH
51735: LD_INT 0
51737: ST_TO_ADDR
// sSpeed := false ;
51738: LD_ADDR_EXP 85
51742: PUSH
51743: LD_INT 0
51745: ST_TO_ADDR
// sEngine := false ;
51746: LD_ADDR_EXP 87
51750: PUSH
51751: LD_INT 0
51753: ST_TO_ADDR
// sSpec := false ;
51754: LD_ADDR_EXP 84
51758: PUSH
51759: LD_INT 0
51761: ST_TO_ADDR
// sLevel := false ;
51762: LD_ADDR_EXP 88
51766: PUSH
51767: LD_INT 0
51769: ST_TO_ADDR
// sArmoury := false ;
51770: LD_ADDR_EXP 89
51774: PUSH
51775: LD_INT 0
51777: ST_TO_ADDR
// sRadar := false ;
51778: LD_ADDR_EXP 90
51782: PUSH
51783: LD_INT 0
51785: ST_TO_ADDR
// sBunker := false ;
51786: LD_ADDR_EXP 91
51790: PUSH
51791: LD_INT 0
51793: ST_TO_ADDR
// sHack := false ;
51794: LD_ADDR_EXP 92
51798: PUSH
51799: LD_INT 0
51801: ST_TO_ADDR
// sFire := false ;
51802: LD_ADDR_EXP 93
51806: PUSH
51807: LD_INT 0
51809: ST_TO_ADDR
// sRefresh := false ;
51810: LD_ADDR_EXP 94
51814: PUSH
51815: LD_INT 0
51817: ST_TO_ADDR
// sExp := false ;
51818: LD_ADDR_EXP 95
51822: PUSH
51823: LD_INT 0
51825: ST_TO_ADDR
// sDepot := false ;
51826: LD_ADDR_EXP 96
51830: PUSH
51831: LD_INT 0
51833: ST_TO_ADDR
// sFlag := false ;
51834: LD_ADDR_EXP 97
51838: PUSH
51839: LD_INT 0
51841: ST_TO_ADDR
// sKamikadze := false ;
51842: LD_ADDR_EXP 105
51846: PUSH
51847: LD_INT 0
51849: ST_TO_ADDR
// sTroll := false ;
51850: LD_ADDR_EXP 106
51854: PUSH
51855: LD_INT 0
51857: ST_TO_ADDR
// sSlow := false ;
51858: LD_ADDR_EXP 107
51862: PUSH
51863: LD_INT 0
51865: ST_TO_ADDR
// sLack := false ;
51866: LD_ADDR_EXP 108
51870: PUSH
51871: LD_INT 0
51873: ST_TO_ADDR
// sTank := false ;
51874: LD_ADDR_EXP 110
51878: PUSH
51879: LD_INT 0
51881: ST_TO_ADDR
// sRemote := false ;
51882: LD_ADDR_EXP 111
51886: PUSH
51887: LD_INT 0
51889: ST_TO_ADDR
// sPowell := false ;
51890: LD_ADDR_EXP 112
51894: PUSH
51895: LD_INT 0
51897: ST_TO_ADDR
// sTeleport := false ;
51898: LD_ADDR_EXP 115
51902: PUSH
51903: LD_INT 0
51905: ST_TO_ADDR
// sOilTower := false ;
51906: LD_ADDR_EXP 117
51910: PUSH
51911: LD_INT 0
51913: ST_TO_ADDR
// sShovel := false ;
51914: LD_ADDR_EXP 118
51918: PUSH
51919: LD_INT 0
51921: ST_TO_ADDR
// sSheik := false ;
51922: LD_ADDR_EXP 119
51926: PUSH
51927: LD_INT 0
51929: ST_TO_ADDR
// sEarthquake := false ;
51930: LD_ADDR_EXP 121
51934: PUSH
51935: LD_INT 0
51937: ST_TO_ADDR
// sAI := false ;
51938: LD_ADDR_EXP 122
51942: PUSH
51943: LD_INT 0
51945: ST_TO_ADDR
// sCargo := false ;
51946: LD_ADDR_EXP 125
51950: PUSH
51951: LD_INT 0
51953: ST_TO_ADDR
// sDLaser := false ;
51954: LD_ADDR_EXP 126
51958: PUSH
51959: LD_INT 0
51961: ST_TO_ADDR
// sExchange := false ;
51962: LD_ADDR_EXP 127
51966: PUSH
51967: LD_INT 0
51969: ST_TO_ADDR
// sFac := false ;
51970: LD_ADDR_EXP 128
51974: PUSH
51975: LD_INT 0
51977: ST_TO_ADDR
// sPower := false ;
51978: LD_ADDR_EXP 129
51982: PUSH
51983: LD_INT 0
51985: ST_TO_ADDR
// sRandom := false ;
51986: LD_ADDR_EXP 130
51990: PUSH
51991: LD_INT 0
51993: ST_TO_ADDR
// sShield := false ;
51994: LD_ADDR_EXP 131
51998: PUSH
51999: LD_INT 0
52001: ST_TO_ADDR
// sTime := false ;
52002: LD_ADDR_EXP 132
52006: PUSH
52007: LD_INT 0
52009: ST_TO_ADDR
// sTools := false ;
52010: LD_ADDR_EXP 133
52014: PUSH
52015: LD_INT 0
52017: ST_TO_ADDR
// sSold := false ;
52018: LD_ADDR_EXP 98
52022: PUSH
52023: LD_INT 0
52025: ST_TO_ADDR
// sDiff := false ;
52026: LD_ADDR_EXP 99
52030: PUSH
52031: LD_INT 0
52033: ST_TO_ADDR
// sFog := false ;
52034: LD_ADDR_EXP 102
52038: PUSH
52039: LD_INT 0
52041: ST_TO_ADDR
// sReset := false ;
52042: LD_ADDR_EXP 103
52046: PUSH
52047: LD_INT 0
52049: ST_TO_ADDR
// sSun := false ;
52050: LD_ADDR_EXP 104
52054: PUSH
52055: LD_INT 0
52057: ST_TO_ADDR
// sTiger := false ;
52058: LD_ADDR_EXP 100
52062: PUSH
52063: LD_INT 0
52065: ST_TO_ADDR
// sBomb := false ;
52066: LD_ADDR_EXP 101
52070: PUSH
52071: LD_INT 0
52073: ST_TO_ADDR
// sWound := false ;
52074: LD_ADDR_EXP 109
52078: PUSH
52079: LD_INT 0
52081: ST_TO_ADDR
// sBetray := false ;
52082: LD_ADDR_EXP 113
52086: PUSH
52087: LD_INT 0
52089: ST_TO_ADDR
// sContamin := false ;
52090: LD_ADDR_EXP 114
52094: PUSH
52095: LD_INT 0
52097: ST_TO_ADDR
// sOil := false ;
52098: LD_ADDR_EXP 116
52102: PUSH
52103: LD_INT 0
52105: ST_TO_ADDR
// sStu := false ;
52106: LD_ADDR_EXP 120
52110: PUSH
52111: LD_INT 0
52113: ST_TO_ADDR
// sBazooka := false ;
52114: LD_ADDR_EXP 123
52118: PUSH
52119: LD_INT 0
52121: ST_TO_ADDR
// sMortar := false ;
52122: LD_ADDR_EXP 124
52126: PUSH
52127: LD_INT 0
52129: ST_TO_ADDR
// sRanger := false ;
52130: LD_ADDR_EXP 134
52134: PUSH
52135: LD_INT 0
52137: ST_TO_ADDR
// sComputer := false ;
52138: LD_ADDR_EXP 135
52142: PUSH
52143: LD_INT 0
52145: ST_TO_ADDR
// s30 := false ;
52146: LD_ADDR_EXP 136
52150: PUSH
52151: LD_INT 0
52153: ST_TO_ADDR
// s60 := false ;
52154: LD_ADDR_EXP 137
52158: PUSH
52159: LD_INT 0
52161: ST_TO_ADDR
// end ;
52162: LD_VAR 0 1
52166: RET
// function DefineStreamItems ( isGameLoad ) ; var tmp , flags , normal , hardcore , active , i ; begin
52167: LD_INT 0
52169: PPUSH
52170: PPUSH
52171: PPUSH
52172: PPUSH
52173: PPUSH
52174: PPUSH
52175: PPUSH
// result := [ ] ;
52176: LD_ADDR_VAR 0 2
52180: PUSH
52181: EMPTY
52182: ST_TO_ADDR
// if campaign_id = 1 then
52183: LD_OWVAR 69
52187: PUSH
52188: LD_INT 1
52190: EQUAL
52191: IFFALSE 55357
// begin case mission_number of 1 :
52193: LD_OWVAR 70
52197: PUSH
52198: LD_INT 1
52200: DOUBLE
52201: EQUAL
52202: IFTRUE 52206
52204: GO 52282
52206: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 106 , 116 , 117 , 118 ] ] ; 2 :
52207: LD_ADDR_VAR 0 2
52211: PUSH
52212: LD_INT 2
52214: PUSH
52215: LD_INT 4
52217: PUSH
52218: LD_INT 11
52220: PUSH
52221: LD_INT 12
52223: PUSH
52224: LD_INT 15
52226: PUSH
52227: LD_INT 16
52229: PUSH
52230: LD_INT 22
52232: PUSH
52233: LD_INT 23
52235: PUSH
52236: LD_INT 26
52238: PUSH
52239: EMPTY
52240: LIST
52241: LIST
52242: LIST
52243: LIST
52244: LIST
52245: LIST
52246: LIST
52247: LIST
52248: LIST
52249: PUSH
52250: LD_INT 101
52252: PUSH
52253: LD_INT 102
52255: PUSH
52256: LD_INT 106
52258: PUSH
52259: LD_INT 116
52261: PUSH
52262: LD_INT 117
52264: PUSH
52265: LD_INT 118
52267: PUSH
52268: EMPTY
52269: LIST
52270: LIST
52271: LIST
52272: LIST
52273: LIST
52274: LIST
52275: PUSH
52276: EMPTY
52277: LIST
52278: LIST
52279: ST_TO_ADDR
52280: GO 55355
52282: LD_INT 2
52284: DOUBLE
52285: EQUAL
52286: IFTRUE 52290
52288: GO 52374
52290: POP
// result := [ [ 2 , 4 , 11 , 12 , 15 , 16 , 22 , 23 , 26 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 3 :
52291: LD_ADDR_VAR 0 2
52295: PUSH
52296: LD_INT 2
52298: PUSH
52299: LD_INT 4
52301: PUSH
52302: LD_INT 11
52304: PUSH
52305: LD_INT 12
52307: PUSH
52308: LD_INT 15
52310: PUSH
52311: LD_INT 16
52313: PUSH
52314: LD_INT 22
52316: PUSH
52317: LD_INT 23
52319: PUSH
52320: LD_INT 26
52322: PUSH
52323: EMPTY
52324: LIST
52325: LIST
52326: LIST
52327: LIST
52328: LIST
52329: LIST
52330: LIST
52331: LIST
52332: LIST
52333: PUSH
52334: LD_INT 101
52336: PUSH
52337: LD_INT 102
52339: PUSH
52340: LD_INT 105
52342: PUSH
52343: LD_INT 106
52345: PUSH
52346: LD_INT 108
52348: PUSH
52349: LD_INT 116
52351: PUSH
52352: LD_INT 117
52354: PUSH
52355: LD_INT 118
52357: PUSH
52358: EMPTY
52359: LIST
52360: LIST
52361: LIST
52362: LIST
52363: LIST
52364: LIST
52365: LIST
52366: LIST
52367: PUSH
52368: EMPTY
52369: LIST
52370: LIST
52371: ST_TO_ADDR
52372: GO 55355
52374: LD_INT 3
52376: DOUBLE
52377: EQUAL
52378: IFTRUE 52382
52380: GO 52470
52382: POP
// result := [ [ 2 , 4 , 5 , 11 , 12 , 15 , 16 , 22 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 4 :
52383: LD_ADDR_VAR 0 2
52387: PUSH
52388: LD_INT 2
52390: PUSH
52391: LD_INT 4
52393: PUSH
52394: LD_INT 5
52396: PUSH
52397: LD_INT 11
52399: PUSH
52400: LD_INT 12
52402: PUSH
52403: LD_INT 15
52405: PUSH
52406: LD_INT 16
52408: PUSH
52409: LD_INT 22
52411: PUSH
52412: LD_INT 26
52414: PUSH
52415: LD_INT 36
52417: PUSH
52418: EMPTY
52419: LIST
52420: LIST
52421: LIST
52422: LIST
52423: LIST
52424: LIST
52425: LIST
52426: LIST
52427: LIST
52428: LIST
52429: PUSH
52430: LD_INT 101
52432: PUSH
52433: LD_INT 102
52435: PUSH
52436: LD_INT 105
52438: PUSH
52439: LD_INT 106
52441: PUSH
52442: LD_INT 108
52444: PUSH
52445: LD_INT 116
52447: PUSH
52448: LD_INT 117
52450: PUSH
52451: LD_INT 118
52453: PUSH
52454: EMPTY
52455: LIST
52456: LIST
52457: LIST
52458: LIST
52459: LIST
52460: LIST
52461: LIST
52462: LIST
52463: PUSH
52464: EMPTY
52465: LIST
52466: LIST
52467: ST_TO_ADDR
52468: GO 55355
52470: LD_INT 4
52472: DOUBLE
52473: EQUAL
52474: IFTRUE 52478
52476: GO 52574
52478: POP
// result := [ [ 2 , 4 , 5 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 116 , 117 , 118 ] ] ; 5 :
52479: LD_ADDR_VAR 0 2
52483: PUSH
52484: LD_INT 2
52486: PUSH
52487: LD_INT 4
52489: PUSH
52490: LD_INT 5
52492: PUSH
52493: LD_INT 8
52495: PUSH
52496: LD_INT 11
52498: PUSH
52499: LD_INT 12
52501: PUSH
52502: LD_INT 15
52504: PUSH
52505: LD_INT 16
52507: PUSH
52508: LD_INT 22
52510: PUSH
52511: LD_INT 23
52513: PUSH
52514: LD_INT 26
52516: PUSH
52517: LD_INT 36
52519: PUSH
52520: EMPTY
52521: LIST
52522: LIST
52523: LIST
52524: LIST
52525: LIST
52526: LIST
52527: LIST
52528: LIST
52529: LIST
52530: LIST
52531: LIST
52532: LIST
52533: PUSH
52534: LD_INT 101
52536: PUSH
52537: LD_INT 102
52539: PUSH
52540: LD_INT 105
52542: PUSH
52543: LD_INT 106
52545: PUSH
52546: LD_INT 108
52548: PUSH
52549: LD_INT 116
52551: PUSH
52552: LD_INT 117
52554: PUSH
52555: LD_INT 118
52557: PUSH
52558: EMPTY
52559: LIST
52560: LIST
52561: LIST
52562: LIST
52563: LIST
52564: LIST
52565: LIST
52566: LIST
52567: PUSH
52568: EMPTY
52569: LIST
52570: LIST
52571: ST_TO_ADDR
52572: GO 55355
52574: LD_INT 5
52576: DOUBLE
52577: EQUAL
52578: IFTRUE 52582
52580: GO 52694
52582: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 22 , 23 , 25 , 26 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 6 :
52583: LD_ADDR_VAR 0 2
52587: PUSH
52588: LD_INT 2
52590: PUSH
52591: LD_INT 4
52593: PUSH
52594: LD_INT 5
52596: PUSH
52597: LD_INT 6
52599: PUSH
52600: LD_INT 8
52602: PUSH
52603: LD_INT 11
52605: PUSH
52606: LD_INT 12
52608: PUSH
52609: LD_INT 15
52611: PUSH
52612: LD_INT 16
52614: PUSH
52615: LD_INT 22
52617: PUSH
52618: LD_INT 23
52620: PUSH
52621: LD_INT 25
52623: PUSH
52624: LD_INT 26
52626: PUSH
52627: LD_INT 36
52629: PUSH
52630: EMPTY
52631: LIST
52632: LIST
52633: LIST
52634: LIST
52635: LIST
52636: LIST
52637: LIST
52638: LIST
52639: LIST
52640: LIST
52641: LIST
52642: LIST
52643: LIST
52644: LIST
52645: PUSH
52646: LD_INT 101
52648: PUSH
52649: LD_INT 102
52651: PUSH
52652: LD_INT 105
52654: PUSH
52655: LD_INT 106
52657: PUSH
52658: LD_INT 108
52660: PUSH
52661: LD_INT 109
52663: PUSH
52664: LD_INT 112
52666: PUSH
52667: LD_INT 116
52669: PUSH
52670: LD_INT 117
52672: PUSH
52673: LD_INT 118
52675: PUSH
52676: EMPTY
52677: LIST
52678: LIST
52679: LIST
52680: LIST
52681: LIST
52682: LIST
52683: LIST
52684: LIST
52685: LIST
52686: LIST
52687: PUSH
52688: EMPTY
52689: LIST
52690: LIST
52691: ST_TO_ADDR
52692: GO 55355
52694: LD_INT 6
52696: DOUBLE
52697: EQUAL
52698: IFTRUE 52702
52700: GO 52834
52702: POP
// result := [ [ 2 , 4 , 5 , 6 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 7 :
52703: LD_ADDR_VAR 0 2
52707: PUSH
52708: LD_INT 2
52710: PUSH
52711: LD_INT 4
52713: PUSH
52714: LD_INT 5
52716: PUSH
52717: LD_INT 6
52719: PUSH
52720: LD_INT 8
52722: PUSH
52723: LD_INT 11
52725: PUSH
52726: LD_INT 12
52728: PUSH
52729: LD_INT 15
52731: PUSH
52732: LD_INT 16
52734: PUSH
52735: LD_INT 20
52737: PUSH
52738: LD_INT 21
52740: PUSH
52741: LD_INT 22
52743: PUSH
52744: LD_INT 23
52746: PUSH
52747: LD_INT 25
52749: PUSH
52750: LD_INT 26
52752: PUSH
52753: LD_INT 30
52755: PUSH
52756: LD_INT 31
52758: PUSH
52759: LD_INT 32
52761: PUSH
52762: LD_INT 36
52764: PUSH
52765: EMPTY
52766: LIST
52767: LIST
52768: LIST
52769: LIST
52770: LIST
52771: LIST
52772: LIST
52773: LIST
52774: LIST
52775: LIST
52776: LIST
52777: LIST
52778: LIST
52779: LIST
52780: LIST
52781: LIST
52782: LIST
52783: LIST
52784: LIST
52785: PUSH
52786: LD_INT 101
52788: PUSH
52789: LD_INT 102
52791: PUSH
52792: LD_INT 105
52794: PUSH
52795: LD_INT 106
52797: PUSH
52798: LD_INT 108
52800: PUSH
52801: LD_INT 109
52803: PUSH
52804: LD_INT 112
52806: PUSH
52807: LD_INT 116
52809: PUSH
52810: LD_INT 117
52812: PUSH
52813: LD_INT 118
52815: PUSH
52816: EMPTY
52817: LIST
52818: LIST
52819: LIST
52820: LIST
52821: LIST
52822: LIST
52823: LIST
52824: LIST
52825: LIST
52826: LIST
52827: PUSH
52828: EMPTY
52829: LIST
52830: LIST
52831: ST_TO_ADDR
52832: GO 55355
52834: LD_INT 7
52836: DOUBLE
52837: EQUAL
52838: IFTRUE 52842
52840: GO 52954
52842: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 112 , 116 , 117 , 118 ] ] ; 8 :
52843: LD_ADDR_VAR 0 2
52847: PUSH
52848: LD_INT 2
52850: PUSH
52851: LD_INT 4
52853: PUSH
52854: LD_INT 5
52856: PUSH
52857: LD_INT 7
52859: PUSH
52860: LD_INT 11
52862: PUSH
52863: LD_INT 12
52865: PUSH
52866: LD_INT 15
52868: PUSH
52869: LD_INT 16
52871: PUSH
52872: LD_INT 20
52874: PUSH
52875: LD_INT 21
52877: PUSH
52878: LD_INT 22
52880: PUSH
52881: LD_INT 23
52883: PUSH
52884: LD_INT 25
52886: PUSH
52887: LD_INT 26
52889: PUSH
52890: EMPTY
52891: LIST
52892: LIST
52893: LIST
52894: LIST
52895: LIST
52896: LIST
52897: LIST
52898: LIST
52899: LIST
52900: LIST
52901: LIST
52902: LIST
52903: LIST
52904: LIST
52905: PUSH
52906: LD_INT 101
52908: PUSH
52909: LD_INT 102
52911: PUSH
52912: LD_INT 103
52914: PUSH
52915: LD_INT 105
52917: PUSH
52918: LD_INT 106
52920: PUSH
52921: LD_INT 108
52923: PUSH
52924: LD_INT 112
52926: PUSH
52927: LD_INT 116
52929: PUSH
52930: LD_INT 117
52932: PUSH
52933: LD_INT 118
52935: PUSH
52936: EMPTY
52937: LIST
52938: LIST
52939: LIST
52940: LIST
52941: LIST
52942: LIST
52943: LIST
52944: LIST
52945: LIST
52946: LIST
52947: PUSH
52948: EMPTY
52949: LIST
52950: LIST
52951: ST_TO_ADDR
52952: GO 55355
52954: LD_INT 8
52956: DOUBLE
52957: EQUAL
52958: IFTRUE 52962
52960: GO 53102
52962: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 116 , 117 , 118 ] ] ; 9 :
52963: LD_ADDR_VAR 0 2
52967: PUSH
52968: LD_INT 2
52970: PUSH
52971: LD_INT 4
52973: PUSH
52974: LD_INT 5
52976: PUSH
52977: LD_INT 6
52979: PUSH
52980: LD_INT 7
52982: PUSH
52983: LD_INT 8
52985: PUSH
52986: LD_INT 11
52988: PUSH
52989: LD_INT 12
52991: PUSH
52992: LD_INT 15
52994: PUSH
52995: LD_INT 16
52997: PUSH
52998: LD_INT 20
53000: PUSH
53001: LD_INT 21
53003: PUSH
53004: LD_INT 22
53006: PUSH
53007: LD_INT 23
53009: PUSH
53010: LD_INT 25
53012: PUSH
53013: LD_INT 26
53015: PUSH
53016: LD_INT 30
53018: PUSH
53019: LD_INT 31
53021: PUSH
53022: LD_INT 32
53024: PUSH
53025: LD_INT 36
53027: PUSH
53028: EMPTY
53029: LIST
53030: LIST
53031: LIST
53032: LIST
53033: LIST
53034: LIST
53035: LIST
53036: LIST
53037: LIST
53038: LIST
53039: LIST
53040: LIST
53041: LIST
53042: LIST
53043: LIST
53044: LIST
53045: LIST
53046: LIST
53047: LIST
53048: LIST
53049: PUSH
53050: LD_INT 101
53052: PUSH
53053: LD_INT 102
53055: PUSH
53056: LD_INT 103
53058: PUSH
53059: LD_INT 105
53061: PUSH
53062: LD_INT 106
53064: PUSH
53065: LD_INT 108
53067: PUSH
53068: LD_INT 109
53070: PUSH
53071: LD_INT 112
53073: PUSH
53074: LD_INT 116
53076: PUSH
53077: LD_INT 117
53079: PUSH
53080: LD_INT 118
53082: PUSH
53083: EMPTY
53084: LIST
53085: LIST
53086: LIST
53087: LIST
53088: LIST
53089: LIST
53090: LIST
53091: LIST
53092: LIST
53093: LIST
53094: LIST
53095: PUSH
53096: EMPTY
53097: LIST
53098: LIST
53099: ST_TO_ADDR
53100: GO 55355
53102: LD_INT 9
53104: DOUBLE
53105: EQUAL
53106: IFTRUE 53110
53108: GO 53258
53110: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 105 , 106 , 108 , 109 , 112 , 114 , 116 , 117 , 118 ] ] ; 10 :
53111: LD_ADDR_VAR 0 2
53115: PUSH
53116: LD_INT 2
53118: PUSH
53119: LD_INT 4
53121: PUSH
53122: LD_INT 5
53124: PUSH
53125: LD_INT 6
53127: PUSH
53128: LD_INT 7
53130: PUSH
53131: LD_INT 8
53133: PUSH
53134: LD_INT 11
53136: PUSH
53137: LD_INT 12
53139: PUSH
53140: LD_INT 15
53142: PUSH
53143: LD_INT 16
53145: PUSH
53146: LD_INT 20
53148: PUSH
53149: LD_INT 21
53151: PUSH
53152: LD_INT 22
53154: PUSH
53155: LD_INT 23
53157: PUSH
53158: LD_INT 25
53160: PUSH
53161: LD_INT 26
53163: PUSH
53164: LD_INT 28
53166: PUSH
53167: LD_INT 30
53169: PUSH
53170: LD_INT 31
53172: PUSH
53173: LD_INT 32
53175: PUSH
53176: LD_INT 36
53178: PUSH
53179: EMPTY
53180: LIST
53181: LIST
53182: LIST
53183: LIST
53184: LIST
53185: LIST
53186: LIST
53187: LIST
53188: LIST
53189: LIST
53190: LIST
53191: LIST
53192: LIST
53193: LIST
53194: LIST
53195: LIST
53196: LIST
53197: LIST
53198: LIST
53199: LIST
53200: LIST
53201: PUSH
53202: LD_INT 101
53204: PUSH
53205: LD_INT 102
53207: PUSH
53208: LD_INT 103
53210: PUSH
53211: LD_INT 105
53213: PUSH
53214: LD_INT 106
53216: PUSH
53217: LD_INT 108
53219: PUSH
53220: LD_INT 109
53222: PUSH
53223: LD_INT 112
53225: PUSH
53226: LD_INT 114
53228: PUSH
53229: LD_INT 116
53231: PUSH
53232: LD_INT 117
53234: PUSH
53235: LD_INT 118
53237: PUSH
53238: EMPTY
53239: LIST
53240: LIST
53241: LIST
53242: LIST
53243: LIST
53244: LIST
53245: LIST
53246: LIST
53247: LIST
53248: LIST
53249: LIST
53250: LIST
53251: PUSH
53252: EMPTY
53253: LIST
53254: LIST
53255: ST_TO_ADDR
53256: GO 55355
53258: LD_INT 10
53260: DOUBLE
53261: EQUAL
53262: IFTRUE 53266
53264: GO 53462
53266: POP
// result := [ [ 2 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 11 :
53267: LD_ADDR_VAR 0 2
53271: PUSH
53272: LD_INT 2
53274: PUSH
53275: LD_INT 4
53277: PUSH
53278: LD_INT 5
53280: PUSH
53281: LD_INT 6
53283: PUSH
53284: LD_INT 7
53286: PUSH
53287: LD_INT 8
53289: PUSH
53290: LD_INT 9
53292: PUSH
53293: LD_INT 10
53295: PUSH
53296: LD_INT 11
53298: PUSH
53299: LD_INT 12
53301: PUSH
53302: LD_INT 13
53304: PUSH
53305: LD_INT 14
53307: PUSH
53308: LD_INT 15
53310: PUSH
53311: LD_INT 16
53313: PUSH
53314: LD_INT 17
53316: PUSH
53317: LD_INT 18
53319: PUSH
53320: LD_INT 19
53322: PUSH
53323: LD_INT 20
53325: PUSH
53326: LD_INT 21
53328: PUSH
53329: LD_INT 22
53331: PUSH
53332: LD_INT 23
53334: PUSH
53335: LD_INT 24
53337: PUSH
53338: LD_INT 25
53340: PUSH
53341: LD_INT 26
53343: PUSH
53344: LD_INT 28
53346: PUSH
53347: LD_INT 30
53349: PUSH
53350: LD_INT 31
53352: PUSH
53353: LD_INT 32
53355: PUSH
53356: LD_INT 36
53358: PUSH
53359: EMPTY
53360: LIST
53361: LIST
53362: LIST
53363: LIST
53364: LIST
53365: LIST
53366: LIST
53367: LIST
53368: LIST
53369: LIST
53370: LIST
53371: LIST
53372: LIST
53373: LIST
53374: LIST
53375: LIST
53376: LIST
53377: LIST
53378: LIST
53379: LIST
53380: LIST
53381: LIST
53382: LIST
53383: LIST
53384: LIST
53385: LIST
53386: LIST
53387: LIST
53388: LIST
53389: PUSH
53390: LD_INT 101
53392: PUSH
53393: LD_INT 102
53395: PUSH
53396: LD_INT 103
53398: PUSH
53399: LD_INT 104
53401: PUSH
53402: LD_INT 105
53404: PUSH
53405: LD_INT 106
53407: PUSH
53408: LD_INT 107
53410: PUSH
53411: LD_INT 108
53413: PUSH
53414: LD_INT 109
53416: PUSH
53417: LD_INT 110
53419: PUSH
53420: LD_INT 111
53422: PUSH
53423: LD_INT 112
53425: PUSH
53426: LD_INT 114
53428: PUSH
53429: LD_INT 116
53431: PUSH
53432: LD_INT 117
53434: PUSH
53435: LD_INT 118
53437: PUSH
53438: EMPTY
53439: LIST
53440: LIST
53441: LIST
53442: LIST
53443: LIST
53444: LIST
53445: LIST
53446: LIST
53447: LIST
53448: LIST
53449: LIST
53450: LIST
53451: LIST
53452: LIST
53453: LIST
53454: LIST
53455: PUSH
53456: EMPTY
53457: LIST
53458: LIST
53459: ST_TO_ADDR
53460: GO 55355
53462: LD_INT 11
53464: DOUBLE
53465: EQUAL
53466: IFTRUE 53470
53468: GO 53674
53470: POP
// result := [ [ 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 28 , 30 , 31 , 32 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 114 , 116 , 117 , 118 ] ] ; 12 :
53471: LD_ADDR_VAR 0 2
53475: PUSH
53476: LD_INT 2
53478: PUSH
53479: LD_INT 3
53481: PUSH
53482: LD_INT 4
53484: PUSH
53485: LD_INT 5
53487: PUSH
53488: LD_INT 6
53490: PUSH
53491: LD_INT 7
53493: PUSH
53494: LD_INT 8
53496: PUSH
53497: LD_INT 9
53499: PUSH
53500: LD_INT 10
53502: PUSH
53503: LD_INT 11
53505: PUSH
53506: LD_INT 12
53508: PUSH
53509: LD_INT 13
53511: PUSH
53512: LD_INT 14
53514: PUSH
53515: LD_INT 15
53517: PUSH
53518: LD_INT 16
53520: PUSH
53521: LD_INT 17
53523: PUSH
53524: LD_INT 18
53526: PUSH
53527: LD_INT 19
53529: PUSH
53530: LD_INT 20
53532: PUSH
53533: LD_INT 21
53535: PUSH
53536: LD_INT 22
53538: PUSH
53539: LD_INT 23
53541: PUSH
53542: LD_INT 24
53544: PUSH
53545: LD_INT 25
53547: PUSH
53548: LD_INT 26
53550: PUSH
53551: LD_INT 28
53553: PUSH
53554: LD_INT 30
53556: PUSH
53557: LD_INT 31
53559: PUSH
53560: LD_INT 32
53562: PUSH
53563: LD_INT 34
53565: PUSH
53566: LD_INT 36
53568: PUSH
53569: EMPTY
53570: LIST
53571: LIST
53572: LIST
53573: LIST
53574: LIST
53575: LIST
53576: LIST
53577: LIST
53578: LIST
53579: LIST
53580: LIST
53581: LIST
53582: LIST
53583: LIST
53584: LIST
53585: LIST
53586: LIST
53587: LIST
53588: LIST
53589: LIST
53590: LIST
53591: LIST
53592: LIST
53593: LIST
53594: LIST
53595: LIST
53596: LIST
53597: LIST
53598: LIST
53599: LIST
53600: LIST
53601: PUSH
53602: LD_INT 101
53604: PUSH
53605: LD_INT 102
53607: PUSH
53608: LD_INT 103
53610: PUSH
53611: LD_INT 104
53613: PUSH
53614: LD_INT 105
53616: PUSH
53617: LD_INT 106
53619: PUSH
53620: LD_INT 107
53622: PUSH
53623: LD_INT 108
53625: PUSH
53626: LD_INT 109
53628: PUSH
53629: LD_INT 110
53631: PUSH
53632: LD_INT 111
53634: PUSH
53635: LD_INT 112
53637: PUSH
53638: LD_INT 114
53640: PUSH
53641: LD_INT 116
53643: PUSH
53644: LD_INT 117
53646: PUSH
53647: LD_INT 118
53649: PUSH
53650: EMPTY
53651: LIST
53652: LIST
53653: LIST
53654: LIST
53655: LIST
53656: LIST
53657: LIST
53658: LIST
53659: LIST
53660: LIST
53661: LIST
53662: LIST
53663: LIST
53664: LIST
53665: LIST
53666: LIST
53667: PUSH
53668: EMPTY
53669: LIST
53670: LIST
53671: ST_TO_ADDR
53672: GO 55355
53674: LD_INT 12
53676: DOUBLE
53677: EQUAL
53678: IFTRUE 53682
53680: GO 53902
53682: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 13 :
53683: LD_ADDR_VAR 0 2
53687: PUSH
53688: LD_INT 1
53690: PUSH
53691: LD_INT 2
53693: PUSH
53694: LD_INT 3
53696: PUSH
53697: LD_INT 4
53699: PUSH
53700: LD_INT 5
53702: PUSH
53703: LD_INT 6
53705: PUSH
53706: LD_INT 7
53708: PUSH
53709: LD_INT 8
53711: PUSH
53712: LD_INT 9
53714: PUSH
53715: LD_INT 10
53717: PUSH
53718: LD_INT 11
53720: PUSH
53721: LD_INT 12
53723: PUSH
53724: LD_INT 13
53726: PUSH
53727: LD_INT 14
53729: PUSH
53730: LD_INT 15
53732: PUSH
53733: LD_INT 16
53735: PUSH
53736: LD_INT 17
53738: PUSH
53739: LD_INT 18
53741: PUSH
53742: LD_INT 19
53744: PUSH
53745: LD_INT 20
53747: PUSH
53748: LD_INT 21
53750: PUSH
53751: LD_INT 22
53753: PUSH
53754: LD_INT 23
53756: PUSH
53757: LD_INT 24
53759: PUSH
53760: LD_INT 25
53762: PUSH
53763: LD_INT 26
53765: PUSH
53766: LD_INT 27
53768: PUSH
53769: LD_INT 28
53771: PUSH
53772: LD_INT 30
53774: PUSH
53775: LD_INT 31
53777: PUSH
53778: LD_INT 32
53780: PUSH
53781: LD_INT 33
53783: PUSH
53784: LD_INT 34
53786: PUSH
53787: LD_INT 36
53789: PUSH
53790: EMPTY
53791: LIST
53792: LIST
53793: LIST
53794: LIST
53795: LIST
53796: LIST
53797: LIST
53798: LIST
53799: LIST
53800: LIST
53801: LIST
53802: LIST
53803: LIST
53804: LIST
53805: LIST
53806: LIST
53807: LIST
53808: LIST
53809: LIST
53810: LIST
53811: LIST
53812: LIST
53813: LIST
53814: LIST
53815: LIST
53816: LIST
53817: LIST
53818: LIST
53819: LIST
53820: LIST
53821: LIST
53822: LIST
53823: LIST
53824: LIST
53825: PUSH
53826: LD_INT 101
53828: PUSH
53829: LD_INT 102
53831: PUSH
53832: LD_INT 103
53834: PUSH
53835: LD_INT 104
53837: PUSH
53838: LD_INT 105
53840: PUSH
53841: LD_INT 106
53843: PUSH
53844: LD_INT 107
53846: PUSH
53847: LD_INT 108
53849: PUSH
53850: LD_INT 109
53852: PUSH
53853: LD_INT 110
53855: PUSH
53856: LD_INT 111
53858: PUSH
53859: LD_INT 112
53861: PUSH
53862: LD_INT 113
53864: PUSH
53865: LD_INT 114
53867: PUSH
53868: LD_INT 116
53870: PUSH
53871: LD_INT 117
53873: PUSH
53874: LD_INT 118
53876: PUSH
53877: EMPTY
53878: LIST
53879: LIST
53880: LIST
53881: LIST
53882: LIST
53883: LIST
53884: LIST
53885: LIST
53886: LIST
53887: LIST
53888: LIST
53889: LIST
53890: LIST
53891: LIST
53892: LIST
53893: LIST
53894: LIST
53895: PUSH
53896: EMPTY
53897: LIST
53898: LIST
53899: ST_TO_ADDR
53900: GO 55355
53902: LD_INT 13
53904: DOUBLE
53905: EQUAL
53906: IFTRUE 53910
53908: GO 54118
53910: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 8 , 9 , 10 , 11 , 12 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 14 :
53911: LD_ADDR_VAR 0 2
53915: PUSH
53916: LD_INT 1
53918: PUSH
53919: LD_INT 2
53921: PUSH
53922: LD_INT 3
53924: PUSH
53925: LD_INT 4
53927: PUSH
53928: LD_INT 5
53930: PUSH
53931: LD_INT 8
53933: PUSH
53934: LD_INT 9
53936: PUSH
53937: LD_INT 10
53939: PUSH
53940: LD_INT 11
53942: PUSH
53943: LD_INT 12
53945: PUSH
53946: LD_INT 14
53948: PUSH
53949: LD_INT 15
53951: PUSH
53952: LD_INT 16
53954: PUSH
53955: LD_INT 17
53957: PUSH
53958: LD_INT 18
53960: PUSH
53961: LD_INT 19
53963: PUSH
53964: LD_INT 20
53966: PUSH
53967: LD_INT 21
53969: PUSH
53970: LD_INT 22
53972: PUSH
53973: LD_INT 23
53975: PUSH
53976: LD_INT 24
53978: PUSH
53979: LD_INT 25
53981: PUSH
53982: LD_INT 26
53984: PUSH
53985: LD_INT 27
53987: PUSH
53988: LD_INT 28
53990: PUSH
53991: LD_INT 30
53993: PUSH
53994: LD_INT 31
53996: PUSH
53997: LD_INT 32
53999: PUSH
54000: LD_INT 33
54002: PUSH
54003: LD_INT 34
54005: PUSH
54006: LD_INT 36
54008: PUSH
54009: EMPTY
54010: LIST
54011: LIST
54012: LIST
54013: LIST
54014: LIST
54015: LIST
54016: LIST
54017: LIST
54018: LIST
54019: LIST
54020: LIST
54021: LIST
54022: LIST
54023: LIST
54024: LIST
54025: LIST
54026: LIST
54027: LIST
54028: LIST
54029: LIST
54030: LIST
54031: LIST
54032: LIST
54033: LIST
54034: LIST
54035: LIST
54036: LIST
54037: LIST
54038: LIST
54039: LIST
54040: LIST
54041: PUSH
54042: LD_INT 101
54044: PUSH
54045: LD_INT 102
54047: PUSH
54048: LD_INT 103
54050: PUSH
54051: LD_INT 104
54053: PUSH
54054: LD_INT 105
54056: PUSH
54057: LD_INT 106
54059: PUSH
54060: LD_INT 107
54062: PUSH
54063: LD_INT 108
54065: PUSH
54066: LD_INT 109
54068: PUSH
54069: LD_INT 110
54071: PUSH
54072: LD_INT 111
54074: PUSH
54075: LD_INT 112
54077: PUSH
54078: LD_INT 113
54080: PUSH
54081: LD_INT 114
54083: PUSH
54084: LD_INT 116
54086: PUSH
54087: LD_INT 117
54089: PUSH
54090: LD_INT 118
54092: PUSH
54093: EMPTY
54094: LIST
54095: LIST
54096: LIST
54097: LIST
54098: LIST
54099: LIST
54100: LIST
54101: LIST
54102: LIST
54103: LIST
54104: LIST
54105: LIST
54106: LIST
54107: LIST
54108: LIST
54109: LIST
54110: LIST
54111: PUSH
54112: EMPTY
54113: LIST
54114: LIST
54115: ST_TO_ADDR
54116: GO 55355
54118: LD_INT 14
54120: DOUBLE
54121: EQUAL
54122: IFTRUE 54126
54124: GO 54350
54126: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 15 :
54127: LD_ADDR_VAR 0 2
54131: PUSH
54132: LD_INT 1
54134: PUSH
54135: LD_INT 2
54137: PUSH
54138: LD_INT 3
54140: PUSH
54141: LD_INT 4
54143: PUSH
54144: LD_INT 5
54146: PUSH
54147: LD_INT 6
54149: PUSH
54150: LD_INT 7
54152: PUSH
54153: LD_INT 8
54155: PUSH
54156: LD_INT 9
54158: PUSH
54159: LD_INT 10
54161: PUSH
54162: LD_INT 11
54164: PUSH
54165: LD_INT 12
54167: PUSH
54168: LD_INT 13
54170: PUSH
54171: LD_INT 14
54173: PUSH
54174: LD_INT 15
54176: PUSH
54177: LD_INT 16
54179: PUSH
54180: LD_INT 17
54182: PUSH
54183: LD_INT 18
54185: PUSH
54186: LD_INT 19
54188: PUSH
54189: LD_INT 20
54191: PUSH
54192: LD_INT 21
54194: PUSH
54195: LD_INT 22
54197: PUSH
54198: LD_INT 23
54200: PUSH
54201: LD_INT 24
54203: PUSH
54204: LD_INT 25
54206: PUSH
54207: LD_INT 26
54209: PUSH
54210: LD_INT 27
54212: PUSH
54213: LD_INT 28
54215: PUSH
54216: LD_INT 29
54218: PUSH
54219: LD_INT 30
54221: PUSH
54222: LD_INT 31
54224: PUSH
54225: LD_INT 32
54227: PUSH
54228: LD_INT 33
54230: PUSH
54231: LD_INT 34
54233: PUSH
54234: LD_INT 36
54236: PUSH
54237: EMPTY
54238: LIST
54239: LIST
54240: LIST
54241: LIST
54242: LIST
54243: LIST
54244: LIST
54245: LIST
54246: LIST
54247: LIST
54248: LIST
54249: LIST
54250: LIST
54251: LIST
54252: LIST
54253: LIST
54254: LIST
54255: LIST
54256: LIST
54257: LIST
54258: LIST
54259: LIST
54260: LIST
54261: LIST
54262: LIST
54263: LIST
54264: LIST
54265: LIST
54266: LIST
54267: LIST
54268: LIST
54269: LIST
54270: LIST
54271: LIST
54272: LIST
54273: PUSH
54274: LD_INT 101
54276: PUSH
54277: LD_INT 102
54279: PUSH
54280: LD_INT 103
54282: PUSH
54283: LD_INT 104
54285: PUSH
54286: LD_INT 105
54288: PUSH
54289: LD_INT 106
54291: PUSH
54292: LD_INT 107
54294: PUSH
54295: LD_INT 108
54297: PUSH
54298: LD_INT 109
54300: PUSH
54301: LD_INT 110
54303: PUSH
54304: LD_INT 111
54306: PUSH
54307: LD_INT 112
54309: PUSH
54310: LD_INT 113
54312: PUSH
54313: LD_INT 114
54315: PUSH
54316: LD_INT 116
54318: PUSH
54319: LD_INT 117
54321: PUSH
54322: LD_INT 118
54324: PUSH
54325: EMPTY
54326: LIST
54327: LIST
54328: LIST
54329: LIST
54330: LIST
54331: LIST
54332: LIST
54333: LIST
54334: LIST
54335: LIST
54336: LIST
54337: LIST
54338: LIST
54339: LIST
54340: LIST
54341: LIST
54342: LIST
54343: PUSH
54344: EMPTY
54345: LIST
54346: LIST
54347: ST_TO_ADDR
54348: GO 55355
54350: LD_INT 15
54352: DOUBLE
54353: EQUAL
54354: IFTRUE 54358
54356: GO 54582
54358: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 16 :
54359: LD_ADDR_VAR 0 2
54363: PUSH
54364: LD_INT 1
54366: PUSH
54367: LD_INT 2
54369: PUSH
54370: LD_INT 3
54372: PUSH
54373: LD_INT 4
54375: PUSH
54376: LD_INT 5
54378: PUSH
54379: LD_INT 6
54381: PUSH
54382: LD_INT 7
54384: PUSH
54385: LD_INT 8
54387: PUSH
54388: LD_INT 9
54390: PUSH
54391: LD_INT 10
54393: PUSH
54394: LD_INT 11
54396: PUSH
54397: LD_INT 12
54399: PUSH
54400: LD_INT 13
54402: PUSH
54403: LD_INT 14
54405: PUSH
54406: LD_INT 15
54408: PUSH
54409: LD_INT 16
54411: PUSH
54412: LD_INT 17
54414: PUSH
54415: LD_INT 18
54417: PUSH
54418: LD_INT 19
54420: PUSH
54421: LD_INT 20
54423: PUSH
54424: LD_INT 21
54426: PUSH
54427: LD_INT 22
54429: PUSH
54430: LD_INT 23
54432: PUSH
54433: LD_INT 24
54435: PUSH
54436: LD_INT 25
54438: PUSH
54439: LD_INT 26
54441: PUSH
54442: LD_INT 27
54444: PUSH
54445: LD_INT 28
54447: PUSH
54448: LD_INT 29
54450: PUSH
54451: LD_INT 30
54453: PUSH
54454: LD_INT 31
54456: PUSH
54457: LD_INT 32
54459: PUSH
54460: LD_INT 33
54462: PUSH
54463: LD_INT 34
54465: PUSH
54466: LD_INT 36
54468: PUSH
54469: EMPTY
54470: LIST
54471: LIST
54472: LIST
54473: LIST
54474: LIST
54475: LIST
54476: LIST
54477: LIST
54478: LIST
54479: LIST
54480: LIST
54481: LIST
54482: LIST
54483: LIST
54484: LIST
54485: LIST
54486: LIST
54487: LIST
54488: LIST
54489: LIST
54490: LIST
54491: LIST
54492: LIST
54493: LIST
54494: LIST
54495: LIST
54496: LIST
54497: LIST
54498: LIST
54499: LIST
54500: LIST
54501: LIST
54502: LIST
54503: LIST
54504: LIST
54505: PUSH
54506: LD_INT 101
54508: PUSH
54509: LD_INT 102
54511: PUSH
54512: LD_INT 103
54514: PUSH
54515: LD_INT 104
54517: PUSH
54518: LD_INT 105
54520: PUSH
54521: LD_INT 106
54523: PUSH
54524: LD_INT 107
54526: PUSH
54527: LD_INT 108
54529: PUSH
54530: LD_INT 109
54532: PUSH
54533: LD_INT 110
54535: PUSH
54536: LD_INT 111
54538: PUSH
54539: LD_INT 112
54541: PUSH
54542: LD_INT 113
54544: PUSH
54545: LD_INT 114
54547: PUSH
54548: LD_INT 116
54550: PUSH
54551: LD_INT 117
54553: PUSH
54554: LD_INT 118
54556: PUSH
54557: EMPTY
54558: LIST
54559: LIST
54560: LIST
54561: LIST
54562: LIST
54563: LIST
54564: LIST
54565: LIST
54566: LIST
54567: LIST
54568: LIST
54569: LIST
54570: LIST
54571: LIST
54572: LIST
54573: LIST
54574: LIST
54575: PUSH
54576: EMPTY
54577: LIST
54578: LIST
54579: ST_TO_ADDR
54580: GO 55355
54582: LD_INT 16
54584: DOUBLE
54585: EQUAL
54586: IFTRUE 54590
54588: GO 54726
54590: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 17 :
54591: LD_ADDR_VAR 0 2
54595: PUSH
54596: LD_INT 2
54598: PUSH
54599: LD_INT 4
54601: PUSH
54602: LD_INT 5
54604: PUSH
54605: LD_INT 7
54607: PUSH
54608: LD_INT 11
54610: PUSH
54611: LD_INT 12
54613: PUSH
54614: LD_INT 15
54616: PUSH
54617: LD_INT 16
54619: PUSH
54620: LD_INT 20
54622: PUSH
54623: LD_INT 21
54625: PUSH
54626: LD_INT 22
54628: PUSH
54629: LD_INT 23
54631: PUSH
54632: LD_INT 25
54634: PUSH
54635: LD_INT 26
54637: PUSH
54638: LD_INT 30
54640: PUSH
54641: LD_INT 31
54643: PUSH
54644: LD_INT 32
54646: PUSH
54647: LD_INT 33
54649: PUSH
54650: LD_INT 34
54652: PUSH
54653: EMPTY
54654: LIST
54655: LIST
54656: LIST
54657: LIST
54658: LIST
54659: LIST
54660: LIST
54661: LIST
54662: LIST
54663: LIST
54664: LIST
54665: LIST
54666: LIST
54667: LIST
54668: LIST
54669: LIST
54670: LIST
54671: LIST
54672: LIST
54673: PUSH
54674: LD_INT 101
54676: PUSH
54677: LD_INT 102
54679: PUSH
54680: LD_INT 103
54682: PUSH
54683: LD_INT 106
54685: PUSH
54686: LD_INT 108
54688: PUSH
54689: LD_INT 112
54691: PUSH
54692: LD_INT 113
54694: PUSH
54695: LD_INT 114
54697: PUSH
54698: LD_INT 116
54700: PUSH
54701: LD_INT 117
54703: PUSH
54704: LD_INT 118
54706: PUSH
54707: EMPTY
54708: LIST
54709: LIST
54710: LIST
54711: LIST
54712: LIST
54713: LIST
54714: LIST
54715: LIST
54716: LIST
54717: LIST
54718: LIST
54719: PUSH
54720: EMPTY
54721: LIST
54722: LIST
54723: ST_TO_ADDR
54724: GO 55355
54726: LD_INT 17
54728: DOUBLE
54729: EQUAL
54730: IFTRUE 54734
54732: GO 54958
54734: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 116 , 117 , 118 ] ] ; 18 :
54735: LD_ADDR_VAR 0 2
54739: PUSH
54740: LD_INT 1
54742: PUSH
54743: LD_INT 2
54745: PUSH
54746: LD_INT 3
54748: PUSH
54749: LD_INT 4
54751: PUSH
54752: LD_INT 5
54754: PUSH
54755: LD_INT 6
54757: PUSH
54758: LD_INT 7
54760: PUSH
54761: LD_INT 8
54763: PUSH
54764: LD_INT 9
54766: PUSH
54767: LD_INT 10
54769: PUSH
54770: LD_INT 11
54772: PUSH
54773: LD_INT 12
54775: PUSH
54776: LD_INT 13
54778: PUSH
54779: LD_INT 14
54781: PUSH
54782: LD_INT 15
54784: PUSH
54785: LD_INT 16
54787: PUSH
54788: LD_INT 17
54790: PUSH
54791: LD_INT 18
54793: PUSH
54794: LD_INT 19
54796: PUSH
54797: LD_INT 20
54799: PUSH
54800: LD_INT 21
54802: PUSH
54803: LD_INT 22
54805: PUSH
54806: LD_INT 23
54808: PUSH
54809: LD_INT 24
54811: PUSH
54812: LD_INT 25
54814: PUSH
54815: LD_INT 26
54817: PUSH
54818: LD_INT 27
54820: PUSH
54821: LD_INT 28
54823: PUSH
54824: LD_INT 29
54826: PUSH
54827: LD_INT 30
54829: PUSH
54830: LD_INT 31
54832: PUSH
54833: LD_INT 32
54835: PUSH
54836: LD_INT 33
54838: PUSH
54839: LD_INT 34
54841: PUSH
54842: LD_INT 36
54844: PUSH
54845: EMPTY
54846: LIST
54847: LIST
54848: LIST
54849: LIST
54850: LIST
54851: LIST
54852: LIST
54853: LIST
54854: LIST
54855: LIST
54856: LIST
54857: LIST
54858: LIST
54859: LIST
54860: LIST
54861: LIST
54862: LIST
54863: LIST
54864: LIST
54865: LIST
54866: LIST
54867: LIST
54868: LIST
54869: LIST
54870: LIST
54871: LIST
54872: LIST
54873: LIST
54874: LIST
54875: LIST
54876: LIST
54877: LIST
54878: LIST
54879: LIST
54880: LIST
54881: PUSH
54882: LD_INT 101
54884: PUSH
54885: LD_INT 102
54887: PUSH
54888: LD_INT 103
54890: PUSH
54891: LD_INT 104
54893: PUSH
54894: LD_INT 105
54896: PUSH
54897: LD_INT 106
54899: PUSH
54900: LD_INT 107
54902: PUSH
54903: LD_INT 108
54905: PUSH
54906: LD_INT 109
54908: PUSH
54909: LD_INT 110
54911: PUSH
54912: LD_INT 111
54914: PUSH
54915: LD_INT 112
54917: PUSH
54918: LD_INT 113
54920: PUSH
54921: LD_INT 114
54923: PUSH
54924: LD_INT 116
54926: PUSH
54927: LD_INT 117
54929: PUSH
54930: LD_INT 118
54932: PUSH
54933: EMPTY
54934: LIST
54935: LIST
54936: LIST
54937: LIST
54938: LIST
54939: LIST
54940: LIST
54941: LIST
54942: LIST
54943: LIST
54944: LIST
54945: LIST
54946: LIST
54947: LIST
54948: LIST
54949: LIST
54950: LIST
54951: PUSH
54952: EMPTY
54953: LIST
54954: LIST
54955: ST_TO_ADDR
54956: GO 55355
54958: LD_INT 18
54960: DOUBLE
54961: EQUAL
54962: IFTRUE 54966
54964: GO 55114
54966: POP
// result := [ [ 2 , 4 , 5 , 7 , 11 , 12 , 15 , 16 , 20 , 21 , 22 , 23 , 25 , 26 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 106 , 108 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; 19 :
54967: LD_ADDR_VAR 0 2
54971: PUSH
54972: LD_INT 2
54974: PUSH
54975: LD_INT 4
54977: PUSH
54978: LD_INT 5
54980: PUSH
54981: LD_INT 7
54983: PUSH
54984: LD_INT 11
54986: PUSH
54987: LD_INT 12
54989: PUSH
54990: LD_INT 15
54992: PUSH
54993: LD_INT 16
54995: PUSH
54996: LD_INT 20
54998: PUSH
54999: LD_INT 21
55001: PUSH
55002: LD_INT 22
55004: PUSH
55005: LD_INT 23
55007: PUSH
55008: LD_INT 25
55010: PUSH
55011: LD_INT 26
55013: PUSH
55014: LD_INT 30
55016: PUSH
55017: LD_INT 31
55019: PUSH
55020: LD_INT 32
55022: PUSH
55023: LD_INT 33
55025: PUSH
55026: LD_INT 34
55028: PUSH
55029: LD_INT 35
55031: PUSH
55032: LD_INT 36
55034: PUSH
55035: EMPTY
55036: LIST
55037: LIST
55038: LIST
55039: LIST
55040: LIST
55041: LIST
55042: LIST
55043: LIST
55044: LIST
55045: LIST
55046: LIST
55047: LIST
55048: LIST
55049: LIST
55050: LIST
55051: LIST
55052: LIST
55053: LIST
55054: LIST
55055: LIST
55056: LIST
55057: PUSH
55058: LD_INT 101
55060: PUSH
55061: LD_INT 102
55063: PUSH
55064: LD_INT 103
55066: PUSH
55067: LD_INT 106
55069: PUSH
55070: LD_INT 108
55072: PUSH
55073: LD_INT 112
55075: PUSH
55076: LD_INT 113
55078: PUSH
55079: LD_INT 114
55081: PUSH
55082: LD_INT 115
55084: PUSH
55085: LD_INT 116
55087: PUSH
55088: LD_INT 117
55090: PUSH
55091: LD_INT 118
55093: PUSH
55094: EMPTY
55095: LIST
55096: LIST
55097: LIST
55098: LIST
55099: LIST
55100: LIST
55101: LIST
55102: LIST
55103: LIST
55104: LIST
55105: LIST
55106: LIST
55107: PUSH
55108: EMPTY
55109: LIST
55110: LIST
55111: ST_TO_ADDR
55112: GO 55355
55114: LD_INT 19
55116: DOUBLE
55117: EQUAL
55118: IFTRUE 55122
55120: GO 55354
55122: POP
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ; end ;
55123: LD_ADDR_VAR 0 2
55127: PUSH
55128: LD_INT 1
55130: PUSH
55131: LD_INT 2
55133: PUSH
55134: LD_INT 3
55136: PUSH
55137: LD_INT 4
55139: PUSH
55140: LD_INT 5
55142: PUSH
55143: LD_INT 6
55145: PUSH
55146: LD_INT 7
55148: PUSH
55149: LD_INT 8
55151: PUSH
55152: LD_INT 9
55154: PUSH
55155: LD_INT 10
55157: PUSH
55158: LD_INT 11
55160: PUSH
55161: LD_INT 12
55163: PUSH
55164: LD_INT 13
55166: PUSH
55167: LD_INT 14
55169: PUSH
55170: LD_INT 15
55172: PUSH
55173: LD_INT 16
55175: PUSH
55176: LD_INT 17
55178: PUSH
55179: LD_INT 18
55181: PUSH
55182: LD_INT 19
55184: PUSH
55185: LD_INT 20
55187: PUSH
55188: LD_INT 21
55190: PUSH
55191: LD_INT 22
55193: PUSH
55194: LD_INT 23
55196: PUSH
55197: LD_INT 24
55199: PUSH
55200: LD_INT 25
55202: PUSH
55203: LD_INT 26
55205: PUSH
55206: LD_INT 27
55208: PUSH
55209: LD_INT 28
55211: PUSH
55212: LD_INT 29
55214: PUSH
55215: LD_INT 30
55217: PUSH
55218: LD_INT 31
55220: PUSH
55221: LD_INT 32
55223: PUSH
55224: LD_INT 33
55226: PUSH
55227: LD_INT 34
55229: PUSH
55230: LD_INT 35
55232: PUSH
55233: LD_INT 36
55235: PUSH
55236: EMPTY
55237: LIST
55238: LIST
55239: LIST
55240: LIST
55241: LIST
55242: LIST
55243: LIST
55244: LIST
55245: LIST
55246: LIST
55247: LIST
55248: LIST
55249: LIST
55250: LIST
55251: LIST
55252: LIST
55253: LIST
55254: LIST
55255: LIST
55256: LIST
55257: LIST
55258: LIST
55259: LIST
55260: LIST
55261: LIST
55262: LIST
55263: LIST
55264: LIST
55265: LIST
55266: LIST
55267: LIST
55268: LIST
55269: LIST
55270: LIST
55271: LIST
55272: LIST
55273: PUSH
55274: LD_INT 101
55276: PUSH
55277: LD_INT 102
55279: PUSH
55280: LD_INT 103
55282: PUSH
55283: LD_INT 104
55285: PUSH
55286: LD_INT 105
55288: PUSH
55289: LD_INT 106
55291: PUSH
55292: LD_INT 107
55294: PUSH
55295: LD_INT 108
55297: PUSH
55298: LD_INT 109
55300: PUSH
55301: LD_INT 110
55303: PUSH
55304: LD_INT 111
55306: PUSH
55307: LD_INT 112
55309: PUSH
55310: LD_INT 113
55312: PUSH
55313: LD_INT 114
55315: PUSH
55316: LD_INT 115
55318: PUSH
55319: LD_INT 116
55321: PUSH
55322: LD_INT 117
55324: PUSH
55325: LD_INT 118
55327: PUSH
55328: EMPTY
55329: LIST
55330: LIST
55331: LIST
55332: LIST
55333: LIST
55334: LIST
55335: LIST
55336: LIST
55337: LIST
55338: LIST
55339: LIST
55340: LIST
55341: LIST
55342: LIST
55343: LIST
55344: LIST
55345: LIST
55346: LIST
55347: PUSH
55348: EMPTY
55349: LIST
55350: LIST
55351: ST_TO_ADDR
55352: GO 55355
55354: POP
// end else
55355: GO 55586
// result := [ [ 1 , 2 , 3 , 4 , 5 , 6 , 7 , 8 , 9 , 10 , 11 , 12 , 13 , 14 , 15 , 16 , 17 , 18 , 19 , 20 , 21 , 22 , 23 , 24 , 25 , 26 , 27 , 28 , 29 , 30 , 31 , 32 , 33 , 34 , 35 , 36 ] , [ 101 , 102 , 103 , 104 , 105 , 106 , 107 , 108 , 109 , 110 , 111 , 112 , 113 , 114 , 115 , 116 , 117 , 118 ] ] ;
55357: LD_ADDR_VAR 0 2
55361: PUSH
55362: LD_INT 1
55364: PUSH
55365: LD_INT 2
55367: PUSH
55368: LD_INT 3
55370: PUSH
55371: LD_INT 4
55373: PUSH
55374: LD_INT 5
55376: PUSH
55377: LD_INT 6
55379: PUSH
55380: LD_INT 7
55382: PUSH
55383: LD_INT 8
55385: PUSH
55386: LD_INT 9
55388: PUSH
55389: LD_INT 10
55391: PUSH
55392: LD_INT 11
55394: PUSH
55395: LD_INT 12
55397: PUSH
55398: LD_INT 13
55400: PUSH
55401: LD_INT 14
55403: PUSH
55404: LD_INT 15
55406: PUSH
55407: LD_INT 16
55409: PUSH
55410: LD_INT 17
55412: PUSH
55413: LD_INT 18
55415: PUSH
55416: LD_INT 19
55418: PUSH
55419: LD_INT 20
55421: PUSH
55422: LD_INT 21
55424: PUSH
55425: LD_INT 22
55427: PUSH
55428: LD_INT 23
55430: PUSH
55431: LD_INT 24
55433: PUSH
55434: LD_INT 25
55436: PUSH
55437: LD_INT 26
55439: PUSH
55440: LD_INT 27
55442: PUSH
55443: LD_INT 28
55445: PUSH
55446: LD_INT 29
55448: PUSH
55449: LD_INT 30
55451: PUSH
55452: LD_INT 31
55454: PUSH
55455: LD_INT 32
55457: PUSH
55458: LD_INT 33
55460: PUSH
55461: LD_INT 34
55463: PUSH
55464: LD_INT 35
55466: PUSH
55467: LD_INT 36
55469: PUSH
55470: EMPTY
55471: LIST
55472: LIST
55473: LIST
55474: LIST
55475: LIST
55476: LIST
55477: LIST
55478: LIST
55479: LIST
55480: LIST
55481: LIST
55482: LIST
55483: LIST
55484: LIST
55485: LIST
55486: LIST
55487: LIST
55488: LIST
55489: LIST
55490: LIST
55491: LIST
55492: LIST
55493: LIST
55494: LIST
55495: LIST
55496: LIST
55497: LIST
55498: LIST
55499: LIST
55500: LIST
55501: LIST
55502: LIST
55503: LIST
55504: LIST
55505: LIST
55506: LIST
55507: PUSH
55508: LD_INT 101
55510: PUSH
55511: LD_INT 102
55513: PUSH
55514: LD_INT 103
55516: PUSH
55517: LD_INT 104
55519: PUSH
55520: LD_INT 105
55522: PUSH
55523: LD_INT 106
55525: PUSH
55526: LD_INT 107
55528: PUSH
55529: LD_INT 108
55531: PUSH
55532: LD_INT 109
55534: PUSH
55535: LD_INT 110
55537: PUSH
55538: LD_INT 111
55540: PUSH
55541: LD_INT 112
55543: PUSH
55544: LD_INT 113
55546: PUSH
55547: LD_INT 114
55549: PUSH
55550: LD_INT 115
55552: PUSH
55553: LD_INT 116
55555: PUSH
55556: LD_INT 117
55558: PUSH
55559: LD_INT 118
55561: PUSH
55562: EMPTY
55563: LIST
55564: LIST
55565: LIST
55566: LIST
55567: LIST
55568: LIST
55569: LIST
55570: LIST
55571: LIST
55572: LIST
55573: LIST
55574: LIST
55575: LIST
55576: LIST
55577: LIST
55578: LIST
55579: LIST
55580: LIST
55581: PUSH
55582: EMPTY
55583: LIST
55584: LIST
55585: ST_TO_ADDR
// if result then
55586: LD_VAR 0 2
55590: IFFALSE 56376
// begin normal :=  ;
55592: LD_ADDR_VAR 0 5
55596: PUSH
55597: LD_STRING 
55599: ST_TO_ADDR
// hardcore :=  ;
55600: LD_ADDR_VAR 0 6
55604: PUSH
55605: LD_STRING 
55607: ST_TO_ADDR
// active :=  ;
55608: LD_ADDR_VAR 0 7
55612: PUSH
55613: LD_STRING 
55615: ST_TO_ADDR
// for i = 1 to normalCounter do
55616: LD_ADDR_VAR 0 8
55620: PUSH
55621: DOUBLE
55622: LD_INT 1
55624: DEC
55625: ST_TO_ADDR
55626: LD_EXP 82
55630: PUSH
55631: FOR_TO
55632: IFFALSE 55733
// begin tmp := 0 ;
55634: LD_ADDR_VAR 0 3
55638: PUSH
55639: LD_STRING 0
55641: ST_TO_ADDR
// if result [ 1 ] then
55642: LD_VAR 0 2
55646: PUSH
55647: LD_INT 1
55649: ARRAY
55650: IFFALSE 55715
// if result [ 1 ] [ 1 ] = i then
55652: LD_VAR 0 2
55656: PUSH
55657: LD_INT 1
55659: ARRAY
55660: PUSH
55661: LD_INT 1
55663: ARRAY
55664: PUSH
55665: LD_VAR 0 8
55669: EQUAL
55670: IFFALSE 55715
// begin result := Replace ( result , 1 , Delete ( result [ 1 ] , 1 ) ) ;
55672: LD_ADDR_VAR 0 2
55676: PUSH
55677: LD_VAR 0 2
55681: PPUSH
55682: LD_INT 1
55684: PPUSH
55685: LD_VAR 0 2
55689: PUSH
55690: LD_INT 1
55692: ARRAY
55693: PPUSH
55694: LD_INT 1
55696: PPUSH
55697: CALL_OW 3
55701: PPUSH
55702: CALL_OW 1
55706: ST_TO_ADDR
// tmp := 1 ;
55707: LD_ADDR_VAR 0 3
55711: PUSH
55712: LD_STRING 1
55714: ST_TO_ADDR
// end ; normal := normal & tmp ;
55715: LD_ADDR_VAR 0 5
55719: PUSH
55720: LD_VAR 0 5
55724: PUSH
55725: LD_VAR 0 3
55729: STR
55730: ST_TO_ADDR
// end ;
55731: GO 55631
55733: POP
55734: POP
// for i = 1 to hardcoreCounter do
55735: LD_ADDR_VAR 0 8
55739: PUSH
55740: DOUBLE
55741: LD_INT 1
55743: DEC
55744: ST_TO_ADDR
55745: LD_EXP 83
55749: PUSH
55750: FOR_TO
55751: IFFALSE 55856
// begin tmp := 0 ;
55753: LD_ADDR_VAR 0 3
55757: PUSH
55758: LD_STRING 0
55760: ST_TO_ADDR
// if result [ 2 ] then
55761: LD_VAR 0 2
55765: PUSH
55766: LD_INT 2
55768: ARRAY
55769: IFFALSE 55838
// if result [ 2 ] [ 1 ] = 100 + i then
55771: LD_VAR 0 2
55775: PUSH
55776: LD_INT 2
55778: ARRAY
55779: PUSH
55780: LD_INT 1
55782: ARRAY
55783: PUSH
55784: LD_INT 100
55786: PUSH
55787: LD_VAR 0 8
55791: PLUS
55792: EQUAL
55793: IFFALSE 55838
// begin result := Replace ( result , 2 , Delete ( result [ 2 ] , 1 ) ) ;
55795: LD_ADDR_VAR 0 2
55799: PUSH
55800: LD_VAR 0 2
55804: PPUSH
55805: LD_INT 2
55807: PPUSH
55808: LD_VAR 0 2
55812: PUSH
55813: LD_INT 2
55815: ARRAY
55816: PPUSH
55817: LD_INT 1
55819: PPUSH
55820: CALL_OW 3
55824: PPUSH
55825: CALL_OW 1
55829: ST_TO_ADDR
// tmp := 1 ;
55830: LD_ADDR_VAR 0 3
55834: PUSH
55835: LD_STRING 1
55837: ST_TO_ADDR
// end ; hardcore := hardcore & tmp ;
55838: LD_ADDR_VAR 0 6
55842: PUSH
55843: LD_VAR 0 6
55847: PUSH
55848: LD_VAR 0 3
55852: STR
55853: ST_TO_ADDR
// end ;
55854: GO 55750
55856: POP
55857: POP
// if isGameLoad then
55858: LD_VAR 0 1
55862: IFFALSE 56337
// begin flags := [ sRocket , sSpeed , sEngine , sSpec , sLevel , sArmoury , sRadar , sBunker , sHack , sFire , sRefresh , sExp , sDepot , sFlag , sKamikadze , sTroll , sSlow , sLack , sTank , sRemote , sPowell , sTeleport , sOilTower , sShovel , sSheik , sEarthquake , sAI , sCargo , sDLaser , sExchange , sFac , sPower , sRandom , sShield , sTime , sTools , sSold , sDiff , sFog , sReset , sSun , sTiger , sBomb , sWound , sBetray , sContamin , sOil , sStu , sBazooka , sMortar , sRanger , sComputer , s30 , s60 ] ;
55864: LD_ADDR_VAR 0 4
55868: PUSH
55869: LD_EXP 86
55873: PUSH
55874: LD_EXP 85
55878: PUSH
55879: LD_EXP 87
55883: PUSH
55884: LD_EXP 84
55888: PUSH
55889: LD_EXP 88
55893: PUSH
55894: LD_EXP 89
55898: PUSH
55899: LD_EXP 90
55903: PUSH
55904: LD_EXP 91
55908: PUSH
55909: LD_EXP 92
55913: PUSH
55914: LD_EXP 93
55918: PUSH
55919: LD_EXP 94
55923: PUSH
55924: LD_EXP 95
55928: PUSH
55929: LD_EXP 96
55933: PUSH
55934: LD_EXP 97
55938: PUSH
55939: LD_EXP 105
55943: PUSH
55944: LD_EXP 106
55948: PUSH
55949: LD_EXP 107
55953: PUSH
55954: LD_EXP 108
55958: PUSH
55959: LD_EXP 110
55963: PUSH
55964: LD_EXP 111
55968: PUSH
55969: LD_EXP 112
55973: PUSH
55974: LD_EXP 115
55978: PUSH
55979: LD_EXP 117
55983: PUSH
55984: LD_EXP 118
55988: PUSH
55989: LD_EXP 119
55993: PUSH
55994: LD_EXP 121
55998: PUSH
55999: LD_EXP 122
56003: PUSH
56004: LD_EXP 125
56008: PUSH
56009: LD_EXP 126
56013: PUSH
56014: LD_EXP 127
56018: PUSH
56019: LD_EXP 128
56023: PUSH
56024: LD_EXP 129
56028: PUSH
56029: LD_EXP 130
56033: PUSH
56034: LD_EXP 131
56038: PUSH
56039: LD_EXP 132
56043: PUSH
56044: LD_EXP 133
56048: PUSH
56049: LD_EXP 98
56053: PUSH
56054: LD_EXP 99
56058: PUSH
56059: LD_EXP 102
56063: PUSH
56064: LD_EXP 103
56068: PUSH
56069: LD_EXP 104
56073: PUSH
56074: LD_EXP 100
56078: PUSH
56079: LD_EXP 101
56083: PUSH
56084: LD_EXP 109
56088: PUSH
56089: LD_EXP 113
56093: PUSH
56094: LD_EXP 114
56098: PUSH
56099: LD_EXP 116
56103: PUSH
56104: LD_EXP 120
56108: PUSH
56109: LD_EXP 123
56113: PUSH
56114: LD_EXP 124
56118: PUSH
56119: LD_EXP 134
56123: PUSH
56124: LD_EXP 135
56128: PUSH
56129: LD_EXP 136
56133: PUSH
56134: LD_EXP 137
56138: PUSH
56139: EMPTY
56140: LIST
56141: LIST
56142: LIST
56143: LIST
56144: LIST
56145: LIST
56146: LIST
56147: LIST
56148: LIST
56149: LIST
56150: LIST
56151: LIST
56152: LIST
56153: LIST
56154: LIST
56155: LIST
56156: LIST
56157: LIST
56158: LIST
56159: LIST
56160: LIST
56161: LIST
56162: LIST
56163: LIST
56164: LIST
56165: LIST
56166: LIST
56167: LIST
56168: LIST
56169: LIST
56170: LIST
56171: LIST
56172: LIST
56173: LIST
56174: LIST
56175: LIST
56176: LIST
56177: LIST
56178: LIST
56179: LIST
56180: LIST
56181: LIST
56182: LIST
56183: LIST
56184: LIST
56185: LIST
56186: LIST
56187: LIST
56188: LIST
56189: LIST
56190: LIST
56191: LIST
56192: LIST
56193: LIST
56194: ST_TO_ADDR
// tmp :=  ;
56195: LD_ADDR_VAR 0 3
56199: PUSH
56200: LD_STRING 
56202: ST_TO_ADDR
// for i = 1 to normalCounter do
56203: LD_ADDR_VAR 0 8
56207: PUSH
56208: DOUBLE
56209: LD_INT 1
56211: DEC
56212: ST_TO_ADDR
56213: LD_EXP 82
56217: PUSH
56218: FOR_TO
56219: IFFALSE 56255
// begin if flags [ i ] then
56221: LD_VAR 0 4
56225: PUSH
56226: LD_VAR 0 8
56230: ARRAY
56231: IFFALSE 56253
// tmp := tmp & i & ; ;
56233: LD_ADDR_VAR 0 3
56237: PUSH
56238: LD_VAR 0 3
56242: PUSH
56243: LD_VAR 0 8
56247: STR
56248: PUSH
56249: LD_STRING ;
56251: STR
56252: ST_TO_ADDR
// end ;
56253: GO 56218
56255: POP
56256: POP
// for i = 1 to hardcoreCounter do
56257: LD_ADDR_VAR 0 8
56261: PUSH
56262: DOUBLE
56263: LD_INT 1
56265: DEC
56266: ST_TO_ADDR
56267: LD_EXP 83
56271: PUSH
56272: FOR_TO
56273: IFFALSE 56319
// begin if flags [ normalCounter + i ] then
56275: LD_VAR 0 4
56279: PUSH
56280: LD_EXP 82
56284: PUSH
56285: LD_VAR 0 8
56289: PLUS
56290: ARRAY
56291: IFFALSE 56317
// tmp := tmp & ( 100 + i ) & ; ;
56293: LD_ADDR_VAR 0 3
56297: PUSH
56298: LD_VAR 0 3
56302: PUSH
56303: LD_INT 100
56305: PUSH
56306: LD_VAR 0 8
56310: PLUS
56311: STR
56312: PUSH
56313: LD_STRING ;
56315: STR
56316: ST_TO_ADDR
// end ;
56317: GO 56272
56319: POP
56320: POP
// if tmp then
56321: LD_VAR 0 3
56325: IFFALSE 56337
// active := tmp ;
56327: LD_ADDR_VAR 0 7
56331: PUSH
56332: LD_VAR 0 3
56336: ST_TO_ADDR
// end ; ToLua ( getStreamItemsFromMission(" & normal & "," & hardcore & "," & active & ") ) ;
56337: LD_STRING getStreamItemsFromMission("
56339: PUSH
56340: LD_VAR 0 5
56344: STR
56345: PUSH
56346: LD_STRING ","
56348: STR
56349: PUSH
56350: LD_VAR 0 6
56354: STR
56355: PUSH
56356: LD_STRING ","
56358: STR
56359: PUSH
56360: LD_VAR 0 7
56364: STR
56365: PUSH
56366: LD_STRING ")
56368: STR
56369: PPUSH
56370: CALL_OW 559
// end else
56374: GO 56383
// ToLua ( getStreamItemsFromMission("","","") ) ;
56376: LD_STRING getStreamItemsFromMission("","","")
56378: PPUSH
56379: CALL_OW 559
// end ;
56383: LD_VAR 0 2
56387: RET
// every 0 0$2 trigger StreamModeActive and sRocket do var i , tmp ;
56388: LD_EXP 81
56392: PUSH
56393: LD_EXP 86
56397: AND
56398: IFFALSE 56522
56400: GO 56402
56402: DISABLE
56403: LD_INT 0
56405: PPUSH
56406: PPUSH
// begin enable ;
56407: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_rocket_launcher ] , [ f_weapon , ru_rocket_launcher ] , [ f_weapon , ar_rocket_launcher ] , [ f_weapon , ru_rocket ] ] ] ) ;
56408: LD_ADDR_VAR 0 2
56412: PUSH
56413: LD_INT 22
56415: PUSH
56416: LD_OWVAR 2
56420: PUSH
56421: EMPTY
56422: LIST
56423: LIST
56424: PUSH
56425: LD_INT 2
56427: PUSH
56428: LD_INT 34
56430: PUSH
56431: LD_INT 7
56433: PUSH
56434: EMPTY
56435: LIST
56436: LIST
56437: PUSH
56438: LD_INT 34
56440: PUSH
56441: LD_INT 45
56443: PUSH
56444: EMPTY
56445: LIST
56446: LIST
56447: PUSH
56448: LD_INT 34
56450: PUSH
56451: LD_INT 28
56453: PUSH
56454: EMPTY
56455: LIST
56456: LIST
56457: PUSH
56458: LD_INT 34
56460: PUSH
56461: LD_INT 47
56463: PUSH
56464: EMPTY
56465: LIST
56466: LIST
56467: PUSH
56468: EMPTY
56469: LIST
56470: LIST
56471: LIST
56472: LIST
56473: LIST
56474: PUSH
56475: EMPTY
56476: LIST
56477: LIST
56478: PPUSH
56479: CALL_OW 69
56483: ST_TO_ADDR
// if not tmp then
56484: LD_VAR 0 2
56488: NOT
56489: IFFALSE 56493
// exit ;
56491: GO 56522
// for i in tmp do
56493: LD_ADDR_VAR 0 1
56497: PUSH
56498: LD_VAR 0 2
56502: PUSH
56503: FOR_IN
56504: IFFALSE 56520
// begin SetLives ( i , 0 ) ;
56506: LD_VAR 0 1
56510: PPUSH
56511: LD_INT 0
56513: PPUSH
56514: CALL_OW 234
// end ;
56518: GO 56503
56520: POP
56521: POP
// end ;
56522: PPOPN 2
56524: END
// every 0 0$2 trigger StreamModeActive and sEngine do var i , tmp ;
56525: LD_EXP 81
56529: PUSH
56530: LD_EXP 87
56534: AND
56535: IFFALSE 56619
56537: GO 56539
56539: DISABLE
56540: LD_INT 0
56542: PPUSH
56543: PPUSH
// begin enable ;
56544: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_siberite ] ] ) ;
56545: LD_ADDR_VAR 0 2
56549: PUSH
56550: LD_INT 22
56552: PUSH
56553: LD_OWVAR 2
56557: PUSH
56558: EMPTY
56559: LIST
56560: LIST
56561: PUSH
56562: LD_INT 32
56564: PUSH
56565: LD_INT 3
56567: PUSH
56568: EMPTY
56569: LIST
56570: LIST
56571: PUSH
56572: EMPTY
56573: LIST
56574: LIST
56575: PPUSH
56576: CALL_OW 69
56580: ST_TO_ADDR
// if not tmp then
56581: LD_VAR 0 2
56585: NOT
56586: IFFALSE 56590
// exit ;
56588: GO 56619
// for i in tmp do
56590: LD_ADDR_VAR 0 1
56594: PUSH
56595: LD_VAR 0 2
56599: PUSH
56600: FOR_IN
56601: IFFALSE 56617
// begin SetLives ( i , 0 ) ;
56603: LD_VAR 0 1
56607: PPUSH
56608: LD_INT 0
56610: PPUSH
56611: CALL_OW 234
// end ;
56615: GO 56600
56617: POP
56618: POP
// end ;
56619: PPOPN 2
56621: END
// every 0 0$1 trigger StreamModeActive and sSpec do var i ;
56622: LD_EXP 81
56626: PUSH
56627: LD_EXP 84
56631: AND
56632: IFFALSE 56725
56634: GO 56636
56636: DISABLE
56637: LD_INT 0
56639: PPUSH
// begin enable ;
56640: ENABLE
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_class , class_sniper ] , [ f_class , class_bazooker ] , [ f_class , class_mortar ] ] ] ) do
56641: LD_ADDR_VAR 0 1
56645: PUSH
56646: LD_INT 22
56648: PUSH
56649: LD_OWVAR 2
56653: PUSH
56654: EMPTY
56655: LIST
56656: LIST
56657: PUSH
56658: LD_INT 2
56660: PUSH
56661: LD_INT 25
56663: PUSH
56664: LD_INT 5
56666: PUSH
56667: EMPTY
56668: LIST
56669: LIST
56670: PUSH
56671: LD_INT 25
56673: PUSH
56674: LD_INT 9
56676: PUSH
56677: EMPTY
56678: LIST
56679: LIST
56680: PUSH
56681: LD_INT 25
56683: PUSH
56684: LD_INT 8
56686: PUSH
56687: EMPTY
56688: LIST
56689: LIST
56690: PUSH
56691: EMPTY
56692: LIST
56693: LIST
56694: LIST
56695: LIST
56696: PUSH
56697: EMPTY
56698: LIST
56699: LIST
56700: PPUSH
56701: CALL_OW 69
56705: PUSH
56706: FOR_IN
56707: IFFALSE 56723
// begin SetClass ( i , 1 ) ;
56709: LD_VAR 0 1
56713: PPUSH
56714: LD_INT 1
56716: PPUSH
56717: CALL_OW 336
// end ;
56721: GO 56706
56723: POP
56724: POP
// end ;
56725: PPOPN 1
56727: END
// every 0 0$1 trigger StreamModeActive and sSpeed and game_speed < 7 do
56728: LD_EXP 81
56732: PUSH
56733: LD_EXP 85
56737: AND
56738: PUSH
56739: LD_OWVAR 65
56743: PUSH
56744: LD_INT 7
56746: LESS
56747: AND
56748: IFFALSE 56762
56750: GO 56752
56752: DISABLE
// begin enable ;
56753: ENABLE
// game_speed := 7 ;
56754: LD_ADDR_OWVAR 65
56758: PUSH
56759: LD_INT 7
56761: ST_TO_ADDR
// end ;
56762: END
// every 0 0$1 trigger StreamModeActive and sLevel do var i , k , tmp ;
56763: LD_EXP 81
56767: PUSH
56768: LD_EXP 88
56772: AND
56773: IFFALSE 56975
56775: GO 56777
56777: DISABLE
56778: LD_INT 0
56780: PPUSH
56781: PPUSH
56782: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
56783: LD_ADDR_VAR 0 3
56787: PUSH
56788: LD_INT 81
56790: PUSH
56791: LD_OWVAR 2
56795: PUSH
56796: EMPTY
56797: LIST
56798: LIST
56799: PUSH
56800: LD_INT 21
56802: PUSH
56803: LD_INT 1
56805: PUSH
56806: EMPTY
56807: LIST
56808: LIST
56809: PUSH
56810: EMPTY
56811: LIST
56812: LIST
56813: PPUSH
56814: CALL_OW 69
56818: ST_TO_ADDR
// if not tmp then
56819: LD_VAR 0 3
56823: NOT
56824: IFFALSE 56828
// exit ;
56826: GO 56975
// if tmp > 5 then
56828: LD_VAR 0 3
56832: PUSH
56833: LD_INT 5
56835: GREATER
56836: IFFALSE 56848
// k := 5 else
56838: LD_ADDR_VAR 0 2
56842: PUSH
56843: LD_INT 5
56845: ST_TO_ADDR
56846: GO 56858
// k := tmp ;
56848: LD_ADDR_VAR 0 2
56852: PUSH
56853: LD_VAR 0 3
56857: ST_TO_ADDR
// for i := 1 to k do
56858: LD_ADDR_VAR 0 1
56862: PUSH
56863: DOUBLE
56864: LD_INT 1
56866: DEC
56867: ST_TO_ADDR
56868: LD_VAR 0 2
56872: PUSH
56873: FOR_TO
56874: IFFALSE 56973
// if GetSkill ( tmp [ i ] , i mod 4 + 1 ) < 10 then
56876: LD_VAR 0 3
56880: PUSH
56881: LD_VAR 0 1
56885: ARRAY
56886: PPUSH
56887: LD_VAR 0 1
56891: PUSH
56892: LD_INT 4
56894: MOD
56895: PUSH
56896: LD_INT 1
56898: PLUS
56899: PPUSH
56900: CALL_OW 259
56904: PUSH
56905: LD_INT 10
56907: LESS
56908: IFFALSE 56971
// SetSkill ( tmp [ i ] , i mod 4 + 1 , GetSkill ( tmp [ i ] , i mod 4 + 1 ) + 1 ) ;
56910: LD_VAR 0 3
56914: PUSH
56915: LD_VAR 0 1
56919: ARRAY
56920: PPUSH
56921: LD_VAR 0 1
56925: PUSH
56926: LD_INT 4
56928: MOD
56929: PUSH
56930: LD_INT 1
56932: PLUS
56933: PPUSH
56934: LD_VAR 0 3
56938: PUSH
56939: LD_VAR 0 1
56943: ARRAY
56944: PPUSH
56945: LD_VAR 0 1
56949: PUSH
56950: LD_INT 4
56952: MOD
56953: PUSH
56954: LD_INT 1
56956: PLUS
56957: PPUSH
56958: CALL_OW 259
56962: PUSH
56963: LD_INT 1
56965: PLUS
56966: PPUSH
56967: CALL_OW 237
56971: GO 56873
56973: POP
56974: POP
// end ;
56975: PPOPN 3
56977: END
// every 0 0$1 trigger StreamModeActive and sArmoury do
56978: LD_EXP 81
56982: PUSH
56983: LD_EXP 89
56987: AND
56988: IFFALSE 57008
56990: GO 56992
56992: DISABLE
// SetRestrict ( b_armoury , your_side , false ) ;
56993: LD_INT 4
56995: PPUSH
56996: LD_OWVAR 2
57000: PPUSH
57001: LD_INT 0
57003: PPUSH
57004: CALL_OW 324
57008: END
// every 0 0$1 trigger StreamModeActive and sShovel do
57009: LD_EXP 81
57013: PUSH
57014: LD_EXP 118
57018: AND
57019: IFFALSE 57039
57021: GO 57023
57023: DISABLE
// SetRestrict ( b_ext_noncombat , your_side , false ) ;
57024: LD_INT 19
57026: PPUSH
57027: LD_OWVAR 2
57031: PPUSH
57032: LD_INT 0
57034: PPUSH
57035: CALL_OW 324
57039: END
// every 0 0$1 trigger StreamModeActive and sRadar do var i , tmp ;
57040: LD_EXP 81
57044: PUSH
57045: LD_EXP 90
57049: AND
57050: IFFALSE 57152
57052: GO 57054
57054: DISABLE
57055: LD_INT 0
57057: PPUSH
57058: PPUSH
// begin enable ;
57059: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_weapon , us_radar ] , [ f_weapon , ar_radar ] ] ] ) ;
57060: LD_ADDR_VAR 0 2
57064: PUSH
57065: LD_INT 22
57067: PUSH
57068: LD_OWVAR 2
57072: PUSH
57073: EMPTY
57074: LIST
57075: LIST
57076: PUSH
57077: LD_INT 2
57079: PUSH
57080: LD_INT 34
57082: PUSH
57083: LD_INT 11
57085: PUSH
57086: EMPTY
57087: LIST
57088: LIST
57089: PUSH
57090: LD_INT 34
57092: PUSH
57093: LD_INT 30
57095: PUSH
57096: EMPTY
57097: LIST
57098: LIST
57099: PUSH
57100: EMPTY
57101: LIST
57102: LIST
57103: LIST
57104: PUSH
57105: EMPTY
57106: LIST
57107: LIST
57108: PPUSH
57109: CALL_OW 69
57113: ST_TO_ADDR
// if not tmp then
57114: LD_VAR 0 2
57118: NOT
57119: IFFALSE 57123
// exit ;
57121: GO 57152
// for i in tmp do
57123: LD_ADDR_VAR 0 1
57127: PUSH
57128: LD_VAR 0 2
57132: PUSH
57133: FOR_IN
57134: IFFALSE 57150
// begin SetLives ( i , 0 ) ;
57136: LD_VAR 0 1
57140: PPUSH
57141: LD_INT 0
57143: PPUSH
57144: CALL_OW 234
// end ;
57148: GO 57133
57150: POP
57151: POP
// end ;
57152: PPOPN 2
57154: END
// every 0 0$1 trigger StreamModeActive and sBunker do
57155: LD_EXP 81
57159: PUSH
57160: LD_EXP 91
57164: AND
57165: IFFALSE 57185
57167: GO 57169
57169: DISABLE
// SetRestrict ( b_bunker , your_side , false ) ;
57170: LD_INT 32
57172: PPUSH
57173: LD_OWVAR 2
57177: PPUSH
57178: LD_INT 0
57180: PPUSH
57181: CALL_OW 324
57185: END
// every 0 0$1 trigger StreamModeActive and sHack do var i , tmp , side ;
57186: LD_EXP 81
57190: PUSH
57191: LD_EXP 92
57195: AND
57196: IFFALSE 57377
57198: GO 57200
57200: DISABLE
57201: LD_INT 0
57203: PPUSH
57204: PPUSH
57205: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_control , control_computer ] ] ) ;
57206: LD_ADDR_VAR 0 2
57210: PUSH
57211: LD_INT 22
57213: PUSH
57214: LD_OWVAR 2
57218: PUSH
57219: EMPTY
57220: LIST
57221: LIST
57222: PUSH
57223: LD_INT 33
57225: PUSH
57226: LD_INT 3
57228: PUSH
57229: EMPTY
57230: LIST
57231: LIST
57232: PUSH
57233: EMPTY
57234: LIST
57235: LIST
57236: PPUSH
57237: CALL_OW 69
57241: ST_TO_ADDR
// if not tmp then
57242: LD_VAR 0 2
57246: NOT
57247: IFFALSE 57251
// exit ;
57249: GO 57377
// side := 0 ;
57251: LD_ADDR_VAR 0 3
57255: PUSH
57256: LD_INT 0
57258: ST_TO_ADDR
// for i := 1 to 8 do
57259: LD_ADDR_VAR 0 1
57263: PUSH
57264: DOUBLE
57265: LD_INT 1
57267: DEC
57268: ST_TO_ADDR
57269: LD_INT 8
57271: PUSH
57272: FOR_TO
57273: IFFALSE 57321
// if your_side <> i and GetAttitude ( your_side , i ) = att_enemy then
57275: LD_OWVAR 2
57279: PUSH
57280: LD_VAR 0 1
57284: NONEQUAL
57285: PUSH
57286: LD_OWVAR 2
57290: PPUSH
57291: LD_VAR 0 1
57295: PPUSH
57296: CALL_OW 81
57300: PUSH
57301: LD_INT 2
57303: EQUAL
57304: AND
57305: IFFALSE 57319
// begin side := i ;
57307: LD_ADDR_VAR 0 3
57311: PUSH
57312: LD_VAR 0 1
57316: ST_TO_ADDR
// break ;
57317: GO 57321
// end ;
57319: GO 57272
57321: POP
57322: POP
// if not side then
57323: LD_VAR 0 3
57327: NOT
57328: IFFALSE 57332
// exit ;
57330: GO 57377
// for i := 1 to tmp do
57332: LD_ADDR_VAR 0 1
57336: PUSH
57337: DOUBLE
57338: LD_INT 1
57340: DEC
57341: ST_TO_ADDR
57342: LD_VAR 0 2
57346: PUSH
57347: FOR_TO
57348: IFFALSE 57375
// if Prob ( 60 ) then
57350: LD_INT 60
57352: PPUSH
57353: CALL_OW 13
57357: IFFALSE 57373
// SetSide ( i , side ) ;
57359: LD_VAR 0 1
57363: PPUSH
57364: LD_VAR 0 3
57368: PPUSH
57369: CALL_OW 235
57373: GO 57347
57375: POP
57376: POP
// end ;
57377: PPOPN 3
57379: END
// every 0 0$1 trigger StreamModeActive and sRefresh do var un ;
57380: LD_EXP 81
57384: PUSH
57385: LD_EXP 94
57389: AND
57390: IFFALSE 57509
57392: GO 57394
57394: DISABLE
57395: LD_INT 0
57397: PPUSH
// begin for un in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) do
57398: LD_ADDR_VAR 0 1
57402: PUSH
57403: LD_INT 22
57405: PUSH
57406: LD_OWVAR 2
57410: PUSH
57411: EMPTY
57412: LIST
57413: LIST
57414: PUSH
57415: LD_INT 21
57417: PUSH
57418: LD_INT 1
57420: PUSH
57421: EMPTY
57422: LIST
57423: LIST
57424: PUSH
57425: LD_INT 3
57427: PUSH
57428: LD_INT 23
57430: PUSH
57431: LD_INT 0
57433: PUSH
57434: EMPTY
57435: LIST
57436: LIST
57437: PUSH
57438: EMPTY
57439: LIST
57440: LIST
57441: PUSH
57442: EMPTY
57443: LIST
57444: LIST
57445: LIST
57446: PPUSH
57447: CALL_OW 69
57451: PUSH
57452: FOR_IN
57453: IFFALSE 57507
// if GetClass ( un ) in [ 1 , 2 , 3 , 4 ] then
57455: LD_VAR 0 1
57459: PPUSH
57460: CALL_OW 257
57464: PUSH
57465: LD_INT 1
57467: PUSH
57468: LD_INT 2
57470: PUSH
57471: LD_INT 3
57473: PUSH
57474: LD_INT 4
57476: PUSH
57477: EMPTY
57478: LIST
57479: LIST
57480: LIST
57481: LIST
57482: IN
57483: IFFALSE 57505
// SetClass ( un , rand ( 1 , 4 ) ) ;
57485: LD_VAR 0 1
57489: PPUSH
57490: LD_INT 1
57492: PPUSH
57493: LD_INT 4
57495: PPUSH
57496: CALL_OW 12
57500: PPUSH
57501: CALL_OW 336
57505: GO 57452
57507: POP
57508: POP
// end ;
57509: PPOPN 1
57511: END
// every 0 0$1 trigger StreamModeActive and sFire do var tmp ;
57512: LD_EXP 81
57516: PUSH
57517: LD_EXP 93
57521: AND
57522: IFFALSE 57601
57524: GO 57526
57526: DISABLE
57527: LD_INT 0
57529: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57530: LD_ADDR_VAR 0 1
57534: PUSH
57535: LD_INT 22
57537: PUSH
57538: LD_OWVAR 2
57542: PUSH
57543: EMPTY
57544: LIST
57545: LIST
57546: PUSH
57547: LD_INT 21
57549: PUSH
57550: LD_INT 3
57552: PUSH
57553: EMPTY
57554: LIST
57555: LIST
57556: PUSH
57557: EMPTY
57558: LIST
57559: LIST
57560: PPUSH
57561: CALL_OW 69
57565: ST_TO_ADDR
// if not tmp then
57566: LD_VAR 0 1
57570: NOT
57571: IFFALSE 57575
// exit ;
57573: GO 57601
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 100 ) ;
57575: LD_VAR 0 1
57579: PUSH
57580: LD_INT 1
57582: PPUSH
57583: LD_VAR 0 1
57587: PPUSH
57588: CALL_OW 12
57592: ARRAY
57593: PPUSH
57594: LD_INT 100
57596: PPUSH
57597: CALL_OW 234
// end ;
57601: PPOPN 1
57603: END
// every 0 0$1 trigger StreamModeActive and sExp do var tmp ;
57604: LD_EXP 81
57608: PUSH
57609: LD_EXP 95
57613: AND
57614: IFFALSE 57712
57616: GO 57618
57618: DISABLE
57619: LD_INT 0
57621: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
57622: LD_ADDR_VAR 0 1
57626: PUSH
57627: LD_INT 22
57629: PUSH
57630: LD_OWVAR 2
57634: PUSH
57635: EMPTY
57636: LIST
57637: LIST
57638: PUSH
57639: LD_INT 21
57641: PUSH
57642: LD_INT 1
57644: PUSH
57645: EMPTY
57646: LIST
57647: LIST
57648: PUSH
57649: EMPTY
57650: LIST
57651: LIST
57652: PPUSH
57653: CALL_OW 69
57657: ST_TO_ADDR
// if not tmp then
57658: LD_VAR 0 1
57662: NOT
57663: IFFALSE 57667
// exit ;
57665: GO 57712
// AddExperience ( tmp [ rand ( 1 , tmp ) ] , rand ( 1 , 4 ) , rand ( 3000 , 9000 ) ) ;
57667: LD_VAR 0 1
57671: PUSH
57672: LD_INT 1
57674: PPUSH
57675: LD_VAR 0 1
57679: PPUSH
57680: CALL_OW 12
57684: ARRAY
57685: PPUSH
57686: LD_INT 1
57688: PPUSH
57689: LD_INT 4
57691: PPUSH
57692: CALL_OW 12
57696: PPUSH
57697: LD_INT 3000
57699: PPUSH
57700: LD_INT 9000
57702: PPUSH
57703: CALL_OW 12
57707: PPUSH
57708: CALL_OW 492
// end ;
57712: PPOPN 1
57714: END
// every 0 0$1 trigger StreamModeActive and sDepot do
57715: LD_EXP 81
57719: PUSH
57720: LD_EXP 96
57724: AND
57725: IFFALSE 57745
57727: GO 57729
57729: DISABLE
// SetRestrict ( b_warehouse , your_side , false ) ;
57730: LD_INT 1
57732: PPUSH
57733: LD_OWVAR 2
57737: PPUSH
57738: LD_INT 0
57740: PPUSH
57741: CALL_OW 324
57745: END
// every 0 0$1 trigger StreamModeActive and sFlag do var i , tmp ;
57746: LD_EXP 81
57750: PUSH
57751: LD_EXP 97
57755: AND
57756: IFFALSE 57839
57758: GO 57760
57760: DISABLE
57761: LD_INT 0
57763: PPUSH
57764: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_building ] ] ) ;
57765: LD_ADDR_VAR 0 2
57769: PUSH
57770: LD_INT 22
57772: PUSH
57773: LD_OWVAR 2
57777: PUSH
57778: EMPTY
57779: LIST
57780: LIST
57781: PUSH
57782: LD_INT 21
57784: PUSH
57785: LD_INT 3
57787: PUSH
57788: EMPTY
57789: LIST
57790: LIST
57791: PUSH
57792: EMPTY
57793: LIST
57794: LIST
57795: PPUSH
57796: CALL_OW 69
57800: ST_TO_ADDR
// if not tmp then
57801: LD_VAR 0 2
57805: NOT
57806: IFFALSE 57810
// exit ;
57808: GO 57839
// for i in tmp do
57810: LD_ADDR_VAR 0 1
57814: PUSH
57815: LD_VAR 0 2
57819: PUSH
57820: FOR_IN
57821: IFFALSE 57837
// SetBLevel ( i , 10 ) ;
57823: LD_VAR 0 1
57827: PPUSH
57828: LD_INT 10
57830: PPUSH
57831: CALL_OW 241
57835: GO 57820
57837: POP
57838: POP
// end ;
57839: PPOPN 2
57841: END
// every 0 0$1 trigger StreamModeActive and sSold do var i , un , tmp ;
57842: LD_EXP 81
57846: PUSH
57847: LD_EXP 98
57851: AND
57852: IFFALSE 57963
57854: GO 57856
57856: DISABLE
57857: LD_INT 0
57859: PPUSH
57860: PPUSH
57861: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
57862: LD_ADDR_VAR 0 3
57866: PUSH
57867: LD_INT 22
57869: PUSH
57870: LD_OWVAR 2
57874: PUSH
57875: EMPTY
57876: LIST
57877: LIST
57878: PUSH
57879: LD_INT 25
57881: PUSH
57882: LD_INT 1
57884: PUSH
57885: EMPTY
57886: LIST
57887: LIST
57888: PUSH
57889: EMPTY
57890: LIST
57891: LIST
57892: PPUSH
57893: CALL_OW 69
57897: ST_TO_ADDR
// if not tmp then
57898: LD_VAR 0 3
57902: NOT
57903: IFFALSE 57907
// exit ;
57905: GO 57963
// un := tmp [ rand ( 1 , tmp ) ] ;
57907: LD_ADDR_VAR 0 2
57911: PUSH
57912: LD_VAR 0 3
57916: PUSH
57917: LD_INT 1
57919: PPUSH
57920: LD_VAR 0 3
57924: PPUSH
57925: CALL_OW 12
57929: ARRAY
57930: ST_TO_ADDR
// if Crawls ( un ) then
57931: LD_VAR 0 2
57935: PPUSH
57936: CALL_OW 318
57940: IFFALSE 57951
// ComWalk ( un ) ;
57942: LD_VAR 0 2
57946: PPUSH
57947: CALL_OW 138
// SetClass ( un , class_sniper ) ;
57951: LD_VAR 0 2
57955: PPUSH
57956: LD_INT 5
57958: PPUSH
57959: CALL_OW 336
// end ;
57963: PPOPN 3
57965: END
// every 0 0$1 trigger StreamModeActive and sDiff and Difficulty < 4 do
57966: LD_EXP 81
57970: PUSH
57971: LD_EXP 99
57975: AND
57976: PUSH
57977: LD_OWVAR 67
57981: PUSH
57982: LD_INT 4
57984: LESS
57985: AND
57986: IFFALSE 58005
57988: GO 57990
57990: DISABLE
// begin Difficulty := Difficulty + 1 ;
57991: LD_ADDR_OWVAR 67
57995: PUSH
57996: LD_OWVAR 67
58000: PUSH
58001: LD_INT 1
58003: PLUS
58004: ST_TO_ADDR
// end ;
58005: END
// every 0 0$1 trigger StreamModeActive and sTiger do var i ;
58006: LD_EXP 81
58010: PUSH
58011: LD_EXP 100
58015: AND
58016: IFFALSE 58119
58018: GO 58020
58020: DISABLE
58021: LD_INT 0
58023: PPUSH
// begin for i := 1 to 5 do
58024: LD_ADDR_VAR 0 1
58028: PUSH
58029: DOUBLE
58030: LD_INT 1
58032: DEC
58033: ST_TO_ADDR
58034: LD_INT 5
58036: PUSH
58037: FOR_TO
58038: IFFALSE 58117
// begin uc_nation := nation_nature ;
58040: LD_ADDR_OWVAR 21
58044: PUSH
58045: LD_INT 0
58047: ST_TO_ADDR
// uc_side := 0 ;
58048: LD_ADDR_OWVAR 20
58052: PUSH
58053: LD_INT 0
58055: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58056: LD_ADDR_OWVAR 29
58060: PUSH
58061: LD_INT 12
58063: PUSH
58064: LD_INT 12
58066: PUSH
58067: EMPTY
58068: LIST
58069: LIST
58070: ST_TO_ADDR
// hc_agressivity := 20 ;
58071: LD_ADDR_OWVAR 35
58075: PUSH
58076: LD_INT 20
58078: ST_TO_ADDR
// hc_class := class_tiger ;
58079: LD_ADDR_OWVAR 28
58083: PUSH
58084: LD_INT 14
58086: ST_TO_ADDR
// hc_gallery :=  ;
58087: LD_ADDR_OWVAR 33
58091: PUSH
58092: LD_STRING 
58094: ST_TO_ADDR
// hc_name :=  ;
58095: LD_ADDR_OWVAR 26
58099: PUSH
58100: LD_STRING 
58102: ST_TO_ADDR
// PlaceUnitAnyWhere ( CreateHuman , false ) ;
58103: CALL_OW 44
58107: PPUSH
58108: LD_INT 0
58110: PPUSH
58111: CALL_OW 51
// end ;
58115: GO 58037
58117: POP
58118: POP
// end ;
58119: PPOPN 1
58121: END
// every 0 0$1 trigger StreamModeActive and sBomb do
58122: LD_EXP 81
58126: PUSH
58127: LD_EXP 101
58131: AND
58132: IFFALSE 58141
58134: GO 58136
58136: DISABLE
// StreamSibBomb ;
58137: CALL 58142 0 0
58141: END
// export function StreamSibBomb ; var i , x , y ; begin
58142: LD_INT 0
58144: PPUSH
58145: PPUSH
58146: PPUSH
58147: PPUSH
// result := false ;
58148: LD_ADDR_VAR 0 1
58152: PUSH
58153: LD_INT 0
58155: ST_TO_ADDR
// for i := 1 to 16 do
58156: LD_ADDR_VAR 0 2
58160: PUSH
58161: DOUBLE
58162: LD_INT 1
58164: DEC
58165: ST_TO_ADDR
58166: LD_INT 16
58168: PUSH
58169: FOR_TO
58170: IFFALSE 58369
// begin x := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58172: LD_ADDR_VAR 0 3
58176: PUSH
58177: LD_INT 10
58179: PUSH
58180: LD_INT 20
58182: PUSH
58183: LD_INT 30
58185: PUSH
58186: LD_INT 40
58188: PUSH
58189: LD_INT 50
58191: PUSH
58192: LD_INT 60
58194: PUSH
58195: LD_INT 70
58197: PUSH
58198: LD_INT 80
58200: PUSH
58201: LD_INT 90
58203: PUSH
58204: LD_INT 100
58206: PUSH
58207: LD_INT 110
58209: PUSH
58210: LD_INT 120
58212: PUSH
58213: LD_INT 130
58215: PUSH
58216: LD_INT 140
58218: PUSH
58219: LD_INT 150
58221: PUSH
58222: EMPTY
58223: LIST
58224: LIST
58225: LIST
58226: LIST
58227: LIST
58228: LIST
58229: LIST
58230: LIST
58231: LIST
58232: LIST
58233: LIST
58234: LIST
58235: LIST
58236: LIST
58237: LIST
58238: PUSH
58239: LD_INT 1
58241: PPUSH
58242: LD_INT 15
58244: PPUSH
58245: CALL_OW 12
58249: ARRAY
58250: ST_TO_ADDR
// y := [ 10 , 20 , 30 , 40 , 50 , 60 , 70 , 80 , 90 , 100 , 110 , 120 , 130 , 140 , 150 ] [ rand ( 1 , 15 ) ] ;
58251: LD_ADDR_VAR 0 4
58255: PUSH
58256: LD_INT 10
58258: PUSH
58259: LD_INT 20
58261: PUSH
58262: LD_INT 30
58264: PUSH
58265: LD_INT 40
58267: PUSH
58268: LD_INT 50
58270: PUSH
58271: LD_INT 60
58273: PUSH
58274: LD_INT 70
58276: PUSH
58277: LD_INT 80
58279: PUSH
58280: LD_INT 90
58282: PUSH
58283: LD_INT 100
58285: PUSH
58286: LD_INT 110
58288: PUSH
58289: LD_INT 120
58291: PUSH
58292: LD_INT 130
58294: PUSH
58295: LD_INT 140
58297: PUSH
58298: LD_INT 150
58300: PUSH
58301: EMPTY
58302: LIST
58303: LIST
58304: LIST
58305: LIST
58306: LIST
58307: LIST
58308: LIST
58309: LIST
58310: LIST
58311: LIST
58312: LIST
58313: LIST
58314: LIST
58315: LIST
58316: LIST
58317: PUSH
58318: LD_INT 1
58320: PPUSH
58321: LD_INT 15
58323: PPUSH
58324: CALL_OW 12
58328: ARRAY
58329: ST_TO_ADDR
// if ValidHex ( x , y ) then
58330: LD_VAR 0 3
58334: PPUSH
58335: LD_VAR 0 4
58339: PPUSH
58340: CALL_OW 488
58344: IFFALSE 58367
// begin result := [ x , y ] ;
58346: LD_ADDR_VAR 0 1
58350: PUSH
58351: LD_VAR 0 3
58355: PUSH
58356: LD_VAR 0 4
58360: PUSH
58361: EMPTY
58362: LIST
58363: LIST
58364: ST_TO_ADDR
// break ;
58365: GO 58369
// end ; end ;
58367: GO 58169
58369: POP
58370: POP
// if result then
58371: LD_VAR 0 1
58375: IFFALSE 58435
// begin ToLua ( playSibBomb() ) ;
58377: LD_STRING playSibBomb()
58379: PPUSH
58380: CALL_OW 559
// wait ( 0 0$14 ) ;
58384: LD_INT 490
58386: PPUSH
58387: CALL_OW 67
// CenterNowOnXY ( result [ 1 ] , result [ 2 ] ) ;
58391: LD_VAR 0 1
58395: PUSH
58396: LD_INT 1
58398: ARRAY
58399: PPUSH
58400: LD_VAR 0 1
58404: PUSH
58405: LD_INT 2
58407: ARRAY
58408: PPUSH
58409: CALL_OW 86
// SendSiberiteRocket ( result [ 1 ] , result [ 2 ] ) ;
58413: LD_VAR 0 1
58417: PUSH
58418: LD_INT 1
58420: ARRAY
58421: PPUSH
58422: LD_VAR 0 1
58426: PUSH
58427: LD_INT 2
58429: ARRAY
58430: PPUSH
58431: CALL_OW 429
// end ; end ;
58435: LD_VAR 0 1
58439: RET
// every 0 0$1 trigger StreamModeActive and sReset do
58440: LD_EXP 81
58444: PUSH
58445: LD_EXP 103
58449: AND
58450: IFFALSE 58462
58452: GO 58454
58454: DISABLE
// YouLost (  ) ;
58455: LD_STRING 
58457: PPUSH
58458: CALL_OW 104
58462: END
// every 0 0$1 trigger StreamModeActive and sFog do
58463: LD_EXP 81
58467: PUSH
58468: LD_EXP 102
58472: AND
58473: IFFALSE 58487
58475: GO 58477
58477: DISABLE
// FogOff ( your_side ) ;
58478: LD_OWVAR 2
58482: PPUSH
58483: CALL_OW 344
58487: END
// every 0 0$1 trigger StreamModeActive and sSun do
58488: LD_EXP 81
58492: PUSH
58493: LD_EXP 104
58497: AND
58498: IFFALSE 58526
58500: GO 58502
58502: DISABLE
// begin solar_recharge_percent := 0 ;
58503: LD_ADDR_OWVAR 79
58507: PUSH
58508: LD_INT 0
58510: ST_TO_ADDR
// wait ( 5 5$00 ) ;
58511: LD_INT 10500
58513: PPUSH
58514: CALL_OW 67
// solar_recharge_percent := 100 ;
58518: LD_ADDR_OWVAR 79
58522: PUSH
58523: LD_INT 100
58525: ST_TO_ADDR
// end ;
58526: END
// every 0 0$1 trigger StreamModeActive and sKamikadze do var i , un , tmp ;
58527: LD_EXP 81
58531: PUSH
58532: LD_EXP 105
58536: AND
58537: IFFALSE 58776
58539: GO 58541
58541: DISABLE
58542: LD_INT 0
58544: PPUSH
58545: PPUSH
58546: PPUSH
// begin tmp := [ ] ;
58547: LD_ADDR_VAR 0 3
58551: PUSH
58552: EMPTY
58553: ST_TO_ADDR
// for i := 1 to 6 do
58554: LD_ADDR_VAR 0 1
58558: PUSH
58559: DOUBLE
58560: LD_INT 1
58562: DEC
58563: ST_TO_ADDR
58564: LD_INT 6
58566: PUSH
58567: FOR_TO
58568: IFFALSE 58673
// begin uc_nation := nation_nature ;
58570: LD_ADDR_OWVAR 21
58574: PUSH
58575: LD_INT 0
58577: ST_TO_ADDR
// uc_side := 0 ;
58578: LD_ADDR_OWVAR 20
58582: PUSH
58583: LD_INT 0
58585: ST_TO_ADDR
// hc_attr := [ 12 , 12 ] ;
58586: LD_ADDR_OWVAR 29
58590: PUSH
58591: LD_INT 12
58593: PUSH
58594: LD_INT 12
58596: PUSH
58597: EMPTY
58598: LIST
58599: LIST
58600: ST_TO_ADDR
// hc_agressivity := 20 ;
58601: LD_ADDR_OWVAR 35
58605: PUSH
58606: LD_INT 20
58608: ST_TO_ADDR
// hc_class := class_apeman_kamikaze ;
58609: LD_ADDR_OWVAR 28
58613: PUSH
58614: LD_INT 17
58616: ST_TO_ADDR
// hc_gallery :=  ;
58617: LD_ADDR_OWVAR 33
58621: PUSH
58622: LD_STRING 
58624: ST_TO_ADDR
// hc_name :=  ;
58625: LD_ADDR_OWVAR 26
58629: PUSH
58630: LD_STRING 
58632: ST_TO_ADDR
// un := CreateHuman ;
58633: LD_ADDR_VAR 0 2
58637: PUSH
58638: CALL_OW 44
58642: ST_TO_ADDR
// PlaceUnitAnyWhere ( un , true ) ;
58643: LD_VAR 0 2
58647: PPUSH
58648: LD_INT 1
58650: PPUSH
58651: CALL_OW 51
// tmp := tmp ^ un ;
58655: LD_ADDR_VAR 0 3
58659: PUSH
58660: LD_VAR 0 3
58664: PUSH
58665: LD_VAR 0 2
58669: ADD
58670: ST_TO_ADDR
// end ;
58671: GO 58567
58673: POP
58674: POP
// repeat wait ( 0 0$1 ) ;
58675: LD_INT 35
58677: PPUSH
58678: CALL_OW 67
// for un in tmp do
58682: LD_ADDR_VAR 0 2
58686: PUSH
58687: LD_VAR 0 3
58691: PUSH
58692: FOR_IN
58693: IFFALSE 58767
// begin if IsDead ( un ) then
58695: LD_VAR 0 2
58699: PPUSH
58700: CALL_OW 301
58704: IFFALSE 58724
// begin tmp := tmp diff un ;
58706: LD_ADDR_VAR 0 3
58710: PUSH
58711: LD_VAR 0 3
58715: PUSH
58716: LD_VAR 0 2
58720: DIFF
58721: ST_TO_ADDR
// continue ;
58722: GO 58692
// end ; ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_not , [ f_side , 0 ] ] ) , un ) ) ;
58724: LD_VAR 0 2
58728: PPUSH
58729: LD_INT 3
58731: PUSH
58732: LD_INT 22
58734: PUSH
58735: LD_INT 0
58737: PUSH
58738: EMPTY
58739: LIST
58740: LIST
58741: PUSH
58742: EMPTY
58743: LIST
58744: LIST
58745: PPUSH
58746: CALL_OW 69
58750: PPUSH
58751: LD_VAR 0 2
58755: PPUSH
58756: CALL_OW 74
58760: PPUSH
58761: CALL_OW 115
// end ;
58765: GO 58692
58767: POP
58768: POP
// until not tmp ;
58769: LD_VAR 0 3
58773: NOT
58774: IFFALSE 58675
// end ;
58776: PPOPN 3
58778: END
// every 0 0$1 trigger StreamModeActive and sTroll do
58779: LD_EXP 81
58783: PUSH
58784: LD_EXP 106
58788: AND
58789: IFFALSE 58843
58791: GO 58793
58793: DISABLE
// begin ToLua ( displayTroll(); ) ;
58794: LD_STRING displayTroll();
58796: PPUSH
58797: CALL_OW 559
// wait ( 3 3$00 ) ;
58801: LD_INT 6300
58803: PPUSH
58804: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58808: LD_STRING hideTroll();
58810: PPUSH
58811: CALL_OW 559
// wait ( 1 1$00 ) ;
58815: LD_INT 2100
58817: PPUSH
58818: CALL_OW 67
// ToLua ( displayTroll(); ) ;
58822: LD_STRING displayTroll();
58824: PPUSH
58825: CALL_OW 559
// wait ( 1 1$00 ) ;
58829: LD_INT 2100
58831: PPUSH
58832: CALL_OW 67
// ToLua ( hideTroll(); ) ;
58836: LD_STRING hideTroll();
58838: PPUSH
58839: CALL_OW 559
// end ;
58843: END
// every 0 0$1 trigger StreamModeActive and sSlow do var p ;
58844: LD_EXP 81
58848: PUSH
58849: LD_EXP 107
58853: AND
58854: IFFALSE 58917
58856: GO 58858
58858: DISABLE
58859: LD_INT 0
58861: PPUSH
// begin p := 0 ;
58862: LD_ADDR_VAR 0 1
58866: PUSH
58867: LD_INT 0
58869: ST_TO_ADDR
// repeat game_speed := 1 ;
58870: LD_ADDR_OWVAR 65
58874: PUSH
58875: LD_INT 1
58877: ST_TO_ADDR
// wait ( 0 0$1 ) ;
58878: LD_INT 35
58880: PPUSH
58881: CALL_OW 67
// p := p + 1 ;
58885: LD_ADDR_VAR 0 1
58889: PUSH
58890: LD_VAR 0 1
58894: PUSH
58895: LD_INT 1
58897: PLUS
58898: ST_TO_ADDR
// until p >= 60 ;
58899: LD_VAR 0 1
58903: PUSH
58904: LD_INT 60
58906: GREATEREQUAL
58907: IFFALSE 58870
// game_speed := 4 ;
58909: LD_ADDR_OWVAR 65
58913: PUSH
58914: LD_INT 4
58916: ST_TO_ADDR
// end ;
58917: PPOPN 1
58919: END
// every 0 0$1 trigger StreamModeActive and sLack do var depot , base ;
58920: LD_EXP 81
58924: PUSH
58925: LD_EXP 108
58929: AND
58930: IFFALSE 59076
58932: GO 58934
58934: DISABLE
58935: LD_INT 0
58937: PPUSH
58938: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
58939: LD_ADDR_VAR 0 1
58943: PUSH
58944: LD_INT 22
58946: PUSH
58947: LD_OWVAR 2
58951: PUSH
58952: EMPTY
58953: LIST
58954: LIST
58955: PUSH
58956: LD_INT 2
58958: PUSH
58959: LD_INT 30
58961: PUSH
58962: LD_INT 0
58964: PUSH
58965: EMPTY
58966: LIST
58967: LIST
58968: PUSH
58969: LD_INT 30
58971: PUSH
58972: LD_INT 1
58974: PUSH
58975: EMPTY
58976: LIST
58977: LIST
58978: PUSH
58979: EMPTY
58980: LIST
58981: LIST
58982: LIST
58983: PUSH
58984: EMPTY
58985: LIST
58986: LIST
58987: PPUSH
58988: CALL_OW 69
58992: ST_TO_ADDR
// if not depot then
58993: LD_VAR 0 1
58997: NOT
58998: IFFALSE 59002
// exit ;
59000: GO 59076
// base := GetBase ( depot [ rand ( 1 , depot ) ] ) ;
59002: LD_ADDR_VAR 0 2
59006: PUSH
59007: LD_VAR 0 1
59011: PUSH
59012: LD_INT 1
59014: PPUSH
59015: LD_VAR 0 1
59019: PPUSH
59020: CALL_OW 12
59024: ARRAY
59025: PPUSH
59026: CALL_OW 274
59030: ST_TO_ADDR
// SetResourceType ( base , mat_cans , 0 ) ;
59031: LD_VAR 0 2
59035: PPUSH
59036: LD_INT 1
59038: PPUSH
59039: LD_INT 0
59041: PPUSH
59042: CALL_OW 277
// SetResourceType ( base , mat_oil , 0 ) ;
59046: LD_VAR 0 2
59050: PPUSH
59051: LD_INT 2
59053: PPUSH
59054: LD_INT 0
59056: PPUSH
59057: CALL_OW 277
// SetResourceType ( base , mat_siberit , 0 ) ;
59061: LD_VAR 0 2
59065: PPUSH
59066: LD_INT 3
59068: PPUSH
59069: LD_INT 0
59071: PPUSH
59072: CALL_OW 277
// end ;
59076: PPOPN 2
59078: END
// every 0 0$1 trigger StreamModeActive and sWound do var tmp ;
59079: LD_EXP 81
59083: PUSH
59084: LD_EXP 109
59088: AND
59089: IFFALSE 59186
59091: GO 59093
59093: DISABLE
59094: LD_INT 0
59096: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
59097: LD_ADDR_VAR 0 1
59101: PUSH
59102: LD_INT 22
59104: PUSH
59105: LD_OWVAR 2
59109: PUSH
59110: EMPTY
59111: LIST
59112: LIST
59113: PUSH
59114: LD_INT 21
59116: PUSH
59117: LD_INT 1
59119: PUSH
59120: EMPTY
59121: LIST
59122: LIST
59123: PUSH
59124: LD_INT 3
59126: PUSH
59127: LD_INT 23
59129: PUSH
59130: LD_INT 0
59132: PUSH
59133: EMPTY
59134: LIST
59135: LIST
59136: PUSH
59137: EMPTY
59138: LIST
59139: LIST
59140: PUSH
59141: EMPTY
59142: LIST
59143: LIST
59144: LIST
59145: PPUSH
59146: CALL_OW 69
59150: ST_TO_ADDR
// if not tmp then
59151: LD_VAR 0 1
59155: NOT
59156: IFFALSE 59160
// exit ;
59158: GO 59186
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 200 ) ;
59160: LD_VAR 0 1
59164: PUSH
59165: LD_INT 1
59167: PPUSH
59168: LD_VAR 0 1
59172: PPUSH
59173: CALL_OW 12
59177: ARRAY
59178: PPUSH
59179: LD_INT 200
59181: PPUSH
59182: CALL_OW 234
// end ;
59186: PPOPN 1
59188: END
// every 0 0$1 trigger StreamModeActive and sTank do var tmp ;
59189: LD_EXP 81
59193: PUSH
59194: LD_EXP 110
59198: AND
59199: IFFALSE 59278
59201: GO 59203
59203: DISABLE
59204: LD_INT 0
59206: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] ] ) ;
59207: LD_ADDR_VAR 0 1
59211: PUSH
59212: LD_INT 22
59214: PUSH
59215: LD_OWVAR 2
59219: PUSH
59220: EMPTY
59221: LIST
59222: LIST
59223: PUSH
59224: LD_INT 21
59226: PUSH
59227: LD_INT 2
59229: PUSH
59230: EMPTY
59231: LIST
59232: LIST
59233: PUSH
59234: EMPTY
59235: LIST
59236: LIST
59237: PPUSH
59238: CALL_OW 69
59242: ST_TO_ADDR
// if not tmp then
59243: LD_VAR 0 1
59247: NOT
59248: IFFALSE 59252
// exit ;
59250: GO 59278
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 60 ) ;
59252: LD_VAR 0 1
59256: PUSH
59257: LD_INT 1
59259: PPUSH
59260: LD_VAR 0 1
59264: PPUSH
59265: CALL_OW 12
59269: ARRAY
59270: PPUSH
59271: LD_INT 60
59273: PPUSH
59274: CALL_OW 234
// end ;
59278: PPOPN 1
59280: END
// every 0 0$1 trigger StreamModeActive and sRemote do var tmp , i ;
59281: LD_EXP 81
59285: PUSH
59286: LD_EXP 111
59290: AND
59291: IFFALSE 59390
59293: GO 59295
59295: DISABLE
59296: LD_INT 0
59298: PPUSH
59299: PPUSH
// begin enable ;
59300: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_linked ] , [ f_control , control_remote ] ] ) ;
59301: LD_ADDR_VAR 0 1
59305: PUSH
59306: LD_INT 22
59308: PUSH
59309: LD_OWVAR 2
59313: PUSH
59314: EMPTY
59315: LIST
59316: LIST
59317: PUSH
59318: LD_INT 61
59320: PUSH
59321: EMPTY
59322: LIST
59323: PUSH
59324: LD_INT 33
59326: PUSH
59327: LD_INT 2
59329: PUSH
59330: EMPTY
59331: LIST
59332: LIST
59333: PUSH
59334: EMPTY
59335: LIST
59336: LIST
59337: LIST
59338: PPUSH
59339: CALL_OW 69
59343: ST_TO_ADDR
// if not tmp then
59344: LD_VAR 0 1
59348: NOT
59349: IFFALSE 59353
// exit ;
59351: GO 59390
// for i in tmp do
59353: LD_ADDR_VAR 0 2
59357: PUSH
59358: LD_VAR 0 1
59362: PUSH
59363: FOR_IN
59364: IFFALSE 59388
// if IsControledBy ( i ) then
59366: LD_VAR 0 2
59370: PPUSH
59371: CALL_OW 312
59375: IFFALSE 59386
// ComUnlink ( i ) ;
59377: LD_VAR 0 2
59381: PPUSH
59382: CALL_OW 136
59386: GO 59363
59388: POP
59389: POP
// end ;
59390: PPOPN 2
59392: END
// every 0 0$1 trigger StreamModeActive and sPowell do var i , un ;
59393: LD_EXP 81
59397: PUSH
59398: LD_EXP 112
59402: AND
59403: IFFALSE 59543
59405: GO 59407
59407: DISABLE
59408: LD_INT 0
59410: PPUSH
59411: PPUSH
// begin ToLua ( displayPowell(); ) ;
59412: LD_STRING displayPowell();
59414: PPUSH
59415: CALL_OW 559
// uc_side := 0 ;
59419: LD_ADDR_OWVAR 20
59423: PUSH
59424: LD_INT 0
59426: ST_TO_ADDR
// uc_nation := 2 ;
59427: LD_ADDR_OWVAR 21
59431: PUSH
59432: LD_INT 2
59434: ST_TO_ADDR
// vc_chassis := ar_half_tracked ;
59435: LD_ADDR_OWVAR 37
59439: PUSH
59440: LD_INT 14
59442: ST_TO_ADDR
// vc_engine := engine_siberite ;
59443: LD_ADDR_OWVAR 39
59447: PUSH
59448: LD_INT 3
59450: ST_TO_ADDR
// vc_control := control_apeman ;
59451: LD_ADDR_OWVAR 38
59455: PUSH
59456: LD_INT 5
59458: ST_TO_ADDR
// vc_weapon := ar_selfpropelled_bomb ;
59459: LD_ADDR_OWVAR 40
59463: PUSH
59464: LD_INT 29
59466: ST_TO_ADDR
// un := CreateVehicle ;
59467: LD_ADDR_VAR 0 2
59471: PUSH
59472: CALL_OW 45
59476: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
59477: LD_VAR 0 2
59481: PPUSH
59482: LD_INT 1
59484: PPUSH
59485: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
59489: LD_INT 35
59491: PPUSH
59492: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
59496: LD_VAR 0 2
59500: PPUSH
59501: LD_INT 22
59503: PUSH
59504: LD_OWVAR 2
59508: PUSH
59509: EMPTY
59510: LIST
59511: LIST
59512: PPUSH
59513: CALL_OW 69
59517: PPUSH
59518: LD_VAR 0 2
59522: PPUSH
59523: CALL_OW 74
59527: PPUSH
59528: CALL_OW 115
// until IsDead ( un ) ;
59532: LD_VAR 0 2
59536: PPUSH
59537: CALL_OW 301
59541: IFFALSE 59489
// end ;
59543: PPOPN 2
59545: END
// every 0 0$1 trigger StreamModeActive and sStu do
59546: LD_EXP 81
59550: PUSH
59551: LD_EXP 120
59555: AND
59556: IFFALSE 59572
59558: GO 59560
59560: DISABLE
// begin ToLua ( displayStucuk(); ) ;
59561: LD_STRING displayStucuk();
59563: PPUSH
59564: CALL_OW 559
// ResetFog ;
59568: CALL_OW 335
// end ;
59572: END
// every 0 0$1 trigger StreamModeActive and sBetray do var un , tmp ;
59573: LD_EXP 81
59577: PUSH
59578: LD_EXP 113
59582: AND
59583: IFFALSE 59724
59585: GO 59587
59587: DISABLE
59588: LD_INT 0
59590: PPUSH
59591: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59592: LD_ADDR_VAR 0 2
59596: PUSH
59597: LD_INT 22
59599: PUSH
59600: LD_OWVAR 2
59604: PUSH
59605: EMPTY
59606: LIST
59607: LIST
59608: PUSH
59609: LD_INT 21
59611: PUSH
59612: LD_INT 1
59614: PUSH
59615: EMPTY
59616: LIST
59617: LIST
59618: PUSH
59619: EMPTY
59620: LIST
59621: LIST
59622: PPUSH
59623: CALL_OW 69
59627: ST_TO_ADDR
// if not tmp then
59628: LD_VAR 0 2
59632: NOT
59633: IFFALSE 59637
// exit ;
59635: GO 59724
// un := tmp [ rand ( 1 , tmp ) ] ;
59637: LD_ADDR_VAR 0 1
59641: PUSH
59642: LD_VAR 0 2
59646: PUSH
59647: LD_INT 1
59649: PPUSH
59650: LD_VAR 0 2
59654: PPUSH
59655: CALL_OW 12
59659: ARRAY
59660: ST_TO_ADDR
// SetSide ( un , 0 ) ;
59661: LD_VAR 0 1
59665: PPUSH
59666: LD_INT 0
59668: PPUSH
59669: CALL_OW 235
// ComAttackUnit ( un , NearestUnitToUnit ( all_units diff un , un ) ) ;
59673: LD_VAR 0 1
59677: PPUSH
59678: LD_OWVAR 3
59682: PUSH
59683: LD_VAR 0 1
59687: DIFF
59688: PPUSH
59689: LD_VAR 0 1
59693: PPUSH
59694: CALL_OW 74
59698: PPUSH
59699: CALL_OW 115
// wait ( 0 0$20 ) ;
59703: LD_INT 700
59705: PPUSH
59706: CALL_OW 67
// SetSide ( un , your_side ) ;
59710: LD_VAR 0 1
59714: PPUSH
59715: LD_OWVAR 2
59719: PPUSH
59720: CALL_OW 235
// end ;
59724: PPOPN 2
59726: END
// every 0 0$1 trigger StreamModeActive and sContamin do var depot ;
59727: LD_EXP 81
59731: PUSH
59732: LD_EXP 114
59736: AND
59737: IFFALSE 59843
59739: GO 59741
59741: DISABLE
59742: LD_INT 0
59744: PPUSH
// begin depot := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
59745: LD_ADDR_VAR 0 1
59749: PUSH
59750: LD_INT 22
59752: PUSH
59753: LD_OWVAR 2
59757: PUSH
59758: EMPTY
59759: LIST
59760: LIST
59761: PUSH
59762: LD_INT 2
59764: PUSH
59765: LD_INT 30
59767: PUSH
59768: LD_INT 0
59770: PUSH
59771: EMPTY
59772: LIST
59773: LIST
59774: PUSH
59775: LD_INT 30
59777: PUSH
59778: LD_INT 1
59780: PUSH
59781: EMPTY
59782: LIST
59783: LIST
59784: PUSH
59785: EMPTY
59786: LIST
59787: LIST
59788: LIST
59789: PUSH
59790: EMPTY
59791: LIST
59792: LIST
59793: PPUSH
59794: CALL_OW 69
59798: ST_TO_ADDR
// if not depot then
59799: LD_VAR 0 1
59803: NOT
59804: IFFALSE 59808
// exit ;
59806: GO 59843
// ArtContamination ( GetX ( depot [ 1 ] ) , GetY ( depot [ 1 ] ) , 70 ) ;
59808: LD_VAR 0 1
59812: PUSH
59813: LD_INT 1
59815: ARRAY
59816: PPUSH
59817: CALL_OW 250
59821: PPUSH
59822: LD_VAR 0 1
59826: PUSH
59827: LD_INT 1
59829: ARRAY
59830: PPUSH
59831: CALL_OW 251
59835: PPUSH
59836: LD_INT 70
59838: PPUSH
59839: CALL_OW 495
// end ;
59843: PPOPN 1
59845: END
// every 0 0$1 trigger StreamModeActive and sTeleport do var i , x , y , d , tmp ;
59846: LD_EXP 81
59850: PUSH
59851: LD_EXP 115
59855: AND
59856: IFFALSE 60067
59858: GO 59860
59860: DISABLE
59861: LD_INT 0
59863: PPUSH
59864: PPUSH
59865: PPUSH
59866: PPUSH
59867: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) ;
59868: LD_ADDR_VAR 0 5
59872: PUSH
59873: LD_INT 22
59875: PUSH
59876: LD_OWVAR 2
59880: PUSH
59881: EMPTY
59882: LIST
59883: LIST
59884: PUSH
59885: LD_INT 21
59887: PUSH
59888: LD_INT 1
59890: PUSH
59891: EMPTY
59892: LIST
59893: LIST
59894: PUSH
59895: EMPTY
59896: LIST
59897: LIST
59898: PPUSH
59899: CALL_OW 69
59903: ST_TO_ADDR
// if not tmp then
59904: LD_VAR 0 5
59908: NOT
59909: IFFALSE 59913
// exit ;
59911: GO 60067
// for i in tmp do
59913: LD_ADDR_VAR 0 1
59917: PUSH
59918: LD_VAR 0 5
59922: PUSH
59923: FOR_IN
59924: IFFALSE 60065
// begin d := rand ( 0 , 5 ) ;
59926: LD_ADDR_VAR 0 4
59930: PUSH
59931: LD_INT 0
59933: PPUSH
59934: LD_INT 5
59936: PPUSH
59937: CALL_OW 12
59941: ST_TO_ADDR
// x := ShiftX ( GetX ( i ) , d , rand ( 3 , 12 ) ) ;
59942: LD_ADDR_VAR 0 2
59946: PUSH
59947: LD_VAR 0 1
59951: PPUSH
59952: CALL_OW 250
59956: PPUSH
59957: LD_VAR 0 4
59961: PPUSH
59962: LD_INT 3
59964: PPUSH
59965: LD_INT 12
59967: PPUSH
59968: CALL_OW 12
59972: PPUSH
59973: CALL_OW 272
59977: ST_TO_ADDR
// y := ShiftY ( GetY ( i ) , d , rand ( 3 , 12 ) ) ;
59978: LD_ADDR_VAR 0 3
59982: PUSH
59983: LD_VAR 0 1
59987: PPUSH
59988: CALL_OW 251
59992: PPUSH
59993: LD_VAR 0 4
59997: PPUSH
59998: LD_INT 3
60000: PPUSH
60001: LD_INT 12
60003: PPUSH
60004: CALL_OW 12
60008: PPUSH
60009: CALL_OW 273
60013: ST_TO_ADDR
// if ValidHex ( x , y ) then
60014: LD_VAR 0 2
60018: PPUSH
60019: LD_VAR 0 3
60023: PPUSH
60024: CALL_OW 488
60028: IFFALSE 60063
// TeleportUnit ( i , x , y , rand ( 3 , 6 ) , true ) ;
60030: LD_VAR 0 1
60034: PPUSH
60035: LD_VAR 0 2
60039: PPUSH
60040: LD_VAR 0 3
60044: PPUSH
60045: LD_INT 3
60047: PPUSH
60048: LD_INT 6
60050: PPUSH
60051: CALL_OW 12
60055: PPUSH
60056: LD_INT 1
60058: PPUSH
60059: CALL_OW 483
// end ;
60063: GO 59923
60065: POP
60066: POP
// end ;
60067: PPOPN 5
60069: END
// every 0 0$1 trigger StreamModeActive and sOil do var i , tmp ;
60070: LD_EXP 81
60074: PUSH
60075: LD_EXP 116
60079: AND
60080: IFFALSE 60174
60082: GO 60084
60084: DISABLE
60085: LD_INT 0
60087: PPUSH
60088: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_engine , engine_combustion ] , [ f_type , unit_vehicle ] ] ) ;
60089: LD_ADDR_VAR 0 2
60093: PUSH
60094: LD_INT 22
60096: PUSH
60097: LD_OWVAR 2
60101: PUSH
60102: EMPTY
60103: LIST
60104: LIST
60105: PUSH
60106: LD_INT 32
60108: PUSH
60109: LD_INT 1
60111: PUSH
60112: EMPTY
60113: LIST
60114: LIST
60115: PUSH
60116: LD_INT 21
60118: PUSH
60119: LD_INT 2
60121: PUSH
60122: EMPTY
60123: LIST
60124: LIST
60125: PUSH
60126: EMPTY
60127: LIST
60128: LIST
60129: LIST
60130: PPUSH
60131: CALL_OW 69
60135: ST_TO_ADDR
// if not tmp then
60136: LD_VAR 0 2
60140: NOT
60141: IFFALSE 60145
// exit ;
60143: GO 60174
// for i in tmp do
60145: LD_ADDR_VAR 0 1
60149: PUSH
60150: LD_VAR 0 2
60154: PUSH
60155: FOR_IN
60156: IFFALSE 60172
// SetFuel ( i , 0 ) ;
60158: LD_VAR 0 1
60162: PPUSH
60163: LD_INT 0
60165: PPUSH
60166: CALL_OW 240
60170: GO 60155
60172: POP
60173: POP
// end ;
60174: PPOPN 2
60176: END
// every 0 0$1 trigger StreamModeActive and sOilTower do var tmp ;
60177: LD_EXP 81
60181: PUSH
60182: LD_EXP 117
60186: AND
60187: IFFALSE 60253
60189: GO 60191
60191: DISABLE
60192: LD_INT 0
60194: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
60195: LD_ADDR_VAR 0 1
60199: PUSH
60200: LD_INT 22
60202: PUSH
60203: LD_OWVAR 2
60207: PUSH
60208: EMPTY
60209: LIST
60210: LIST
60211: PUSH
60212: LD_INT 30
60214: PUSH
60215: LD_INT 29
60217: PUSH
60218: EMPTY
60219: LIST
60220: LIST
60221: PUSH
60222: EMPTY
60223: LIST
60224: LIST
60225: PPUSH
60226: CALL_OW 69
60230: ST_TO_ADDR
// if not tmp then
60231: LD_VAR 0 1
60235: NOT
60236: IFFALSE 60240
// exit ;
60238: GO 60253
// DestroyUnit ( tmp [ 1 ] ) ;
60240: LD_VAR 0 1
60244: PUSH
60245: LD_INT 1
60247: ARRAY
60248: PPUSH
60249: CALL_OW 65
// end ;
60253: PPOPN 1
60255: END
// every 0 0$1 trigger StreamModeActive and sSheik do var un ;
60256: LD_EXP 81
60260: PUSH
60261: LD_EXP 119
60265: AND
60266: IFFALSE 60395
60268: GO 60270
60270: DISABLE
60271: LD_INT 0
60273: PPUSH
// begin uc_side := 0 ;
60274: LD_ADDR_OWVAR 20
60278: PUSH
60279: LD_INT 0
60281: ST_TO_ADDR
// uc_nation := nation_arabian ;
60282: LD_ADDR_OWVAR 21
60286: PUSH
60287: LD_INT 2
60289: ST_TO_ADDR
// hc_gallery :=  ;
60290: LD_ADDR_OWVAR 33
60294: PUSH
60295: LD_STRING 
60297: ST_TO_ADDR
// hc_name :=  ;
60298: LD_ADDR_OWVAR 26
60302: PUSH
60303: LD_STRING 
60305: ST_TO_ADDR
// PrepareHuman ( sex_male , class_desert_warior , 10 ) ;
60306: LD_INT 1
60308: PPUSH
60309: LD_INT 11
60311: PPUSH
60312: LD_INT 10
60314: PPUSH
60315: CALL_OW 380
// un := CreateHuman ;
60319: LD_ADDR_VAR 0 1
60323: PUSH
60324: CALL_OW 44
60328: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
60329: LD_VAR 0 1
60333: PPUSH
60334: LD_INT 1
60336: PPUSH
60337: CALL_OW 51
// repeat wait ( 0 0$1 ) ;
60341: LD_INT 35
60343: PPUSH
60344: CALL_OW 67
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ f_side , your_side ] ) , un ) ) ;
60348: LD_VAR 0 1
60352: PPUSH
60353: LD_INT 22
60355: PUSH
60356: LD_OWVAR 2
60360: PUSH
60361: EMPTY
60362: LIST
60363: LIST
60364: PPUSH
60365: CALL_OW 69
60369: PPUSH
60370: LD_VAR 0 1
60374: PPUSH
60375: CALL_OW 74
60379: PPUSH
60380: CALL_OW 115
// until IsDead ( un ) ;
60384: LD_VAR 0 1
60388: PPUSH
60389: CALL_OW 301
60393: IFFALSE 60341
// end ;
60395: PPOPN 1
60397: END
// every 0 0$1 trigger StreamModeActive and sEarthquake do
60398: LD_EXP 81
60402: PUSH
60403: LD_EXP 121
60407: AND
60408: IFFALSE 60420
60410: GO 60412
60412: DISABLE
// ToLua ( earthquake(getX(game), 0, 32) ) ;
60413: LD_STRING earthquake(getX(game), 0, 32)
60415: PPUSH
60416: CALL_OW 559
60420: END
// every 0 0$1 trigger StreamModeActive and sAI do var tmp ;
60421: LD_EXP 81
60425: PUSH
60426: LD_EXP 122
60430: AND
60431: IFFALSE 60522
60433: GO 60435
60435: DISABLE
60436: LD_INT 0
60438: PPUSH
// begin enable ;
60439: ENABLE
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_control , control_computer ] ] ) ;
60440: LD_ADDR_VAR 0 1
60444: PUSH
60445: LD_INT 22
60447: PUSH
60448: LD_OWVAR 2
60452: PUSH
60453: EMPTY
60454: LIST
60455: LIST
60456: PUSH
60457: LD_INT 21
60459: PUSH
60460: LD_INT 2
60462: PUSH
60463: EMPTY
60464: LIST
60465: LIST
60466: PUSH
60467: LD_INT 33
60469: PUSH
60470: LD_INT 3
60472: PUSH
60473: EMPTY
60474: LIST
60475: LIST
60476: PUSH
60477: EMPTY
60478: LIST
60479: LIST
60480: LIST
60481: PPUSH
60482: CALL_OW 69
60486: ST_TO_ADDR
// if not tmp then
60487: LD_VAR 0 1
60491: NOT
60492: IFFALSE 60496
// exit ;
60494: GO 60522
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
60496: LD_VAR 0 1
60500: PUSH
60501: LD_INT 1
60503: PPUSH
60504: LD_VAR 0 1
60508: PPUSH
60509: CALL_OW 12
60513: ARRAY
60514: PPUSH
60515: LD_INT 1
60517: PPUSH
60518: CALL_OW 234
// end ;
60522: PPOPN 1
60524: END
// every 0 0$1 trigger StreamModeActive and sBazooka do var i , un , tmp ;
60525: LD_EXP 81
60529: PUSH
60530: LD_EXP 123
60534: AND
60535: IFFALSE 60676
60537: GO 60539
60539: DISABLE
60540: LD_INT 0
60542: PPUSH
60543: PPUSH
60544: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60545: LD_ADDR_VAR 0 3
60549: PUSH
60550: LD_INT 22
60552: PUSH
60553: LD_OWVAR 2
60557: PUSH
60558: EMPTY
60559: LIST
60560: LIST
60561: PUSH
60562: LD_INT 25
60564: PUSH
60565: LD_INT 1
60567: PUSH
60568: EMPTY
60569: LIST
60570: LIST
60571: PUSH
60572: EMPTY
60573: LIST
60574: LIST
60575: PPUSH
60576: CALL_OW 69
60580: ST_TO_ADDR
// if not tmp then
60581: LD_VAR 0 3
60585: NOT
60586: IFFALSE 60590
// exit ;
60588: GO 60676
// un := tmp [ rand ( 1 , tmp ) ] ;
60590: LD_ADDR_VAR 0 2
60594: PUSH
60595: LD_VAR 0 3
60599: PUSH
60600: LD_INT 1
60602: PPUSH
60603: LD_VAR 0 3
60607: PPUSH
60608: CALL_OW 12
60612: ARRAY
60613: ST_TO_ADDR
// if Crawls ( un ) then
60614: LD_VAR 0 2
60618: PPUSH
60619: CALL_OW 318
60623: IFFALSE 60634
// ComWalk ( un ) ;
60625: LD_VAR 0 2
60629: PPUSH
60630: CALL_OW 138
// SetClass ( un , class_bazooker ) ;
60634: LD_VAR 0 2
60638: PPUSH
60639: LD_INT 9
60641: PPUSH
60642: CALL_OW 336
// SetTech ( tech_tauRad , your_side , state_researched ) ;
60646: LD_INT 28
60648: PPUSH
60649: LD_OWVAR 2
60653: PPUSH
60654: LD_INT 2
60656: PPUSH
60657: CALL_OW 322
// SetTech ( tech_spacAnom , your_side , state_researched ) ;
60661: LD_INT 29
60663: PPUSH
60664: LD_OWVAR 2
60668: PPUSH
60669: LD_INT 2
60671: PPUSH
60672: CALL_OW 322
// end ;
60676: PPOPN 3
60678: END
// every 0 0$1 trigger StreamModeActive and sMortar do var i , un , tmp ;
60679: LD_EXP 81
60683: PUSH
60684: LD_EXP 124
60688: AND
60689: IFFALSE 60800
60691: GO 60693
60693: DISABLE
60694: LD_INT 0
60696: PPUSH
60697: PPUSH
60698: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
60699: LD_ADDR_VAR 0 3
60703: PUSH
60704: LD_INT 22
60706: PUSH
60707: LD_OWVAR 2
60711: PUSH
60712: EMPTY
60713: LIST
60714: LIST
60715: PUSH
60716: LD_INT 25
60718: PUSH
60719: LD_INT 1
60721: PUSH
60722: EMPTY
60723: LIST
60724: LIST
60725: PUSH
60726: EMPTY
60727: LIST
60728: LIST
60729: PPUSH
60730: CALL_OW 69
60734: ST_TO_ADDR
// if not tmp then
60735: LD_VAR 0 3
60739: NOT
60740: IFFALSE 60744
// exit ;
60742: GO 60800
// un := tmp [ rand ( 1 , tmp ) ] ;
60744: LD_ADDR_VAR 0 2
60748: PUSH
60749: LD_VAR 0 3
60753: PUSH
60754: LD_INT 1
60756: PPUSH
60757: LD_VAR 0 3
60761: PPUSH
60762: CALL_OW 12
60766: ARRAY
60767: ST_TO_ADDR
// if Crawls ( un ) then
60768: LD_VAR 0 2
60772: PPUSH
60773: CALL_OW 318
60777: IFFALSE 60788
// ComWalk ( un ) ;
60779: LD_VAR 0 2
60783: PPUSH
60784: CALL_OW 138
// SetClass ( un , class_mortar ) ;
60788: LD_VAR 0 2
60792: PPUSH
60793: LD_INT 8
60795: PPUSH
60796: CALL_OW 336
// end ;
60800: PPOPN 3
60802: END
// every 0 0$1 trigger StreamModeActive and sCargo do var i , tmp ;
60803: LD_EXP 81
60807: PUSH
60808: LD_EXP 125
60812: AND
60813: IFFALSE 60957
60815: GO 60817
60817: DISABLE
60818: LD_INT 0
60820: PPUSH
60821: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] ] ] ) ;
60822: LD_ADDR_VAR 0 2
60826: PUSH
60827: LD_INT 22
60829: PUSH
60830: LD_OWVAR 2
60834: PUSH
60835: EMPTY
60836: LIST
60837: LIST
60838: PUSH
60839: LD_INT 21
60841: PUSH
60842: LD_INT 2
60844: PUSH
60845: EMPTY
60846: LIST
60847: LIST
60848: PUSH
60849: LD_INT 2
60851: PUSH
60852: LD_INT 34
60854: PUSH
60855: LD_INT 12
60857: PUSH
60858: EMPTY
60859: LIST
60860: LIST
60861: PUSH
60862: LD_INT 34
60864: PUSH
60865: LD_INT 51
60867: PUSH
60868: EMPTY
60869: LIST
60870: LIST
60871: PUSH
60872: LD_INT 34
60874: PUSH
60875: LD_INT 32
60877: PUSH
60878: EMPTY
60879: LIST
60880: LIST
60881: PUSH
60882: EMPTY
60883: LIST
60884: LIST
60885: LIST
60886: LIST
60887: PUSH
60888: EMPTY
60889: LIST
60890: LIST
60891: LIST
60892: PPUSH
60893: CALL_OW 69
60897: ST_TO_ADDR
// if not tmp then
60898: LD_VAR 0 2
60902: NOT
60903: IFFALSE 60907
// exit ;
60905: GO 60957
// for i in tmp do
60907: LD_ADDR_VAR 0 1
60911: PUSH
60912: LD_VAR 0 2
60916: PUSH
60917: FOR_IN
60918: IFFALSE 60955
// if GetCargo ( i , mat_artifact ) = 0 then
60920: LD_VAR 0 1
60924: PPUSH
60925: LD_INT 4
60927: PPUSH
60928: CALL_OW 289
60932: PUSH
60933: LD_INT 0
60935: EQUAL
60936: IFFALSE 60953
// SetCargo ( i , mat_siberit , 100 ) ;
60938: LD_VAR 0 1
60942: PPUSH
60943: LD_INT 3
60945: PPUSH
60946: LD_INT 100
60948: PPUSH
60949: CALL_OW 290
60953: GO 60917
60955: POP
60956: POP
// end ;
60957: PPOPN 2
60959: END
// every 0 0$1 trigger StreamModeActive and sDLaser do var i , tmp ;
60960: LD_EXP 81
60964: PUSH
60965: LD_EXP 126
60969: AND
60970: IFFALSE 61153
60972: GO 60974
60974: DISABLE
60975: LD_INT 0
60977: PPUSH
60978: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
60979: LD_ADDR_VAR 0 2
60983: PUSH
60984: LD_INT 22
60986: PUSH
60987: LD_OWVAR 2
60991: PUSH
60992: EMPTY
60993: LIST
60994: LIST
60995: PPUSH
60996: CALL_OW 69
61000: ST_TO_ADDR
// if not tmp then
61001: LD_VAR 0 2
61005: NOT
61006: IFFALSE 61010
// exit ;
61008: GO 61153
// for i := 1 to 2 do
61010: LD_ADDR_VAR 0 1
61014: PUSH
61015: DOUBLE
61016: LD_INT 1
61018: DEC
61019: ST_TO_ADDR
61020: LD_INT 2
61022: PUSH
61023: FOR_TO
61024: IFFALSE 61151
// begin uc_side := your_side ;
61026: LD_ADDR_OWVAR 20
61030: PUSH
61031: LD_OWVAR 2
61035: ST_TO_ADDR
// uc_nation := nation_american ;
61036: LD_ADDR_OWVAR 21
61040: PUSH
61041: LD_INT 1
61043: ST_TO_ADDR
// vc_chassis := us_morphling ;
61044: LD_ADDR_OWVAR 37
61048: PUSH
61049: LD_INT 5
61051: ST_TO_ADDR
// vc_engine := engine_siberite ;
61052: LD_ADDR_OWVAR 39
61056: PUSH
61057: LD_INT 3
61059: ST_TO_ADDR
// vc_control := control_computer ;
61060: LD_ADDR_OWVAR 38
61064: PUSH
61065: LD_INT 3
61067: ST_TO_ADDR
// vc_weapon := us_double_laser ;
61068: LD_ADDR_OWVAR 40
61072: PUSH
61073: LD_INT 10
61075: ST_TO_ADDR
// if not IsInUnit ( tmp [ 1 ] ) then
61076: LD_VAR 0 2
61080: PUSH
61081: LD_INT 1
61083: ARRAY
61084: PPUSH
61085: CALL_OW 310
61089: NOT
61090: IFFALSE 61137
// PlaceUnitXYR ( CreateVehicle , GetX ( tmp [ 1 ] ) , GetY ( tmp [ 1 ] ) , 12 , true ) else
61092: CALL_OW 45
61096: PPUSH
61097: LD_VAR 0 2
61101: PUSH
61102: LD_INT 1
61104: ARRAY
61105: PPUSH
61106: CALL_OW 250
61110: PPUSH
61111: LD_VAR 0 2
61115: PUSH
61116: LD_INT 1
61118: ARRAY
61119: PPUSH
61120: CALL_OW 251
61124: PPUSH
61125: LD_INT 12
61127: PPUSH
61128: LD_INT 1
61130: PPUSH
61131: CALL_OW 50
61135: GO 61149
// PlaceUnitAnywhere ( CreateVehicle , true ) ;
61137: CALL_OW 45
61141: PPUSH
61142: LD_INT 1
61144: PPUSH
61145: CALL_OW 51
// end ;
61149: GO 61023
61151: POP
61152: POP
// end ;
61153: PPOPN 2
61155: END
// every 0 0$1 trigger StreamModeActive and sExchange do var i , s1 , s2 , sk1 , sk2 , tmp ;
61156: LD_EXP 81
61160: PUSH
61161: LD_EXP 127
61165: AND
61166: IFFALSE 61388
61168: GO 61170
61170: DISABLE
61171: LD_INT 0
61173: PPUSH
61174: PPUSH
61175: PPUSH
61176: PPUSH
61177: PPUSH
61178: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
61179: LD_ADDR_VAR 0 6
61183: PUSH
61184: LD_INT 22
61186: PUSH
61187: LD_OWVAR 2
61191: PUSH
61192: EMPTY
61193: LIST
61194: LIST
61195: PUSH
61196: LD_INT 21
61198: PUSH
61199: LD_INT 1
61201: PUSH
61202: EMPTY
61203: LIST
61204: LIST
61205: PUSH
61206: LD_INT 3
61208: PUSH
61209: LD_INT 23
61211: PUSH
61212: LD_INT 0
61214: PUSH
61215: EMPTY
61216: LIST
61217: LIST
61218: PUSH
61219: EMPTY
61220: LIST
61221: LIST
61222: PUSH
61223: EMPTY
61224: LIST
61225: LIST
61226: LIST
61227: PPUSH
61228: CALL_OW 69
61232: ST_TO_ADDR
// if not tmp then
61233: LD_VAR 0 6
61237: NOT
61238: IFFALSE 61242
// exit ;
61240: GO 61388
// s1 := rand ( 1 , 4 ) ;
61242: LD_ADDR_VAR 0 2
61246: PUSH
61247: LD_INT 1
61249: PPUSH
61250: LD_INT 4
61252: PPUSH
61253: CALL_OW 12
61257: ST_TO_ADDR
// sk1 := GetSkill ( tmp [ 1 ] , s1 ) ;
61258: LD_ADDR_VAR 0 4
61262: PUSH
61263: LD_VAR 0 6
61267: PUSH
61268: LD_INT 1
61270: ARRAY
61271: PPUSH
61272: LD_VAR 0 2
61276: PPUSH
61277: CALL_OW 259
61281: ST_TO_ADDR
// if s1 = 1 then
61282: LD_VAR 0 2
61286: PUSH
61287: LD_INT 1
61289: EQUAL
61290: IFFALSE 61310
// s2 := rand ( 2 , 4 ) else
61292: LD_ADDR_VAR 0 3
61296: PUSH
61297: LD_INT 2
61299: PPUSH
61300: LD_INT 4
61302: PPUSH
61303: CALL_OW 12
61307: ST_TO_ADDR
61308: GO 61318
// s2 := 1 ;
61310: LD_ADDR_VAR 0 3
61314: PUSH
61315: LD_INT 1
61317: ST_TO_ADDR
// sk2 := GetSkill ( tmp [ 1 ] , s2 ) ;
61318: LD_ADDR_VAR 0 5
61322: PUSH
61323: LD_VAR 0 6
61327: PUSH
61328: LD_INT 1
61330: ARRAY
61331: PPUSH
61332: LD_VAR 0 3
61336: PPUSH
61337: CALL_OW 259
61341: ST_TO_ADDR
// SetSkill ( tmp [ 1 ] , s1 , sk2 ) ;
61342: LD_VAR 0 6
61346: PUSH
61347: LD_INT 1
61349: ARRAY
61350: PPUSH
61351: LD_VAR 0 2
61355: PPUSH
61356: LD_VAR 0 5
61360: PPUSH
61361: CALL_OW 237
// SetSkill ( tmp [ 1 ] , s2 , sk1 ) ;
61365: LD_VAR 0 6
61369: PUSH
61370: LD_INT 1
61372: ARRAY
61373: PPUSH
61374: LD_VAR 0 3
61378: PPUSH
61379: LD_VAR 0 4
61383: PPUSH
61384: CALL_OW 237
// end ;
61388: PPOPN 6
61390: END
// every 0 0$1 trigger StreamModeActive and sFac do var tmp ;
61391: LD_EXP 81
61395: PUSH
61396: LD_EXP 128
61400: AND
61401: IFFALSE 61480
61403: GO 61405
61405: DISABLE
61406: LD_INT 0
61408: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_factory ] ] ) ;
61409: LD_ADDR_VAR 0 1
61413: PUSH
61414: LD_INT 22
61416: PUSH
61417: LD_OWVAR 2
61421: PUSH
61422: EMPTY
61423: LIST
61424: LIST
61425: PUSH
61426: LD_INT 30
61428: PUSH
61429: LD_INT 3
61431: PUSH
61432: EMPTY
61433: LIST
61434: LIST
61435: PUSH
61436: EMPTY
61437: LIST
61438: LIST
61439: PPUSH
61440: CALL_OW 69
61444: ST_TO_ADDR
// if not tmp then
61445: LD_VAR 0 1
61449: NOT
61450: IFFALSE 61454
// exit ;
61452: GO 61480
// SetLives ( tmp [ rand ( 1 , tmp ) ] , 1 ) ;
61454: LD_VAR 0 1
61458: PUSH
61459: LD_INT 1
61461: PPUSH
61462: LD_VAR 0 1
61466: PPUSH
61467: CALL_OW 12
61471: ARRAY
61472: PPUSH
61473: LD_INT 1
61475: PPUSH
61476: CALL_OW 234
// end ;
61480: PPOPN 1
61482: END
// every 0 0$1 trigger StreamModeActive and sPower do var i , tmp ;
61483: LD_EXP 81
61487: PUSH
61488: LD_EXP 129
61492: AND
61493: IFFALSE 61605
61495: GO 61497
61497: DISABLE
61498: LD_INT 0
61500: PPUSH
61501: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_solar_power ] , [ f_btype , b_oil_power ] , [ f_btype , b_siberite_power ] ] ] ) ;
61502: LD_ADDR_VAR 0 2
61506: PUSH
61507: LD_INT 22
61509: PUSH
61510: LD_OWVAR 2
61514: PUSH
61515: EMPTY
61516: LIST
61517: LIST
61518: PUSH
61519: LD_INT 2
61521: PUSH
61522: LD_INT 30
61524: PUSH
61525: LD_INT 27
61527: PUSH
61528: EMPTY
61529: LIST
61530: LIST
61531: PUSH
61532: LD_INT 30
61534: PUSH
61535: LD_INT 26
61537: PUSH
61538: EMPTY
61539: LIST
61540: LIST
61541: PUSH
61542: LD_INT 30
61544: PUSH
61545: LD_INT 28
61547: PUSH
61548: EMPTY
61549: LIST
61550: LIST
61551: PUSH
61552: EMPTY
61553: LIST
61554: LIST
61555: LIST
61556: LIST
61557: PUSH
61558: EMPTY
61559: LIST
61560: LIST
61561: PPUSH
61562: CALL_OW 69
61566: ST_TO_ADDR
// if not tmp then
61567: LD_VAR 0 2
61571: NOT
61572: IFFALSE 61576
// exit ;
61574: GO 61605
// for i in tmp do
61576: LD_ADDR_VAR 0 1
61580: PUSH
61581: LD_VAR 0 2
61585: PUSH
61586: FOR_IN
61587: IFFALSE 61603
// SetLives ( i , 1 ) ;
61589: LD_VAR 0 1
61593: PPUSH
61594: LD_INT 1
61596: PPUSH
61597: CALL_OW 234
61601: GO 61586
61603: POP
61604: POP
// end ;
61605: PPOPN 2
61607: END
// every 0 0$1 trigger StreamModeActive and sRandom do var i , tmp , un ;
61608: LD_EXP 81
61612: PUSH
61613: LD_EXP 130
61617: AND
61618: IFFALSE 61905
61620: GO 61622
61622: DISABLE
61623: LD_INT 0
61625: PPUSH
61626: PPUSH
61627: PPUSH
// begin i := rand ( 1 , 7 ) ;
61628: LD_ADDR_VAR 0 1
61632: PUSH
61633: LD_INT 1
61635: PPUSH
61636: LD_INT 7
61638: PPUSH
61639: CALL_OW 12
61643: ST_TO_ADDR
// case i of 1 :
61644: LD_VAR 0 1
61648: PUSH
61649: LD_INT 1
61651: DOUBLE
61652: EQUAL
61653: IFTRUE 61657
61655: GO 61667
61657: POP
// ToLua ( earthquake(getX(game), 0, 32) ) ; 2 :
61658: LD_STRING earthquake(getX(game), 0, 32)
61660: PPUSH
61661: CALL_OW 559
61665: GO 61905
61667: LD_INT 2
61669: DOUBLE
61670: EQUAL
61671: IFTRUE 61675
61673: GO 61689
61675: POP
// begin ToLua ( displayStucuk(); ) ;
61676: LD_STRING displayStucuk();
61678: PPUSH
61679: CALL_OW 559
// ResetFog ;
61683: CALL_OW 335
// end ; 3 :
61687: GO 61905
61689: LD_INT 3
61691: DOUBLE
61692: EQUAL
61693: IFTRUE 61697
61695: GO 61801
61697: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_class , 1 ] ] ) ;
61698: LD_ADDR_VAR 0 2
61702: PUSH
61703: LD_INT 22
61705: PUSH
61706: LD_OWVAR 2
61710: PUSH
61711: EMPTY
61712: LIST
61713: LIST
61714: PUSH
61715: LD_INT 25
61717: PUSH
61718: LD_INT 1
61720: PUSH
61721: EMPTY
61722: LIST
61723: LIST
61724: PUSH
61725: EMPTY
61726: LIST
61727: LIST
61728: PPUSH
61729: CALL_OW 69
61733: ST_TO_ADDR
// if not tmp then
61734: LD_VAR 0 2
61738: NOT
61739: IFFALSE 61743
// exit ;
61741: GO 61905
// un := tmp [ rand ( 1 , tmp ) ] ;
61743: LD_ADDR_VAR 0 3
61747: PUSH
61748: LD_VAR 0 2
61752: PUSH
61753: LD_INT 1
61755: PPUSH
61756: LD_VAR 0 2
61760: PPUSH
61761: CALL_OW 12
61765: ARRAY
61766: ST_TO_ADDR
// if Crawls ( un ) then
61767: LD_VAR 0 3
61771: PPUSH
61772: CALL_OW 318
61776: IFFALSE 61787
// ComWalk ( un ) ;
61778: LD_VAR 0 3
61782: PPUSH
61783: CALL_OW 138
// SetClass ( un , class_mortar ) ;
61787: LD_VAR 0 3
61791: PPUSH
61792: LD_INT 8
61794: PPUSH
61795: CALL_OW 336
// end ; 4 :
61799: GO 61905
61801: LD_INT 4
61803: DOUBLE
61804: EQUAL
61805: IFTRUE 61809
61807: GO 61883
61809: POP
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_btype , b_oil_mine ] ] ) ;
61810: LD_ADDR_VAR 0 2
61814: PUSH
61815: LD_INT 22
61817: PUSH
61818: LD_OWVAR 2
61822: PUSH
61823: EMPTY
61824: LIST
61825: LIST
61826: PUSH
61827: LD_INT 30
61829: PUSH
61830: LD_INT 29
61832: PUSH
61833: EMPTY
61834: LIST
61835: LIST
61836: PUSH
61837: EMPTY
61838: LIST
61839: LIST
61840: PPUSH
61841: CALL_OW 69
61845: ST_TO_ADDR
// if not tmp then
61846: LD_VAR 0 2
61850: NOT
61851: IFFALSE 61855
// exit ;
61853: GO 61905
// CenterNowOnUnits ( tmp [ 1 ] ) ;
61855: LD_VAR 0 2
61859: PUSH
61860: LD_INT 1
61862: ARRAY
61863: PPUSH
61864: CALL_OW 87
// DestroyUnit ( tmp [ 1 ] ) ;
61868: LD_VAR 0 2
61872: PUSH
61873: LD_INT 1
61875: ARRAY
61876: PPUSH
61877: CALL_OW 65
// end ; 5 .. 7 :
61881: GO 61905
61883: LD_INT 5
61885: DOUBLE
61886: GREATEREQUAL
61887: IFFALSE 61895
61889: LD_INT 7
61891: DOUBLE
61892: LESSEQUAL
61893: IFTRUE 61897
61895: GO 61904
61897: POP
// StreamSibBomb ; end ;
61898: CALL 58142 0 0
61902: GO 61905
61904: POP
// end ;
61905: PPOPN 3
61907: END
// every 0 0$1 trigger StreamModeActive and sShield do var i , tmp , p ;
61908: LD_EXP 81
61912: PUSH
61913: LD_EXP 131
61917: AND
61918: IFFALSE 62074
61920: GO 61922
61922: DISABLE
61923: LD_INT 0
61925: PPUSH
61926: PPUSH
61927: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) ;
61928: LD_ADDR_VAR 0 2
61932: PUSH
61933: LD_INT 81
61935: PUSH
61936: LD_OWVAR 2
61940: PUSH
61941: EMPTY
61942: LIST
61943: LIST
61944: PUSH
61945: LD_INT 2
61947: PUSH
61948: LD_INT 21
61950: PUSH
61951: LD_INT 1
61953: PUSH
61954: EMPTY
61955: LIST
61956: LIST
61957: PUSH
61958: LD_INT 21
61960: PUSH
61961: LD_INT 2
61963: PUSH
61964: EMPTY
61965: LIST
61966: LIST
61967: PUSH
61968: EMPTY
61969: LIST
61970: LIST
61971: LIST
61972: PUSH
61973: EMPTY
61974: LIST
61975: LIST
61976: PPUSH
61977: CALL_OW 69
61981: ST_TO_ADDR
// if not tmp then
61982: LD_VAR 0 2
61986: NOT
61987: IFFALSE 61991
// exit ;
61989: GO 62074
// p := 0 ;
61991: LD_ADDR_VAR 0 3
61995: PUSH
61996: LD_INT 0
61998: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
61999: LD_INT 35
62001: PPUSH
62002: CALL_OW 67
// p := p + 1 ;
62006: LD_ADDR_VAR 0 3
62010: PUSH
62011: LD_VAR 0 3
62015: PUSH
62016: LD_INT 1
62018: PLUS
62019: ST_TO_ADDR
// for i in tmp do
62020: LD_ADDR_VAR 0 1
62024: PUSH
62025: LD_VAR 0 2
62029: PUSH
62030: FOR_IN
62031: IFFALSE 62062
// if GetLives ( i ) < 1000 then
62033: LD_VAR 0 1
62037: PPUSH
62038: CALL_OW 256
62042: PUSH
62043: LD_INT 1000
62045: LESS
62046: IFFALSE 62060
// SetLives ( i , 1000 ) ;
62048: LD_VAR 0 1
62052: PPUSH
62053: LD_INT 1000
62055: PPUSH
62056: CALL_OW 234
62060: GO 62030
62062: POP
62063: POP
// until p > 20 ;
62064: LD_VAR 0 3
62068: PUSH
62069: LD_INT 20
62071: GREATER
62072: IFFALSE 61999
// end ;
62074: PPOPN 3
62076: END
// every 0 0$1 trigger StreamModeActive and sTime do
62077: LD_EXP 81
62081: PUSH
62082: LD_EXP 132
62086: AND
62087: IFFALSE 62122
62089: GO 62091
62091: DISABLE
// begin SetTech ( tech_tauRad , your_side , state_researched ) ;
62092: LD_INT 28
62094: PPUSH
62095: LD_OWVAR 2
62099: PPUSH
62100: LD_INT 2
62102: PPUSH
62103: CALL_OW 322
// SetTech ( tech_tauField , your_side , state_researched ) ;
62107: LD_INT 30
62109: PPUSH
62110: LD_OWVAR 2
62114: PPUSH
62115: LD_INT 2
62117: PPUSH
62118: CALL_OW 322
// end ;
62122: END
// every 0 0$1 trigger StreamModeActive and sTools do var i , tmp ;
62123: LD_EXP 81
62127: PUSH
62128: LD_EXP 133
62132: AND
62133: IFFALSE 62254
62135: GO 62137
62137: DISABLE
62138: LD_INT 0
62140: PPUSH
62141: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] , [ f_not , [ f_nation , 0 ] ] ] ) ;
62142: LD_ADDR_VAR 0 2
62146: PUSH
62147: LD_INT 22
62149: PUSH
62150: LD_OWVAR 2
62154: PUSH
62155: EMPTY
62156: LIST
62157: LIST
62158: PUSH
62159: LD_INT 21
62161: PUSH
62162: LD_INT 1
62164: PUSH
62165: EMPTY
62166: LIST
62167: LIST
62168: PUSH
62169: LD_INT 3
62171: PUSH
62172: LD_INT 23
62174: PUSH
62175: LD_INT 0
62177: PUSH
62178: EMPTY
62179: LIST
62180: LIST
62181: PUSH
62182: EMPTY
62183: LIST
62184: LIST
62185: PUSH
62186: EMPTY
62187: LIST
62188: LIST
62189: LIST
62190: PPUSH
62191: CALL_OW 69
62195: ST_TO_ADDR
// if not tmp then
62196: LD_VAR 0 2
62200: NOT
62201: IFFALSE 62205
// exit ;
62203: GO 62254
// for i in tmp do
62205: LD_ADDR_VAR 0 1
62209: PUSH
62210: LD_VAR 0 2
62214: PUSH
62215: FOR_IN
62216: IFFALSE 62252
// begin if Crawls ( i ) then
62218: LD_VAR 0 1
62222: PPUSH
62223: CALL_OW 318
62227: IFFALSE 62238
// ComWalk ( i ) ;
62229: LD_VAR 0 1
62233: PPUSH
62234: CALL_OW 138
// SetClass ( i , 2 ) ;
62238: LD_VAR 0 1
62242: PPUSH
62243: LD_INT 2
62245: PPUSH
62246: CALL_OW 336
// end ;
62250: GO 62215
62252: POP
62253: POP
// end ;
62254: PPOPN 2
62256: END
// every 0 0$1 trigger StreamModeActive and sRanger do var i , p , un ;
62257: LD_EXP 81
62261: PUSH
62262: LD_EXP 134
62266: AND
62267: IFFALSE 62555
62269: GO 62271
62271: DISABLE
62272: LD_INT 0
62274: PPUSH
62275: PPUSH
62276: PPUSH
// begin SetAttitude ( your_side , 9 , att_friend , true ) ;
62277: LD_OWVAR 2
62281: PPUSH
62282: LD_INT 9
62284: PPUSH
62285: LD_INT 1
62287: PPUSH
62288: LD_INT 1
62290: PPUSH
62291: CALL_OW 80
// ChangeSideFog ( 9 , your_side ) ;
62295: LD_INT 9
62297: PPUSH
62298: LD_OWVAR 2
62302: PPUSH
62303: CALL_OW 343
// uc_side := 9 ;
62307: LD_ADDR_OWVAR 20
62311: PUSH
62312: LD_INT 9
62314: ST_TO_ADDR
// uc_nation := 2 ;
62315: LD_ADDR_OWVAR 21
62319: PUSH
62320: LD_INT 2
62322: ST_TO_ADDR
// hc_name := Dark Warrior ;
62323: LD_ADDR_OWVAR 26
62327: PUSH
62328: LD_STRING Dark Warrior
62330: ST_TO_ADDR
// hc_gallery :=  ;
62331: LD_ADDR_OWVAR 33
62335: PUSH
62336: LD_STRING 
62338: ST_TO_ADDR
// hc_noskilllimit := true ;
62339: LD_ADDR_OWVAR 76
62343: PUSH
62344: LD_INT 1
62346: ST_TO_ADDR
// hc_skills := [ 30 , 30 , 30 , 30 ] ;
62347: LD_ADDR_OWVAR 31
62351: PUSH
62352: LD_INT 30
62354: PUSH
62355: LD_INT 30
62357: PUSH
62358: LD_INT 30
62360: PUSH
62361: LD_INT 30
62363: PUSH
62364: EMPTY
62365: LIST
62366: LIST
62367: LIST
62368: LIST
62369: ST_TO_ADDR
// un := CreateHuman ;
62370: LD_ADDR_VAR 0 3
62374: PUSH
62375: CALL_OW 44
62379: ST_TO_ADDR
// hc_noskilllimit := false ;
62380: LD_ADDR_OWVAR 76
62384: PUSH
62385: LD_INT 0
62387: ST_TO_ADDR
// PlaceUnitAnywhere ( un , true ) ;
62388: LD_VAR 0 3
62392: PPUSH
62393: LD_INT 1
62395: PPUSH
62396: CALL_OW 51
// ToLua ( playRanger() ) ;
62400: LD_STRING playRanger()
62402: PPUSH
62403: CALL_OW 559
// p := 0 ;
62407: LD_ADDR_VAR 0 2
62411: PUSH
62412: LD_INT 0
62414: ST_TO_ADDR
// repeat wait ( 0 0$1 ) ;
62415: LD_INT 35
62417: PPUSH
62418: CALL_OW 67
// p := p + 1 ;
62422: LD_ADDR_VAR 0 2
62426: PUSH
62427: LD_VAR 0 2
62431: PUSH
62432: LD_INT 1
62434: PLUS
62435: ST_TO_ADDR
// if GetLives ( un ) < 1000 then
62436: LD_VAR 0 3
62440: PPUSH
62441: CALL_OW 256
62445: PUSH
62446: LD_INT 1000
62448: LESS
62449: IFFALSE 62463
// SetLives ( un , 1000 ) ;
62451: LD_VAR 0 3
62455: PPUSH
62456: LD_INT 1000
62458: PPUSH
62459: CALL_OW 234
// ComAttackUnit ( un , NearestUnitToUnit ( FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_dist , un , 30 ] ] ) , un ) ) ;
62463: LD_VAR 0 3
62467: PPUSH
62468: LD_INT 81
62470: PUSH
62471: LD_OWVAR 2
62475: PUSH
62476: EMPTY
62477: LIST
62478: LIST
62479: PUSH
62480: LD_INT 91
62482: PUSH
62483: LD_VAR 0 3
62487: PUSH
62488: LD_INT 30
62490: PUSH
62491: EMPTY
62492: LIST
62493: LIST
62494: LIST
62495: PUSH
62496: EMPTY
62497: LIST
62498: LIST
62499: PPUSH
62500: CALL_OW 69
62504: PPUSH
62505: LD_VAR 0 3
62509: PPUSH
62510: CALL_OW 74
62514: PPUSH
62515: CALL_OW 115
// until p > 80 or IsDead ( un ) ;
62519: LD_VAR 0 2
62523: PUSH
62524: LD_INT 80
62526: GREATER
62527: PUSH
62528: LD_VAR 0 3
62532: PPUSH
62533: CALL_OW 301
62537: OR
62538: IFFALSE 62415
// if un then
62540: LD_VAR 0 3
62544: IFFALSE 62555
// RemoveUnit ( un ) ;
62546: LD_VAR 0 3
62550: PPUSH
62551: CALL_OW 64
// end ;
62555: PPOPN 3
62557: END
// every 0 0$1 trigger sComputer do var i , tmp , j ;
62558: LD_EXP 135
62562: IFFALSE 62678
62564: GO 62566
62566: DISABLE
62567: LD_INT 0
62569: PPUSH
62570: PPUSH
62571: PPUSH
// begin tmp := FilterAllUnits ( [ [ f_enemy , your_side ] , [ f_type , unit_human ] ] ) ;
62572: LD_ADDR_VAR 0 2
62576: PUSH
62577: LD_INT 81
62579: PUSH
62580: LD_OWVAR 2
62584: PUSH
62585: EMPTY
62586: LIST
62587: LIST
62588: PUSH
62589: LD_INT 21
62591: PUSH
62592: LD_INT 1
62594: PUSH
62595: EMPTY
62596: LIST
62597: LIST
62598: PUSH
62599: EMPTY
62600: LIST
62601: LIST
62602: PPUSH
62603: CALL_OW 69
62607: ST_TO_ADDR
// ToLua ( playComputer() ) ;
62608: LD_STRING playComputer()
62610: PPUSH
62611: CALL_OW 559
// if not tmp then
62615: LD_VAR 0 2
62619: NOT
62620: IFFALSE 62624
// exit ;
62622: GO 62678
// for i in tmp do
62624: LD_ADDR_VAR 0 1
62628: PUSH
62629: LD_VAR 0 2
62633: PUSH
62634: FOR_IN
62635: IFFALSE 62676
// for j := 1 to 4 do
62637: LD_ADDR_VAR 0 3
62641: PUSH
62642: DOUBLE
62643: LD_INT 1
62645: DEC
62646: ST_TO_ADDR
62647: LD_INT 4
62649: PUSH
62650: FOR_TO
62651: IFFALSE 62672
// SetSkill ( i , j , 10 ) ;
62653: LD_VAR 0 1
62657: PPUSH
62658: LD_VAR 0 3
62662: PPUSH
62663: LD_INT 10
62665: PPUSH
62666: CALL_OW 237
62670: GO 62650
62672: POP
62673: POP
62674: GO 62634
62676: POP
62677: POP
// end ;
62678: PPOPN 3
62680: END
// every 0 0$1 trigger s30 do var i , tmp ;
62681: LD_EXP 136
62685: IFFALSE 62754
62687: GO 62689
62689: DISABLE
62690: LD_INT 0
62692: PPUSH
62693: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62694: LD_ADDR_VAR 0 2
62698: PUSH
62699: LD_INT 22
62701: PUSH
62702: LD_OWVAR 2
62706: PUSH
62707: EMPTY
62708: LIST
62709: LIST
62710: PPUSH
62711: CALL_OW 69
62715: ST_TO_ADDR
// if not tmp then
62716: LD_VAR 0 2
62720: NOT
62721: IFFALSE 62725
// exit ;
62723: GO 62754
// for i in tmp do
62725: LD_ADDR_VAR 0 1
62729: PUSH
62730: LD_VAR 0 2
62734: PUSH
62735: FOR_IN
62736: IFFALSE 62752
// SetLives ( i , 300 ) ;
62738: LD_VAR 0 1
62742: PPUSH
62743: LD_INT 300
62745: PPUSH
62746: CALL_OW 234
62750: GO 62735
62752: POP
62753: POP
// end ;
62754: PPOPN 2
62756: END
// every 0 0$1 trigger s60 do var i , tmp ;
62757: LD_EXP 137
62761: IFFALSE 62830
62763: GO 62765
62765: DISABLE
62766: LD_INT 0
62768: PPUSH
62769: PPUSH
// begin tmp := FilterAllUnits ( [ f_side , your_side ] ) ;
62770: LD_ADDR_VAR 0 2
62774: PUSH
62775: LD_INT 22
62777: PUSH
62778: LD_OWVAR 2
62782: PUSH
62783: EMPTY
62784: LIST
62785: LIST
62786: PPUSH
62787: CALL_OW 69
62791: ST_TO_ADDR
// if not tmp then
62792: LD_VAR 0 2
62796: NOT
62797: IFFALSE 62801
// exit ;
62799: GO 62830
// for i in tmp do
62801: LD_ADDR_VAR 0 1
62805: PUSH
62806: LD_VAR 0 2
62810: PUSH
62811: FOR_IN
62812: IFFALSE 62828
// SetLives ( i , 600 ) ;
62814: LD_VAR 0 1
62818: PPUSH
62819: LD_INT 600
62821: PPUSH
62822: CALL_OW 234
62826: GO 62811
62828: POP
62829: POP
// end ;
62830: PPOPN 2
62832: END
// export function SOS_TargetableHack ( cmd , unit , selectedUnit , x , y , p1 , p2 , p3 , p4 , p5 , p6 ) ; begin
62833: LD_INT 0
62835: PPUSH
// case cmd of 301 :
62836: LD_VAR 0 1
62840: PUSH
62841: LD_INT 301
62843: DOUBLE
62844: EQUAL
62845: IFTRUE 62849
62847: GO 62881
62849: POP
// hHackSpawnHuman ( p1 , p2 , p3 , x , y ) ; 302 :
62850: LD_VAR 0 6
62854: PPUSH
62855: LD_VAR 0 7
62859: PPUSH
62860: LD_VAR 0 8
62864: PPUSH
62865: LD_VAR 0 4
62869: PPUSH
62870: LD_VAR 0 5
62874: PPUSH
62875: CALL 64082 0 5
62879: GO 63002
62881: LD_INT 302
62883: DOUBLE
62884: EQUAL
62885: IFTRUE 62889
62887: GO 62926
62889: POP
// hHackSpawnVehicle ( p1 , p2 , p3 , p4 , x , y ) ; 303 :
62890: LD_VAR 0 6
62894: PPUSH
62895: LD_VAR 0 7
62899: PPUSH
62900: LD_VAR 0 8
62904: PPUSH
62905: LD_VAR 0 9
62909: PPUSH
62910: LD_VAR 0 4
62914: PPUSH
62915: LD_VAR 0 5
62919: PPUSH
62920: CALL 64173 0 6
62924: GO 63002
62926: LD_INT 303
62928: DOUBLE
62929: EQUAL
62930: IFTRUE 62934
62932: GO 62971
62934: POP
// hHackSpawnBuilding ( p1 , p2 , p3 , p4 , x , y ) ; 304 :
62935: LD_VAR 0 6
62939: PPUSH
62940: LD_VAR 0 7
62944: PPUSH
62945: LD_VAR 0 8
62949: PPUSH
62950: LD_VAR 0 9
62954: PPUSH
62955: LD_VAR 0 4
62959: PPUSH
62960: LD_VAR 0 5
62964: PPUSH
62965: CALL 63007 0 6
62969: GO 63002
62971: LD_INT 304
62973: DOUBLE
62974: EQUAL
62975: IFTRUE 62979
62977: GO 63001
62979: POP
// hHackTeleport ( unit , x , y ) ; end ;
62980: LD_VAR 0 2
62984: PPUSH
62985: LD_VAR 0 4
62989: PPUSH
62990: LD_VAR 0 5
62994: PPUSH
62995: CALL 64766 0 3
62999: GO 63002
63001: POP
// end ;
63002: LD_VAR 0 12
63006: RET
// export function hHackSpawnBuilding ( nation , btype , dir , weapon , x , y ) ; var b ; begin
63007: LD_INT 0
63009: PPUSH
63010: PPUSH
// if nation < 1 or nation > 3 or HexInfo ( x , y ) then
63011: LD_VAR 0 1
63015: PUSH
63016: LD_INT 1
63018: LESS
63019: PUSH
63020: LD_VAR 0 1
63024: PUSH
63025: LD_INT 3
63027: GREATER
63028: OR
63029: PUSH
63030: LD_VAR 0 5
63034: PPUSH
63035: LD_VAR 0 6
63039: PPUSH
63040: CALL_OW 428
63044: OR
63045: IFFALSE 63049
// exit ;
63047: GO 63769
// uc_side := your_side ;
63049: LD_ADDR_OWVAR 20
63053: PUSH
63054: LD_OWVAR 2
63058: ST_TO_ADDR
// uc_nation := nation ;
63059: LD_ADDR_OWVAR 21
63063: PUSH
63064: LD_VAR 0 1
63068: ST_TO_ADDR
// bc_level = 1 ;
63069: LD_ADDR_OWVAR 43
63073: PUSH
63074: LD_INT 1
63076: ST_TO_ADDR
// case btype of 1 :
63077: LD_VAR 0 2
63081: PUSH
63082: LD_INT 1
63084: DOUBLE
63085: EQUAL
63086: IFTRUE 63090
63088: GO 63101
63090: POP
// bc_type := b_depot ; 2 :
63091: LD_ADDR_OWVAR 42
63095: PUSH
63096: LD_INT 0
63098: ST_TO_ADDR
63099: GO 63713
63101: LD_INT 2
63103: DOUBLE
63104: EQUAL
63105: IFTRUE 63109
63107: GO 63120
63109: POP
// bc_type := b_warehouse ; 3 :
63110: LD_ADDR_OWVAR 42
63114: PUSH
63115: LD_INT 1
63117: ST_TO_ADDR
63118: GO 63713
63120: LD_INT 3
63122: DOUBLE
63123: EQUAL
63124: IFTRUE 63128
63126: GO 63139
63128: POP
// bc_type := b_lab ; 4 .. 9 :
63129: LD_ADDR_OWVAR 42
63133: PUSH
63134: LD_INT 6
63136: ST_TO_ADDR
63137: GO 63713
63139: LD_INT 4
63141: DOUBLE
63142: GREATEREQUAL
63143: IFFALSE 63151
63145: LD_INT 9
63147: DOUBLE
63148: LESSEQUAL
63149: IFTRUE 63153
63151: GO 63205
63153: POP
// begin bc_type := b_lab_half ;
63154: LD_ADDR_OWVAR 42
63158: PUSH
63159: LD_INT 7
63161: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_siberium , b_lab_computer , b_lab_opto , b_lab_spacetime , b_lab_biological ] [ btype - 3 ] ;
63162: LD_ADDR_OWVAR 44
63166: PUSH
63167: LD_INT 10
63169: PUSH
63170: LD_INT 11
63172: PUSH
63173: LD_INT 12
63175: PUSH
63176: LD_INT 15
63178: PUSH
63179: LD_INT 14
63181: PUSH
63182: LD_INT 13
63184: PUSH
63185: EMPTY
63186: LIST
63187: LIST
63188: LIST
63189: LIST
63190: LIST
63191: LIST
63192: PUSH
63193: LD_VAR 0 2
63197: PUSH
63198: LD_INT 3
63200: MINUS
63201: ARRAY
63202: ST_TO_ADDR
// end ; 10 .. 13 :
63203: GO 63713
63205: LD_INT 10
63207: DOUBLE
63208: GREATEREQUAL
63209: IFFALSE 63217
63211: LD_INT 13
63213: DOUBLE
63214: LESSEQUAL
63215: IFTRUE 63219
63217: GO 63296
63219: POP
// begin bc_type := b_lab_full ;
63220: LD_ADDR_OWVAR 42
63224: PUSH
63225: LD_INT 8
63227: ST_TO_ADDR
// bc_kind1 := [ b_lab_weapon , b_lab_computer , b_lab_spacetime , b_lab_biological ] [ btype - 9 ] ;
63228: LD_ADDR_OWVAR 44
63232: PUSH
63233: LD_INT 10
63235: PUSH
63236: LD_INT 12
63238: PUSH
63239: LD_INT 14
63241: PUSH
63242: LD_INT 13
63244: PUSH
63245: EMPTY
63246: LIST
63247: LIST
63248: LIST
63249: LIST
63250: PUSH
63251: LD_VAR 0 2
63255: PUSH
63256: LD_INT 9
63258: MINUS
63259: ARRAY
63260: ST_TO_ADDR
// bc_kind2 := [ b_lab_siberium , b_lab_opto , b_lab_computer , b_lab_opto ] [ btype - 9 ] ;
63261: LD_ADDR_OWVAR 45
63265: PUSH
63266: LD_INT 11
63268: PUSH
63269: LD_INT 15
63271: PUSH
63272: LD_INT 12
63274: PUSH
63275: LD_INT 15
63277: PUSH
63278: EMPTY
63279: LIST
63280: LIST
63281: LIST
63282: LIST
63283: PUSH
63284: LD_VAR 0 2
63288: PUSH
63289: LD_INT 9
63291: MINUS
63292: ARRAY
63293: ST_TO_ADDR
// end ; 14 :
63294: GO 63713
63296: LD_INT 14
63298: DOUBLE
63299: EQUAL
63300: IFTRUE 63304
63302: GO 63315
63304: POP
// bc_type := b_workshop ; 15 :
63305: LD_ADDR_OWVAR 42
63309: PUSH
63310: LD_INT 2
63312: ST_TO_ADDR
63313: GO 63713
63315: LD_INT 15
63317: DOUBLE
63318: EQUAL
63319: IFTRUE 63323
63321: GO 63334
63323: POP
// bc_type := b_factory ; 16 :
63324: LD_ADDR_OWVAR 42
63328: PUSH
63329: LD_INT 3
63331: ST_TO_ADDR
63332: GO 63713
63334: LD_INT 16
63336: DOUBLE
63337: EQUAL
63338: IFTRUE 63342
63340: GO 63353
63342: POP
// bc_type := b_ext_gun ; 17 :
63343: LD_ADDR_OWVAR 42
63347: PUSH
63348: LD_INT 17
63350: ST_TO_ADDR
63351: GO 63713
63353: LD_INT 17
63355: DOUBLE
63356: EQUAL
63357: IFTRUE 63361
63359: GO 63389
63361: POP
// bc_type := [ b_ext_noncombat , b_ext_stitch , b_ext_noncombat ] [ nation ] ; 18 :
63362: LD_ADDR_OWVAR 42
63366: PUSH
63367: LD_INT 19
63369: PUSH
63370: LD_INT 23
63372: PUSH
63373: LD_INT 19
63375: PUSH
63376: EMPTY
63377: LIST
63378: LIST
63379: LIST
63380: PUSH
63381: LD_VAR 0 1
63385: ARRAY
63386: ST_TO_ADDR
63387: GO 63713
63389: LD_INT 18
63391: DOUBLE
63392: EQUAL
63393: IFTRUE 63397
63395: GO 63408
63397: POP
// bc_type := b_ext_radar ; 19 :
63398: LD_ADDR_OWVAR 42
63402: PUSH
63403: LD_INT 20
63405: ST_TO_ADDR
63406: GO 63713
63408: LD_INT 19
63410: DOUBLE
63411: EQUAL
63412: IFTRUE 63416
63414: GO 63427
63416: POP
// bc_type := b_ext_radio ; 20 :
63417: LD_ADDR_OWVAR 42
63421: PUSH
63422: LD_INT 22
63424: ST_TO_ADDR
63425: GO 63713
63427: LD_INT 20
63429: DOUBLE
63430: EQUAL
63431: IFTRUE 63435
63433: GO 63446
63435: POP
// bc_type := b_ext_siberium ; 21 :
63436: LD_ADDR_OWVAR 42
63440: PUSH
63441: LD_INT 21
63443: ST_TO_ADDR
63444: GO 63713
63446: LD_INT 21
63448: DOUBLE
63449: EQUAL
63450: IFTRUE 63454
63452: GO 63465
63454: POP
// bc_type := b_ext_computer ; 22 :
63455: LD_ADDR_OWVAR 42
63459: PUSH
63460: LD_INT 24
63462: ST_TO_ADDR
63463: GO 63713
63465: LD_INT 22
63467: DOUBLE
63468: EQUAL
63469: IFTRUE 63473
63471: GO 63484
63473: POP
// bc_type := b_ext_track ; 23 :
63474: LD_ADDR_OWVAR 42
63478: PUSH
63479: LD_INT 16
63481: ST_TO_ADDR
63482: GO 63713
63484: LD_INT 23
63486: DOUBLE
63487: EQUAL
63488: IFTRUE 63492
63490: GO 63503
63492: POP
// bc_type := b_ext_laser ; 24 :
63493: LD_ADDR_OWVAR 42
63497: PUSH
63498: LD_INT 25
63500: ST_TO_ADDR
63501: GO 63713
63503: LD_INT 24
63505: DOUBLE
63506: EQUAL
63507: IFTRUE 63511
63509: GO 63522
63511: POP
// bc_type := b_control_tower ; 25 :
63512: LD_ADDR_OWVAR 42
63516: PUSH
63517: LD_INT 36
63519: ST_TO_ADDR
63520: GO 63713
63522: LD_INT 25
63524: DOUBLE
63525: EQUAL
63526: IFTRUE 63530
63528: GO 63541
63530: POP
// bc_type := b_breastwork ; 26 :
63531: LD_ADDR_OWVAR 42
63535: PUSH
63536: LD_INT 31
63538: ST_TO_ADDR
63539: GO 63713
63541: LD_INT 26
63543: DOUBLE
63544: EQUAL
63545: IFTRUE 63549
63547: GO 63560
63549: POP
// bc_type := b_bunker ; 27 :
63550: LD_ADDR_OWVAR 42
63554: PUSH
63555: LD_INT 32
63557: ST_TO_ADDR
63558: GO 63713
63560: LD_INT 27
63562: DOUBLE
63563: EQUAL
63564: IFTRUE 63568
63566: GO 63579
63568: POP
// bc_type := b_turret ; 28 :
63569: LD_ADDR_OWVAR 42
63573: PUSH
63574: LD_INT 33
63576: ST_TO_ADDR
63577: GO 63713
63579: LD_INT 28
63581: DOUBLE
63582: EQUAL
63583: IFTRUE 63587
63585: GO 63598
63587: POP
// bc_type := b_armoury ; 29 :
63588: LD_ADDR_OWVAR 42
63592: PUSH
63593: LD_INT 4
63595: ST_TO_ADDR
63596: GO 63713
63598: LD_INT 29
63600: DOUBLE
63601: EQUAL
63602: IFTRUE 63606
63604: GO 63617
63606: POP
// bc_type := b_barracks ; 30 :
63607: LD_ADDR_OWVAR 42
63611: PUSH
63612: LD_INT 5
63614: ST_TO_ADDR
63615: GO 63713
63617: LD_INT 30
63619: DOUBLE
63620: EQUAL
63621: IFTRUE 63625
63623: GO 63636
63625: POP
// bc_type := b_solar_power ; 31 :
63626: LD_ADDR_OWVAR 42
63630: PUSH
63631: LD_INT 27
63633: ST_TO_ADDR
63634: GO 63713
63636: LD_INT 31
63638: DOUBLE
63639: EQUAL
63640: IFTRUE 63644
63642: GO 63655
63644: POP
// bc_type := b_oil_power ; 32 :
63645: LD_ADDR_OWVAR 42
63649: PUSH
63650: LD_INT 26
63652: ST_TO_ADDR
63653: GO 63713
63655: LD_INT 32
63657: DOUBLE
63658: EQUAL
63659: IFTRUE 63663
63661: GO 63674
63663: POP
// bc_type := b_siberite_power ; 33 :
63664: LD_ADDR_OWVAR 42
63668: PUSH
63669: LD_INT 28
63671: ST_TO_ADDR
63672: GO 63713
63674: LD_INT 33
63676: DOUBLE
63677: EQUAL
63678: IFTRUE 63682
63680: GO 63693
63682: POP
// bc_type := b_oil_mine ; 34 :
63683: LD_ADDR_OWVAR 42
63687: PUSH
63688: LD_INT 29
63690: ST_TO_ADDR
63691: GO 63713
63693: LD_INT 34
63695: DOUBLE
63696: EQUAL
63697: IFTRUE 63701
63699: GO 63712
63701: POP
// bc_type := b_siberite_mine ; end ;
63702: LD_ADDR_OWVAR 42
63706: PUSH
63707: LD_INT 30
63709: ST_TO_ADDR
63710: GO 63713
63712: POP
// b := CreateAndPlaceBuildingXYD ( x , y , dir ) ;
63713: LD_ADDR_VAR 0 8
63717: PUSH
63718: LD_VAR 0 5
63722: PPUSH
63723: LD_VAR 0 6
63727: PPUSH
63728: LD_VAR 0 3
63732: PPUSH
63733: CALL_OW 47
63737: ST_TO_ADDR
// if bc_type in [ b_bunker , b_turret ] then
63738: LD_OWVAR 42
63742: PUSH
63743: LD_INT 32
63745: PUSH
63746: LD_INT 33
63748: PUSH
63749: EMPTY
63750: LIST
63751: LIST
63752: IN
63753: IFFALSE 63769
// PlaceWeaponTurret ( b , weapon ) ;
63755: LD_VAR 0 8
63759: PPUSH
63760: LD_VAR 0 4
63764: PPUSH
63765: CALL_OW 431
// end ;
63769: LD_VAR 0 7
63773: RET
// export function hHackUnlimitedResources ; var i , j , tmp ; begin
63774: LD_INT 0
63776: PPUSH
63777: PPUSH
63778: PPUSH
63779: PPUSH
// tmp := FilterAllUnits ( [ [ f_side , your_side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
63780: LD_ADDR_VAR 0 4
63784: PUSH
63785: LD_INT 22
63787: PUSH
63788: LD_OWVAR 2
63792: PUSH
63793: EMPTY
63794: LIST
63795: LIST
63796: PUSH
63797: LD_INT 2
63799: PUSH
63800: LD_INT 30
63802: PUSH
63803: LD_INT 0
63805: PUSH
63806: EMPTY
63807: LIST
63808: LIST
63809: PUSH
63810: LD_INT 30
63812: PUSH
63813: LD_INT 1
63815: PUSH
63816: EMPTY
63817: LIST
63818: LIST
63819: PUSH
63820: EMPTY
63821: LIST
63822: LIST
63823: LIST
63824: PUSH
63825: EMPTY
63826: LIST
63827: LIST
63828: PPUSH
63829: CALL_OW 69
63833: ST_TO_ADDR
// if not tmp then
63834: LD_VAR 0 4
63838: NOT
63839: IFFALSE 63843
// exit ;
63841: GO 63902
// for i in tmp do
63843: LD_ADDR_VAR 0 2
63847: PUSH
63848: LD_VAR 0 4
63852: PUSH
63853: FOR_IN
63854: IFFALSE 63900
// for j = 1 to 3 do
63856: LD_ADDR_VAR 0 3
63860: PUSH
63861: DOUBLE
63862: LD_INT 1
63864: DEC
63865: ST_TO_ADDR
63866: LD_INT 3
63868: PUSH
63869: FOR_TO
63870: IFFALSE 63896
// SetResourceType ( GetBase ( i ) , j , 99999 ) ;
63872: LD_VAR 0 2
63876: PPUSH
63877: CALL_OW 274
63881: PPUSH
63882: LD_VAR 0 3
63886: PPUSH
63887: LD_INT 99999
63889: PPUSH
63890: CALL_OW 277
63894: GO 63869
63896: POP
63897: POP
63898: GO 63853
63900: POP
63901: POP
// end ;
63902: LD_VAR 0 1
63906: RET
// export function hHackSetLevel10 ; var i , j ; begin
63907: LD_INT 0
63909: PPUSH
63910: PPUSH
63911: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
63912: LD_ADDR_VAR 0 2
63916: PUSH
63917: LD_INT 21
63919: PUSH
63920: LD_INT 1
63922: PUSH
63923: EMPTY
63924: LIST
63925: LIST
63926: PPUSH
63927: CALL_OW 69
63931: PUSH
63932: FOR_IN
63933: IFFALSE 63985
// if IsSelected ( i ) then
63935: LD_VAR 0 2
63939: PPUSH
63940: CALL_OW 306
63944: IFFALSE 63983
// begin for j := 1 to 4 do
63946: LD_ADDR_VAR 0 3
63950: PUSH
63951: DOUBLE
63952: LD_INT 1
63954: DEC
63955: ST_TO_ADDR
63956: LD_INT 4
63958: PUSH
63959: FOR_TO
63960: IFFALSE 63981
// SetSkill ( i , j , 10 ) ;
63962: LD_VAR 0 2
63966: PPUSH
63967: LD_VAR 0 3
63971: PPUSH
63972: LD_INT 10
63974: PPUSH
63975: CALL_OW 237
63979: GO 63959
63981: POP
63982: POP
// end ;
63983: GO 63932
63985: POP
63986: POP
// end ;
63987: LD_VAR 0 1
63991: RET
// export function hHackSetLevel10YourUnits ; var i , j ; begin
63992: LD_INT 0
63994: PPUSH
63995: PPUSH
63996: PPUSH
// for i in FilterAllUnits ( [ [ f_side , your_side ] , [ f_type , unit_human ] ] ) do
63997: LD_ADDR_VAR 0 2
64001: PUSH
64002: LD_INT 22
64004: PUSH
64005: LD_OWVAR 2
64009: PUSH
64010: EMPTY
64011: LIST
64012: LIST
64013: PUSH
64014: LD_INT 21
64016: PUSH
64017: LD_INT 1
64019: PUSH
64020: EMPTY
64021: LIST
64022: LIST
64023: PUSH
64024: EMPTY
64025: LIST
64026: LIST
64027: PPUSH
64028: CALL_OW 69
64032: PUSH
64033: FOR_IN
64034: IFFALSE 64075
// begin for j := 1 to 4 do
64036: LD_ADDR_VAR 0 3
64040: PUSH
64041: DOUBLE
64042: LD_INT 1
64044: DEC
64045: ST_TO_ADDR
64046: LD_INT 4
64048: PUSH
64049: FOR_TO
64050: IFFALSE 64071
// SetSkill ( i , j , 10 ) ;
64052: LD_VAR 0 2
64056: PPUSH
64057: LD_VAR 0 3
64061: PPUSH
64062: LD_INT 10
64064: PPUSH
64065: CALL_OW 237
64069: GO 64049
64071: POP
64072: POP
// end ;
64073: GO 64033
64075: POP
64076: POP
// end ;
64077: LD_VAR 0 1
64081: RET
// export function hHackSpawnHuman ( nation , class , skill , x , y ) ; begin
64082: LD_INT 0
64084: PPUSH
// uc_side := your_side ;
64085: LD_ADDR_OWVAR 20
64089: PUSH
64090: LD_OWVAR 2
64094: ST_TO_ADDR
// uc_nation := nation ;
64095: LD_ADDR_OWVAR 21
64099: PUSH
64100: LD_VAR 0 1
64104: ST_TO_ADDR
// InitHc ;
64105: CALL_OW 19
// PrepareHuman ( false , class , skill ) ;
64109: LD_INT 0
64111: PPUSH
64112: LD_VAR 0 2
64116: PPUSH
64117: LD_VAR 0 3
64121: PPUSH
64122: CALL_OW 380
// if HexInfo ( x , y ) = 0 then
64126: LD_VAR 0 4
64130: PPUSH
64131: LD_VAR 0 5
64135: PPUSH
64136: CALL_OW 428
64140: PUSH
64141: LD_INT 0
64143: EQUAL
64144: IFFALSE 64168
// PlaceUnitXY ( CreateHuman , x , y , true ) ;
64146: CALL_OW 44
64150: PPUSH
64151: LD_VAR 0 4
64155: PPUSH
64156: LD_VAR 0 5
64160: PPUSH
64161: LD_INT 1
64163: PPUSH
64164: CALL_OW 48
// end ;
64168: LD_VAR 0 6
64172: RET
// export function hHackSpawnVehicle ( chassis , engine , control , weapon , x , y ) ; var un ; begin
64173: LD_INT 0
64175: PPUSH
64176: PPUSH
// uc_side := your_side ;
64177: LD_ADDR_OWVAR 20
64181: PUSH
64182: LD_OWVAR 2
64186: ST_TO_ADDR
// if chassis in [ 1 , 2 , 3 , 4 , 5 ] then
64187: LD_VAR 0 1
64191: PUSH
64192: LD_INT 1
64194: PUSH
64195: LD_INT 2
64197: PUSH
64198: LD_INT 3
64200: PUSH
64201: LD_INT 4
64203: PUSH
64204: LD_INT 5
64206: PUSH
64207: EMPTY
64208: LIST
64209: LIST
64210: LIST
64211: LIST
64212: LIST
64213: IN
64214: IFFALSE 64226
// uc_nation := nation_american else
64216: LD_ADDR_OWVAR 21
64220: PUSH
64221: LD_INT 1
64223: ST_TO_ADDR
64224: GO 64269
// if chassis in [ 11 , 12 , 13 , 14 ] then
64226: LD_VAR 0 1
64230: PUSH
64231: LD_INT 11
64233: PUSH
64234: LD_INT 12
64236: PUSH
64237: LD_INT 13
64239: PUSH
64240: LD_INT 14
64242: PUSH
64243: EMPTY
64244: LIST
64245: LIST
64246: LIST
64247: LIST
64248: IN
64249: IFFALSE 64261
// uc_nation := nation_arabian else
64251: LD_ADDR_OWVAR 21
64255: PUSH
64256: LD_INT 2
64258: ST_TO_ADDR
64259: GO 64269
// uc_nation := nation_russian ;
64261: LD_ADDR_OWVAR 21
64265: PUSH
64266: LD_INT 3
64268: ST_TO_ADDR
// vc_chassis := chassis ;
64269: LD_ADDR_OWVAR 37
64273: PUSH
64274: LD_VAR 0 1
64278: ST_TO_ADDR
// vc_engine := engine ;
64279: LD_ADDR_OWVAR 39
64283: PUSH
64284: LD_VAR 0 2
64288: ST_TO_ADDR
// vc_control := control ;
64289: LD_ADDR_OWVAR 38
64293: PUSH
64294: LD_VAR 0 3
64298: ST_TO_ADDR
// vc_weapon := weapon ;
64299: LD_ADDR_OWVAR 40
64303: PUSH
64304: LD_VAR 0 4
64308: ST_TO_ADDR
// un := CreateVehicle ;
64309: LD_ADDR_VAR 0 8
64313: PUSH
64314: CALL_OW 45
64318: ST_TO_ADDR
// SetDir ( un , rand ( 0 , 5 ) ) ;
64319: LD_VAR 0 8
64323: PPUSH
64324: LD_INT 0
64326: PPUSH
64327: LD_INT 5
64329: PPUSH
64330: CALL_OW 12
64334: PPUSH
64335: CALL_OW 233
// PlaceUnitXY ( un , x , y , true ) ;
64339: LD_VAR 0 8
64343: PPUSH
64344: LD_VAR 0 5
64348: PPUSH
64349: LD_VAR 0 6
64353: PPUSH
64354: LD_INT 1
64356: PPUSH
64357: CALL_OW 48
// end ;
64361: LD_VAR 0 7
64365: RET
// export hInvincible ; every 1 do
64366: GO 64368
64368: DISABLE
// hInvincible := [ ] ;
64369: LD_ADDR_EXP 138
64373: PUSH
64374: EMPTY
64375: ST_TO_ADDR
64376: END
// every 10 do var i ;
64377: GO 64379
64379: DISABLE
64380: LD_INT 0
64382: PPUSH
// begin enable ;
64383: ENABLE
// if not hInvincible then
64384: LD_EXP 138
64388: NOT
64389: IFFALSE 64393
// exit ;
64391: GO 64437
// for i in hInvincible do
64393: LD_ADDR_VAR 0 1
64397: PUSH
64398: LD_EXP 138
64402: PUSH
64403: FOR_IN
64404: IFFALSE 64435
// if GetLives ( i ) < 1000 then
64406: LD_VAR 0 1
64410: PPUSH
64411: CALL_OW 256
64415: PUSH
64416: LD_INT 1000
64418: LESS
64419: IFFALSE 64433
// SetLives ( i , 1000 ) ;
64421: LD_VAR 0 1
64425: PPUSH
64426: LD_INT 1000
64428: PPUSH
64429: CALL_OW 234
64433: GO 64403
64435: POP
64436: POP
// end ;
64437: PPOPN 1
64439: END
// export function hHackInvincible ; var i ; begin
64440: LD_INT 0
64442: PPUSH
64443: PPUSH
// for i in FilterAllUnits ( [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ) do
64444: LD_ADDR_VAR 0 2
64448: PUSH
64449: LD_INT 2
64451: PUSH
64452: LD_INT 21
64454: PUSH
64455: LD_INT 1
64457: PUSH
64458: EMPTY
64459: LIST
64460: LIST
64461: PUSH
64462: LD_INT 21
64464: PUSH
64465: LD_INT 2
64467: PUSH
64468: EMPTY
64469: LIST
64470: LIST
64471: PUSH
64472: EMPTY
64473: LIST
64474: LIST
64475: LIST
64476: PPUSH
64477: CALL_OW 69
64481: PUSH
64482: FOR_IN
64483: IFFALSE 64544
// if IsSelected ( i ) then
64485: LD_VAR 0 2
64489: PPUSH
64490: CALL_OW 306
64494: IFFALSE 64542
// begin if i in hInvincible then
64496: LD_VAR 0 2
64500: PUSH
64501: LD_EXP 138
64505: IN
64506: IFFALSE 64526
// hInvincible := hInvincible diff i else
64508: LD_ADDR_EXP 138
64512: PUSH
64513: LD_EXP 138
64517: PUSH
64518: LD_VAR 0 2
64522: DIFF
64523: ST_TO_ADDR
64524: GO 64542
// hInvincible := hInvincible union i ;
64526: LD_ADDR_EXP 138
64530: PUSH
64531: LD_EXP 138
64535: PUSH
64536: LD_VAR 0 2
64540: UNION
64541: ST_TO_ADDR
// end ;
64542: GO 64482
64544: POP
64545: POP
// end ;
64546: LD_VAR 0 1
64550: RET
// export function hHackInvisible ; var i , j ; begin
64551: LD_INT 0
64553: PPUSH
64554: PPUSH
64555: PPUSH
// for i in FilterAllUnits ( [ f_type , unit_human ] ) do
64556: LD_ADDR_VAR 0 2
64560: PUSH
64561: LD_INT 21
64563: PUSH
64564: LD_INT 1
64566: PUSH
64567: EMPTY
64568: LIST
64569: LIST
64570: PPUSH
64571: CALL_OW 69
64575: PUSH
64576: FOR_IN
64577: IFFALSE 64601
// if IsSelected ( i ) then
64579: LD_VAR 0 2
64583: PPUSH
64584: CALL_OW 306
64588: IFFALSE 64599
// ComForceInvisible ( i ) ;
64590: LD_VAR 0 2
64594: PPUSH
64595: CALL_OW 496
64599: GO 64576
64601: POP
64602: POP
// end ;
64603: LD_VAR 0 1
64607: RET
// export function hHackChangeYourSide ; begin
64608: LD_INT 0
64610: PPUSH
// if your_side = 8 then
64611: LD_OWVAR 2
64615: PUSH
64616: LD_INT 8
64618: EQUAL
64619: IFFALSE 64631
// your_side := 0 else
64621: LD_ADDR_OWVAR 2
64625: PUSH
64626: LD_INT 0
64628: ST_TO_ADDR
64629: GO 64645
// your_side := your_side + 1 ;
64631: LD_ADDR_OWVAR 2
64635: PUSH
64636: LD_OWVAR 2
64640: PUSH
64641: LD_INT 1
64643: PLUS
64644: ST_TO_ADDR
// end ;
64645: LD_VAR 0 1
64649: RET
// export function hHackChangeUnitSide ; var i , j ; begin
64650: LD_INT 0
64652: PPUSH
64653: PPUSH
64654: PPUSH
// for i in all_units do
64655: LD_ADDR_VAR 0 2
64659: PUSH
64660: LD_OWVAR 3
64664: PUSH
64665: FOR_IN
64666: IFFALSE 64744
// if IsSelected ( i ) then
64668: LD_VAR 0 2
64672: PPUSH
64673: CALL_OW 306
64677: IFFALSE 64742
// begin j := GetSide ( i ) ;
64679: LD_ADDR_VAR 0 3
64683: PUSH
64684: LD_VAR 0 2
64688: PPUSH
64689: CALL_OW 255
64693: ST_TO_ADDR
// if j = 8 then
64694: LD_VAR 0 3
64698: PUSH
64699: LD_INT 8
64701: EQUAL
64702: IFFALSE 64714
// j := 0 else
64704: LD_ADDR_VAR 0 3
64708: PUSH
64709: LD_INT 0
64711: ST_TO_ADDR
64712: GO 64728
// j := j + 1 ;
64714: LD_ADDR_VAR 0 3
64718: PUSH
64719: LD_VAR 0 3
64723: PUSH
64724: LD_INT 1
64726: PLUS
64727: ST_TO_ADDR
// SetSide ( i , j ) ;
64728: LD_VAR 0 2
64732: PPUSH
64733: LD_VAR 0 3
64737: PPUSH
64738: CALL_OW 235
// end ;
64742: GO 64665
64744: POP
64745: POP
// end ;
64746: LD_VAR 0 1
64750: RET
// export function hHackFog ; begin
64751: LD_INT 0
64753: PPUSH
// FogOff ( true ) ;
64754: LD_INT 1
64756: PPUSH
64757: CALL_OW 344
// end ;
64761: LD_VAR 0 1
64765: RET
// export function hHackTeleport ( unit , x , y ) ; begin
64766: LD_INT 0
64768: PPUSH
// TeleportUnit ( unit , x , y , 1 , true ) ;
64769: LD_VAR 0 1
64773: PPUSH
64774: LD_VAR 0 2
64778: PPUSH
64779: LD_VAR 0 3
64783: PPUSH
64784: LD_INT 1
64786: PPUSH
64787: LD_INT 1
64789: PPUSH
64790: CALL_OW 483
// CenterOnXY ( x , y ) ;
64794: LD_VAR 0 2
64798: PPUSH
64799: LD_VAR 0 3
64803: PPUSH
64804: CALL_OW 84
// end ;
64808: LD_VAR 0 4
64812: RET
// export factoryWaypoints ; export function SetFactoryWaypoint ( factory , x , y ) ; var i ; begin
64813: LD_INT 0
64815: PPUSH
64816: PPUSH
// if not factory or not ValidHex ( x , y ) or ( GetBType ( factory ) <> b_factory and not GetType ( factory ) = unit_human ) then
64817: LD_VAR 0 1
64821: NOT
64822: PUSH
64823: LD_VAR 0 2
64827: PPUSH
64828: LD_VAR 0 3
64832: PPUSH
64833: CALL_OW 488
64837: NOT
64838: OR
64839: PUSH
64840: LD_VAR 0 1
64844: PPUSH
64845: CALL_OW 266
64849: PUSH
64850: LD_INT 3
64852: NONEQUAL
64853: PUSH
64854: LD_VAR 0 1
64858: PPUSH
64859: CALL_OW 247
64863: PUSH
64864: LD_INT 1
64866: EQUAL
64867: NOT
64868: AND
64869: OR
64870: IFFALSE 64874
// exit ;
64872: GO 65023
// if GetType ( factory ) = unit_human then
64874: LD_VAR 0 1
64878: PPUSH
64879: CALL_OW 247
64883: PUSH
64884: LD_INT 1
64886: EQUAL
64887: IFFALSE 64904
// factory := IsInUnit ( factory ) ;
64889: LD_ADDR_VAR 0 1
64893: PUSH
64894: LD_VAR 0 1
64898: PPUSH
64899: CALL_OW 310
64903: ST_TO_ADDR
// if GetBType ( factory ) <> b_factory then
64904: LD_VAR 0 1
64908: PPUSH
64909: CALL_OW 266
64913: PUSH
64914: LD_INT 3
64916: NONEQUAL
64917: IFFALSE 64921
// exit ;
64919: GO 65023
// if HexInfo ( x , y ) = factory then
64921: LD_VAR 0 2
64925: PPUSH
64926: LD_VAR 0 3
64930: PPUSH
64931: CALL_OW 428
64935: PUSH
64936: LD_VAR 0 1
64940: EQUAL
64941: IFFALSE 64968
// factoryWaypoints := Replace ( factoryWaypoints , factory , 0 ) else
64943: LD_ADDR_EXP 139
64947: PUSH
64948: LD_EXP 139
64952: PPUSH
64953: LD_VAR 0 1
64957: PPUSH
64958: LD_INT 0
64960: PPUSH
64961: CALL_OW 1
64965: ST_TO_ADDR
64966: GO 65019
// factoryWaypoints := Replace ( factoryWaypoints , factory , [ GetSide ( factory ) , factory , x , y ] ) ;
64968: LD_ADDR_EXP 139
64972: PUSH
64973: LD_EXP 139
64977: PPUSH
64978: LD_VAR 0 1
64982: PPUSH
64983: LD_VAR 0 1
64987: PPUSH
64988: CALL_OW 255
64992: PUSH
64993: LD_VAR 0 1
64997: PUSH
64998: LD_VAR 0 2
65002: PUSH
65003: LD_VAR 0 3
65007: PUSH
65008: EMPTY
65009: LIST
65010: LIST
65011: LIST
65012: LIST
65013: PPUSH
65014: CALL_OW 1
65018: ST_TO_ADDR
// UpdateFactoryWaypoints ;
65019: CALL 65028 0 0
// end ;
65023: LD_VAR 0 4
65027: RET
// export function UpdateFactoryWaypoints ( ) ; var i ; begin
65028: LD_INT 0
65030: PPUSH
65031: PPUSH
// ToLua ( resetFactoryWaypoint(); ) ;
65032: LD_STRING resetFactoryWaypoint();
65034: PPUSH
65035: CALL_OW 559
// if factoryWaypoints then
65039: LD_EXP 139
65043: IFFALSE 65166
// begin for i := 1 to factoryWaypoints do
65045: LD_ADDR_VAR 0 2
65049: PUSH
65050: DOUBLE
65051: LD_INT 1
65053: DEC
65054: ST_TO_ADDR
65055: LD_EXP 139
65059: PUSH
65060: FOR_TO
65061: IFFALSE 65164
// if factoryWaypoints [ i ] then
65063: LD_EXP 139
65067: PUSH
65068: LD_VAR 0 2
65072: ARRAY
65073: IFFALSE 65162
// ToLua ( setFactoryWaypointXY( & factoryWaypoints [ i ] [ 1 ] & , & factoryWaypoints [ i ] [ 2 ] & , & factoryWaypoints [ i ] [ 3 ] & , & factoryWaypoints [ i ] [ 4 ] & ) ) ;
65075: LD_STRING setFactoryWaypointXY(
65077: PUSH
65078: LD_EXP 139
65082: PUSH
65083: LD_VAR 0 2
65087: ARRAY
65088: PUSH
65089: LD_INT 1
65091: ARRAY
65092: STR
65093: PUSH
65094: LD_STRING ,
65096: STR
65097: PUSH
65098: LD_EXP 139
65102: PUSH
65103: LD_VAR 0 2
65107: ARRAY
65108: PUSH
65109: LD_INT 2
65111: ARRAY
65112: STR
65113: PUSH
65114: LD_STRING ,
65116: STR
65117: PUSH
65118: LD_EXP 139
65122: PUSH
65123: LD_VAR 0 2
65127: ARRAY
65128: PUSH
65129: LD_INT 3
65131: ARRAY
65132: STR
65133: PUSH
65134: LD_STRING ,
65136: STR
65137: PUSH
65138: LD_EXP 139
65142: PUSH
65143: LD_VAR 0 2
65147: ARRAY
65148: PUSH
65149: LD_INT 4
65151: ARRAY
65152: STR
65153: PUSH
65154: LD_STRING )
65156: STR
65157: PPUSH
65158: CALL_OW 559
65162: GO 65060
65164: POP
65165: POP
// end ; end ;
65166: LD_VAR 0 1
65170: RET
// export warehouseGatheringPoints , warehouseCratesCollectors ; export function SetWarhouseGatheringPoint ( warehouse , x , y ) ; begin
65171: LD_INT 0
65173: PPUSH
// if HexInfo ( x , y ) = warehouse then
65174: LD_VAR 0 2
65178: PPUSH
65179: LD_VAR 0 3
65183: PPUSH
65184: CALL_OW 428
65188: PUSH
65189: LD_VAR 0 1
65193: EQUAL
65194: IFFALSE 65221
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , 0 ) else
65196: LD_ADDR_EXP 140
65200: PUSH
65201: LD_EXP 140
65205: PPUSH
65206: LD_VAR 0 1
65210: PPUSH
65211: LD_INT 0
65213: PPUSH
65214: CALL_OW 1
65218: ST_TO_ADDR
65219: GO 65272
// warehouseGatheringPoints := Replace ( warehouseGatheringPoints , warehouse , [ GetSide ( warehouse ) , warehouse , x , y ] ) ;
65221: LD_ADDR_EXP 140
65225: PUSH
65226: LD_EXP 140
65230: PPUSH
65231: LD_VAR 0 1
65235: PPUSH
65236: LD_VAR 0 1
65240: PPUSH
65241: CALL_OW 255
65245: PUSH
65246: LD_VAR 0 1
65250: PUSH
65251: LD_VAR 0 2
65255: PUSH
65256: LD_VAR 0 3
65260: PUSH
65261: EMPTY
65262: LIST
65263: LIST
65264: LIST
65265: LIST
65266: PPUSH
65267: CALL_OW 1
65271: ST_TO_ADDR
// UpdateWarhouseGatheringPoints ;
65272: CALL 65281 0 0
// end ;
65276: LD_VAR 0 4
65280: RET
// export function UpdateWarhouseGatheringPoints ( ) ; var i ; begin
65281: LD_INT 0
65283: PPUSH
65284: PPUSH
// ToLua ( resetWarehouseGatheringPoints(); ) ;
65285: LD_STRING resetWarehouseGatheringPoints();
65287: PPUSH
65288: CALL_OW 559
// if warehouseGatheringPoints then
65292: LD_EXP 140
65296: IFFALSE 65419
// begin for i := 1 to warehouseGatheringPoints do
65298: LD_ADDR_VAR 0 2
65302: PUSH
65303: DOUBLE
65304: LD_INT 1
65306: DEC
65307: ST_TO_ADDR
65308: LD_EXP 140
65312: PUSH
65313: FOR_TO
65314: IFFALSE 65417
// if warehouseGatheringPoints [ i ] then
65316: LD_EXP 140
65320: PUSH
65321: LD_VAR 0 2
65325: ARRAY
65326: IFFALSE 65415
// ToLua ( setWarhouseGatheringPointXY( & warehouseGatheringPoints [ i ] [ 1 ] & , & warehouseGatheringPoints [ i ] [ 2 ] & , & warehouseGatheringPoints [ i ] [ 3 ] & , & warehouseGatheringPoints [ i ] [ 4 ] & ) ) ;
65328: LD_STRING setWarhouseGatheringPointXY(
65330: PUSH
65331: LD_EXP 140
65335: PUSH
65336: LD_VAR 0 2
65340: ARRAY
65341: PUSH
65342: LD_INT 1
65344: ARRAY
65345: STR
65346: PUSH
65347: LD_STRING ,
65349: STR
65350: PUSH
65351: LD_EXP 140
65355: PUSH
65356: LD_VAR 0 2
65360: ARRAY
65361: PUSH
65362: LD_INT 2
65364: ARRAY
65365: STR
65366: PUSH
65367: LD_STRING ,
65369: STR
65370: PUSH
65371: LD_EXP 140
65375: PUSH
65376: LD_VAR 0 2
65380: ARRAY
65381: PUSH
65382: LD_INT 3
65384: ARRAY
65385: STR
65386: PUSH
65387: LD_STRING ,
65389: STR
65390: PUSH
65391: LD_EXP 140
65395: PUSH
65396: LD_VAR 0 2
65400: ARRAY
65401: PUSH
65402: LD_INT 4
65404: ARRAY
65405: STR
65406: PUSH
65407: LD_STRING )
65409: STR
65410: PPUSH
65411: CALL_OW 559
65415: GO 65313
65417: POP
65418: POP
// end ; end ;
65419: LD_VAR 0 1
65423: RET
// every 0 0$20 trigger warehouseGatheringPoints do var i , j , list , tmp , side , x , y , depot , cratesNearbyPoint ;
65424: LD_EXP 140
65428: IFFALSE 66057
65430: GO 65432
65432: DISABLE
65433: LD_INT 0
65435: PPUSH
65436: PPUSH
65437: PPUSH
65438: PPUSH
65439: PPUSH
65440: PPUSH
65441: PPUSH
65442: PPUSH
65443: PPUSH
// begin enable ;
65444: ENABLE
// list := warehouseGatheringPoints diff 0 ;
65445: LD_ADDR_VAR 0 3
65449: PUSH
65450: LD_EXP 140
65454: PUSH
65455: LD_INT 0
65457: DIFF
65458: ST_TO_ADDR
// for i := 1 to list do
65459: LD_ADDR_VAR 0 1
65463: PUSH
65464: DOUBLE
65465: LD_INT 1
65467: DEC
65468: ST_TO_ADDR
65469: LD_VAR 0 3
65473: PUSH
65474: FOR_TO
65475: IFFALSE 66055
// begin if not list [ i ] then
65477: LD_VAR 0 3
65481: PUSH
65482: LD_VAR 0 1
65486: ARRAY
65487: NOT
65488: IFFALSE 65492
// continue ;
65490: GO 65474
// depot := list [ i ] [ 2 ] ;
65492: LD_ADDR_VAR 0 8
65496: PUSH
65497: LD_VAR 0 3
65501: PUSH
65502: LD_VAR 0 1
65506: ARRAY
65507: PUSH
65508: LD_INT 2
65510: ARRAY
65511: ST_TO_ADDR
// side := list [ i ] [ 1 ] ;
65512: LD_ADDR_VAR 0 5
65516: PUSH
65517: LD_VAR 0 3
65521: PUSH
65522: LD_VAR 0 1
65526: ARRAY
65527: PUSH
65528: LD_INT 1
65530: ARRAY
65531: ST_TO_ADDR
// if IsDead ( depot ) or side <> GetSide ( depot ) then
65532: LD_VAR 0 8
65536: PPUSH
65537: CALL_OW 301
65541: PUSH
65542: LD_VAR 0 5
65546: PUSH
65547: LD_VAR 0 8
65551: PPUSH
65552: CALL_OW 255
65556: NONEQUAL
65557: OR
65558: IFFALSE 65587
// begin warehouseGatheringPoints := Replace ( warehouseGatheringPoints , depot , 0 ) ;
65560: LD_ADDR_EXP 140
65564: PUSH
65565: LD_EXP 140
65569: PPUSH
65570: LD_VAR 0 8
65574: PPUSH
65575: LD_INT 0
65577: PPUSH
65578: CALL_OW 1
65582: ST_TO_ADDR
// exit ;
65583: POP
65584: POP
65585: GO 66057
// end ; x := list [ i ] [ 3 ] ;
65587: LD_ADDR_VAR 0 6
65591: PUSH
65592: LD_VAR 0 3
65596: PUSH
65597: LD_VAR 0 1
65601: ARRAY
65602: PUSH
65603: LD_INT 3
65605: ARRAY
65606: ST_TO_ADDR
// y := list [ i ] [ 4 ] ;
65607: LD_ADDR_VAR 0 7
65611: PUSH
65612: LD_VAR 0 3
65616: PUSH
65617: LD_VAR 0 1
65621: ARRAY
65622: PUSH
65623: LD_INT 4
65625: ARRAY
65626: ST_TO_ADDR
// cratesNearbyPoint := GetCratesNearbyXY ( x , y , 12 ) ;
65627: LD_ADDR_VAR 0 9
65631: PUSH
65632: LD_VAR 0 6
65636: PPUSH
65637: LD_VAR 0 7
65641: PPUSH
65642: LD_INT 12
65644: PPUSH
65645: CALL 49059 0 3
65649: ST_TO_ADDR
// if not cratesNearbyPoint then
65650: LD_VAR 0 9
65654: NOT
65655: IFFALSE 65661
// exit ;
65657: POP
65658: POP
65659: GO 66057
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) union UnitFilter ( UnitsInside ( depot ) , [ [ f_not , [ f_hastask ] ] , [ f_or , [ f_class , class_engineer ] , [ f_class , class_apeman_engineer ] ] ] ) ;
65661: LD_ADDR_VAR 0 4
65665: PUSH
65666: LD_INT 22
65668: PUSH
65669: LD_VAR 0 5
65673: PUSH
65674: EMPTY
65675: LIST
65676: LIST
65677: PUSH
65678: LD_INT 3
65680: PUSH
65681: LD_INT 60
65683: PUSH
65684: EMPTY
65685: LIST
65686: PUSH
65687: EMPTY
65688: LIST
65689: LIST
65690: PUSH
65691: LD_INT 2
65693: PUSH
65694: LD_INT 25
65696: PUSH
65697: LD_INT 2
65699: PUSH
65700: EMPTY
65701: LIST
65702: LIST
65703: PUSH
65704: LD_INT 25
65706: PUSH
65707: LD_INT 16
65709: PUSH
65710: EMPTY
65711: LIST
65712: LIST
65713: PUSH
65714: EMPTY
65715: LIST
65716: LIST
65717: LIST
65718: PUSH
65719: EMPTY
65720: LIST
65721: LIST
65722: LIST
65723: PPUSH
65724: CALL_OW 69
65728: PUSH
65729: LD_VAR 0 8
65733: PPUSH
65734: CALL_OW 313
65738: PPUSH
65739: LD_INT 3
65741: PUSH
65742: LD_INT 60
65744: PUSH
65745: EMPTY
65746: LIST
65747: PUSH
65748: EMPTY
65749: LIST
65750: LIST
65751: PUSH
65752: LD_INT 2
65754: PUSH
65755: LD_INT 25
65757: PUSH
65758: LD_INT 2
65760: PUSH
65761: EMPTY
65762: LIST
65763: LIST
65764: PUSH
65765: LD_INT 25
65767: PUSH
65768: LD_INT 16
65770: PUSH
65771: EMPTY
65772: LIST
65773: LIST
65774: PUSH
65775: EMPTY
65776: LIST
65777: LIST
65778: LIST
65779: PUSH
65780: EMPTY
65781: LIST
65782: LIST
65783: PPUSH
65784: CALL_OW 72
65788: UNION
65789: ST_TO_ADDR
// if tmp then
65790: LD_VAR 0 4
65794: IFFALSE 65874
// begin tmp := ShrinkArray ( tmp , 3 ) ;
65796: LD_ADDR_VAR 0 4
65800: PUSH
65801: LD_VAR 0 4
65805: PPUSH
65806: LD_INT 3
65808: PPUSH
65809: CALL 47026 0 2
65813: ST_TO_ADDR
// for j in tmp do
65814: LD_ADDR_VAR 0 2
65818: PUSH
65819: LD_VAR 0 4
65823: PUSH
65824: FOR_IN
65825: IFFALSE 65868
// begin if IsInUnit ( j ) then
65827: LD_VAR 0 2
65831: PPUSH
65832: CALL_OW 310
65836: IFFALSE 65847
// ComExit ( j ) ;
65838: LD_VAR 0 2
65842: PPUSH
65843: CALL 47109 0 1
// AddComCollect ( j , x , y ) ;
65847: LD_VAR 0 2
65851: PPUSH
65852: LD_VAR 0 6
65856: PPUSH
65857: LD_VAR 0 7
65861: PPUSH
65862: CALL_OW 177
// end ;
65866: GO 65824
65868: POP
65869: POP
// exit ;
65870: POP
65871: POP
65872: GO 66057
// end ; tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ] ) ;
65874: LD_ADDR_VAR 0 4
65878: PUSH
65879: LD_INT 22
65881: PUSH
65882: LD_VAR 0 5
65886: PUSH
65887: EMPTY
65888: LIST
65889: LIST
65890: PUSH
65891: LD_INT 2
65893: PUSH
65894: LD_INT 34
65896: PUSH
65897: LD_INT 12
65899: PUSH
65900: EMPTY
65901: LIST
65902: LIST
65903: PUSH
65904: LD_INT 34
65906: PUSH
65907: LD_INT 51
65909: PUSH
65910: EMPTY
65911: LIST
65912: LIST
65913: PUSH
65914: LD_INT 34
65916: PUSH
65917: LD_INT 32
65919: PUSH
65920: EMPTY
65921: LIST
65922: LIST
65923: PUSH
65924: LD_INT 34
65926: PUSH
65927: LD_EXP 63
65931: PUSH
65932: EMPTY
65933: LIST
65934: LIST
65935: PUSH
65936: EMPTY
65937: LIST
65938: LIST
65939: LIST
65940: LIST
65941: LIST
65942: PUSH
65943: EMPTY
65944: LIST
65945: LIST
65946: PPUSH
65947: CALL_OW 69
65951: ST_TO_ADDR
// if tmp then
65952: LD_VAR 0 4
65956: IFFALSE 66053
// begin for j in tmp do
65958: LD_ADDR_VAR 0 2
65962: PUSH
65963: LD_VAR 0 4
65967: PUSH
65968: FOR_IN
65969: IFFALSE 66051
// if GetFuel ( i ) > 20 and not HasTask ( i ) and ( GetControl ( i ) <> control_manual or IsDrivenBy ( i ) ) then
65971: LD_VAR 0 1
65975: PPUSH
65976: CALL_OW 261
65980: PUSH
65981: LD_INT 20
65983: GREATER
65984: PUSH
65985: LD_VAR 0 1
65989: PPUSH
65990: CALL_OW 314
65994: NOT
65995: AND
65996: PUSH
65997: LD_VAR 0 1
66001: PPUSH
66002: CALL_OW 263
66006: PUSH
66007: LD_INT 1
66009: NONEQUAL
66010: PUSH
66011: LD_VAR 0 1
66015: PPUSH
66016: CALL_OW 311
66020: OR
66021: AND
66022: IFFALSE 66049
// begin ComCollect ( j , x , y ) ;
66024: LD_VAR 0 2
66028: PPUSH
66029: LD_VAR 0 6
66033: PPUSH
66034: LD_VAR 0 7
66038: PPUSH
66039: CALL_OW 117
// exit ;
66043: POP
66044: POP
66045: POP
66046: POP
66047: GO 66057
// end ;
66049: GO 65968
66051: POP
66052: POP
// end ; end ;
66053: GO 65474
66055: POP
66056: POP
// end ;
66057: PPOPN 9
66059: END
