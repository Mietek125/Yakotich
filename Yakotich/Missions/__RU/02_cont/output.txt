// starting begin ResetFog ;
   0: CALL_OW 335
// Init ;
   4: CALL 64 0 0
// AnimateTrees ( true ) ;
   8: LD_INT 1
  10: PPUSH
  11: CALL_OW 573
// Randomize ;
  15: CALL_OW 10
// RandomizeAll ;
  19: CALL_OW 11
// InitRussian ;
  23: CALL 6809 0 0
// Czolg ;
  27: CALL 7347 0 0
// Action ;
  31: CALL 7448 0 0
// InitAmerican ;
  35: CALL 2542 0 0
// DebugMode ;
  39: CALL 216 0 0
// SetBName ( AmDep1 , mi ) ;
  43: LD_INT 1
  45: PPUSH
  46: LD_STRING mi
  48: PPUSH
  49: CALL_OW 500
// SetBName ( AmDep2 , ni ) ;
  53: LD_INT 47
  55: PPUSH
  56: LD_STRING ni
  58: PPUSH
  59: CALL_OW 500
// end ;
  63: END
// export YakotichCrew , MietekCrew ; export Yakotich , Mietek , Boris , Vasilij , Michail , Constantin ; export Maksim , Fiodor , Pavel , Zakhar , Aleksiej , Aleksandr , Josif , Stanislav ; export Morozov , Kurin , Grishko , Burlak , Platonov , AmSold ; export KurinTime , MietekTime ; export AmConvoys , AmConvoysVehicles , AmNorthPersonel , AmSouthPersonel ; export AmSoldNorth , AmSciNorth , AmMechNorth , AmEngNorth , AmSoldSouth , AmSciSouth , AmMechSouth , AmEngSouth ; export AmSoldConvoy , AmSciConvoy , AmMechConvoy , AmEngConvoy , AmVehicleConvoy ; export Tank ; export GunCounter ; export debug ; export mission_prefix ; export maksim_scout_ended , maksim_back , turrets_researched , gattling_researched , gun_researched , gun_recycled , second_wave_clear , transport_builded , first_attack_spawned , first_attack_clear , reiforcements_called , kurin_attack_started , end_of_the_mission , passages_touched , riverside_touched ; export livid ; function Init ; begin
  64: LD_INT 0
  66: PPUSH
// mission_prefix := 02_ ;
  67: LD_ADDR_EXP 45
  71: PUSH
  72: LD_STRING 02_
  74: ST_TO_ADDR
// maksim_scout_ended := false ;
  75: LD_ADDR_EXP 46
  79: PUSH
  80: LD_INT 0
  82: ST_TO_ADDR
// maksim_back := false ;
  83: LD_ADDR_EXP 47
  87: PUSH
  88: LD_INT 0
  90: ST_TO_ADDR
// turrets_researched := false ;
  91: LD_ADDR_EXP 48
  95: PUSH
  96: LD_INT 0
  98: ST_TO_ADDR
// gattling_researched := false ;
  99: LD_ADDR_EXP 49
 103: PUSH
 104: LD_INT 0
 106: ST_TO_ADDR
// gun_recycled := false ;
 107: LD_ADDR_EXP 51
 111: PUSH
 112: LD_INT 0
 114: ST_TO_ADDR
// gun_researched := false ;
 115: LD_ADDR_EXP 50
 119: PUSH
 120: LD_INT 0
 122: ST_TO_ADDR
// transport_builded := false ;
 123: LD_ADDR_EXP 53
 127: PUSH
 128: LD_INT 0
 130: ST_TO_ADDR
// first_attack_spawned := false ;
 131: LD_ADDR_EXP 54
 135: PUSH
 136: LD_INT 0
 138: ST_TO_ADDR
// first_attack_clear := false ;
 139: LD_ADDR_EXP 55
 143: PUSH
 144: LD_INT 0
 146: ST_TO_ADDR
// reiforcements_called := false ;
 147: LD_ADDR_EXP 56
 151: PUSH
 152: LD_INT 0
 154: ST_TO_ADDR
// kurin_attack_started := false ;
 155: LD_ADDR_EXP 57
 159: PUSH
 160: LD_INT 0
 162: ST_TO_ADDR
// end_of_the_mission := false ;
 163: LD_ADDR_EXP 58
 167: PUSH
 168: LD_INT 0
 170: ST_TO_ADDR
// passages_touched := false ;
 171: LD_ADDR_EXP 59
 175: PUSH
 176: LD_INT 0
 178: ST_TO_ADDR
// riverside_touched := false ;
 179: LD_ADDR_EXP 60
 183: PUSH
 184: LD_INT 0
 186: ST_TO_ADDR
// MietekTime := 5 5$0 ;
 187: LD_ADDR_EXP 24
 191: PUSH
 192: LD_INT 10500
 194: ST_TO_ADDR
// KurinTime := 30 30$0 ;
 195: LD_ADDR_EXP 23
 199: PUSH
 200: LD_INT 63000
 202: ST_TO_ADDR
// GunCounter := 0 ;
 203: LD_ADDR_EXP 43
 207: PUSH
 208: LD_INT 0
 210: ST_TO_ADDR
// end ;
 211: LD_VAR 0 1
 215: RET
// function DebugMode ; var i ; begin
 216: LD_INT 0
 218: PPUSH
 219: PPUSH
// if not debug then
 220: LD_EXP 44
 224: NOT
 225: IFFALSE 229
// exit ;
 227: GO 248
// Difficulty := 3 ;
 229: LD_ADDR_OWVAR 67
 233: PUSH
 234: LD_INT 3
 236: ST_TO_ADDR
// TurnFogOff ( ) ;
 237: CALL_OW 537
// FogOff ( 3 ) ;
 241: LD_INT 3
 243: PPUSH
 244: CALL_OW 344
// end ; end_of_file
 248: LD_VAR 0 1
 252: RET
// export function PrepareSolBun ( skill , b ) ; var un , dir ; begin
 253: LD_INT 0
 255: PPUSH
 256: PPUSH
 257: PPUSH
// uc_side := GetSide ( b ) ;
 258: LD_ADDR_OWVAR 20
 262: PUSH
 263: LD_VAR 0 2
 267: PPUSH
 268: CALL_OW 255
 272: ST_TO_ADDR
// uc_nation := GetNation ( b ) ;
 273: LD_ADDR_OWVAR 21
 277: PUSH
 278: LD_VAR 0 2
 282: PPUSH
 283: CALL_OW 248
 287: ST_TO_ADDR
// dir := GetDir ( b ) - 3 ;
 288: LD_ADDR_VAR 0 5
 292: PUSH
 293: LD_VAR 0 2
 297: PPUSH
 298: CALL_OW 254
 302: PUSH
 303: LD_INT 3
 305: MINUS
 306: ST_TO_ADDR
// if dir < 0 then
 307: LD_VAR 0 5
 311: PUSH
 312: LD_INT 0
 314: LESS
 315: IFFALSE 331
// dir := 6 + dir ;
 317: LD_ADDR_VAR 0 5
 321: PUSH
 322: LD_INT 6
 324: PUSH
 325: LD_VAR 0 5
 329: PLUS
 330: ST_TO_ADDR
// un := CreateHuman ;
 331: LD_ADDR_VAR 0 4
 335: PUSH
 336: CALL_OW 44
 340: ST_TO_ADDR
// SetDir ( un , dir ) ;
 341: LD_VAR 0 4
 345: PPUSH
 346: LD_VAR 0 5
 350: PPUSH
 351: CALL_OW 233
// PlaceHumanInUnit ( un , b ) ;
 355: LD_VAR 0 4
 359: PPUSH
 360: LD_VAR 0 2
 364: PPUSH
 365: CALL_OW 52
// end ;
 369: LD_VAR 0 3
 373: RET
// export function GetCountOfBuildingsInBase ( base , btype ) ; var i , tmp ; begin
 374: LD_INT 0
 376: PPUSH
 377: PPUSH
 378: PPUSH
// result := 0 ;
 379: LD_ADDR_VAR 0 3
 383: PUSH
 384: LD_INT 0
 386: ST_TO_ADDR
// tmp := FilterAllUnits ( [ f_btype , btype ] ) ;
 387: LD_ADDR_VAR 0 5
 391: PUSH
 392: LD_INT 30
 394: PUSH
 395: LD_VAR 0 2
 399: PUSH
 400: EMPTY
 401: LIST
 402: LIST
 403: PPUSH
 404: CALL_OW 69
 408: ST_TO_ADDR
// if not base or not tmp then
 409: LD_VAR 0 1
 413: NOT
 414: PUSH
 415: LD_VAR 0 5
 419: NOT
 420: OR
 421: IFFALSE 425
// exit ;
 423: GO 473
// for i in tmp do
 425: LD_ADDR_VAR 0 4
 429: PUSH
 430: LD_VAR 0 5
 434: PUSH
 435: FOR_IN
 436: IFFALSE 471
// if GetBase ( i ) = base then
 438: LD_VAR 0 4
 442: PPUSH
 443: CALL_OW 274
 447: PUSH
 448: LD_VAR 0 1
 452: EQUAL
 453: IFFALSE 469
// result := result + 1 ;
 455: LD_ADDR_VAR 0 3
 459: PUSH
 460: LD_VAR 0 3
 464: PUSH
 465: LD_INT 1
 467: PLUS
 468: ST_TO_ADDR
 469: GO 435
 471: POP
 472: POP
// end ;
 473: LD_VAR 0 3
 477: RET
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 478: LD_EXP 57
 482: PUSH
 483: LD_INT 0
 485: EQUAL
 486: PUSH
 487: LD_INT 17
 489: PPUSH
 490: LD_INT 22
 492: PUSH
 493: LD_INT 3
 495: PUSH
 496: EMPTY
 497: LIST
 498: LIST
 499: PUSH
 500: LD_INT 2
 502: PUSH
 503: LD_INT 21
 505: PUSH
 506: LD_INT 1
 508: PUSH
 509: EMPTY
 510: LIST
 511: LIST
 512: PUSH
 513: LD_INT 21
 515: PUSH
 516: LD_INT 2
 518: PUSH
 519: EMPTY
 520: LIST
 521: LIST
 522: PUSH
 523: EMPTY
 524: LIST
 525: LIST
 526: LIST
 527: PUSH
 528: EMPTY
 529: LIST
 530: LIST
 531: PPUSH
 532: CALL_OW 70
 536: PUSH
 537: LD_INT 0
 539: GREATER
 540: AND
 541: IFFALSE 649
 543: GO 545
 545: DISABLE
 546: LD_INT 0
 548: PPUSH
// begin enable ;
 549: ENABLE
// for unit in FilterUnitsInArea ( DontEnterMiddle , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 550: LD_ADDR_VAR 0 1
 554: PUSH
 555: LD_INT 17
 557: PPUSH
 558: LD_INT 22
 560: PUSH
 561: LD_INT 3
 563: PUSH
 564: EMPTY
 565: LIST
 566: LIST
 567: PUSH
 568: LD_INT 2
 570: PUSH
 571: LD_INT 21
 573: PUSH
 574: LD_INT 1
 576: PUSH
 577: EMPTY
 578: LIST
 579: LIST
 580: PUSH
 581: LD_INT 21
 583: PUSH
 584: LD_INT 2
 586: PUSH
 587: EMPTY
 588: LIST
 589: LIST
 590: PUSH
 591: EMPTY
 592: LIST
 593: LIST
 594: LIST
 595: PUSH
 596: EMPTY
 597: LIST
 598: LIST
 599: PPUSH
 600: CALL_OW 70
 604: PUSH
 605: FOR_IN
 606: IFFALSE 647
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 608: LD_VAR 0 1
 612: PPUSH
 613: LD_VAR 0 1
 617: PPUSH
 618: CALL_OW 250
 622: PUSH
 623: LD_INT 5
 625: PLUS
 626: PPUSH
 627: LD_VAR 0 1
 631: PPUSH
 632: CALL_OW 251
 636: PUSH
 637: LD_INT 5
 639: PLUS
 640: PPUSH
 641: CALL_OW 111
// end ;
 645: GO 605
 647: POP
 648: POP
// end ;
 649: PPOPN 1
 651: END
// every 1 trigger kurin_attack_started = false and FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) > 0 do var unit ;
 652: LD_EXP 57
 656: PUSH
 657: LD_INT 0
 659: EQUAL
 660: PUSH
 661: LD_INT 18
 663: PPUSH
 664: LD_INT 22
 666: PUSH
 667: LD_INT 3
 669: PUSH
 670: EMPTY
 671: LIST
 672: LIST
 673: PUSH
 674: LD_INT 2
 676: PUSH
 677: LD_INT 21
 679: PUSH
 680: LD_INT 1
 682: PUSH
 683: EMPTY
 684: LIST
 685: LIST
 686: PUSH
 687: LD_INT 21
 689: PUSH
 690: LD_INT 2
 692: PUSH
 693: EMPTY
 694: LIST
 695: LIST
 696: PUSH
 697: EMPTY
 698: LIST
 699: LIST
 700: LIST
 701: PUSH
 702: EMPTY
 703: LIST
 704: LIST
 705: PPUSH
 706: CALL_OW 70
 710: PUSH
 711: LD_INT 0
 713: GREATER
 714: AND
 715: IFFALSE 823
 717: GO 719
 719: DISABLE
 720: LD_INT 0
 722: PPUSH
// begin enable ;
 723: ENABLE
// for unit in FilterUnitsInArea ( DontEnterNorth , [ [ f_side , 3 ] , [ f_or , [ f_type , unit_human ] , [ f_type , unit_vehicle ] ] ] ) do
 724: LD_ADDR_VAR 0 1
 728: PUSH
 729: LD_INT 18
 731: PPUSH
 732: LD_INT 22
 734: PUSH
 735: LD_INT 3
 737: PUSH
 738: EMPTY
 739: LIST
 740: LIST
 741: PUSH
 742: LD_INT 2
 744: PUSH
 745: LD_INT 21
 747: PUSH
 748: LD_INT 1
 750: PUSH
 751: EMPTY
 752: LIST
 753: LIST
 754: PUSH
 755: LD_INT 21
 757: PUSH
 758: LD_INT 2
 760: PUSH
 761: EMPTY
 762: LIST
 763: LIST
 764: PUSH
 765: EMPTY
 766: LIST
 767: LIST
 768: LIST
 769: PUSH
 770: EMPTY
 771: LIST
 772: LIST
 773: PPUSH
 774: CALL_OW 70
 778: PUSH
 779: FOR_IN
 780: IFFALSE 821
// begin ComMoveXY ( unit , GetX ( unit ) + 5 , GetY ( unit ) + 5 ) ;
 782: LD_VAR 0 1
 786: PPUSH
 787: LD_VAR 0 1
 791: PPUSH
 792: CALL_OW 250
 796: PUSH
 797: LD_INT 5
 799: PLUS
 800: PPUSH
 801: LD_VAR 0 1
 805: PPUSH
 806: CALL_OW 251
 810: PUSH
 811: LD_INT 5
 813: PLUS
 814: PPUSH
 815: CALL_OW 111
// end ;
 819: GO 779
 821: POP
 822: POP
// end ;
 823: PPOPN 1
 825: END
// every 1 trigger IsSelected ( Serpent ) do
 826: LD_INT 215
 828: PPUSH
 829: CALL_OW 306
 833: IFFALSE 937
 835: GO 837
 837: DISABLE
// begin SerpentExp ( [ 1 , 2 , 3 , 4 ] ) ;
 838: LD_INT 1
 840: PUSH
 841: LD_INT 2
 843: PUSH
 844: LD_INT 3
 846: PUSH
 847: LD_INT 4
 849: PUSH
 850: EMPTY
 851: LIST
 852: LIST
 853: LIST
 854: LIST
 855: PPUSH
 856: CALL 938 0 1
// Wait ( 0 0$05 ) ;
 860: LD_INT 175
 862: PPUSH
 863: CALL_OW 67
// Say ( Serpent , 2Langu-Sikret ) ;
 867: LD_INT 215
 869: PPUSH
 870: LD_STRING 2Langu-Sikret
 872: PPUSH
 873: CALL_OW 88
// TeleportUnit ( Serpent , 5 , 4 , 100 , true ) ;
 877: LD_INT 215
 879: PPUSH
 880: LD_INT 5
 882: PPUSH
 883: LD_INT 4
 885: PPUSH
 886: LD_INT 100
 888: PPUSH
 889: LD_INT 1
 891: PPUSH
 892: CALL_OW 483
// Wait ( 0 0$05 ) ;
 896: LD_INT 175
 898: PPUSH
 899: CALL_OW 67
// RemoveUnit ( Serpent ) ;
 903: LD_INT 215
 905: PPUSH
 906: CALL_OW 64
// SaveVariable ( 1 , SerpentSaved ) ;
 910: LD_INT 1
 912: PPUSH
 913: LD_STRING SerpentSaved
 915: PPUSH
 916: CALL_OW 39
// SaveCharacters ( Serpent , Langu ) ;
 920: LD_INT 215
 922: PPUSH
 923: LD_STRING Langu
 925: PPUSH
 926: CALL_OW 38
// SetAchievement ( ACH_SERPENT ) ;
 930: LD_STRING ACH_SERPENT
 932: PPUSH
 933: CALL_OW 543
// end ;
 937: END
// export function SerpentExp ( q ) ; var dec , q1 ; begin
 938: LD_INT 0
 940: PPUSH
 941: PPUSH
 942: PPUSH
// dec = SelectiveQuery ( SerpentQuery , q ) ;
 943: LD_ADDR_VAR 0 3
 947: PUSH
 948: LD_STRING SerpentQuery
 950: PPUSH
 951: LD_VAR 0 1
 955: PPUSH
 956: CALL_OW 98
 960: ST_TO_ADDR
// case dec of 1 :
 961: LD_VAR 0 3
 965: PUSH
 966: LD_INT 1
 968: DOUBLE
 969: EQUAL
 970: IFTRUE 974
 972: GO 992
 974: POP
// begin AddExperience_NoLimit ( Yakotich , 1 , 1000 ) ;
 975: LD_EXP 3
 979: PPUSH
 980: LD_INT 1
 982: PPUSH
 983: LD_INT 1000
 985: PPUSH
 986: CALL_OW 591
// end ; 2 :
 990: GO 1071
 992: LD_INT 2
 994: DOUBLE
 995: EQUAL
 996: IFTRUE 1000
 998: GO 1018
1000: POP
// begin AddExperience_NoLimit ( Yakotich , 2 , 1000 ) ;
1001: LD_EXP 3
1005: PPUSH
1006: LD_INT 2
1008: PPUSH
1009: LD_INT 1000
1011: PPUSH
1012: CALL_OW 591
// end ; 3 :
1016: GO 1071
1018: LD_INT 3
1020: DOUBLE
1021: EQUAL
1022: IFTRUE 1026
1024: GO 1044
1026: POP
// begin AddExperience_NoLimit ( Yakotich , 3 , 1000 ) ;
1027: LD_EXP 3
1031: PPUSH
1032: LD_INT 3
1034: PPUSH
1035: LD_INT 1000
1037: PPUSH
1038: CALL_OW 591
// end ; 4 :
1042: GO 1071
1044: LD_INT 4
1046: DOUBLE
1047: EQUAL
1048: IFTRUE 1052
1050: GO 1070
1052: POP
// begin AddExperience_NoLimit ( Yakotich , 4 , 1000 ) ;
1053: LD_EXP 3
1057: PPUSH
1058: LD_INT 4
1060: PPUSH
1061: LD_INT 1000
1063: PPUSH
1064: CALL_OW 591
// end ; end ;
1068: GO 1071
1070: POP
// end ;
1071: LD_VAR 0 2
1075: RET
// every 0 0$1 trigger IsDead ( Yakotich ) do
1076: LD_EXP 3
1080: PPUSH
1081: CALL_OW 301
1085: IFFALSE 1097
1087: GO 1089
1089: DISABLE
// begin YouLost ( YakotichDead ) ;
1090: LD_STRING YakotichDead
1092: PPUSH
1093: CALL_OW 104
// end ;
1097: END
// every 0 0$1 trigger IsDead ( Mietek ) do
1098: LD_EXP 4
1102: PPUSH
1103: CALL_OW 301
1107: IFFALSE 1119
1109: GO 1111
1111: DISABLE
// begin YouLost ( MietekDead ) ;
1112: LD_STRING MietekDead
1114: PPUSH
1115: CALL_OW 104
// end ;
1119: END
// on UnitDestroyed ( un ) do begin if un in FilterAllUnits ( [ [ f_side , 3 ] , [ f_not , [ f_nation , 0 ] ] , [ f_type , unit_human ] ] ) then
1120: LD_VAR 0 1
1124: PUSH
1125: LD_INT 22
1127: PUSH
1128: LD_INT 3
1130: PUSH
1131: EMPTY
1132: LIST
1133: LIST
1134: PUSH
1135: LD_INT 3
1137: PUSH
1138: LD_INT 23
1140: PUSH
1141: LD_INT 0
1143: PUSH
1144: EMPTY
1145: LIST
1146: LIST
1147: PUSH
1148: EMPTY
1149: LIST
1150: LIST
1151: PUSH
1152: LD_INT 21
1154: PUSH
1155: LD_INT 1
1157: PUSH
1158: EMPTY
1159: LIST
1160: LIST
1161: PUSH
1162: EMPTY
1163: LIST
1164: LIST
1165: LIST
1166: PPUSH
1167: CALL_OW 69
1171: IN
1172: IFFALSE 1181
// YouLost ( PeopleDead ) ;
1174: LD_STRING PeopleDead
1176: PPUSH
1177: CALL_OW 104
// end ;
1181: PPOPN 1
1183: END
// every 0 0$1 trigger FilterUnitsInArea ( OmikronArea , [ f_or , [ f_side , 1 ] , [ f_side , 4 ] ] ) do
1184: LD_INT 15
1186: PPUSH
1187: LD_INT 2
1189: PUSH
1190: LD_INT 22
1192: PUSH
1193: LD_INT 1
1195: PUSH
1196: EMPTY
1197: LIST
1198: LIST
1199: PUSH
1200: LD_INT 22
1202: PUSH
1203: LD_INT 4
1205: PUSH
1206: EMPTY
1207: LIST
1208: LIST
1209: PUSH
1210: EMPTY
1211: LIST
1212: LIST
1213: LIST
1214: PPUSH
1215: CALL_OW 70
1219: IFFALSE 1231
1221: GO 1223
1223: DISABLE
// begin YouLost ( ConvoysMadeIt ) ;
1224: LD_STRING ConvoysMadeIt
1226: PPUSH
1227: CALL_OW 104
// end ;
1231: END
// every 0 0$1 trigger maksim_back = true do
1232: LD_EXP 47
1236: PUSH
1237: LD_INT 1
1239: EQUAL
1240: IFFALSE 1249
1242: GO 1244
1244: DISABLE
// begin AmAttacks ;
1245: CALL 3951 0 0
// end ;
1249: END
// export function MaksimScout ; begin
1250: LD_INT 0
1252: PPUSH
// SetSide ( Maksim , 6 ) ;
1253: LD_EXP 9
1257: PPUSH
1258: LD_INT 6
1260: PPUSH
1261: CALL_OW 235
// ComMoveToArea ( Maksim , MaksimStop1 ) ;
1265: LD_EXP 9
1269: PPUSH
1270: LD_INT 5
1272: PPUSH
1273: CALL_OW 113
// end ;
1277: LD_VAR 0 1
1281: RET
// every 1 trigger IsInArea ( Maksim , MaksimStop1 ) do
1282: LD_EXP 9
1286: PPUSH
1287: LD_INT 5
1289: PPUSH
1290: CALL_OW 308
1294: IFFALSE 1327
1296: GO 1298
1298: DISABLE
// begin ComHold ( Maksim ) ;
1299: LD_EXP 9
1303: PPUSH
1304: CALL_OW 140
// Wait ( 0 0$10 ) ;
1308: LD_INT 350
1310: PPUSH
1311: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop2 ) ;
1315: LD_EXP 9
1319: PPUSH
1320: LD_INT 6
1322: PPUSH
1323: CALL_OW 113
// end ;
1327: END
// every 1 trigger IsInArea ( Maksim , MaksimStop2 ) do
1328: LD_EXP 9
1332: PPUSH
1333: LD_INT 6
1335: PPUSH
1336: CALL_OW 308
1340: IFFALSE 1364
1342: GO 1344
1344: DISABLE
// begin Wait ( 0 0$10 ) ;
1345: LD_INT 350
1347: PPUSH
1348: CALL_OW 67
// ComMoveToArea ( Maksim , MaksimStop3 ) ;
1352: LD_EXP 9
1356: PPUSH
1357: LD_INT 7
1359: PPUSH
1360: CALL_OW 113
// end ;
1364: END
// every 1 trigger IsInArea ( Maksim , MaksimStop3 ) do
1365: LD_EXP 9
1369: PPUSH
1370: LD_INT 7
1372: PPUSH
1373: CALL_OW 308
1377: IFFALSE 1411
1379: GO 1381
1381: DISABLE
// begin Wait ( 0 0$10 ) ;
1382: LD_INT 350
1384: PPUSH
1385: CALL_OW 67
// maksim_scout_ended = true ;
1389: LD_ADDR_EXP 46
1393: PUSH
1394: LD_INT 1
1396: ST_TO_ADDR
// ComMoveUnit ( Maksim , Yakotich ) ;
1397: LD_EXP 9
1401: PPUSH
1402: LD_EXP 3
1406: PPUSH
1407: CALL_OW 112
// end ;
1411: END
// every 0 0$1 trigger maksim_back do
1412: LD_EXP 47
1416: IFFALSE 1470
1418: GO 1420
1420: DISABLE
// begin enable ;
1421: ENABLE
// if KurinTime then
1422: LD_EXP 23
1426: IFFALSE 1461
// begin KurinTime := KurinTime - 0 0$1 ;
1428: LD_ADDR_EXP 23
1432: PUSH
1433: LD_EXP 23
1437: PUSH
1438: LD_INT 35
1440: MINUS
1441: ST_TO_ADDR
// display_strings := [ #KurinAttack , KurinTime ] ;
1442: LD_ADDR_OWVAR 47
1446: PUSH
1447: LD_STRING #KurinAttack
1449: PUSH
1450: LD_EXP 23
1454: PUSH
1455: EMPTY
1456: LIST
1457: LIST
1458: ST_TO_ADDR
// end else
1459: GO 1470
// begin display_strings :=  ;
1461: LD_ADDR_OWVAR 47
1465: PUSH
1466: LD_STRING 
1468: ST_TO_ADDR
// disable ;
1469: DISABLE
// end ; end ;
1470: END
// every 0 0$1 trigger first_attack_clear do
1471: LD_EXP 55
1475: IFFALSE 1535
1477: GO 1479
1479: DISABLE
// begin enable ;
1480: ENABLE
// if MietekTime then
1481: LD_EXP 24
1485: IFFALSE 1526
// begin MietekTime := MietekTime - 0 0$1 ;
1487: LD_ADDR_EXP 24
1491: PUSH
1492: LD_EXP 24
1496: PUSH
1497: LD_INT 35
1499: MINUS
1500: ST_TO_ADDR
// display_strings := display_strings ^ [ #MietekForces , MietekTime ] ;
1501: LD_ADDR_OWVAR 47
1505: PUSH
1506: LD_OWVAR 47
1510: PUSH
1511: LD_STRING #MietekForces
1513: PUSH
1514: LD_EXP 24
1518: PUSH
1519: EMPTY
1520: LIST
1521: LIST
1522: ADD
1523: ST_TO_ADDR
// end else
1524: GO 1535
// begin display_strings :=  ;
1526: LD_ADDR_OWVAR 47
1530: PUSH
1531: LD_STRING 
1533: ST_TO_ADDR
// disable ;
1534: DISABLE
// end ; end ; end_of_file
1535: END
// export RuDep ; on BuildingStarted ( building , builder ) do begin if GetSide ( building ) = 3 and GetBType ( building ) = b_depot then
1536: LD_VAR 0 1
1540: PPUSH
1541: CALL_OW 255
1545: PUSH
1546: LD_INT 3
1548: EQUAL
1549: PUSH
1550: LD_VAR 0 1
1554: PPUSH
1555: CALL_OW 266
1559: PUSH
1560: LD_INT 0
1562: EQUAL
1563: AND
1564: IFFALSE 1589
// begin RuDep := building ;
1566: LD_ADDR_EXP 62
1570: PUSH
1571: LD_VAR 0 1
1575: ST_TO_ADDR
// SetRestrict ( b_depot , 3 , false ) ;
1576: LD_INT 0
1578: PPUSH
1579: LD_INT 3
1581: PPUSH
1582: LD_INT 0
1584: PPUSH
1585: CALL_OW 324
// end ; end ;
1589: PPOPN 2
1591: END
// on VehicleConstructed ( v , f ) do begin if GetSide ( v ) = 3 and GetType ( v ) = unit_vehicle and GetWeapon ( v ) = ru_gun then
1592: LD_VAR 0 1
1596: PPUSH
1597: CALL_OW 255
1601: PUSH
1602: LD_INT 3
1604: EQUAL
1605: PUSH
1606: LD_VAR 0 1
1610: PPUSH
1611: CALL_OW 247
1615: PUSH
1616: LD_INT 2
1618: EQUAL
1619: AND
1620: PUSH
1621: LD_VAR 0 1
1625: PPUSH
1626: CALL_OW 264
1630: PUSH
1631: LD_INT 44
1633: EQUAL
1634: AND
1635: IFFALSE 1651
// begin GunCounter := GunCounter + 1 ;
1637: LD_ADDR_EXP 43
1641: PUSH
1642: LD_EXP 43
1646: PUSH
1647: LD_INT 1
1649: PLUS
1650: ST_TO_ADDR
// end ; end ;
1651: PPOPN 2
1653: END
// on BuildingComplete ( b ) do begin if GetSide ( b ) = 3 and GetBType ( b ) = b_depot then
1654: LD_VAR 0 1
1658: PPUSH
1659: CALL_OW 255
1663: PUSH
1664: LD_INT 3
1666: EQUAL
1667: PUSH
1668: LD_VAR 0 1
1672: PPUSH
1673: CALL_OW 266
1677: PUSH
1678: LD_INT 0
1680: EQUAL
1681: AND
1682: IFFALSE 1736
// begin DialogueOn ;
1684: CALL_OW 6
// Say ( Boris , 2Bor-01 ) ;
1688: LD_EXP 5
1692: PPUSH
1693: LD_STRING 2Bor-01
1695: PPUSH
1696: CALL_OW 88
// Say ( Vasilij , 2Vas-05 ) ;
1700: LD_EXP 6
1704: PPUSH
1705: LD_STRING 2Vas-05
1707: PPUSH
1708: CALL_OW 88
// ChangeMissionObjectives ( transport ) ;
1712: LD_STRING transport
1714: PPUSH
1715: CALL_OW 337
// SetTech ( 83 , 3 , 1 ) ;
1719: LD_INT 83
1721: PPUSH
1722: LD_INT 3
1724: PPUSH
1725: LD_INT 1
1727: PPUSH
1728: CALL_OW 322
// DialogueOff ;
1732: CALL_OW 7
// end ; if GetSide ( b ) = 3 and GetBType ( b ) = b_lab then
1736: LD_VAR 0 1
1740: PPUSH
1741: CALL_OW 255
1745: PUSH
1746: LD_INT 3
1748: EQUAL
1749: PUSH
1750: LD_VAR 0 1
1754: PPUSH
1755: CALL_OW 266
1759: PUSH
1760: LD_INT 6
1762: EQUAL
1763: AND
1764: IFFALSE 1822
// begin Say ( Vasilij , 2Vas-01 ) ;
1766: LD_EXP 6
1770: PPUSH
1771: LD_STRING 2Vas-01
1773: PPUSH
1774: CALL_OW 88
// Say ( Vasilij , 2Vas-02 ) ;
1778: LD_EXP 6
1782: PPUSH
1783: LD_STRING 2Vas-02
1785: PPUSH
1786: CALL_OW 88
// Say ( Yakotich , 2Yak-14 ) ;
1790: LD_EXP 3
1794: PPUSH
1795: LD_STRING 2Yak-14
1797: PPUSH
1798: CALL_OW 88
// ChangeMissionObjectives ( gattling ) ;
1802: LD_STRING gattling
1804: PPUSH
1805: CALL_OW 337
// SetTech ( 69 , 3 , 1 ) ;
1809: LD_INT 69
1811: PPUSH
1812: LD_INT 3
1814: PPUSH
1815: LD_INT 1
1817: PPUSH
1818: CALL_OW 322
// end ; end ;
1822: PPOPN 1
1824: END
// on VehicleRecycled ( BuildingID , VehicleID , Side , Nation , X , Y , Direction , Chassis , Controller , Engine , Weapon ) do begin if Side = 3 and Nation = 1 and Weapon in [ 3 , 5 ] and gun_recycled = false then
1825: LD_VAR 0 3
1829: PUSH
1830: LD_INT 3
1832: EQUAL
1833: PUSH
1834: LD_VAR 0 4
1838: PUSH
1839: LD_INT 1
1841: EQUAL
1842: AND
1843: PUSH
1844: LD_VAR 0 11
1848: PUSH
1849: LD_INT 3
1851: PUSH
1852: LD_INT 5
1854: PUSH
1855: EMPTY
1856: LIST
1857: LIST
1858: IN
1859: AND
1860: PUSH
1861: LD_EXP 51
1865: PUSH
1866: LD_INT 0
1868: EQUAL
1869: AND
1870: IFFALSE 1918
// begin gun_recycled = true ;
1872: LD_ADDR_EXP 51
1876: PUSH
1877: LD_INT 1
1879: ST_TO_ADDR
// Say ( Stanislav , 2Stan-04 ) ;
1880: LD_EXP 16
1884: PPUSH
1885: LD_STRING 2Stan-04
1887: PPUSH
1888: CALL_OW 88
// SetTech ( 39 , 3 , 1 ) ;
1892: LD_INT 39
1894: PPUSH
1895: LD_INT 3
1897: PPUSH
1898: LD_INT 1
1900: PPUSH
1901: CALL_OW 322
// SetRestrict ( 17 , 3 , 1 ) ;
1905: LD_INT 17
1907: PPUSH
1908: LD_INT 3
1910: PPUSH
1911: LD_INT 1
1913: PPUSH
1914: CALL_OW 324
// end ; end ;
1918: PPOPN 11
1920: END
// on Contact ( side1 , side2 ) do begin if ( ( side1 = 4 and side2 = 3 ) or ( side1 = 3 and side2 = 4 ) ) and reiforcements_called = false then
1921: LD_VAR 0 1
1925: PUSH
1926: LD_INT 4
1928: EQUAL
1929: PUSH
1930: LD_VAR 0 2
1934: PUSH
1935: LD_INT 3
1937: EQUAL
1938: AND
1939: PUSH
1940: LD_VAR 0 1
1944: PUSH
1945: LD_INT 3
1947: EQUAL
1948: PUSH
1949: LD_VAR 0 2
1953: PUSH
1954: LD_INT 4
1956: EQUAL
1957: AND
1958: OR
1959: PUSH
1960: LD_EXP 56
1964: PUSH
1965: LD_INT 0
1967: EQUAL
1968: AND
1969: IFFALSE 2073
// begin reiforcements_called := true ;
1971: LD_ADDR_EXP 56
1975: PUSH
1976: LD_INT 1
1978: ST_TO_ADDR
// Say ( Yakotich , 2Yak-23 ) ;
1979: LD_EXP 3
1983: PPUSH
1984: LD_STRING 2Yak-23
1986: PPUSH
1987: CALL_OW 88
// Wait ( 0 0$10 ) ;
1991: LD_INT 350
1993: PPUSH
1994: CALL_OW 67
// SayRadio ( Yakotich , 2Yak-Reinforcements ) ;
1998: LD_EXP 3
2002: PPUSH
2003: LD_STRING 2Yak-Reinforcements
2005: PPUSH
2006: CALL_OW 94
// SayRadio ( Morozov , 2Moro-Reinforcements ) ;
2010: LD_EXP 17
2014: PPUSH
2015: LD_STRING 2Moro-Reinforcements
2017: PPUSH
2018: CALL_OW 94
// Wait ( 0 0$10 ) ;
2022: LD_INT 350
2024: PPUSH
2025: CALL_OW 67
// SayRadio ( Mietek , 2Ryn-04 ) ;
2029: LD_EXP 4
2033: PPUSH
2034: LD_STRING 2Ryn-04
2036: PPUSH
2037: CALL_OW 94
// SayRadio ( Mietek , 2Ryn-05 ) ;
2041: LD_EXP 4
2045: PPUSH
2046: LD_STRING 2Ryn-05
2048: PPUSH
2049: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-24 ) ;
2053: LD_EXP 3
2057: PPUSH
2058: LD_STRING 2Yak-24
2060: PPUSH
2061: CALL_OW 94
// first_attack_clear = true ;
2065: LD_ADDR_EXP 55
2069: PUSH
2070: LD_INT 1
2072: ST_TO_ADDR
// end ; end ;
2073: PPOPN 2
2075: END
// every 0 0$1 trigger Researched ( 3 , 69 ) do
2076: LD_INT 3
2078: PPUSH
2079: LD_INT 69
2081: PPUSH
2082: CALL_OW 325
2086: IFFALSE 2130
2088: GO 2090
2090: DISABLE
// begin Say ( Vasilij , 2Vas-03 ) ;
2091: LD_EXP 6
2095: PPUSH
2096: LD_STRING 2Vas-03
2098: PPUSH
2099: CALL_OW 88
// Say ( Vasilij , 2Vas-04 ) ;
2103: LD_EXP 6
2107: PPUSH
2108: LD_STRING 2Vas-04
2110: PPUSH
2111: CALL_OW 88
// gattling_researched = true ;
2115: LD_ADDR_EXP 49
2119: PUSH
2120: LD_INT 1
2122: ST_TO_ADDR
// ChangeMissionObjectives ( gattling-2 ) ;
2123: LD_STRING gattling-2
2125: PPUSH
2126: CALL_OW 337
// end ;
2130: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
2131: LD_INT 3
2133: PPUSH
2134: LD_INT 90
2136: PPUSH
2137: CALL_OW 325
2141: IFFALSE 2161
2143: GO 2145
2145: DISABLE
// begin turrets_researched = true ;
2146: LD_ADDR_EXP 48
2150: PUSH
2151: LD_INT 1
2153: ST_TO_ADDR
// ChangeMissionObjectives ( turret-2 ) ;
2154: LD_STRING turret-2
2156: PPUSH
2157: CALL_OW 337
// end ;
2161: END
// every 0 0$1 trigger FilterAllUnits ( [ [ f_side , 3 ] , [ f_type , unit_vehicle ] , [ f_or , [ f_weapon , 89 ] , [ f_weapon , 51 ] ] ] ) do
2162: LD_INT 22
2164: PUSH
2165: LD_INT 3
2167: PUSH
2168: EMPTY
2169: LIST
2170: LIST
2171: PUSH
2172: LD_INT 21
2174: PUSH
2175: LD_INT 2
2177: PUSH
2178: EMPTY
2179: LIST
2180: LIST
2181: PUSH
2182: LD_INT 2
2184: PUSH
2185: LD_INT 34
2187: PUSH
2188: LD_INT 89
2190: PUSH
2191: EMPTY
2192: LIST
2193: LIST
2194: PUSH
2195: LD_INT 34
2197: PUSH
2198: LD_INT 51
2200: PUSH
2201: EMPTY
2202: LIST
2203: LIST
2204: PUSH
2205: EMPTY
2206: LIST
2207: LIST
2208: LIST
2209: PUSH
2210: EMPTY
2211: LIST
2212: LIST
2213: LIST
2214: PPUSH
2215: CALL_OW 69
2219: IFFALSE 2239
2221: GO 2223
2223: DISABLE
// begin ChangeMissionObjectives ( transport-2 ) ;
2224: LD_STRING transport-2
2226: PPUSH
2227: CALL_OW 337
// transport_builded = true ;
2231: LD_ADDR_EXP 53
2235: PUSH
2236: LD_INT 1
2238: ST_TO_ADDR
// end ;
2239: END
// every 0 0$1 trigger Researched ( 3 , 39 ) do
2240: LD_INT 3
2242: PPUSH
2243: LD_INT 39
2245: PPUSH
2246: CALL_OW 325
2250: IFFALSE 2306
2252: GO 2254
2254: DISABLE
// begin Say ( Stanislav , 2Stan-05 ) ;
2255: LD_EXP 16
2259: PPUSH
2260: LD_STRING 2Stan-05
2262: PPUSH
2263: CALL_OW 88
// Say ( Stanislav , 2Stan-06 ) ;
2267: LD_EXP 16
2271: PPUSH
2272: LD_STRING 2Stan-06
2274: PPUSH
2275: CALL_OW 88
// Say ( Yakotich , 2Yak-Stan-02 ) ;
2279: LD_EXP 3
2283: PPUSH
2284: LD_STRING 2Yak-Stan-02
2286: PPUSH
2287: CALL_OW 88
// gun_researched = true ;
2291: LD_ADDR_EXP 50
2295: PUSH
2296: LD_INT 1
2298: ST_TO_ADDR
// ChangeMissionObjectives ( gun-2 ) ;
2299: LD_STRING gun-2
2301: PPUSH
2302: CALL_OW 337
// end ;
2306: END
// every 0 0$1 trigger IsInArea ( FilterAllUnits ( [ [ f_side , 4 ] ] ) , DontEnterAchivArea ) do
2307: LD_INT 22
2309: PUSH
2310: LD_INT 4
2312: PUSH
2313: EMPTY
2314: LIST
2315: LIST
2316: PUSH
2317: EMPTY
2318: LIST
2319: PPUSH
2320: CALL_OW 69
2324: PPUSH
2325: LD_INT 20
2327: PPUSH
2328: CALL_OW 308
2332: IFFALSE 2345
2334: GO 2336
2336: DISABLE
// begin riverside_touched = true ;
2337: LD_ADDR_EXP 60
2341: PUSH
2342: LD_INT 1
2344: ST_TO_ADDR
// end ;
2345: END
// every 0 0$1 trigger IsInArea ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , NorthPassage ) or IsInArea ( FilterAllUnits ( [ [ f_side , 3 ] ] ) , WestPassage ) do
2346: LD_INT 22
2348: PUSH
2349: LD_INT 3
2351: PUSH
2352: EMPTY
2353: LIST
2354: LIST
2355: PUSH
2356: EMPTY
2357: LIST
2358: PPUSH
2359: CALL_OW 69
2363: PPUSH
2364: LD_INT 9
2366: PPUSH
2367: CALL_OW 308
2371: PUSH
2372: LD_INT 22
2374: PUSH
2375: LD_INT 3
2377: PUSH
2378: EMPTY
2379: LIST
2380: LIST
2381: PUSH
2382: EMPTY
2383: LIST
2384: PPUSH
2385: CALL_OW 69
2389: PPUSH
2390: LD_INT 10
2392: PPUSH
2393: CALL_OW 308
2397: OR
2398: IFFALSE 2411
2400: GO 2402
2402: DISABLE
// begin passages_touched = true ;
2403: LD_ADDR_EXP 59
2407: PUSH
2408: LD_INT 1
2410: ST_TO_ADDR
// end ;
2411: END
// every 0 0$1 trigger riverside_touched = false and end_of_the_mission = true do
2412: LD_EXP 60
2416: PUSH
2417: LD_INT 0
2419: EQUAL
2420: PUSH
2421: LD_EXP 58
2425: PUSH
2426: LD_INT 1
2428: EQUAL
2429: AND
2430: IFFALSE 2442
2432: GO 2434
2434: DISABLE
// begin SetAchievement ( ACH_RIVER ) ;
2435: LD_STRING ACH_RIVER
2437: PPUSH
2438: CALL_OW 543
// end ;
2442: END
// every 0 0$1 trigger passages_touched = false and end_of_the_mission = true do
2443: LD_EXP 59
2447: PUSH
2448: LD_INT 0
2450: EQUAL
2451: PUSH
2452: LD_EXP 58
2456: PUSH
2457: LD_INT 1
2459: EQUAL
2460: AND
2461: IFFALSE 2473
2463: GO 2465
2465: DISABLE
// begin SetAchievement ( ACH_SNAKE ) ;
2466: LD_STRING ACH_SNAKE
2468: PPUSH
2469: CALL_OW 543
// end ;
2473: END
// every 0 0$1 do
2474: GO 2476
2476: DISABLE
// begin SetAchievementEX ( ACH_GUN , GunCounter ) ;
2477: LD_STRING ACH_GUN
2479: PPUSH
2480: LD_EXP 43
2484: PPUSH
2485: CALL_OW 564
// enable ;
2489: ENABLE
// end ; end_of_file
2490: END
// every 5 5$0 do var i ;
2491: GO 2493
2493: DISABLE
2494: LD_INT 0
2496: PPUSH
// begin for i = 1 to 4 do
2497: LD_ADDR_VAR 0 1
2501: PUSH
2502: DOUBLE
2503: LD_INT 1
2505: DEC
2506: ST_TO_ADDR
2507: LD_INT 4
2509: PUSH
2510: FOR_TO
2511: IFFALSE 2537
// begin CreateCratesArea ( rand ( 2 , 5 ) , CratesArea , true ) ;
2513: LD_INT 2
2515: PPUSH
2516: LD_INT 5
2518: PPUSH
2519: CALL_OW 12
2523: PPUSH
2524: LD_INT 4
2526: PPUSH
2527: LD_INT 1
2529: PPUSH
2530: CALL_OW 55
// enable ;
2534: ENABLE
// end ;
2535: GO 2510
2537: POP
2538: POP
// end ; end_of_file
2539: PPOPN 1
2541: END
// export function InitAmerican ; var i , y , turrety , lab , fabryka , zbrojka , turrety2 , lab2 , fabryka2 , zbrojka2 ; begin
2542: LD_INT 0
2544: PPUSH
2545: PPUSH
2546: PPUSH
2547: PPUSH
2548: PPUSH
2549: PPUSH
2550: PPUSH
2551: PPUSH
2552: PPUSH
2553: PPUSH
2554: PPUSH
// AmNorthPersonel := [ ] ;
2555: LD_ADDR_EXP 27
2559: PUSH
2560: EMPTY
2561: ST_TO_ADDR
// uc_side := 1 ;
2562: LD_ADDR_OWVAR 20
2566: PUSH
2567: LD_INT 1
2569: ST_TO_ADDR
// uc_nation := 1 ;
2570: LD_ADDR_OWVAR 21
2574: PUSH
2575: LD_INT 1
2577: ST_TO_ADDR
// for i = 1 to [ 7 , 8 , 9 ] [ Difficulty ] do
2578: LD_ADDR_VAR 0 2
2582: PUSH
2583: DOUBLE
2584: LD_INT 1
2586: DEC
2587: ST_TO_ADDR
2588: LD_INT 7
2590: PUSH
2591: LD_INT 8
2593: PUSH
2594: LD_INT 9
2596: PUSH
2597: EMPTY
2598: LIST
2599: LIST
2600: LIST
2601: PUSH
2602: LD_OWVAR 67
2606: ARRAY
2607: PUSH
2608: FOR_TO
2609: IFFALSE 2664
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2611: LD_INT 0
2613: PPUSH
2614: LD_INT 1
2616: PPUSH
2617: CALL_OW 12
2621: PPUSH
2622: LD_INT 1
2624: PUSH
2625: LD_INT 3
2627: PUSH
2628: LD_INT 5
2630: PUSH
2631: EMPTY
2632: LIST
2633: LIST
2634: LIST
2635: PUSH
2636: LD_OWVAR 67
2640: ARRAY
2641: PPUSH
2642: CALL_OW 381
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2646: LD_ADDR_EXP 27
2650: PUSH
2651: LD_EXP 27
2655: PUSH
2656: CALL_OW 44
2660: ADD
2661: ST_TO_ADDR
// end ;
2662: GO 2608
2664: POP
2665: POP
// for i = 1 to 2 do
2666: LD_ADDR_VAR 0 2
2670: PUSH
2671: DOUBLE
2672: LD_INT 1
2674: DEC
2675: ST_TO_ADDR
2676: LD_INT 2
2678: PUSH
2679: FOR_TO
2680: IFFALSE 2735
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2682: LD_INT 0
2684: PPUSH
2685: LD_INT 1
2687: PPUSH
2688: CALL_OW 12
2692: PPUSH
2693: LD_INT 1
2695: PUSH
2696: LD_INT 3
2698: PUSH
2699: LD_INT 5
2701: PUSH
2702: EMPTY
2703: LIST
2704: LIST
2705: LIST
2706: PUSH
2707: LD_OWVAR 67
2711: ARRAY
2712: PPUSH
2713: CALL_OW 382
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2717: LD_ADDR_EXP 27
2721: PUSH
2722: LD_EXP 27
2726: PUSH
2727: CALL_OW 44
2731: ADD
2732: ST_TO_ADDR
// end ;
2733: GO 2679
2735: POP
2736: POP
// for i = 1 to 1 do
2737: LD_ADDR_VAR 0 2
2741: PUSH
2742: DOUBLE
2743: LD_INT 1
2745: DEC
2746: ST_TO_ADDR
2747: LD_INT 1
2749: PUSH
2750: FOR_TO
2751: IFFALSE 2806
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2753: LD_INT 0
2755: PPUSH
2756: LD_INT 1
2758: PPUSH
2759: CALL_OW 12
2763: PPUSH
2764: LD_INT 1
2766: PUSH
2767: LD_INT 3
2769: PUSH
2770: LD_INT 5
2772: PUSH
2773: EMPTY
2774: LIST
2775: LIST
2776: LIST
2777: PUSH
2778: LD_OWVAR 67
2782: ARRAY
2783: PPUSH
2784: CALL_OW 383
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2788: LD_ADDR_EXP 27
2792: PUSH
2793: LD_EXP 27
2797: PUSH
2798: CALL_OW 44
2802: ADD
2803: ST_TO_ADDR
// end ;
2804: GO 2750
2806: POP
2807: POP
// for i = 1 to 1 do
2808: LD_ADDR_VAR 0 2
2812: PUSH
2813: DOUBLE
2814: LD_INT 1
2816: DEC
2817: ST_TO_ADDR
2818: LD_INT 1
2820: PUSH
2821: FOR_TO
2822: IFFALSE 2877
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
2824: LD_INT 0
2826: PPUSH
2827: LD_INT 1
2829: PPUSH
2830: CALL_OW 12
2834: PPUSH
2835: LD_INT 1
2837: PUSH
2838: LD_INT 3
2840: PUSH
2841: LD_INT 5
2843: PUSH
2844: EMPTY
2845: LIST
2846: LIST
2847: LIST
2848: PUSH
2849: LD_OWVAR 67
2853: ARRAY
2854: PPUSH
2855: CALL_OW 384
// AmNorthPersonel := AmNorthPersonel ^ CreateHuman ;
2859: LD_ADDR_EXP 27
2863: PUSH
2864: LD_EXP 27
2868: PUSH
2869: CALL_OW 44
2873: ADD
2874: ST_TO_ADDR
// end ;
2875: GO 2821
2877: POP
2878: POP
// turrety := FilterUnitsInArea ( AmNorthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
2879: LD_ADDR_VAR 0 4
2883: PUSH
2884: LD_INT 11
2886: PPUSH
2887: LD_INT 2
2889: PUSH
2890: LD_INT 30
2892: PUSH
2893: LD_INT 31
2895: PUSH
2896: EMPTY
2897: LIST
2898: LIST
2899: PUSH
2900: LD_INT 30
2902: PUSH
2903: LD_INT 32
2905: PUSH
2906: EMPTY
2907: LIST
2908: LIST
2909: PUSH
2910: EMPTY
2911: LIST
2912: LIST
2913: LIST
2914: PPUSH
2915: CALL_OW 70
2919: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_lab_half ] ] ) ;
2920: LD_ADDR_VAR 0 5
2924: PUSH
2925: LD_INT 11
2927: PPUSH
2928: LD_INT 30
2930: PUSH
2931: LD_INT 7
2933: PUSH
2934: EMPTY
2935: LIST
2936: LIST
2937: PUSH
2938: EMPTY
2939: LIST
2940: PPUSH
2941: CALL_OW 70
2945: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_factory ] ] ) ;
2946: LD_ADDR_VAR 0 6
2950: PUSH
2951: LD_INT 11
2953: PPUSH
2954: LD_INT 30
2956: PUSH
2957: LD_INT 3
2959: PUSH
2960: EMPTY
2961: LIST
2962: LIST
2963: PUSH
2964: EMPTY
2965: LIST
2966: PPUSH
2967: CALL_OW 70
2971: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmNorthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
2972: LD_ADDR_VAR 0 7
2976: PUSH
2977: LD_INT 11
2979: PPUSH
2980: LD_INT 30
2982: PUSH
2983: LD_INT 4
2985: PUSH
2986: EMPTY
2987: LIST
2988: LIST
2989: PUSH
2990: EMPTY
2991: LIST
2992: PPUSH
2993: CALL_OW 70
2997: ST_TO_ADDR
// y := 1 ;
2998: LD_ADDR_VAR 0 3
3002: PUSH
3003: LD_INT 1
3005: ST_TO_ADDR
// for i in AmNorthPersonel do
3006: LD_ADDR_VAR 0 2
3010: PUSH
3011: LD_EXP 27
3015: PUSH
3016: FOR_IN
3017: IFFALSE 3203
// begin PlaceUnitArea ( i , AmNorthArea , false ) ;
3019: LD_VAR 0 2
3023: PPUSH
3024: LD_INT 3
3026: PPUSH
3027: LD_INT 0
3029: PPUSH
3030: CALL_OW 49
// case GetClass ( i ) of 1 :
3034: LD_VAR 0 2
3038: PPUSH
3039: CALL_OW 257
3043: PUSH
3044: LD_INT 1
3046: DOUBLE
3047: EQUAL
3048: IFTRUE 3052
3050: GO 3119
3052: POP
// begin if y > 6 then
3053: LD_VAR 0 3
3057: PUSH
3058: LD_INT 6
3060: GREATER
3061: IFFALSE 3083
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3063: LD_VAR 0 2
3067: PPUSH
3068: LD_VAR 0 7
3072: PUSH
3073: LD_INT 1
3075: ARRAY
3076: PPUSH
3077: CALL_OW 120
3081: GO 3103
// ComEnterUnit ( i , turrety [ y ] ) ;
3083: LD_VAR 0 2
3087: PPUSH
3088: LD_VAR 0 4
3092: PUSH
3093: LD_VAR 0 3
3097: ARRAY
3098: PPUSH
3099: CALL_OW 120
// y = y + 1 ;
3103: LD_ADDR_VAR 0 3
3107: PUSH
3108: LD_VAR 0 3
3112: PUSH
3113: LD_INT 1
3115: PLUS
3116: ST_TO_ADDR
// end ; 2 :
3117: GO 3201
3119: LD_INT 2
3121: DOUBLE
3122: EQUAL
3123: IFTRUE 3127
3125: GO 3142
3127: POP
// ComEnterUnit ( i , AmDep1 ) ; 3 :
3128: LD_VAR 0 2
3132: PPUSH
3133: LD_INT 1
3135: PPUSH
3136: CALL_OW 120
3140: GO 3201
3142: LD_INT 3
3144: DOUBLE
3145: EQUAL
3146: IFTRUE 3150
3148: GO 3171
3150: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3151: LD_VAR 0 2
3155: PPUSH
3156: LD_VAR 0 6
3160: PUSH
3161: LD_INT 1
3163: ARRAY
3164: PPUSH
3165: CALL_OW 120
3169: GO 3201
3171: LD_INT 4
3173: DOUBLE
3174: EQUAL
3175: IFTRUE 3179
3177: GO 3200
3179: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3180: LD_VAR 0 2
3184: PPUSH
3185: LD_VAR 0 5
3189: PUSH
3190: LD_INT 1
3192: ARRAY
3193: PPUSH
3194: CALL_OW 120
3198: GO 3201
3200: POP
// end ;
3201: GO 3016
3203: POP
3204: POP
// AmSouthPersonel := [ ] ;
3205: LD_ADDR_EXP 28
3209: PUSH
3210: EMPTY
3211: ST_TO_ADDR
// for i = 1 to [ 4 , 5 , 6 ] [ Difficulty ] do
3212: LD_ADDR_VAR 0 2
3216: PUSH
3217: DOUBLE
3218: LD_INT 1
3220: DEC
3221: ST_TO_ADDR
3222: LD_INT 4
3224: PUSH
3225: LD_INT 5
3227: PUSH
3228: LD_INT 6
3230: PUSH
3231: EMPTY
3232: LIST
3233: LIST
3234: LIST
3235: PUSH
3236: LD_OWVAR 67
3240: ARRAY
3241: PUSH
3242: FOR_TO
3243: IFFALSE 3298
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3245: LD_INT 0
3247: PPUSH
3248: LD_INT 1
3250: PPUSH
3251: CALL_OW 12
3255: PPUSH
3256: LD_INT 1
3258: PUSH
3259: LD_INT 3
3261: PUSH
3262: LD_INT 5
3264: PUSH
3265: EMPTY
3266: LIST
3267: LIST
3268: LIST
3269: PUSH
3270: LD_OWVAR 67
3274: ARRAY
3275: PPUSH
3276: CALL_OW 381
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3280: LD_ADDR_EXP 28
3284: PUSH
3285: LD_EXP 28
3289: PUSH
3290: CALL_OW 44
3294: ADD
3295: ST_TO_ADDR
// end ;
3296: GO 3242
3298: POP
3299: POP
// for i = 1 to 1 do
3300: LD_ADDR_VAR 0 2
3304: PUSH
3305: DOUBLE
3306: LD_INT 1
3308: DEC
3309: ST_TO_ADDR
3310: LD_INT 1
3312: PUSH
3313: FOR_TO
3314: IFFALSE 3369
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3316: LD_INT 0
3318: PPUSH
3319: LD_INT 1
3321: PPUSH
3322: CALL_OW 12
3326: PPUSH
3327: LD_INT 1
3329: PUSH
3330: LD_INT 3
3332: PUSH
3333: LD_INT 5
3335: PUSH
3336: EMPTY
3337: LIST
3338: LIST
3339: LIST
3340: PUSH
3341: LD_OWVAR 67
3345: ARRAY
3346: PPUSH
3347: CALL_OW 382
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3351: LD_ADDR_EXP 28
3355: PUSH
3356: LD_EXP 28
3360: PUSH
3361: CALL_OW 44
3365: ADD
3366: ST_TO_ADDR
// end ;
3367: GO 3313
3369: POP
3370: POP
// for i = 1 to 2 do
3371: LD_ADDR_VAR 0 2
3375: PUSH
3376: DOUBLE
3377: LD_INT 1
3379: DEC
3380: ST_TO_ADDR
3381: LD_INT 2
3383: PUSH
3384: FOR_TO
3385: IFFALSE 3440
// begin PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3387: LD_INT 0
3389: PPUSH
3390: LD_INT 1
3392: PPUSH
3393: CALL_OW 12
3397: PPUSH
3398: LD_INT 1
3400: PUSH
3401: LD_INT 3
3403: PUSH
3404: LD_INT 5
3406: PUSH
3407: EMPTY
3408: LIST
3409: LIST
3410: LIST
3411: PUSH
3412: LD_OWVAR 67
3416: ARRAY
3417: PPUSH
3418: CALL_OW 383
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3422: LD_ADDR_EXP 28
3426: PUSH
3427: LD_EXP 28
3431: PUSH
3432: CALL_OW 44
3436: ADD
3437: ST_TO_ADDR
// end ;
3438: GO 3384
3440: POP
3441: POP
// for i = 1 to 1 do
3442: LD_ADDR_VAR 0 2
3446: PUSH
3447: DOUBLE
3448: LD_INT 1
3450: DEC
3451: ST_TO_ADDR
3452: LD_INT 1
3454: PUSH
3455: FOR_TO
3456: IFFALSE 3511
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 3 , 5 ] [ Difficulty ] ) ;
3458: LD_INT 0
3460: PPUSH
3461: LD_INT 1
3463: PPUSH
3464: CALL_OW 12
3468: PPUSH
3469: LD_INT 1
3471: PUSH
3472: LD_INT 3
3474: PUSH
3475: LD_INT 5
3477: PUSH
3478: EMPTY
3479: LIST
3480: LIST
3481: LIST
3482: PUSH
3483: LD_OWVAR 67
3487: ARRAY
3488: PPUSH
3489: CALL_OW 384
// AmSouthPersonel := AmSouthPersonel ^ CreateHuman ;
3493: LD_ADDR_EXP 28
3497: PUSH
3498: LD_EXP 28
3502: PUSH
3503: CALL_OW 44
3507: ADD
3508: ST_TO_ADDR
// end ;
3509: GO 3455
3511: POP
3512: POP
// turrety := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_breastwork ] , [ f_btype , b_bunker ] ] ) ;
3513: LD_ADDR_VAR 0 4
3517: PUSH
3518: LD_INT 13
3520: PPUSH
3521: LD_INT 2
3523: PUSH
3524: LD_INT 30
3526: PUSH
3527: LD_INT 31
3529: PUSH
3530: EMPTY
3531: LIST
3532: LIST
3533: PUSH
3534: LD_INT 30
3536: PUSH
3537: LD_INT 32
3539: PUSH
3540: EMPTY
3541: LIST
3542: LIST
3543: PUSH
3544: EMPTY
3545: LIST
3546: LIST
3547: LIST
3548: PPUSH
3549: CALL_OW 70
3553: ST_TO_ADDR
// lab := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_lab ] ] ) ;
3554: LD_ADDR_VAR 0 5
3558: PUSH
3559: LD_INT 13
3561: PPUSH
3562: LD_INT 30
3564: PUSH
3565: LD_INT 6
3567: PUSH
3568: EMPTY
3569: LIST
3570: LIST
3571: PUSH
3572: EMPTY
3573: LIST
3574: PPUSH
3575: CALL_OW 70
3579: ST_TO_ADDR
// fabryka := FilterUnitsInArea ( AmSouthBaseArea , [ f_or , [ f_btype , b_factory ] , [ f_btype , b_workshop ] ] ) ;
3580: LD_ADDR_VAR 0 6
3584: PUSH
3585: LD_INT 13
3587: PPUSH
3588: LD_INT 2
3590: PUSH
3591: LD_INT 30
3593: PUSH
3594: LD_INT 3
3596: PUSH
3597: EMPTY
3598: LIST
3599: LIST
3600: PUSH
3601: LD_INT 30
3603: PUSH
3604: LD_INT 2
3606: PUSH
3607: EMPTY
3608: LIST
3609: LIST
3610: PUSH
3611: EMPTY
3612: LIST
3613: LIST
3614: LIST
3615: PPUSH
3616: CALL_OW 70
3620: ST_TO_ADDR
// zbrojka := FilterUnitsInArea ( AmSouthBaseArea , [ [ f_btype , b_armoury ] ] ) ;
3621: LD_ADDR_VAR 0 7
3625: PUSH
3626: LD_INT 13
3628: PPUSH
3629: LD_INT 30
3631: PUSH
3632: LD_INT 4
3634: PUSH
3635: EMPTY
3636: LIST
3637: LIST
3638: PUSH
3639: EMPTY
3640: LIST
3641: PPUSH
3642: CALL_OW 70
3646: ST_TO_ADDR
// y := 1 ;
3647: LD_ADDR_VAR 0 3
3651: PUSH
3652: LD_INT 1
3654: ST_TO_ADDR
// for i in AmSouthPersonel do
3655: LD_ADDR_VAR 0 2
3659: PUSH
3660: LD_EXP 28
3664: PUSH
3665: FOR_IN
3666: IFFALSE 3852
// begin PlaceUnitArea ( i , AmSouthArea , false ) ;
3668: LD_VAR 0 2
3672: PPUSH
3673: LD_INT 12
3675: PPUSH
3676: LD_INT 0
3678: PPUSH
3679: CALL_OW 49
// case GetClass ( i ) of 1 :
3683: LD_VAR 0 2
3687: PPUSH
3688: CALL_OW 257
3692: PUSH
3693: LD_INT 1
3695: DOUBLE
3696: EQUAL
3697: IFTRUE 3701
3699: GO 3768
3701: POP
// begin if y > 2 then
3702: LD_VAR 0 3
3706: PUSH
3707: LD_INT 2
3709: GREATER
3710: IFFALSE 3732
// ComEnterUnit ( i , zbrojka [ 1 ] ) else
3712: LD_VAR 0 2
3716: PPUSH
3717: LD_VAR 0 7
3721: PUSH
3722: LD_INT 1
3724: ARRAY
3725: PPUSH
3726: CALL_OW 120
3730: GO 3752
// ComEnterUnit ( i , turrety [ y ] ) ;
3732: LD_VAR 0 2
3736: PPUSH
3737: LD_VAR 0 4
3741: PUSH
3742: LD_VAR 0 3
3746: ARRAY
3747: PPUSH
3748: CALL_OW 120
// y = y + 1 ;
3752: LD_ADDR_VAR 0 3
3756: PUSH
3757: LD_VAR 0 3
3761: PUSH
3762: LD_INT 1
3764: PLUS
3765: ST_TO_ADDR
// end ; 2 :
3766: GO 3850
3768: LD_INT 2
3770: DOUBLE
3771: EQUAL
3772: IFTRUE 3776
3774: GO 3791
3776: POP
// ComEnterUnit ( i , AmDep2 ) ; 3 :
3777: LD_VAR 0 2
3781: PPUSH
3782: LD_INT 47
3784: PPUSH
3785: CALL_OW 120
3789: GO 3850
3791: LD_INT 3
3793: DOUBLE
3794: EQUAL
3795: IFTRUE 3799
3797: GO 3820
3799: POP
// ComEnterUnit ( i , fabryka [ 1 ] ) ; 4 :
3800: LD_VAR 0 2
3804: PPUSH
3805: LD_VAR 0 6
3809: PUSH
3810: LD_INT 1
3812: ARRAY
3813: PPUSH
3814: CALL_OW 120
3818: GO 3850
3820: LD_INT 4
3822: DOUBLE
3823: EQUAL
3824: IFTRUE 3828
3826: GO 3849
3828: POP
// ComEnterUnit ( i , lab [ 1 ] ) ; end ;
3829: LD_VAR 0 2
3833: PPUSH
3834: LD_VAR 0 5
3838: PUSH
3839: LD_INT 1
3841: ARRAY
3842: PPUSH
3843: CALL_OW 120
3847: GO 3850
3849: POP
// end ;
3850: GO 3665
3852: POP
3853: POP
// end ;
3854: LD_VAR 0 1
3858: RET
// every 0 0$1 do var enemy , attacker ;
3859: GO 3861
3861: DISABLE
3862: LD_INT 0
3864: PPUSH
3865: PPUSH
// begin enable ;
3866: ENABLE
// enemy = Filterallunits ( [ f_side , 3 ] ) ;
3867: LD_ADDR_VAR 0 1
3871: PUSH
3872: LD_INT 22
3874: PUSH
3875: LD_INT 3
3877: PUSH
3878: EMPTY
3879: LIST
3880: LIST
3881: PPUSH
3882: CALL_OW 69
3886: ST_TO_ADDR
// for attacker in AmConvoysVehicles do
3887: LD_ADDR_VAR 0 2
3891: PUSH
3892: LD_EXP 26
3896: PUSH
3897: FOR_IN
3898: IFFALSE 3926
// ComAttackUnit ( attacker , NearestUnitToUnit ( enemy , attacker ) ) ;
3900: LD_VAR 0 2
3904: PPUSH
3905: LD_VAR 0 1
3909: PPUSH
3910: LD_VAR 0 2
3914: PPUSH
3915: CALL_OW 74
3919: PPUSH
3920: CALL_OW 115
3924: GO 3897
3926: POP
3927: POP
// end ;
3928: PPOPN 2
3930: END
// every 0 0$1 do
3931: GO 3933
3933: DISABLE
// begin enable ;
3934: ENABLE
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
3935: LD_EXP 25
3939: PPUSH
3940: LD_INT 157
3942: PPUSH
3943: LD_INT 97
3945: PPUSH
3946: CALL_OW 114
// end ;
3950: END
// export function AmAttacks ; var i ; begin
3951: LD_INT 0
3953: PPUSH
3954: PPUSH
// Uc_Side = 4 ;
3955: LD_ADDR_OWVAR 20
3959: PUSH
3960: LD_INT 4
3962: ST_TO_ADDR
// Uc_Nation = 1 ;
3963: LD_ADDR_OWVAR 21
3967: PUSH
3968: LD_INT 1
3970: ST_TO_ADDR
// Wait ( 4 4$30 ) ;
3971: LD_INT 9450
3973: PPUSH
3974: CALL_OW 67
// first_attack_spawned = true ;
3978: LD_ADDR_EXP 54
3982: PUSH
3983: LD_INT 1
3985: ST_TO_ADDR
// for i = 1 to [ 2 , 2 , 3 ] [ Difficulty ] do
3986: LD_ADDR_VAR 0 2
3990: PUSH
3991: DOUBLE
3992: LD_INT 1
3994: DEC
3995: ST_TO_ADDR
3996: LD_INT 2
3998: PUSH
3999: LD_INT 2
4001: PUSH
4002: LD_INT 3
4004: PUSH
4005: EMPTY
4006: LIST
4007: LIST
4008: LIST
4009: PUSH
4010: LD_OWVAR 67
4014: ARRAY
4015: PUSH
4016: FOR_TO
4017: IFFALSE 4097
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4019: LD_INT 0
4021: PPUSH
4022: LD_INT 1
4024: PPUSH
4025: CALL_OW 12
4029: PPUSH
4030: LD_INT 1
4032: PUSH
4033: LD_INT 2
4035: PUSH
4036: LD_INT 3
4038: PUSH
4039: EMPTY
4040: LIST
4041: LIST
4042: LIST
4043: PUSH
4044: LD_OWVAR 67
4048: ARRAY
4049: PPUSH
4050: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4054: LD_ADDR_EXP 37
4058: PUSH
4059: CALL_OW 44
4063: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4064: LD_ADDR_EXP 25
4068: PUSH
4069: LD_EXP 25
4073: PUSH
4074: LD_EXP 37
4078: ADD
4079: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4080: LD_EXP 37
4084: PPUSH
4085: LD_INT 1
4087: PPUSH
4088: LD_INT 0
4090: PPUSH
4091: CALL_OW 49
// end ;
4095: GO 4016
4097: POP
4098: POP
// for i = 1 to [ 0 , 1 , 1 ] [ Difficulty ] do
4099: LD_ADDR_VAR 0 2
4103: PUSH
4104: DOUBLE
4105: LD_INT 1
4107: DEC
4108: ST_TO_ADDR
4109: LD_INT 0
4111: PUSH
4112: LD_INT 1
4114: PUSH
4115: LD_INT 1
4117: PUSH
4118: EMPTY
4119: LIST
4120: LIST
4121: LIST
4122: PUSH
4123: LD_OWVAR 67
4127: ARRAY
4128: PUSH
4129: FOR_TO
4130: IFFALSE 4210
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4132: LD_INT 0
4134: PPUSH
4135: LD_INT 1
4137: PPUSH
4138: CALL_OW 12
4142: PPUSH
4143: LD_INT 1
4145: PUSH
4146: LD_INT 2
4148: PUSH
4149: LD_INT 3
4151: PUSH
4152: EMPTY
4153: LIST
4154: LIST
4155: LIST
4156: PUSH
4157: LD_OWVAR 67
4161: ARRAY
4162: PPUSH
4163: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4167: LD_ADDR_EXP 38
4171: PUSH
4172: CALL_OW 44
4176: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4177: LD_ADDR_EXP 25
4181: PUSH
4182: LD_EXP 25
4186: PUSH
4187: LD_EXP 38
4191: ADD
4192: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4193: LD_EXP 38
4197: PPUSH
4198: LD_INT 1
4200: PPUSH
4201: LD_INT 0
4203: PPUSH
4204: CALL_OW 49
// end ;
4208: GO 4129
4210: POP
4211: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4212: LD_ADDR_VAR 0 2
4216: PUSH
4217: DOUBLE
4218: LD_INT 1
4220: DEC
4221: ST_TO_ADDR
4222: LD_INT 1
4224: PUSH
4225: LD_INT 1
4227: PUSH
4228: LD_INT 1
4230: PUSH
4231: EMPTY
4232: LIST
4233: LIST
4234: LIST
4235: PUSH
4236: LD_OWVAR 67
4240: ARRAY
4241: PUSH
4242: FOR_TO
4243: IFFALSE 4323
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4245: LD_INT 0
4247: PPUSH
4248: LD_INT 1
4250: PPUSH
4251: CALL_OW 12
4255: PPUSH
4256: LD_INT 1
4258: PUSH
4259: LD_INT 2
4261: PUSH
4262: LD_INT 3
4264: PUSH
4265: EMPTY
4266: LIST
4267: LIST
4268: LIST
4269: PUSH
4270: LD_OWVAR 67
4274: ARRAY
4275: PPUSH
4276: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4280: LD_ADDR_EXP 40
4284: PUSH
4285: CALL_OW 44
4289: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4290: LD_ADDR_EXP 25
4294: PUSH
4295: LD_EXP 25
4299: PUSH
4300: LD_EXP 40
4304: ADD
4305: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4306: LD_EXP 40
4310: PPUSH
4311: LD_INT 1
4313: PPUSH
4314: LD_INT 0
4316: PPUSH
4317: CALL_OW 49
// end ;
4321: GO 4242
4323: POP
4324: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4325: LD_ADDR_VAR 0 2
4329: PUSH
4330: DOUBLE
4331: LD_INT 1
4333: DEC
4334: ST_TO_ADDR
4335: LD_INT 1
4337: PUSH
4338: LD_INT 1
4340: PUSH
4341: LD_INT 1
4343: PUSH
4344: EMPTY
4345: LIST
4346: LIST
4347: LIST
4348: PUSH
4349: LD_OWVAR 67
4353: ARRAY
4354: PUSH
4355: FOR_TO
4356: IFFALSE 4530
// begin uc_side := 4 ;
4358: LD_ADDR_OWVAR 20
4362: PUSH
4363: LD_INT 4
4365: ST_TO_ADDR
// uc_nation := 1 ;
4366: LD_ADDR_OWVAR 21
4370: PUSH
4371: LD_INT 1
4373: ST_TO_ADDR
// vc_control = control_manual ;
4374: LD_ADDR_OWVAR 38
4378: PUSH
4379: LD_INT 1
4381: ST_TO_ADDR
// vc_engine = engine_combustion ;
4382: LD_ADDR_OWVAR 39
4386: PUSH
4387: LD_INT 1
4389: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4390: LD_ADDR_OWVAR 37
4394: PUSH
4395: LD_INT 2
4397: PPUSH
4398: LD_INT 4
4400: PPUSH
4401: CALL_OW 12
4405: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4406: LD_ADDR_OWVAR 40
4410: PUSH
4411: LD_INT 3
4413: PPUSH
4414: LD_INT 5
4416: PPUSH
4417: CALL_OW 12
4421: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4422: LD_ADDR_EXP 41
4426: PUSH
4427: CALL_OW 45
4431: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 3 ] [ Difficulty ] ) ;
4432: LD_INT 0
4434: PPUSH
4435: LD_INT 1
4437: PPUSH
4438: CALL_OW 12
4442: PPUSH
4443: LD_INT 1
4445: PUSH
4446: LD_INT 2
4448: PUSH
4449: LD_INT 3
4451: PUSH
4452: EMPTY
4453: LIST
4454: LIST
4455: LIST
4456: PUSH
4457: LD_OWVAR 67
4461: ARRAY
4462: PPUSH
4463: CALL_OW 383
// AmMechConvoy := CreateHuman ;
4467: LD_ADDR_EXP 39
4471: PUSH
4472: CALL_OW 44
4476: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
4477: LD_EXP 39
4481: PPUSH
4482: LD_EXP 41
4486: PPUSH
4487: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
4491: LD_EXP 41
4495: PPUSH
4496: LD_INT 14
4498: PPUSH
4499: LD_INT 0
4501: PPUSH
4502: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
4506: LD_ADDR_EXP 26
4510: PUSH
4511: LD_EXP 26
4515: PUSH
4516: LD_EXP 39
4520: ADD
4521: PUSH
4522: LD_EXP 41
4526: ADD
4527: ST_TO_ADDR
// end ;
4528: GO 4355
4530: POP
4531: POP
// Wait ( 5 5$45 ) ;
4532: LD_INT 12075
4534: PPUSH
4535: CALL_OW 67
// for i = 1 to [ 2 , 3 , 4 ] [ Difficulty ] do
4539: LD_ADDR_VAR 0 2
4543: PUSH
4544: DOUBLE
4545: LD_INT 1
4547: DEC
4548: ST_TO_ADDR
4549: LD_INT 2
4551: PUSH
4552: LD_INT 3
4554: PUSH
4555: LD_INT 4
4557: PUSH
4558: EMPTY
4559: LIST
4560: LIST
4561: LIST
4562: PUSH
4563: LD_OWVAR 67
4567: ARRAY
4568: PUSH
4569: FOR_TO
4570: IFFALSE 4650
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4572: LD_INT 0
4574: PPUSH
4575: LD_INT 1
4577: PPUSH
4578: CALL_OW 12
4582: PPUSH
4583: LD_INT 1
4585: PUSH
4586: LD_INT 2
4588: PUSH
4589: LD_INT 4
4591: PUSH
4592: EMPTY
4593: LIST
4594: LIST
4595: LIST
4596: PUSH
4597: LD_OWVAR 67
4601: ARRAY
4602: PPUSH
4603: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
4607: LD_ADDR_EXP 37
4611: PUSH
4612: CALL_OW 44
4616: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
4617: LD_ADDR_EXP 25
4621: PUSH
4622: LD_EXP 25
4626: PUSH
4627: LD_EXP 37
4631: ADD
4632: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
4633: LD_EXP 37
4637: PPUSH
4638: LD_INT 1
4640: PPUSH
4641: LD_INT 0
4643: PPUSH
4644: CALL_OW 49
// end ;
4648: GO 4569
4650: POP
4651: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4652: LD_ADDR_VAR 0 2
4656: PUSH
4657: DOUBLE
4658: LD_INT 1
4660: DEC
4661: ST_TO_ADDR
4662: LD_INT 1
4664: PUSH
4665: LD_INT 2
4667: PUSH
4668: LD_INT 2
4670: PUSH
4671: EMPTY
4672: LIST
4673: LIST
4674: LIST
4675: PUSH
4676: LD_OWVAR 67
4680: ARRAY
4681: PUSH
4682: FOR_TO
4683: IFFALSE 4763
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4685: LD_INT 0
4687: PPUSH
4688: LD_INT 1
4690: PPUSH
4691: CALL_OW 12
4695: PPUSH
4696: LD_INT 1
4698: PUSH
4699: LD_INT 2
4701: PUSH
4702: LD_INT 4
4704: PUSH
4705: EMPTY
4706: LIST
4707: LIST
4708: LIST
4709: PUSH
4710: LD_OWVAR 67
4714: ARRAY
4715: PPUSH
4716: CALL_OW 384
// AmSciConvoy = CreateHuman ;
4720: LD_ADDR_EXP 38
4724: PUSH
4725: CALL_OW 44
4729: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
4730: LD_ADDR_EXP 25
4734: PUSH
4735: LD_EXP 25
4739: PUSH
4740: LD_EXP 38
4744: ADD
4745: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
4746: LD_EXP 38
4750: PPUSH
4751: LD_INT 1
4753: PPUSH
4754: LD_INT 0
4756: PPUSH
4757: CALL_OW 49
// end ;
4761: GO 4682
4763: POP
4764: POP
// for i = 1 to [ 1 , 1 , 1 ] [ Difficulty ] do
4765: LD_ADDR_VAR 0 2
4769: PUSH
4770: DOUBLE
4771: LD_INT 1
4773: DEC
4774: ST_TO_ADDR
4775: LD_INT 1
4777: PUSH
4778: LD_INT 1
4780: PUSH
4781: LD_INT 1
4783: PUSH
4784: EMPTY
4785: LIST
4786: LIST
4787: LIST
4788: PUSH
4789: LD_OWVAR 67
4793: ARRAY
4794: PUSH
4795: FOR_TO
4796: IFFALSE 4876
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4798: LD_INT 0
4800: PPUSH
4801: LD_INT 1
4803: PPUSH
4804: CALL_OW 12
4808: PPUSH
4809: LD_INT 1
4811: PUSH
4812: LD_INT 2
4814: PUSH
4815: LD_INT 4
4817: PUSH
4818: EMPTY
4819: LIST
4820: LIST
4821: LIST
4822: PUSH
4823: LD_OWVAR 67
4827: ARRAY
4828: PPUSH
4829: CALL_OW 382
// AmEngConvoy = CreateHuman ;
4833: LD_ADDR_EXP 40
4837: PUSH
4838: CALL_OW 44
4842: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
4843: LD_ADDR_EXP 25
4847: PUSH
4848: LD_EXP 25
4852: PUSH
4853: LD_EXP 40
4857: ADD
4858: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
4859: LD_EXP 40
4863: PPUSH
4864: LD_INT 1
4866: PPUSH
4867: LD_INT 0
4869: PPUSH
4870: CALL_OW 49
// end ;
4874: GO 4795
4876: POP
4877: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
4878: LD_ADDR_VAR 0 2
4882: PUSH
4883: DOUBLE
4884: LD_INT 1
4886: DEC
4887: ST_TO_ADDR
4888: LD_INT 1
4890: PUSH
4891: LD_INT 2
4893: PUSH
4894: LD_INT 2
4896: PUSH
4897: EMPTY
4898: LIST
4899: LIST
4900: LIST
4901: PUSH
4902: LD_OWVAR 67
4906: ARRAY
4907: PUSH
4908: FOR_TO
4909: IFFALSE 5083
// begin uc_side := 4 ;
4911: LD_ADDR_OWVAR 20
4915: PUSH
4916: LD_INT 4
4918: ST_TO_ADDR
// uc_nation := 1 ;
4919: LD_ADDR_OWVAR 21
4923: PUSH
4924: LD_INT 1
4926: ST_TO_ADDR
// vc_control = control_manual ;
4927: LD_ADDR_OWVAR 38
4931: PUSH
4932: LD_INT 1
4934: ST_TO_ADDR
// vc_engine = engine_combustion ;
4935: LD_ADDR_OWVAR 39
4939: PUSH
4940: LD_INT 1
4942: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
4943: LD_ADDR_OWVAR 37
4947: PUSH
4948: LD_INT 2
4950: PPUSH
4951: LD_INT 4
4953: PPUSH
4954: CALL_OW 12
4958: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
4959: LD_ADDR_OWVAR 40
4963: PUSH
4964: LD_INT 3
4966: PPUSH
4967: LD_INT 5
4969: PPUSH
4970: CALL_OW 12
4974: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
4975: LD_ADDR_EXP 41
4979: PUSH
4980: CALL_OW 45
4984: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
4985: LD_INT 0
4987: PPUSH
4988: LD_INT 1
4990: PPUSH
4991: CALL_OW 12
4995: PPUSH
4996: LD_INT 1
4998: PUSH
4999: LD_INT 2
5001: PUSH
5002: LD_INT 4
5004: PUSH
5005: EMPTY
5006: LIST
5007: LIST
5008: LIST
5009: PUSH
5010: LD_OWVAR 67
5014: ARRAY
5015: PPUSH
5016: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5020: LD_ADDR_EXP 39
5024: PUSH
5025: CALL_OW 44
5029: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5030: LD_EXP 39
5034: PPUSH
5035: LD_EXP 41
5039: PPUSH
5040: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5044: LD_EXP 41
5048: PPUSH
5049: LD_INT 14
5051: PPUSH
5052: LD_INT 0
5054: PPUSH
5055: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5059: LD_ADDR_EXP 26
5063: PUSH
5064: LD_EXP 26
5068: PUSH
5069: LD_EXP 39
5073: ADD
5074: PUSH
5075: LD_EXP 41
5079: ADD
5080: ST_TO_ADDR
// end ;
5081: GO 4908
5083: POP
5084: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5085: LD_EXP 25
5089: PPUSH
5090: LD_INT 157
5092: PPUSH
5093: LD_INT 97
5095: PPUSH
5096: CALL_OW 114
// Wait ( 5 5$0 ) ;
5100: LD_INT 10500
5102: PPUSH
5103: CALL_OW 67
// for i = 1 to [ 3 , 4 , 6 ] [ Difficulty ] do
5107: LD_ADDR_VAR 0 2
5111: PUSH
5112: DOUBLE
5113: LD_INT 1
5115: DEC
5116: ST_TO_ADDR
5117: LD_INT 3
5119: PUSH
5120: LD_INT 4
5122: PUSH
5123: LD_INT 6
5125: PUSH
5126: EMPTY
5127: LIST
5128: LIST
5129: LIST
5130: PUSH
5131: LD_OWVAR 67
5135: ARRAY
5136: PUSH
5137: FOR_TO
5138: IFFALSE 5218
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5140: LD_INT 0
5142: PPUSH
5143: LD_INT 1
5145: PPUSH
5146: CALL_OW 12
5150: PPUSH
5151: LD_INT 1
5153: PUSH
5154: LD_INT 2
5156: PUSH
5157: LD_INT 4
5159: PUSH
5160: EMPTY
5161: LIST
5162: LIST
5163: LIST
5164: PUSH
5165: LD_OWVAR 67
5169: ARRAY
5170: PPUSH
5171: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5175: LD_ADDR_EXP 37
5179: PUSH
5180: CALL_OW 44
5184: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5185: LD_ADDR_EXP 25
5189: PUSH
5190: LD_EXP 25
5194: PUSH
5195: LD_EXP 37
5199: ADD
5200: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5201: LD_EXP 37
5205: PPUSH
5206: LD_INT 1
5208: PPUSH
5209: LD_INT 0
5211: PPUSH
5212: CALL_OW 49
// end ;
5216: GO 5137
5218: POP
5219: POP
// for i = 1 to [ 1 , 2 , 2 ] [ Difficulty ] do
5220: LD_ADDR_VAR 0 2
5224: PUSH
5225: DOUBLE
5226: LD_INT 1
5228: DEC
5229: ST_TO_ADDR
5230: LD_INT 1
5232: PUSH
5233: LD_INT 2
5235: PUSH
5236: LD_INT 2
5238: PUSH
5239: EMPTY
5240: LIST
5241: LIST
5242: LIST
5243: PUSH
5244: LD_OWVAR 67
5248: ARRAY
5249: PUSH
5250: FOR_TO
5251: IFFALSE 5331
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5253: LD_INT 0
5255: PPUSH
5256: LD_INT 1
5258: PPUSH
5259: CALL_OW 12
5263: PPUSH
5264: LD_INT 1
5266: PUSH
5267: LD_INT 2
5269: PUSH
5270: LD_INT 4
5272: PUSH
5273: EMPTY
5274: LIST
5275: LIST
5276: LIST
5277: PUSH
5278: LD_OWVAR 67
5282: ARRAY
5283: PPUSH
5284: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5288: LD_ADDR_EXP 38
5292: PUSH
5293: CALL_OW 44
5297: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5298: LD_ADDR_EXP 25
5302: PUSH
5303: LD_EXP 25
5307: PUSH
5308: LD_EXP 38
5312: ADD
5313: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5314: LD_EXP 38
5318: PPUSH
5319: LD_INT 1
5321: PPUSH
5322: LD_INT 0
5324: PPUSH
5325: CALL_OW 49
// end ;
5329: GO 5250
5331: POP
5332: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5333: LD_ADDR_VAR 0 2
5337: PUSH
5338: DOUBLE
5339: LD_INT 1
5341: DEC
5342: ST_TO_ADDR
5343: LD_INT 1
5345: PUSH
5346: LD_INT 1
5348: PUSH
5349: LD_INT 2
5351: PUSH
5352: EMPTY
5353: LIST
5354: LIST
5355: LIST
5356: PUSH
5357: LD_OWVAR 67
5361: ARRAY
5362: PUSH
5363: FOR_TO
5364: IFFALSE 5444
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5366: LD_INT 0
5368: PPUSH
5369: LD_INT 1
5371: PPUSH
5372: CALL_OW 12
5376: PPUSH
5377: LD_INT 1
5379: PUSH
5380: LD_INT 2
5382: PUSH
5383: LD_INT 4
5385: PUSH
5386: EMPTY
5387: LIST
5388: LIST
5389: LIST
5390: PUSH
5391: LD_OWVAR 67
5395: ARRAY
5396: PPUSH
5397: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5401: LD_ADDR_EXP 40
5405: PUSH
5406: CALL_OW 44
5410: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5411: LD_ADDR_EXP 25
5415: PUSH
5416: LD_EXP 25
5420: PUSH
5421: LD_EXP 40
5425: ADD
5426: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5427: LD_EXP 40
5431: PPUSH
5432: LD_INT 1
5434: PPUSH
5435: LD_INT 0
5437: PPUSH
5438: CALL_OW 49
// end ;
5442: GO 5363
5444: POP
5445: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5446: LD_ADDR_VAR 0 2
5450: PUSH
5451: DOUBLE
5452: LD_INT 1
5454: DEC
5455: ST_TO_ADDR
5456: LD_INT 1
5458: PUSH
5459: LD_INT 2
5461: PUSH
5462: LD_INT 3
5464: PUSH
5465: EMPTY
5466: LIST
5467: LIST
5468: LIST
5469: PUSH
5470: LD_OWVAR 67
5474: ARRAY
5475: PUSH
5476: FOR_TO
5477: IFFALSE 5651
// begin uc_side := 4 ;
5479: LD_ADDR_OWVAR 20
5483: PUSH
5484: LD_INT 4
5486: ST_TO_ADDR
// uc_nation := 1 ;
5487: LD_ADDR_OWVAR 21
5491: PUSH
5492: LD_INT 1
5494: ST_TO_ADDR
// vc_control = control_manual ;
5495: LD_ADDR_OWVAR 38
5499: PUSH
5500: LD_INT 1
5502: ST_TO_ADDR
// vc_engine = engine_combustion ;
5503: LD_ADDR_OWVAR 39
5507: PUSH
5508: LD_INT 1
5510: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
5511: LD_ADDR_OWVAR 37
5515: PUSH
5516: LD_INT 2
5518: PPUSH
5519: LD_INT 4
5521: PPUSH
5522: CALL_OW 12
5526: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
5527: LD_ADDR_OWVAR 40
5531: PUSH
5532: LD_INT 3
5534: PPUSH
5535: LD_INT 5
5537: PPUSH
5538: CALL_OW 12
5542: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
5543: LD_ADDR_EXP 41
5547: PUSH
5548: CALL_OW 45
5552: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5553: LD_INT 0
5555: PPUSH
5556: LD_INT 1
5558: PPUSH
5559: CALL_OW 12
5563: PPUSH
5564: LD_INT 1
5566: PUSH
5567: LD_INT 2
5569: PUSH
5570: LD_INT 4
5572: PUSH
5573: EMPTY
5574: LIST
5575: LIST
5576: LIST
5577: PUSH
5578: LD_OWVAR 67
5582: ARRAY
5583: PPUSH
5584: CALL_OW 383
// AmMechConvoy := CreateHuman ;
5588: LD_ADDR_EXP 39
5592: PUSH
5593: CALL_OW 44
5597: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
5598: LD_EXP 39
5602: PPUSH
5603: LD_EXP 41
5607: PPUSH
5608: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
5612: LD_EXP 41
5616: PPUSH
5617: LD_INT 14
5619: PPUSH
5620: LD_INT 0
5622: PPUSH
5623: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
5627: LD_ADDR_EXP 26
5631: PUSH
5632: LD_EXP 26
5636: PUSH
5637: LD_EXP 39
5641: ADD
5642: PUSH
5643: LD_EXP 41
5647: ADD
5648: ST_TO_ADDR
// end ;
5649: GO 5476
5651: POP
5652: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
5653: LD_EXP 25
5657: PPUSH
5658: LD_INT 157
5660: PPUSH
5661: LD_INT 97
5663: PPUSH
5664: CALL_OW 114
// Wait ( 5 5$0 ) ;
5668: LD_INT 10500
5670: PPUSH
5671: CALL_OW 67
// for i = 1 to [ 3 , 5 , 7 ] [ Difficulty ] do
5675: LD_ADDR_VAR 0 2
5679: PUSH
5680: DOUBLE
5681: LD_INT 1
5683: DEC
5684: ST_TO_ADDR
5685: LD_INT 3
5687: PUSH
5688: LD_INT 5
5690: PUSH
5691: LD_INT 7
5693: PUSH
5694: EMPTY
5695: LIST
5696: LIST
5697: LIST
5698: PUSH
5699: LD_OWVAR 67
5703: ARRAY
5704: PUSH
5705: FOR_TO
5706: IFFALSE 5786
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5708: LD_INT 0
5710: PPUSH
5711: LD_INT 1
5713: PPUSH
5714: CALL_OW 12
5718: PPUSH
5719: LD_INT 1
5721: PUSH
5722: LD_INT 2
5724: PUSH
5725: LD_INT 4
5727: PUSH
5728: EMPTY
5729: LIST
5730: LIST
5731: LIST
5732: PUSH
5733: LD_OWVAR 67
5737: ARRAY
5738: PPUSH
5739: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
5743: LD_ADDR_EXP 37
5747: PUSH
5748: CALL_OW 44
5752: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
5753: LD_ADDR_EXP 25
5757: PUSH
5758: LD_EXP 25
5762: PUSH
5763: LD_EXP 37
5767: ADD
5768: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
5769: LD_EXP 37
5773: PPUSH
5774: LD_INT 1
5776: PPUSH
5777: LD_INT 0
5779: PPUSH
5780: CALL_OW 49
// end ;
5784: GO 5705
5786: POP
5787: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
5788: LD_ADDR_VAR 0 2
5792: PUSH
5793: DOUBLE
5794: LD_INT 1
5796: DEC
5797: ST_TO_ADDR
5798: LD_INT 1
5800: PUSH
5801: LD_INT 2
5803: PUSH
5804: LD_INT 3
5806: PUSH
5807: EMPTY
5808: LIST
5809: LIST
5810: LIST
5811: PUSH
5812: LD_OWVAR 67
5816: ARRAY
5817: PUSH
5818: FOR_TO
5819: IFFALSE 5899
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5821: LD_INT 0
5823: PPUSH
5824: LD_INT 1
5826: PPUSH
5827: CALL_OW 12
5831: PPUSH
5832: LD_INT 1
5834: PUSH
5835: LD_INT 2
5837: PUSH
5838: LD_INT 4
5840: PUSH
5841: EMPTY
5842: LIST
5843: LIST
5844: LIST
5845: PUSH
5846: LD_OWVAR 67
5850: ARRAY
5851: PPUSH
5852: CALL_OW 384
// AmSciConvoy = CreateHuman ;
5856: LD_ADDR_EXP 38
5860: PUSH
5861: CALL_OW 44
5865: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
5866: LD_ADDR_EXP 25
5870: PUSH
5871: LD_EXP 25
5875: PUSH
5876: LD_EXP 38
5880: ADD
5881: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
5882: LD_EXP 38
5886: PPUSH
5887: LD_INT 1
5889: PPUSH
5890: LD_INT 0
5892: PPUSH
5893: CALL_OW 49
// end ;
5897: GO 5818
5899: POP
5900: POP
// for i = 1 to [ 1 , 1 , 2 ] [ Difficulty ] do
5901: LD_ADDR_VAR 0 2
5905: PUSH
5906: DOUBLE
5907: LD_INT 1
5909: DEC
5910: ST_TO_ADDR
5911: LD_INT 1
5913: PUSH
5914: LD_INT 1
5916: PUSH
5917: LD_INT 2
5919: PUSH
5920: EMPTY
5921: LIST
5922: LIST
5923: LIST
5924: PUSH
5925: LD_OWVAR 67
5929: ARRAY
5930: PUSH
5931: FOR_TO
5932: IFFALSE 6012
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
5934: LD_INT 0
5936: PPUSH
5937: LD_INT 1
5939: PPUSH
5940: CALL_OW 12
5944: PPUSH
5945: LD_INT 1
5947: PUSH
5948: LD_INT 2
5950: PUSH
5951: LD_INT 4
5953: PUSH
5954: EMPTY
5955: LIST
5956: LIST
5957: LIST
5958: PUSH
5959: LD_OWVAR 67
5963: ARRAY
5964: PPUSH
5965: CALL_OW 382
// AmEngConvoy = CreateHuman ;
5969: LD_ADDR_EXP 40
5973: PUSH
5974: CALL_OW 44
5978: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
5979: LD_ADDR_EXP 25
5983: PUSH
5984: LD_EXP 25
5988: PUSH
5989: LD_EXP 40
5993: ADD
5994: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
5995: LD_EXP 40
5999: PPUSH
6000: LD_INT 1
6002: PPUSH
6003: LD_INT 0
6005: PPUSH
6006: CALL_OW 49
// end ;
6010: GO 5931
6012: POP
6013: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6014: LD_ADDR_VAR 0 2
6018: PUSH
6019: DOUBLE
6020: LD_INT 1
6022: DEC
6023: ST_TO_ADDR
6024: LD_INT 1
6026: PUSH
6027: LD_INT 2
6029: PUSH
6030: LD_INT 3
6032: PUSH
6033: EMPTY
6034: LIST
6035: LIST
6036: LIST
6037: PUSH
6038: LD_OWVAR 67
6042: ARRAY
6043: PUSH
6044: FOR_TO
6045: IFFALSE 6219
// begin uc_side := 4 ;
6047: LD_ADDR_OWVAR 20
6051: PUSH
6052: LD_INT 4
6054: ST_TO_ADDR
// uc_nation := 1 ;
6055: LD_ADDR_OWVAR 21
6059: PUSH
6060: LD_INT 1
6062: ST_TO_ADDR
// vc_control = control_manual ;
6063: LD_ADDR_OWVAR 38
6067: PUSH
6068: LD_INT 1
6070: ST_TO_ADDR
// vc_engine = engine_combustion ;
6071: LD_ADDR_OWVAR 39
6075: PUSH
6076: LD_INT 1
6078: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6079: LD_ADDR_OWVAR 37
6083: PUSH
6084: LD_INT 2
6086: PPUSH
6087: LD_INT 4
6089: PPUSH
6090: CALL_OW 12
6094: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6095: LD_ADDR_OWVAR 40
6099: PUSH
6100: LD_INT 3
6102: PPUSH
6103: LD_INT 5
6105: PPUSH
6106: CALL_OW 12
6110: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6111: LD_ADDR_EXP 41
6115: PUSH
6116: CALL_OW 45
6120: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6121: LD_INT 0
6123: PPUSH
6124: LD_INT 1
6126: PPUSH
6127: CALL_OW 12
6131: PPUSH
6132: LD_INT 1
6134: PUSH
6135: LD_INT 2
6137: PUSH
6138: LD_INT 4
6140: PUSH
6141: EMPTY
6142: LIST
6143: LIST
6144: LIST
6145: PUSH
6146: LD_OWVAR 67
6150: ARRAY
6151: PPUSH
6152: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6156: LD_ADDR_EXP 39
6160: PUSH
6161: CALL_OW 44
6165: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6166: LD_EXP 39
6170: PPUSH
6171: LD_EXP 41
6175: PPUSH
6176: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6180: LD_EXP 41
6184: PPUSH
6185: LD_INT 14
6187: PPUSH
6188: LD_INT 0
6190: PPUSH
6191: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6195: LD_ADDR_EXP 26
6199: PUSH
6200: LD_EXP 26
6204: PUSH
6205: LD_EXP 39
6209: ADD
6210: PUSH
6211: LD_EXP 41
6215: ADD
6216: ST_TO_ADDR
// end ;
6217: GO 6044
6219: POP
6220: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6221: LD_EXP 25
6225: PPUSH
6226: LD_INT 157
6228: PPUSH
6229: LD_INT 97
6231: PPUSH
6232: CALL_OW 114
// Wait ( 5 5$0 ) ;
6236: LD_INT 10500
6238: PPUSH
6239: CALL_OW 67
// for i = 1 to [ 4 , 6 , 10 ] [ Difficulty ] do
6243: LD_ADDR_VAR 0 2
6247: PUSH
6248: DOUBLE
6249: LD_INT 1
6251: DEC
6252: ST_TO_ADDR
6253: LD_INT 4
6255: PUSH
6256: LD_INT 6
6258: PUSH
6259: LD_INT 10
6261: PUSH
6262: EMPTY
6263: LIST
6264: LIST
6265: LIST
6266: PUSH
6267: LD_OWVAR 67
6271: ARRAY
6272: PUSH
6273: FOR_TO
6274: IFFALSE 6354
// begin PrepareSoldier ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6276: LD_INT 0
6278: PPUSH
6279: LD_INT 1
6281: PPUSH
6282: CALL_OW 12
6286: PPUSH
6287: LD_INT 1
6289: PUSH
6290: LD_INT 2
6292: PUSH
6293: LD_INT 4
6295: PUSH
6296: EMPTY
6297: LIST
6298: LIST
6299: LIST
6300: PUSH
6301: LD_OWVAR 67
6305: ARRAY
6306: PPUSH
6307: CALL_OW 381
// AmSoldConvoy = CreateHuman ;
6311: LD_ADDR_EXP 37
6315: PUSH
6316: CALL_OW 44
6320: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSoldConvoy ;
6321: LD_ADDR_EXP 25
6325: PUSH
6326: LD_EXP 25
6330: PUSH
6331: LD_EXP 37
6335: ADD
6336: ST_TO_ADDR
// PlaceUnitArea ( AmSoldConvoy , AmSoldSpawn , false ) ;
6337: LD_EXP 37
6341: PPUSH
6342: LD_INT 1
6344: PPUSH
6345: LD_INT 0
6347: PPUSH
6348: CALL_OW 49
// end ;
6352: GO 6273
6354: POP
6355: POP
// for i = 1 to [ 1 , 2 , 3 ] [ Difficulty ] do
6356: LD_ADDR_VAR 0 2
6360: PUSH
6361: DOUBLE
6362: LD_INT 1
6364: DEC
6365: ST_TO_ADDR
6366: LD_INT 1
6368: PUSH
6369: LD_INT 2
6371: PUSH
6372: LD_INT 3
6374: PUSH
6375: EMPTY
6376: LIST
6377: LIST
6378: LIST
6379: PUSH
6380: LD_OWVAR 67
6384: ARRAY
6385: PUSH
6386: FOR_TO
6387: IFFALSE 6467
// begin PrepareScientist ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6389: LD_INT 0
6391: PPUSH
6392: LD_INT 1
6394: PPUSH
6395: CALL_OW 12
6399: PPUSH
6400: LD_INT 1
6402: PUSH
6403: LD_INT 2
6405: PUSH
6406: LD_INT 4
6408: PUSH
6409: EMPTY
6410: LIST
6411: LIST
6412: LIST
6413: PUSH
6414: LD_OWVAR 67
6418: ARRAY
6419: PPUSH
6420: CALL_OW 384
// AmSciConvoy = CreateHuman ;
6424: LD_ADDR_EXP 38
6428: PUSH
6429: CALL_OW 44
6433: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmSciConvoy ;
6434: LD_ADDR_EXP 25
6438: PUSH
6439: LD_EXP 25
6443: PUSH
6444: LD_EXP 38
6448: ADD
6449: ST_TO_ADDR
// PlaceUnitArea ( AmSciConvoy , AmSoldSpawn , false ) ;
6450: LD_EXP 38
6454: PPUSH
6455: LD_INT 1
6457: PPUSH
6458: LD_INT 0
6460: PPUSH
6461: CALL_OW 49
// end ;
6465: GO 6386
6467: POP
6468: POP
// for i = 1 to [ 1 , 1 , 3 ] [ Difficulty ] do
6469: LD_ADDR_VAR 0 2
6473: PUSH
6474: DOUBLE
6475: LD_INT 1
6477: DEC
6478: ST_TO_ADDR
6479: LD_INT 1
6481: PUSH
6482: LD_INT 1
6484: PUSH
6485: LD_INT 3
6487: PUSH
6488: EMPTY
6489: LIST
6490: LIST
6491: LIST
6492: PUSH
6493: LD_OWVAR 67
6497: ARRAY
6498: PUSH
6499: FOR_TO
6500: IFFALSE 6580
// begin PrepareEngineer ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6502: LD_INT 0
6504: PPUSH
6505: LD_INT 1
6507: PPUSH
6508: CALL_OW 12
6512: PPUSH
6513: LD_INT 1
6515: PUSH
6516: LD_INT 2
6518: PUSH
6519: LD_INT 4
6521: PUSH
6522: EMPTY
6523: LIST
6524: LIST
6525: LIST
6526: PUSH
6527: LD_OWVAR 67
6531: ARRAY
6532: PPUSH
6533: CALL_OW 382
// AmEngConvoy = CreateHuman ;
6537: LD_ADDR_EXP 40
6541: PUSH
6542: CALL_OW 44
6546: ST_TO_ADDR
// AmConvoys := AmConvoys ^ AmEngConvoy ;
6547: LD_ADDR_EXP 25
6551: PUSH
6552: LD_EXP 25
6556: PUSH
6557: LD_EXP 40
6561: ADD
6562: ST_TO_ADDR
// PlaceUnitArea ( AmEngConvoy , AmSoldSpawn , false ) ;
6563: LD_EXP 40
6567: PPUSH
6568: LD_INT 1
6570: PPUSH
6571: LD_INT 0
6573: PPUSH
6574: CALL_OW 49
// end ;
6578: GO 6499
6580: POP
6581: POP
// for i = 1 to [ 1 , 2 , 4 ] [ Difficulty ] do
6582: LD_ADDR_VAR 0 2
6586: PUSH
6587: DOUBLE
6588: LD_INT 1
6590: DEC
6591: ST_TO_ADDR
6592: LD_INT 1
6594: PUSH
6595: LD_INT 2
6597: PUSH
6598: LD_INT 4
6600: PUSH
6601: EMPTY
6602: LIST
6603: LIST
6604: LIST
6605: PUSH
6606: LD_OWVAR 67
6610: ARRAY
6611: PUSH
6612: FOR_TO
6613: IFFALSE 6787
// begin uc_side := 4 ;
6615: LD_ADDR_OWVAR 20
6619: PUSH
6620: LD_INT 4
6622: ST_TO_ADDR
// uc_nation := 1 ;
6623: LD_ADDR_OWVAR 21
6627: PUSH
6628: LD_INT 1
6630: ST_TO_ADDR
// vc_control = control_manual ;
6631: LD_ADDR_OWVAR 38
6635: PUSH
6636: LD_INT 1
6638: ST_TO_ADDR
// vc_engine = engine_combustion ;
6639: LD_ADDR_OWVAR 39
6643: PUSH
6644: LD_INT 1
6646: ST_TO_ADDR
// vc_chassis = rand ( 2 , 4 ) ;
6647: LD_ADDR_OWVAR 37
6651: PUSH
6652: LD_INT 2
6654: PPUSH
6655: LD_INT 4
6657: PPUSH
6658: CALL_OW 12
6662: ST_TO_ADDR
// vc_weapon = rand ( 3 , 5 ) ;
6663: LD_ADDR_OWVAR 40
6667: PUSH
6668: LD_INT 3
6670: PPUSH
6671: LD_INT 5
6673: PPUSH
6674: CALL_OW 12
6678: ST_TO_ADDR
// AmVehicleConvoy = CreateVehicle ;
6679: LD_ADDR_EXP 41
6683: PUSH
6684: CALL_OW 45
6688: ST_TO_ADDR
// PrepareMechanic ( rand ( 0 , 1 ) , [ 1 , 2 , 4 ] [ Difficulty ] ) ;
6689: LD_INT 0
6691: PPUSH
6692: LD_INT 1
6694: PPUSH
6695: CALL_OW 12
6699: PPUSH
6700: LD_INT 1
6702: PUSH
6703: LD_INT 2
6705: PUSH
6706: LD_INT 4
6708: PUSH
6709: EMPTY
6710: LIST
6711: LIST
6712: LIST
6713: PUSH
6714: LD_OWVAR 67
6718: ARRAY
6719: PPUSH
6720: CALL_OW 383
// AmMechConvoy := CreateHuman ;
6724: LD_ADDR_EXP 39
6728: PUSH
6729: CALL_OW 44
6733: ST_TO_ADDR
// PlaceHumanInUnit ( AmMechConvoy , AmVehicleConvoy ) ;
6734: LD_EXP 39
6738: PPUSH
6739: LD_EXP 41
6743: PPUSH
6744: CALL_OW 52
// PlaceUnitArea ( AmVehicleConvoy , AmVehicleArea , false ) ;
6748: LD_EXP 41
6752: PPUSH
6753: LD_INT 14
6755: PPUSH
6756: LD_INT 0
6758: PPUSH
6759: CALL_OW 49
// AmConvoysVehicles := AmConvoysVehicles ^ AmMechConvoy ^ AmVehicleConvoy ;
6763: LD_ADDR_EXP 26
6767: PUSH
6768: LD_EXP 26
6772: PUSH
6773: LD_EXP 39
6777: ADD
6778: PUSH
6779: LD_EXP 41
6783: ADD
6784: ST_TO_ADDR
// end ;
6785: GO 6612
6787: POP
6788: POP
// ComAgressiveMove ( AmConvoys , 157 , 97 ) ;
6789: LD_EXP 25
6793: PPUSH
6794: LD_INT 157
6796: PPUSH
6797: LD_INT 97
6799: PPUSH
6800: CALL_OW 114
// end ; end_of_file
6804: LD_VAR 0 1
6808: RET
// export function InitRussian ; begin
6809: LD_INT 0
6811: PPUSH
// Uc_Nation := 3 ;
6812: LD_ADDR_OWVAR 21
6816: PUSH
6817: LD_INT 3
6819: ST_TO_ADDR
// Uc_Side := 3 ;
6820: LD_ADDR_OWVAR 20
6824: PUSH
6825: LD_INT 3
6827: ST_TO_ADDR
// YakotichCrew := YakotichCrew ^ Yakotich ^ Mietek ^ Boris ^ Michail ^ Vasilij ^ Maksim ^ Fiodor ^ Aleksandr ^ Aleksiej ^ Pavel ^ Zakhar ^ Constantin ^ Stanislav ^ Josif ;
6828: LD_ADDR_EXP 1
6832: PUSH
6833: LD_EXP 1
6837: PUSH
6838: LD_EXP 3
6842: ADD
6843: PUSH
6844: LD_EXP 4
6848: ADD
6849: PUSH
6850: LD_EXP 5
6854: ADD
6855: PUSH
6856: LD_EXP 7
6860: ADD
6861: PUSH
6862: LD_EXP 6
6866: ADD
6867: PUSH
6868: LD_EXP 9
6872: ADD
6873: PUSH
6874: LD_EXP 10
6878: ADD
6879: PUSH
6880: LD_EXP 14
6884: ADD
6885: PUSH
6886: LD_EXP 13
6890: ADD
6891: PUSH
6892: LD_EXP 11
6896: ADD
6897: PUSH
6898: LD_EXP 12
6902: ADD
6903: PUSH
6904: LD_EXP 8
6908: ADD
6909: PUSH
6910: LD_EXP 16
6914: ADD
6915: PUSH
6916: LD_EXP 15
6920: ADD
6921: ST_TO_ADDR
// Yakotich := PrepareUnit ( Yakotich , true , 01_ ) ;
6922: LD_ADDR_EXP 3
6926: PUSH
6927: LD_STRING Yakotich
6929: PPUSH
6930: LD_INT 1
6932: PPUSH
6933: LD_STRING 01_
6935: PPUSH
6936: CALL 9297 0 3
6940: ST_TO_ADDR
// Mietek := PrepareUnit ( Mietek , true , 01_ ) ;
6941: LD_ADDR_EXP 4
6945: PUSH
6946: LD_STRING Mietek
6948: PPUSH
6949: LD_INT 1
6951: PPUSH
6952: LD_STRING 01_
6954: PPUSH
6955: CALL 9297 0 3
6959: ST_TO_ADDR
// Boris := PrepareUnit ( Boris , true , 01_ ) ;
6960: LD_ADDR_EXP 5
6964: PUSH
6965: LD_STRING Boris
6967: PPUSH
6968: LD_INT 1
6970: PPUSH
6971: LD_STRING 01_
6973: PPUSH
6974: CALL 9297 0 3
6978: ST_TO_ADDR
// Michail := PrepareUnit ( Michail , true , 01_ ) ;
6979: LD_ADDR_EXP 7
6983: PUSH
6984: LD_STRING Michail
6986: PPUSH
6987: LD_INT 1
6989: PPUSH
6990: LD_STRING 01_
6992: PPUSH
6993: CALL 9297 0 3
6997: ST_TO_ADDR
// Vasilij := PrepareUnit ( Vasilij , true , 01_ ) ;
6998: LD_ADDR_EXP 6
7002: PUSH
7003: LD_STRING Vasilij
7005: PPUSH
7006: LD_INT 1
7008: PPUSH
7009: LD_STRING 01_
7011: PPUSH
7012: CALL 9297 0 3
7016: ST_TO_ADDR
// Maksim := PrepareUnit ( Maksim , true , 01_ ) ;
7017: LD_ADDR_EXP 9
7021: PUSH
7022: LD_STRING Maksim
7024: PPUSH
7025: LD_INT 1
7027: PPUSH
7028: LD_STRING 01_
7030: PPUSH
7031: CALL 9297 0 3
7035: ST_TO_ADDR
// Fiodor := PrepareUnit ( Fiodor , true , 01_ ) ;
7036: LD_ADDR_EXP 10
7040: PUSH
7041: LD_STRING Fiodor
7043: PPUSH
7044: LD_INT 1
7046: PPUSH
7047: LD_STRING 01_
7049: PPUSH
7050: CALL 9297 0 3
7054: ST_TO_ADDR
// Aleksandr := PrepareUnit ( Aleksandr , true , 01_ ) ;
7055: LD_ADDR_EXP 14
7059: PUSH
7060: LD_STRING Aleksandr
7062: PPUSH
7063: LD_INT 1
7065: PPUSH
7066: LD_STRING 01_
7068: PPUSH
7069: CALL 9297 0 3
7073: ST_TO_ADDR
// Aleksiej := PrepareUnit ( Aleksiej , true , 01_ ) ;
7074: LD_ADDR_EXP 13
7078: PUSH
7079: LD_STRING Aleksiej
7081: PPUSH
7082: LD_INT 1
7084: PPUSH
7085: LD_STRING 01_
7087: PPUSH
7088: CALL 9297 0 3
7092: ST_TO_ADDR
// Pavel := PrepareUnit ( Pavel , true , 01_ ) ;
7093: LD_ADDR_EXP 11
7097: PUSH
7098: LD_STRING Pavel
7100: PPUSH
7101: LD_INT 1
7103: PPUSH
7104: LD_STRING 01_
7106: PPUSH
7107: CALL 9297 0 3
7111: ST_TO_ADDR
// Zakhar := PrepareUnit ( Zakhar , true , 01_ ) ;
7112: LD_ADDR_EXP 12
7116: PUSH
7117: LD_STRING Zakhar
7119: PPUSH
7120: LD_INT 1
7122: PPUSH
7123: LD_STRING 01_
7125: PPUSH
7126: CALL 9297 0 3
7130: ST_TO_ADDR
// Constantin := PrepareUnit ( Constantin , true , 01_ ) ;
7131: LD_ADDR_EXP 8
7135: PUSH
7136: LD_STRING Constantin
7138: PPUSH
7139: LD_INT 1
7141: PPUSH
7142: LD_STRING 01_
7144: PPUSH
7145: CALL 9297 0 3
7149: ST_TO_ADDR
// Stanislav := PrepareUnit ( Stanislav , false ,  ) ;
7150: LD_ADDR_EXP 16
7154: PUSH
7155: LD_STRING Stanislav
7157: PPUSH
7158: LD_INT 0
7160: PPUSH
7161: LD_STRING 
7163: PPUSH
7164: CALL 9297 0 3
7168: ST_TO_ADDR
// Josif := PrepareUnit ( Josif , false ,  ) ;
7169: LD_ADDR_EXP 15
7173: PUSH
7174: LD_STRING Josif
7176: PPUSH
7177: LD_INT 0
7179: PPUSH
7180: LD_STRING 
7182: PPUSH
7183: CALL 9297 0 3
7187: ST_TO_ADDR
// SetClass ( Boris , 2 ) ;
7188: LD_EXP 5
7192: PPUSH
7193: LD_INT 2
7195: PPUSH
7196: CALL_OW 336
// SetClass ( Vasilij , 4 ) ;
7200: LD_EXP 6
7204: PPUSH
7205: LD_INT 4
7207: PPUSH
7208: CALL_OW 336
// Uc_Side := 6 ;
7212: LD_ADDR_OWVAR 20
7216: PUSH
7217: LD_INT 6
7219: ST_TO_ADDR
// Morozov := PrepareUnit ( Morozov , false ,  ) ;
7220: LD_ADDR_EXP 17
7224: PUSH
7225: LD_STRING Morozov
7227: PPUSH
7228: LD_INT 0
7230: PPUSH
7231: LD_STRING 
7233: PPUSH
7234: CALL 9297 0 3
7238: ST_TO_ADDR
// Kurin := PrepareUnit ( Kurin , false ,  ) ;
7239: LD_ADDR_EXP 18
7243: PUSH
7244: LD_STRING Kurin
7246: PPUSH
7247: LD_INT 0
7249: PPUSH
7250: LD_STRING 
7252: PPUSH
7253: CALL 9297 0 3
7257: ST_TO_ADDR
// Grishko := PrepareUnit ( Grishko , false ,  ) ;
7258: LD_ADDR_EXP 19
7262: PUSH
7263: LD_STRING Grishko
7265: PPUSH
7266: LD_INT 0
7268: PPUSH
7269: LD_STRING 
7271: PPUSH
7272: CALL 9297 0 3
7276: ST_TO_ADDR
// Burlak := PrepareUnit ( Burlak , false ,  ) ;
7277: LD_ADDR_EXP 20
7281: PUSH
7282: LD_STRING Burlak
7284: PPUSH
7285: LD_INT 0
7287: PPUSH
7288: LD_STRING 
7290: PPUSH
7291: CALL 9297 0 3
7295: ST_TO_ADDR
// Platonov := PrepareUnit ( Platonov , false ,  ) ;
7296: LD_ADDR_EXP 21
7300: PUSH
7301: LD_STRING Platonov
7303: PPUSH
7304: LD_INT 0
7306: PPUSH
7307: LD_STRING 
7309: PPUSH
7310: CALL 9297 0 3
7314: ST_TO_ADDR
// Uc_Side := 1 ;
7315: LD_ADDR_OWVAR 20
7319: PUSH
7320: LD_INT 1
7322: ST_TO_ADDR
// AmSold := PrepareUnit ( AmSold , false ,  ) ;
7323: LD_ADDR_EXP 22
7327: PUSH
7328: LD_STRING AmSold
7330: PPUSH
7331: LD_INT 0
7333: PPUSH
7334: LD_STRING 
7336: PPUSH
7337: CALL 9297 0 3
7341: ST_TO_ADDR
// end ;
7342: LD_VAR 0 1
7346: RET
// export function Czolg ; begin
7347: LD_INT 0
7349: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7350: LD_STRING 01_Vehicle
7352: PPUSH
7353: LD_INT 1
7355: PPUSH
7356: CALL_OW 30
7360: IFFALSE 7443
// begin Uc_Side = 3 ;
7362: LD_ADDR_OWVAR 20
7366: PUSH
7367: LD_INT 3
7369: ST_TO_ADDR
// Uc_Nation = 3 ;
7370: LD_ADDR_OWVAR 21
7374: PUSH
7375: LD_INT 3
7377: ST_TO_ADDR
// Uc_Direction = 2 ;
7378: LD_ADDR_OWVAR 24
7382: PUSH
7383: LD_INT 2
7385: ST_TO_ADDR
// Vc_Chassis = 21 ;
7386: LD_ADDR_OWVAR 37
7390: PUSH
7391: LD_INT 21
7393: ST_TO_ADDR
// Vc_Control = 1 ;
7394: LD_ADDR_OWVAR 38
7398: PUSH
7399: LD_INT 1
7401: ST_TO_ADDR
// Vc_Engine = 1 ;
7402: LD_ADDR_OWVAR 39
7406: PUSH
7407: LD_INT 1
7409: ST_TO_ADDR
// Vc_Weapon = 42 ;
7410: LD_ADDR_OWVAR 40
7414: PUSH
7415: LD_INT 42
7417: ST_TO_ADDR
// Tank := CreateVehicle ;
7418: LD_ADDR_EXP 42
7422: PUSH
7423: CALL_OW 45
7427: ST_TO_ADDR
// PlaceUnitArea ( Tank , VehSpawn , false ) ;
7428: LD_EXP 42
7432: PPUSH
7433: LD_INT 19
7435: PPUSH
7436: LD_INT 0
7438: PPUSH
7439: CALL_OW 49
// end ; end ; end_of_file
7443: LD_VAR 0 1
7447: RET
// export function Action ; var i ; begin
7448: LD_INT 0
7450: PPUSH
7451: PPUSH
// if LoadVariable ( 01_Vehicle , 1 ) then
7452: LD_STRING 01_Vehicle
7454: PPUSH
7455: LD_INT 1
7457: PPUSH
7458: CALL_OW 30
7462: IFFALSE 7480
// PlaceHumanInUnit ( Yakotich , Tank ) else
7464: LD_EXP 3
7468: PPUSH
7469: LD_EXP 42
7473: PPUSH
7474: CALL_OW 52
7478: GO 7495
// PlaceUnitArea ( Yakotich , RussianSpawn , false ) ;
7480: LD_EXP 3
7484: PPUSH
7485: LD_INT 2
7487: PPUSH
7488: LD_INT 0
7490: PPUSH
7491: CALL_OW 49
// PlaceUnitArea ( Maksim , RussianSpawn , false ) ;
7495: LD_EXP 9
7499: PPUSH
7500: LD_INT 2
7502: PPUSH
7503: LD_INT 0
7505: PPUSH
7506: CALL_OW 49
// PlaceUnitArea ( Vasilij , RussianSpawn , false ) ;
7510: LD_EXP 6
7514: PPUSH
7515: LD_INT 2
7517: PPUSH
7518: LD_INT 0
7520: PPUSH
7521: CALL_OW 49
// PlaceUnitArea ( Michail , RussianSpawn , false ) ;
7525: LD_EXP 7
7529: PPUSH
7530: LD_INT 2
7532: PPUSH
7533: LD_INT 0
7535: PPUSH
7536: CALL_OW 49
// PlaceUnitArea ( Fiodor , RussianSpawn , false ) ;
7540: LD_EXP 10
7544: PPUSH
7545: LD_INT 2
7547: PPUSH
7548: LD_INT 0
7550: PPUSH
7551: CALL_OW 49
// PlaceUnitArea ( Constantin , RussianSpawn , false ) ;
7555: LD_EXP 8
7559: PPUSH
7560: LD_INT 2
7562: PPUSH
7563: LD_INT 0
7565: PPUSH
7566: CALL_OW 49
// PlaceUnitArea ( Boris , RussianSpawn , false ) ;
7570: LD_EXP 5
7574: PPUSH
7575: LD_INT 2
7577: PPUSH
7578: LD_INT 0
7580: PPUSH
7581: CALL_OW 49
// InGameOn ;
7585: CALL_OW 8
// DialogueOn ;
7589: CALL_OW 6
// CenterNowOnXY ( 152 , 28 ) ;
7593: LD_INT 152
7595: PPUSH
7596: LD_INT 28
7598: PPUSH
7599: CALL_OW 86
// Wait ( 0 0$3 ) ;
7603: LD_INT 105
7605: PPUSH
7606: CALL_OW 67
// Say ( Yakotich , 2Yak-13 ) ;
7610: LD_EXP 3
7614: PPUSH
7615: LD_STRING 2Yak-13
7617: PPUSH
7618: CALL_OW 88
// ChangeMissionObjectives ( o1 ) ;
7622: LD_STRING o1
7624: PPUSH
7625: CALL_OW 337
// MaksimScout ;
7629: CALL 1250 0 0
// InGameOff ;
7633: CALL_OW 9
// DialogueOff ;
7637: CALL_OW 7
// Say ( Michail , 2Mich-02 ) ;
7641: LD_EXP 7
7645: PPUSH
7646: LD_STRING 2Mich-02
7648: PPUSH
7649: CALL_OW 88
// Say ( Michail , 2Mich-03 ) ;
7653: LD_EXP 7
7657: PPUSH
7658: LD_STRING 2Mich-03
7660: PPUSH
7661: CALL_OW 88
// Say ( Yakotich , 2Yak-15 ) ;
7665: LD_EXP 3
7669: PPUSH
7670: LD_STRING 2Yak-15
7672: PPUSH
7673: CALL_OW 88
// ChangeMissionObjectives ( turret ) ;
7677: LD_STRING turret
7679: PPUSH
7680: CALL_OW 337
// SaveForQuickRestart ;
7684: CALL_OW 22
// end ;
7688: LD_VAR 0 1
7692: RET
// every 0 0$1 trigger maksim_scout_ended = true and See ( 3 , Maksim ) do
7693: LD_EXP 46
7697: PUSH
7698: LD_INT 1
7700: EQUAL
7701: PUSH
7702: LD_INT 3
7704: PPUSH
7705: LD_EXP 9
7709: PPUSH
7710: CALL_OW 292
7714: AND
7715: IFFALSE 8043
7717: GO 7719
7719: DISABLE
// begin CenterNowOnUnits ( Maksim ) ;
7720: LD_EXP 9
7724: PPUSH
7725: CALL_OW 87
// DialogueOn ;
7729: CALL_OW 6
// RevealFogArea ( 3 , ScoutedTerrains ) ;
7733: LD_INT 3
7735: PPUSH
7736: LD_INT 8
7738: PPUSH
7739: CALL_OW 332
// Say ( Maksim , 2Mak-06 ) ;
7743: LD_EXP 9
7747: PPUSH
7748: LD_STRING 2Mak-06
7750: PPUSH
7751: CALL_OW 88
// Say ( Yakotich , 2Yak-16 ) ;
7755: LD_EXP 3
7759: PPUSH
7760: LD_STRING 2Yak-16
7762: PPUSH
7763: CALL_OW 88
// CenterNowOnXY ( 40 , 10 ) ;
7767: LD_INT 40
7769: PPUSH
7770: LD_INT 10
7772: PPUSH
7773: CALL_OW 86
// Wait ( 0 0$03 ) ;
7777: LD_INT 105
7779: PPUSH
7780: CALL_OW 67
// CenterOnXY ( 55 , 40 ) ;
7784: LD_INT 55
7786: PPUSH
7787: LD_INT 40
7789: PPUSH
7790: CALL_OW 84
// Wait ( 0 0$03 ) ;
7794: LD_INT 105
7796: PPUSH
7797: CALL_OW 67
// CenterOnXY ( 70 , 72 ) ;
7801: LD_INT 70
7803: PPUSH
7804: LD_INT 72
7806: PPUSH
7807: CALL_OW 84
// Say ( Maksim , 2Mak-07 ) ;
7811: LD_EXP 9
7815: PPUSH
7816: LD_STRING 2Mak-07
7818: PPUSH
7819: CALL_OW 88
// Say ( Maksim , 2Mak-08 ) ;
7823: LD_EXP 9
7827: PPUSH
7828: LD_STRING 2Mak-08
7830: PPUSH
7831: CALL_OW 88
// CenterNowOnUnits ( Yakotich ) ;
7835: LD_EXP 3
7839: PPUSH
7840: CALL_OW 87
// Say ( Yakotich , 2Yak-17 ) ;
7844: LD_EXP 3
7848: PPUSH
7849: LD_STRING 2Yak-17
7851: PPUSH
7852: CALL_OW 88
// Say ( Yakotich , 2Yak-18 ) ;
7856: LD_EXP 3
7860: PPUSH
7861: LD_STRING 2Yak-18
7863: PPUSH
7864: CALL_OW 88
// Say ( Maksim , 2Mak-09 ) ;
7868: LD_EXP 9
7872: PPUSH
7873: LD_STRING 2Mak-09
7875: PPUSH
7876: CALL_OW 88
// Say ( Maksim , 2Mak-10 ) ;
7880: LD_EXP 9
7884: PPUSH
7885: LD_STRING 2Mak-10
7887: PPUSH
7888: CALL_OW 88
// Say ( Maksim , 2Mak-11 ) ;
7892: LD_EXP 9
7896: PPUSH
7897: LD_STRING 2Mak-11
7899: PPUSH
7900: CALL_OW 88
// Say ( Yakotich , 2Yak-19 ) ;
7904: LD_EXP 3
7908: PPUSH
7909: LD_STRING 2Yak-19
7911: PPUSH
7912: CALL_OW 88
// SayRadio ( Yakotich , 2Yak-20 ) ;
7916: LD_EXP 3
7920: PPUSH
7921: LD_STRING 2Yak-20
7923: PPUSH
7924: CALL_OW 94
// SayRadio ( Morozov , 2Moro-05 ) ;
7928: LD_EXP 17
7932: PPUSH
7933: LD_STRING 2Moro-05
7935: PPUSH
7936: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-21 ) ;
7940: LD_EXP 3
7944: PPUSH
7945: LD_STRING 2Yak-21
7947: PPUSH
7948: CALL_OW 94
// SayRadio ( Morozov , 2Moro-06 ) ;
7952: LD_EXP 17
7956: PPUSH
7957: LD_STRING 2Moro-06
7959: PPUSH
7960: CALL_OW 94
// SayRadio ( Morozov , 2Moro-07 ) ;
7964: LD_EXP 17
7968: PPUSH
7969: LD_STRING 2Moro-07
7971: PPUSH
7972: CALL_OW 94
// SayRadio ( Morozov , 2Moro-08 ) ;
7976: LD_EXP 17
7980: PPUSH
7981: LD_STRING 2Moro-08
7983: PPUSH
7984: CALL_OW 94
// SayRadio ( Morozov , 2Moro-09 ) ;
7988: LD_EXP 17
7992: PPUSH
7993: LD_STRING 2Moro-09
7995: PPUSH
7996: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-22 ) ;
8000: LD_EXP 3
8004: PPUSH
8005: LD_STRING 2Yak-22
8007: PPUSH
8008: CALL_OW 94
// ChangeMissionObjectives ( o2 ) ;
8012: LD_STRING o2
8014: PPUSH
8015: CALL_OW 337
// DialogueOff ;
8019: CALL_OW 7
// maksim_back = true ;
8023: LD_ADDR_EXP 47
8027: PUSH
8028: LD_INT 1
8030: ST_TO_ADDR
// SetSide ( Maksim , 3 ) ;
8031: LD_EXP 9
8035: PPUSH
8036: LD_INT 3
8038: PPUSH
8039: CALL_OW 235
// end ;
8043: END
// every 0 0$1 trigger Researched ( 3 , 90 ) do
8044: LD_INT 3
8046: PPUSH
8047: LD_INT 90
8049: PPUSH
8050: CALL_OW 325
8054: IFFALSE 8083
8056: GO 8058
8058: DISABLE
// begin Say ( Michail , 2Mich-04 ) ;
8059: LD_EXP 7
8063: PPUSH
8064: LD_STRING 2Mich-04
8066: PPUSH
8067: CALL_OW 88
// Say ( Michail , 2Mich-05 ) ;
8071: LD_EXP 7
8075: PPUSH
8076: LD_STRING 2Mich-05
8078: PPUSH
8079: CALL_OW 88
// end ;
8083: END
// every 0 0$1 trigger Researched ( 3 , 83 ) do
8084: LD_INT 3
8086: PPUSH
8087: LD_INT 83
8089: PPUSH
8090: CALL_OW 325
8094: IFFALSE 8111
8096: GO 8098
8098: DISABLE
// begin Say ( Vasilij , 2Vas-07 ) ;
8099: LD_EXP 6
8103: PPUSH
8104: LD_STRING 2Vas-07
8106: PPUSH
8107: CALL_OW 88
// end ;
8111: END
// every 0 0$1 trigger first_attack_clear do
8112: LD_EXP 55
8116: IFFALSE 8329
8118: GO 8120
8120: DISABLE
// begin Wait ( 5 5$0 ) ;
8121: LD_INT 10500
8123: PPUSH
8124: CALL_OW 67
// PlaceUnitArea ( Mietek , RussianSpawn , false ) ;
8128: LD_EXP 4
8132: PPUSH
8133: LD_INT 2
8135: PPUSH
8136: LD_INT 0
8138: PPUSH
8139: CALL_OW 49
// PlaceUnitArea ( Aleksiej , RussianSpawn , false ) ;
8143: LD_EXP 13
8147: PPUSH
8148: LD_INT 2
8150: PPUSH
8151: LD_INT 0
8153: PPUSH
8154: CALL_OW 49
// PlaceUnitArea ( Aleksandr , RussianSpawn , false ) ;
8158: LD_EXP 14
8162: PPUSH
8163: LD_INT 2
8165: PPUSH
8166: LD_INT 0
8168: PPUSH
8169: CALL_OW 49
// PlaceUnitArea ( Josif , RussianSpawn , false ) ;
8173: LD_EXP 15
8177: PPUSH
8178: LD_INT 2
8180: PPUSH
8181: LD_INT 0
8183: PPUSH
8184: CALL_OW 49
// PlaceUnitArea ( Zakhar , RussianSpawn , false ) ;
8188: LD_EXP 12
8192: PPUSH
8193: LD_INT 2
8195: PPUSH
8196: LD_INT 0
8198: PPUSH
8199: CALL_OW 49
// PlaceUnitArea ( Stanislav , RussianSpawn , false ) ;
8203: LD_EXP 16
8207: PPUSH
8208: LD_INT 2
8210: PPUSH
8211: LD_INT 0
8213: PPUSH
8214: CALL_OW 49
// PlaceUnitArea ( Pavel , RussianSpawn , false ) ;
8218: LD_EXP 11
8222: PPUSH
8223: LD_INT 2
8225: PPUSH
8226: LD_INT 0
8228: PPUSH
8229: CALL_OW 49
// DialogueOn ;
8233: CALL_OW 6
// CenterNowOnUnits ( Mietek ) ;
8237: LD_EXP 4
8241: PPUSH
8242: CALL_OW 87
// SayRadio ( Mietek , 2Ryn-06 ) ;
8246: LD_EXP 4
8250: PPUSH
8251: LD_STRING 2Ryn-06
8253: PPUSH
8254: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-25 ) ;
8258: LD_EXP 3
8262: PPUSH
8263: LD_STRING 2Yak-25
8265: PPUSH
8266: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-01 ) ;
8270: LD_EXP 16
8274: PPUSH
8275: LD_STRING 2Stan-01
8277: PPUSH
8278: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-02 ) ;
8282: LD_EXP 16
8286: PPUSH
8287: LD_STRING 2Stan-02
8289: PPUSH
8290: CALL_OW 94
// SayRadio ( Stanislav , 2Stan-03 ) ;
8294: LD_EXP 16
8298: PPUSH
8299: LD_STRING 2Stan-03
8301: PPUSH
8302: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-Stan-01 ) ;
8306: LD_EXP 3
8310: PPUSH
8311: LD_STRING 2Yak-Stan-01
8313: PPUSH
8314: CALL_OW 94
// ChangeMissionObjectives ( gun ) ;
8318: LD_STRING gun
8320: PPUSH
8321: CALL_OW 337
// DialogueOff ;
8325: CALL_OW 7
// end ;
8329: END
// every 0 0$1 trigger maksim_back = true do
8330: LD_EXP 47
8334: PUSH
8335: LD_INT 1
8337: EQUAL
8338: IFFALSE 8461
8340: GO 8342
8342: DISABLE
// begin Wait ( 30 30$0 ) ;
8343: LD_INT 63000
8345: PPUSH
8346: CALL_OW 67
// DialogueOn ;
8350: CALL_OW 6
// InGameOn ;
8354: CALL_OW 8
// SayRadio ( Kurin , 2Kurin-01 ) ;
8358: LD_EXP 18
8362: PPUSH
8363: LD_STRING 2Kurin-01
8365: PPUSH
8366: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-02 ) ;
8370: LD_EXP 18
8374: PPUSH
8375: LD_STRING 2Kurin-02
8377: PPUSH
8378: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-26 ) ;
8382: LD_EXP 3
8386: PPUSH
8387: LD_STRING 2Yak-26
8389: PPUSH
8390: CALL_OW 94
// ChangeMissionObjectives ( o3 ) ;
8394: LD_STRING o3
8396: PPUSH
8397: CALL_OW 337
// Say ( Maksim , 2Mak-12 ) ;
8401: LD_EXP 9
8405: PPUSH
8406: LD_STRING 2Mak-12
8408: PPUSH
8409: CALL_OW 88
// CenterNowOnXY ( 57 , 2 ) ;
8413: LD_INT 57
8415: PPUSH
8416: LD_INT 2
8418: PPUSH
8419: CALL_OW 86
// RevealFogArea ( 3 , NorthPassage ) ;
8423: LD_INT 3
8425: PPUSH
8426: LD_INT 9
8428: PPUSH
8429: CALL_OW 332
// Say ( Maksim , 2Mak-13 ) ;
8433: LD_EXP 9
8437: PPUSH
8438: LD_STRING 2Mak-13
8440: PPUSH
8441: CALL_OW 88
// DialogueOff ;
8445: CALL_OW 7
// InGameOff ;
8449: CALL_OW 9
// kurin_attack_started = true ;
8453: LD_ADDR_EXP 57
8457: PUSH
8458: LD_INT 1
8460: ST_TO_ADDR
// end ;
8461: END
// every 1 trigger kurin_attack_started = true and FilterAllUnits ( [ [ f_side , 1 ] , [ f_type , unit_human ] ] ) = 0 do var unit ;
8462: LD_EXP 57
8466: PUSH
8467: LD_INT 1
8469: EQUAL
8470: PUSH
8471: LD_INT 22
8473: PUSH
8474: LD_INT 1
8476: PUSH
8477: EMPTY
8478: LIST
8479: LIST
8480: PUSH
8481: LD_INT 21
8483: PUSH
8484: LD_INT 1
8486: PUSH
8487: EMPTY
8488: LIST
8489: LIST
8490: PUSH
8491: EMPTY
8492: LIST
8493: LIST
8494: PPUSH
8495: CALL_OW 69
8499: PUSH
8500: LD_INT 0
8502: EQUAL
8503: AND
8504: IFFALSE 9118
8506: GO 8508
8508: DISABLE
8509: LD_INT 0
8511: PPUSH
// begin InGameOn ;
8512: CALL_OW 8
// SayRadio ( Yakotich , 2Yak-27 ) ;
8516: LD_EXP 3
8520: PPUSH
8521: LD_STRING 2Yak-27
8523: PPUSH
8524: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-03 ) ;
8528: LD_EXP 18
8532: PPUSH
8533: LD_STRING 2Kurin-03
8535: PPUSH
8536: CALL_OW 94
// SayRadio ( AmSold , 2AmSold-01 ) ;
8540: LD_EXP 22
8544: PPUSH
8545: LD_STRING 2AmSold-01
8547: PPUSH
8548: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-04 ) ;
8552: LD_EXP 18
8556: PPUSH
8557: LD_STRING 2Kurin-04
8559: PPUSH
8560: CALL_OW 94
// Wait ( 0 0$02 ) ;
8564: LD_INT 70
8566: PPUSH
8567: CALL_OW 67
// SayRadio ( Grishko , 2Gri-01 ) ;
8571: LD_EXP 19
8575: PPUSH
8576: LD_STRING 2Gri-01
8578: PPUSH
8579: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-05 ) ;
8583: LD_EXP 18
8587: PPUSH
8588: LD_STRING 2Kurin-05
8590: PPUSH
8591: CALL_OW 94
// SayRadio ( Grishko , 2Gri-02 ) ;
8595: LD_EXP 19
8599: PPUSH
8600: LD_STRING 2Gri-02
8602: PPUSH
8603: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-06 ) ;
8607: LD_EXP 18
8611: PPUSH
8612: LD_STRING 2Kurin-06
8614: PPUSH
8615: CALL_OW 94
// SayRadio ( Grishko , 2Gri-03 ) ;
8619: LD_EXP 19
8623: PPUSH
8624: LD_STRING 2Gri-03
8626: PPUSH
8627: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-07 ) ;
8631: LD_EXP 18
8635: PPUSH
8636: LD_STRING 2Kurin-07
8638: PPUSH
8639: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-28 ) ;
8643: LD_EXP 3
8647: PPUSH
8648: LD_STRING 2Yak-28
8650: PPUSH
8651: CALL_OW 94
// Wait ( 0 0$03 ) ;
8655: LD_INT 105
8657: PPUSH
8658: CALL_OW 67
// SayRadio ( Kurin , 2Kurin-08 ) ;
8662: LD_EXP 18
8666: PPUSH
8667: LD_STRING 2Kurin-08
8669: PPUSH
8670: CALL_OW 94
// SayRadio ( Burlak , 2Burlak-01 ) ;
8674: LD_EXP 20
8678: PPUSH
8679: LD_STRING 2Burlak-01
8681: PPUSH
8682: CALL_OW 94
// SayRadio ( Kurin , 2Kurin-09 ) ;
8686: LD_EXP 18
8690: PPUSH
8691: LD_STRING 2Kurin-09
8693: PPUSH
8694: CALL_OW 94
// SayEffect ( 2GunSound ) ;
8698: LD_STRING 2GunSound
8700: PPUSH
8701: CALL_OW 96
// SayRadio ( Morozov , 2Moro-10 ) ;
8705: LD_EXP 17
8709: PPUSH
8710: LD_STRING 2Moro-10
8712: PPUSH
8713: CALL_OW 94
// SayRadio ( Morozov , 2Moro-11 ) ;
8717: LD_EXP 17
8721: PPUSH
8722: LD_STRING 2Moro-11
8724: PPUSH
8725: CALL_OW 94
// SayRadio ( Morozov , 2Moro-12 ) ;
8729: LD_EXP 17
8733: PPUSH
8734: LD_STRING 2Moro-12
8736: PPUSH
8737: CALL_OW 94
// SayRadio ( Morozov , 2Moro-13 ) ;
8741: LD_EXP 17
8745: PPUSH
8746: LD_STRING 2Moro-13
8748: PPUSH
8749: CALL_OW 94
// SayRadio ( Morozov , 2Moro-14 ) ;
8753: LD_EXP 17
8757: PPUSH
8758: LD_STRING 2Moro-14
8760: PPUSH
8761: CALL_OW 94
// SayRadio ( Yakotich , 2Yak-29 ) ;
8765: LD_EXP 3
8769: PPUSH
8770: LD_STRING 2Yak-29
8772: PPUSH
8773: CALL_OW 94
// end_of_the_mission = true ;
8777: LD_ADDR_EXP 58
8781: PUSH
8782: LD_INT 1
8784: ST_TO_ADDR
// InGameOff ;
8785: CALL_OW 9
// AddMedal ( PeopleConvoys , 1 ) ;
8789: LD_STRING PeopleConvoys
8791: PPUSH
8792: LD_INT 1
8794: PPUSH
8795: CALL_OW 101
// if gun_researched = true then
8799: LD_EXP 50
8803: PUSH
8804: LD_INT 1
8806: EQUAL
8807: IFFALSE 8821
// AddMedal ( GunMedal , 1 ) else
8809: LD_STRING GunMedal
8811: PPUSH
8812: LD_INT 1
8814: PPUSH
8815: CALL_OW 101
8819: GO 8832
// AddMedal ( GunMedal , - 1 ) ;
8821: LD_STRING GunMedal
8823: PPUSH
8824: LD_INT 1
8826: NEG
8827: PPUSH
8828: CALL_OW 101
// if gattling_researched = true and gun_researched = true and transport_builded = true and turrets_researched = true then
8832: LD_EXP 49
8836: PUSH
8837: LD_INT 1
8839: EQUAL
8840: PUSH
8841: LD_EXP 50
8845: PUSH
8846: LD_INT 1
8848: EQUAL
8849: AND
8850: PUSH
8851: LD_EXP 53
8855: PUSH
8856: LD_INT 1
8858: EQUAL
8859: AND
8860: PUSH
8861: LD_EXP 48
8865: PUSH
8866: LD_INT 1
8868: EQUAL
8869: AND
8870: IFFALSE 8884
// AddMedal ( Secondary , 1 ) else
8872: LD_STRING Secondary
8874: PPUSH
8875: LD_INT 1
8877: PPUSH
8878: CALL_OW 101
8882: GO 8895
// AddMedal ( Secondary , - 1 ) ;
8884: LD_STRING Secondary
8886: PPUSH
8887: LD_INT 1
8889: NEG
8890: PPUSH
8891: CALL_OW 101
// GiveMedals ( Medals ) ;
8895: LD_STRING Medals
8897: PPUSH
8898: CALL_OW 102
// RewardPeople ( FilterAllUnits ( [ [ f_side , 3 ] , [ f_nation , 3 ] , [ f_type , unit_human ] ] ) ) ;
8902: LD_INT 22
8904: PUSH
8905: LD_INT 3
8907: PUSH
8908: EMPTY
8909: LIST
8910: LIST
8911: PUSH
8912: LD_INT 23
8914: PUSH
8915: LD_INT 3
8917: PUSH
8918: EMPTY
8919: LIST
8920: LIST
8921: PUSH
8922: LD_INT 21
8924: PUSH
8925: LD_INT 1
8927: PUSH
8928: EMPTY
8929: LIST
8930: LIST
8931: PUSH
8932: EMPTY
8933: LIST
8934: LIST
8935: LIST
8936: PPUSH
8937: CALL_OW 69
8941: PPUSH
8942: CALL_OW 43
// SaveCharacters ( Yakotich , 02_Yakotich ) ;
8946: LD_EXP 3
8950: PPUSH
8951: LD_STRING 02_Yakotich
8953: PPUSH
8954: CALL_OW 38
// SaveCharacters ( Mietek , 02_Mietek ) ;
8958: LD_EXP 4
8962: PPUSH
8963: LD_STRING 02_Mietek
8965: PPUSH
8966: CALL_OW 38
// SaveCharacters ( Maksim , 02_Maksim ) ;
8970: LD_EXP 9
8974: PPUSH
8975: LD_STRING 02_Maksim
8977: PPUSH
8978: CALL_OW 38
// SaveCharacters ( Vasilij , 02_Vasilij ) ;
8982: LD_EXP 6
8986: PPUSH
8987: LD_STRING 02_Vasilij
8989: PPUSH
8990: CALL_OW 38
// SaveCharacters ( Michail , 02_Michail ) ;
8994: LD_EXP 7
8998: PPUSH
8999: LD_STRING 02_Michail
9001: PPUSH
9002: CALL_OW 38
// SaveCharacters ( Boris , 02_Boris ) ;
9006: LD_EXP 5
9010: PPUSH
9011: LD_STRING 02_Boris
9013: PPUSH
9014: CALL_OW 38
// SaveCharacters ( Constantin , 02_Constantin ) ;
9018: LD_EXP 8
9022: PPUSH
9023: LD_STRING 02_Constantin
9025: PPUSH
9026: CALL_OW 38
// SaveCharacters ( Fiodor , 02_Fiodor ) ;
9030: LD_EXP 10
9034: PPUSH
9035: LD_STRING 02_Fiodor
9037: PPUSH
9038: CALL_OW 38
// SaveCharacters ( Aleksiej , 02_Aleksiej ) ;
9042: LD_EXP 13
9046: PPUSH
9047: LD_STRING 02_Aleksiej
9049: PPUSH
9050: CALL_OW 38
// SaveCharacters ( Pavel , 02_Pavel ) ;
9054: LD_EXP 11
9058: PPUSH
9059: LD_STRING 02_Pavel
9061: PPUSH
9062: CALL_OW 38
// SaveCharacters ( Zakhar , 02_Zakhar ) ;
9066: LD_EXP 12
9070: PPUSH
9071: LD_STRING 02_Zakhar
9073: PPUSH
9074: CALL_OW 38
// SaveCharacters ( Aleksandr , 02_Aleksandr ) ;
9078: LD_EXP 14
9082: PPUSH
9083: LD_STRING 02_Aleksandr
9085: PPUSH
9086: CALL_OW 38
// SaveCharacters ( Stanislav , 02_Stanislav ) ;
9090: LD_EXP 16
9094: PPUSH
9095: LD_STRING 02_Stanislav
9097: PPUSH
9098: CALL_OW 38
// SaveCharacters ( Josif , 02_Josif ) ;
9102: LD_EXP 15
9106: PPUSH
9107: LD_STRING 02_Josif
9109: PPUSH
9110: CALL_OW 38
// YouWin ;
9114: CALL_OW 103
// end ; end_of_file
9118: PPOPN 1
9120: END
// export ru_radar , ru_big_cargo_bay , us_hack , us_artillery , ar_bio_bomb , ar_mortar , ar_crane , ar_miner , ru_flamethrower ; export tech_Artillery , tech_RadMat , tech_BasicTools , tech_Cargo , tech_Track , tech_Crane , tech_Bulldozer , tech_Hovercraft , tech_MultiBarrels , tech_ManualTurrets ; export class_mastodont , class_horse ; export function InitGlobalVariables ; begin
9121: LD_INT 0
9123: PPUSH
// ar_miner := 81 ;
9124: LD_ADDR_EXP 70
9128: PUSH
9129: LD_INT 81
9131: ST_TO_ADDR
// ar_crane := 88 ;
9132: LD_ADDR_EXP 69
9136: PUSH
9137: LD_INT 88
9139: ST_TO_ADDR
// ru_big_cargo_bay := 89 ;
9140: LD_ADDR_EXP 64
9144: PUSH
9145: LD_INT 89
9147: ST_TO_ADDR
// us_hack := 99 ;
9148: LD_ADDR_EXP 65
9152: PUSH
9153: LD_INT 99
9155: ST_TO_ADDR
// us_artillery := 97 ;
9156: LD_ADDR_EXP 66
9160: PUSH
9161: LD_INT 97
9163: ST_TO_ADDR
// ar_bio_bomb := 91 ;
9164: LD_ADDR_EXP 67
9168: PUSH
9169: LD_INT 91
9171: ST_TO_ADDR
// ar_mortar := 92 ;
9172: LD_ADDR_EXP 68
9176: PUSH
9177: LD_INT 92
9179: ST_TO_ADDR
// ru_flamethrower := 93 ;
9180: LD_ADDR_EXP 71
9184: PUSH
9185: LD_INT 93
9187: ST_TO_ADDR
// ru_radar := 98 ;
9188: LD_ADDR_EXP 63
9192: PUSH
9193: LD_INT 98
9195: ST_TO_ADDR
// tech_Artillery := 80 ;
9196: LD_ADDR_EXP 72
9200: PUSH
9201: LD_INT 80
9203: ST_TO_ADDR
// tech_RadMat := 81 ;
9204: LD_ADDR_EXP 73
9208: PUSH
9209: LD_INT 81
9211: ST_TO_ADDR
// tech_BasicTools := 82 ;
9212: LD_ADDR_EXP 74
9216: PUSH
9217: LD_INT 82
9219: ST_TO_ADDR
// tech_Cargo := 83 ;
9220: LD_ADDR_EXP 75
9224: PUSH
9225: LD_INT 83
9227: ST_TO_ADDR
// tech_Track := 84 ;
9228: LD_ADDR_EXP 76
9232: PUSH
9233: LD_INT 84
9235: ST_TO_ADDR
// tech_Crane := 85 ;
9236: LD_ADDR_EXP 77
9240: PUSH
9241: LD_INT 85
9243: ST_TO_ADDR
// tech_Bulldozer := 86 ;
9244: LD_ADDR_EXP 78
9248: PUSH
9249: LD_INT 86
9251: ST_TO_ADDR
// tech_Hovercraft := 87 ;
9252: LD_ADDR_EXP 79
9256: PUSH
9257: LD_INT 87
9259: ST_TO_ADDR
// tech_MultiBarrels := 88 ;
9260: LD_ADDR_EXP 80
9264: PUSH
9265: LD_INT 88
9267: ST_TO_ADDR
// tech_ManualTurrets := 90 ;
9268: LD_ADDR_EXP 81
9272: PUSH
9273: LD_INT 90
9275: ST_TO_ADDR
// class_mastodont := 31 ;
9276: LD_ADDR_EXP 82
9280: PUSH
9281: LD_INT 31
9283: ST_TO_ADDR
// class_horse := 21 ;
9284: LD_ADDR_EXP 83
9288: PUSH
9289: LD_INT 21
9291: ST_TO_ADDR
// end ; end_of_file
9292: LD_VAR 0 1
9296: RET
// export function PrepareUnit ( ident , exist_mode , prefix ) ; var unit ; begin
9297: LD_INT 0
9299: PPUSH
9300: PPUSH
// if exist_mode then
9301: LD_VAR 0 2
9305: IFFALSE 9330
// unit := CreateCharacter ( prefix & ident ) else
9307: LD_ADDR_VAR 0 5
9311: PUSH
9312: LD_VAR 0 3
9316: PUSH
9317: LD_VAR 0 1
9321: STR
9322: PPUSH
9323: CALL_OW 34
9327: ST_TO_ADDR
9328: GO 9345
// unit := NewCharacter ( ident ) ;
9330: LD_ADDR_VAR 0 5
9334: PUSH
9335: LD_VAR 0 1
9339: PPUSH
9340: CALL_OW 25
9344: ST_TO_ADDR
// result := unit ;
9345: LD_ADDR_VAR 0 4
9349: PUSH
9350: LD_VAR 0 5
9354: ST_TO_ADDR
// end ;
9355: LD_VAR 0 4
9359: RET
// export function GetTechNation ( side , nation , state ) ; var i ; begin
9360: LD_INT 0
9362: PPUSH
9363: PPUSH
// if not side or not nation then
9364: LD_VAR 0 1
9368: NOT
9369: PUSH
9370: LD_VAR 0 2
9374: NOT
9375: OR
9376: IFFALSE 9380
// exit ;
9378: GO 10148
// case nation of nation_american :
9380: LD_VAR 0 2
9384: PUSH
9385: LD_INT 1
9387: DOUBLE
9388: EQUAL
9389: IFTRUE 9393
9391: GO 9607
9393: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 86 , 1 , 2 , 6 , 15 , 16 , 7 , 12 , 13 , 10 , 14 , 20 , 21 , 22 , 25 , 32 , 27 , 36 , 69 , 39 , 34 , 40 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 60 , 61 , 62 , 80 , 82 , 83 , 84 , 85 , 86 ] ; nation_arabian :
9394: LD_ADDR_VAR 0 4
9398: PUSH
9399: LD_INT 35
9401: PUSH
9402: LD_INT 45
9404: PUSH
9405: LD_INT 46
9407: PUSH
9408: LD_INT 47
9410: PUSH
9411: LD_INT 82
9413: PUSH
9414: LD_INT 83
9416: PUSH
9417: LD_INT 84
9419: PUSH
9420: LD_INT 85
9422: PUSH
9423: LD_INT 86
9425: PUSH
9426: LD_INT 1
9428: PUSH
9429: LD_INT 2
9431: PUSH
9432: LD_INT 6
9434: PUSH
9435: LD_INT 15
9437: PUSH
9438: LD_INT 16
9440: PUSH
9441: LD_INT 7
9443: PUSH
9444: LD_INT 12
9446: PUSH
9447: LD_INT 13
9449: PUSH
9450: LD_INT 10
9452: PUSH
9453: LD_INT 14
9455: PUSH
9456: LD_INT 20
9458: PUSH
9459: LD_INT 21
9461: PUSH
9462: LD_INT 22
9464: PUSH
9465: LD_INT 25
9467: PUSH
9468: LD_INT 32
9470: PUSH
9471: LD_INT 27
9473: PUSH
9474: LD_INT 36
9476: PUSH
9477: LD_INT 69
9479: PUSH
9480: LD_INT 39
9482: PUSH
9483: LD_INT 34
9485: PUSH
9486: LD_INT 40
9488: PUSH
9489: LD_INT 48
9491: PUSH
9492: LD_INT 49
9494: PUSH
9495: LD_INT 50
9497: PUSH
9498: LD_INT 51
9500: PUSH
9501: LD_INT 52
9503: PUSH
9504: LD_INT 53
9506: PUSH
9507: LD_INT 54
9509: PUSH
9510: LD_INT 55
9512: PUSH
9513: LD_INT 56
9515: PUSH
9516: LD_INT 57
9518: PUSH
9519: LD_INT 58
9521: PUSH
9522: LD_INT 59
9524: PUSH
9525: LD_INT 60
9527: PUSH
9528: LD_INT 61
9530: PUSH
9531: LD_INT 62
9533: PUSH
9534: LD_INT 80
9536: PUSH
9537: LD_INT 82
9539: PUSH
9540: LD_INT 83
9542: PUSH
9543: LD_INT 84
9545: PUSH
9546: LD_INT 85
9548: PUSH
9549: LD_INT 86
9551: PUSH
9552: EMPTY
9553: LIST
9554: LIST
9555: LIST
9556: LIST
9557: LIST
9558: LIST
9559: LIST
9560: LIST
9561: LIST
9562: LIST
9563: LIST
9564: LIST
9565: LIST
9566: LIST
9567: LIST
9568: LIST
9569: LIST
9570: LIST
9571: LIST
9572: LIST
9573: LIST
9574: LIST
9575: LIST
9576: LIST
9577: LIST
9578: LIST
9579: LIST
9580: LIST
9581: LIST
9582: LIST
9583: LIST
9584: LIST
9585: LIST
9586: LIST
9587: LIST
9588: LIST
9589: LIST
9590: LIST
9591: LIST
9592: LIST
9593: LIST
9594: LIST
9595: LIST
9596: LIST
9597: LIST
9598: LIST
9599: LIST
9600: LIST
9601: LIST
9602: LIST
9603: LIST
9604: ST_TO_ADDR
9605: GO 10072
9607: LD_INT 2
9609: DOUBLE
9610: EQUAL
9611: IFTRUE 9615
9613: GO 9841
9615: POP
// result := [ 35 , 45 , 46 , 47 , 82 , 83 , 84 , 85 , 87 , 70 , 1 , 11 , 3 , 4 , 5 , 6 , 15 , 18 , 7 , 17 , 8 , 20 , 21 , 22 , 72 , 26 , 69 , 39 , 40 , 41 , 42 , 43 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 60 , 61 , 62 , 66 , 67 , 68 , 81 , 82 , 83 , 84 , 85 , 87 , 88 ] ; nation_russian :
9616: LD_ADDR_VAR 0 4
9620: PUSH
9621: LD_INT 35
9623: PUSH
9624: LD_INT 45
9626: PUSH
9627: LD_INT 46
9629: PUSH
9630: LD_INT 47
9632: PUSH
9633: LD_INT 82
9635: PUSH
9636: LD_INT 83
9638: PUSH
9639: LD_INT 84
9641: PUSH
9642: LD_INT 85
9644: PUSH
9645: LD_INT 87
9647: PUSH
9648: LD_INT 70
9650: PUSH
9651: LD_INT 1
9653: PUSH
9654: LD_INT 11
9656: PUSH
9657: LD_INT 3
9659: PUSH
9660: LD_INT 4
9662: PUSH
9663: LD_INT 5
9665: PUSH
9666: LD_INT 6
9668: PUSH
9669: LD_INT 15
9671: PUSH
9672: LD_INT 18
9674: PUSH
9675: LD_INT 7
9677: PUSH
9678: LD_INT 17
9680: PUSH
9681: LD_INT 8
9683: PUSH
9684: LD_INT 20
9686: PUSH
9687: LD_INT 21
9689: PUSH
9690: LD_INT 22
9692: PUSH
9693: LD_INT 72
9695: PUSH
9696: LD_INT 26
9698: PUSH
9699: LD_INT 69
9701: PUSH
9702: LD_INT 39
9704: PUSH
9705: LD_INT 40
9707: PUSH
9708: LD_INT 41
9710: PUSH
9711: LD_INT 42
9713: PUSH
9714: LD_INT 43
9716: PUSH
9717: LD_INT 48
9719: PUSH
9720: LD_INT 49
9722: PUSH
9723: LD_INT 50
9725: PUSH
9726: LD_INT 51
9728: PUSH
9729: LD_INT 52
9731: PUSH
9732: LD_INT 53
9734: PUSH
9735: LD_INT 54
9737: PUSH
9738: LD_INT 55
9740: PUSH
9741: LD_INT 56
9743: PUSH
9744: LD_INT 60
9746: PUSH
9747: LD_INT 61
9749: PUSH
9750: LD_INT 62
9752: PUSH
9753: LD_INT 66
9755: PUSH
9756: LD_INT 67
9758: PUSH
9759: LD_INT 68
9761: PUSH
9762: LD_INT 81
9764: PUSH
9765: LD_INT 82
9767: PUSH
9768: LD_INT 83
9770: PUSH
9771: LD_INT 84
9773: PUSH
9774: LD_INT 85
9776: PUSH
9777: LD_INT 87
9779: PUSH
9780: LD_INT 88
9782: PUSH
9783: EMPTY
9784: LIST
9785: LIST
9786: LIST
9787: LIST
9788: LIST
9789: LIST
9790: LIST
9791: LIST
9792: LIST
9793: LIST
9794: LIST
9795: LIST
9796: LIST
9797: LIST
9798: LIST
9799: LIST
9800: LIST
9801: LIST
9802: LIST
9803: LIST
9804: LIST
9805: LIST
9806: LIST
9807: LIST
9808: LIST
9809: LIST
9810: LIST
9811: LIST
9812: LIST
9813: LIST
9814: LIST
9815: LIST
9816: LIST
9817: LIST
9818: LIST
9819: LIST
9820: LIST
9821: LIST
9822: LIST
9823: LIST
9824: LIST
9825: LIST
9826: LIST
9827: LIST
9828: LIST
9829: LIST
9830: LIST
9831: LIST
9832: LIST
9833: LIST
9834: LIST
9835: LIST
9836: LIST
9837: LIST
9838: ST_TO_ADDR
9839: GO 10072
9841: LD_INT 3
9843: DOUBLE
9844: EQUAL
9845: IFTRUE 9849
9847: GO 10071
9849: POP
// result := [ 46 , 47 , 1 , 2 , 82 , 83 , 84 , 85 , 86 , 11 , 9 , 20 , 19 , 21 , 24 , 22 , 25 , 28 , 29 , 30 , 31 , 37 , 38 , 32 , 27 , 33 , 69 , 39 , 34 , 40 , 71 , 23 , 44 , 48 , 49 , 50 , 51 , 52 , 53 , 54 , 55 , 56 , 57 , 58 , 59 , 63 , 64 , 65 , 82 , 83 , 84 , 85 , 86 ] ; end ;
9850: LD_ADDR_VAR 0 4
9854: PUSH
9855: LD_INT 46
9857: PUSH
9858: LD_INT 47
9860: PUSH
9861: LD_INT 1
9863: PUSH
9864: LD_INT 2
9866: PUSH
9867: LD_INT 82
9869: PUSH
9870: LD_INT 83
9872: PUSH
9873: LD_INT 84
9875: PUSH
9876: LD_INT 85
9878: PUSH
9879: LD_INT 86
9881: PUSH
9882: LD_INT 11
9884: PUSH
9885: LD_INT 9
9887: PUSH
9888: LD_INT 20
9890: PUSH
9891: LD_INT 19
9893: PUSH
9894: LD_INT 21
9896: PUSH
9897: LD_INT 24
9899: PUSH
9900: LD_INT 22
9902: PUSH
9903: LD_INT 25
9905: PUSH
9906: LD_INT 28
9908: PUSH
9909: LD_INT 29
9911: PUSH
9912: LD_INT 30
9914: PUSH
9915: LD_INT 31
9917: PUSH
9918: LD_INT 37
9920: PUSH
9921: LD_INT 38
9923: PUSH
9924: LD_INT 32
9926: PUSH
9927: LD_INT 27
9929: PUSH
9930: LD_INT 33
9932: PUSH
9933: LD_INT 69
9935: PUSH
9936: LD_INT 39
9938: PUSH
9939: LD_INT 34
9941: PUSH
9942: LD_INT 40
9944: PUSH
9945: LD_INT 71
9947: PUSH
9948: LD_INT 23
9950: PUSH
9951: LD_INT 44
9953: PUSH
9954: LD_INT 48
9956: PUSH
9957: LD_INT 49
9959: PUSH
9960: LD_INT 50
9962: PUSH
9963: LD_INT 51
9965: PUSH
9966: LD_INT 52
9968: PUSH
9969: LD_INT 53
9971: PUSH
9972: LD_INT 54
9974: PUSH
9975: LD_INT 55
9977: PUSH
9978: LD_INT 56
9980: PUSH
9981: LD_INT 57
9983: PUSH
9984: LD_INT 58
9986: PUSH
9987: LD_INT 59
9989: PUSH
9990: LD_INT 63
9992: PUSH
9993: LD_INT 64
9995: PUSH
9996: LD_INT 65
9998: PUSH
9999: LD_INT 82
10001: PUSH
10002: LD_INT 83
10004: PUSH
10005: LD_INT 84
10007: PUSH
10008: LD_INT 85
10010: PUSH
10011: LD_INT 86
10013: PUSH
10014: EMPTY
10015: LIST
10016: LIST
10017: LIST
10018: LIST
10019: LIST
10020: LIST
10021: LIST
10022: LIST
10023: LIST
10024: LIST
10025: LIST
10026: LIST
10027: LIST
10028: LIST
10029: LIST
10030: LIST
10031: LIST
10032: LIST
10033: LIST
10034: LIST
10035: LIST
10036: LIST
10037: LIST
10038: LIST
10039: LIST
10040: LIST
10041: LIST
10042: LIST
10043: LIST
10044: LIST
10045: LIST
10046: LIST
10047: LIST
10048: LIST
10049: LIST
10050: LIST
10051: LIST
10052: LIST
10053: LIST
10054: LIST
10055: LIST
10056: LIST
10057: LIST
10058: LIST
10059: LIST
10060: LIST
10061: LIST
10062: LIST
10063: LIST
10064: LIST
10065: LIST
10066: LIST
10067: LIST
10068: ST_TO_ADDR
10069: GO 10072
10071: POP
// if state > - 1 and state < 3 then
10072: LD_VAR 0 3
10076: PUSH
10077: LD_INT 1
10079: NEG
10080: GREATER
10081: PUSH
10082: LD_VAR 0 3
10086: PUSH
10087: LD_INT 3
10089: LESS
10090: AND
10091: IFFALSE 10148
// for i in result do
10093: LD_ADDR_VAR 0 5
10097: PUSH
10098: LD_VAR 0 4
10102: PUSH
10103: FOR_IN
10104: IFFALSE 10146
// if GetTech ( i , side ) <> state then
10106: LD_VAR 0 5
10110: PPUSH
10111: LD_VAR 0 1
10115: PPUSH
10116: CALL_OW 321
10120: PUSH
10121: LD_VAR 0 3
10125: NONEQUAL
10126: IFFALSE 10144
// result := result diff i ;
10128: LD_ADDR_VAR 0 4
10132: PUSH
10133: LD_VAR 0 4
10137: PUSH
10138: LD_VAR 0 5
10142: DIFF
10143: ST_TO_ADDR
10144: GO 10103
10146: POP
10147: POP
// end ;
10148: LD_VAR 0 4
10152: RET
// export function TechCanBeResearch ( side , tech ) ; var i , tmp ; begin
10153: LD_INT 0
10155: PPUSH
10156: PPUSH
10157: PPUSH
// result := true ;
10158: LD_ADDR_VAR 0 3
10162: PUSH
10163: LD_INT 1
10165: ST_TO_ADDR
// tmp := GetTechTechsReq ( tech ) ;
10166: LD_ADDR_VAR 0 5
10170: PUSH
10171: LD_VAR 0 2
10175: PPUSH
10176: CALL_OW 480
10180: ST_TO_ADDR
// if not tmp then
10181: LD_VAR 0 5
10185: NOT
10186: IFFALSE 10190
// exit ;
10188: GO 10239
// for i in tmp do
10190: LD_ADDR_VAR 0 4
10194: PUSH
10195: LD_VAR 0 5
10199: PUSH
10200: FOR_IN
10201: IFFALSE 10237
// if GetTech ( i , side ) <> state_researched then
10203: LD_VAR 0 4
10207: PPUSH
10208: LD_VAR 0 1
10212: PPUSH
10213: CALL_OW 321
10217: PUSH
10218: LD_INT 2
10220: NONEQUAL
10221: IFFALSE 10235
// begin result := false ;
10223: LD_ADDR_VAR 0 3
10227: PUSH
10228: LD_INT 0
10230: ST_TO_ADDR
// exit ;
10231: POP
10232: POP
10233: GO 10239
// end ;
10235: GO 10200
10237: POP
10238: POP
// end ;
10239: LD_VAR 0 3
10243: RET
// export function ComSpaceTimeShoot ( unit ) ; var i , x , y , _x , _y , tmp , side , enemy , in_unit , tech_space , tech_time , missile ; begin
10244: LD_INT 0
10246: PPUSH
10247: PPUSH
10248: PPUSH
10249: PPUSH
10250: PPUSH
10251: PPUSH
10252: PPUSH
10253: PPUSH
10254: PPUSH
10255: PPUSH
10256: PPUSH
10257: PPUSH
10258: PPUSH
// if not unit or GetClass ( unit ) <> class_bazooker then
10259: LD_VAR 0 1
10263: NOT
10264: PUSH
10265: LD_VAR 0 1
10269: PPUSH
10270: CALL_OW 257
10274: PUSH
10275: LD_INT 9
10277: NONEQUAL
10278: OR
10279: IFFALSE 10283
// exit ;
10281: GO 10856
// side := GetSide ( unit ) ;
10283: LD_ADDR_VAR 0 9
10287: PUSH
10288: LD_VAR 0 1
10292: PPUSH
10293: CALL_OW 255
10297: ST_TO_ADDR
// tech_space := tech_spacanom ;
10298: LD_ADDR_VAR 0 12
10302: PUSH
10303: LD_INT 29
10305: ST_TO_ADDR
// tech_time := tech_taurad ;
10306: LD_ADDR_VAR 0 13
10310: PUSH
10311: LD_INT 28
10313: ST_TO_ADDR
// in_unit := IsInUnit ( unit ) ;
10314: LD_ADDR_VAR 0 11
10318: PUSH
10319: LD_VAR 0 1
10323: PPUSH
10324: CALL_OW 310
10328: ST_TO_ADDR
// if GetType ( in_unit ) = unit_vehicle then
10329: LD_VAR 0 11
10333: PPUSH
10334: CALL_OW 247
10338: PUSH
10339: LD_INT 2
10341: EQUAL
10342: IFFALSE 10346
// exit ;
10344: GO 10856
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
10346: LD_ADDR_VAR 0 8
10350: PUSH
10351: LD_INT 81
10353: PUSH
10354: LD_VAR 0 9
10358: PUSH
10359: EMPTY
10360: LIST
10361: LIST
10362: PUSH
10363: LD_INT 3
10365: PUSH
10366: LD_INT 21
10368: PUSH
10369: LD_INT 3
10371: PUSH
10372: EMPTY
10373: LIST
10374: LIST
10375: PUSH
10376: EMPTY
10377: LIST
10378: LIST
10379: PUSH
10380: EMPTY
10381: LIST
10382: LIST
10383: PPUSH
10384: CALL_OW 69
10388: ST_TO_ADDR
// if not tmp then
10389: LD_VAR 0 8
10393: NOT
10394: IFFALSE 10398
// exit ;
10396: GO 10856
// if in_unit then
10398: LD_VAR 0 11
10402: IFFALSE 10426
// enemy := NearestUnitToUnit ( tmp , in_unit ) else
10404: LD_ADDR_VAR 0 10
10408: PUSH
10409: LD_VAR 0 8
10413: PPUSH
10414: LD_VAR 0 11
10418: PPUSH
10419: CALL_OW 74
10423: ST_TO_ADDR
10424: GO 10446
// enemy := NearestUnitToUnit ( tmp , unit ) ;
10426: LD_ADDR_VAR 0 10
10430: PUSH
10431: LD_VAR 0 8
10435: PPUSH
10436: LD_VAR 0 1
10440: PPUSH
10441: CALL_OW 74
10445: ST_TO_ADDR
// if not enemy then
10446: LD_VAR 0 10
10450: NOT
10451: IFFALSE 10455
// exit ;
10453: GO 10856
// if ( in_unit and GetDistUnits ( in_unit , enemy ) > 13 ) or GetDistUnits ( unit , enemy ) > 12 then
10455: LD_VAR 0 11
10459: PUSH
10460: LD_VAR 0 11
10464: PPUSH
10465: LD_VAR 0 10
10469: PPUSH
10470: CALL_OW 296
10474: PUSH
10475: LD_INT 13
10477: GREATER
10478: AND
10479: PUSH
10480: LD_VAR 0 1
10484: PPUSH
10485: LD_VAR 0 10
10489: PPUSH
10490: CALL_OW 296
10494: PUSH
10495: LD_INT 12
10497: GREATER
10498: OR
10499: IFFALSE 10503
// exit ;
10501: GO 10856
// missile := [ 1 ] ;
10503: LD_ADDR_VAR 0 14
10507: PUSH
10508: LD_INT 1
10510: PUSH
10511: EMPTY
10512: LIST
10513: ST_TO_ADDR
// if Researched ( side , tech_space ) then
10514: LD_VAR 0 9
10518: PPUSH
10519: LD_VAR 0 12
10523: PPUSH
10524: CALL_OW 325
10528: IFFALSE 10557
// missile := Replace ( missile , missile + 1 , 2 ) ;
10530: LD_ADDR_VAR 0 14
10534: PUSH
10535: LD_VAR 0 14
10539: PPUSH
10540: LD_VAR 0 14
10544: PUSH
10545: LD_INT 1
10547: PLUS
10548: PPUSH
10549: LD_INT 2
10551: PPUSH
10552: CALL_OW 1
10556: ST_TO_ADDR
// if Researched ( side , tech_time ) and not Researched ( GetSide ( enemy ) , tech_time ) then
10557: LD_VAR 0 9
10561: PPUSH
10562: LD_VAR 0 13
10566: PPUSH
10567: CALL_OW 325
10571: PUSH
10572: LD_VAR 0 10
10576: PPUSH
10577: CALL_OW 255
10581: PPUSH
10582: LD_VAR 0 13
10586: PPUSH
10587: CALL_OW 325
10591: NOT
10592: AND
10593: IFFALSE 10622
// missile := Replace ( missile , missile + 1 , 3 ) ;
10595: LD_ADDR_VAR 0 14
10599: PUSH
10600: LD_VAR 0 14
10604: PPUSH
10605: LD_VAR 0 14
10609: PUSH
10610: LD_INT 1
10612: PLUS
10613: PPUSH
10614: LD_INT 3
10616: PPUSH
10617: CALL_OW 1
10621: ST_TO_ADDR
// if missile < 2 then
10622: LD_VAR 0 14
10626: PUSH
10627: LD_INT 2
10629: LESS
10630: IFFALSE 10634
// exit ;
10632: GO 10856
// x := GetX ( enemy ) ;
10634: LD_ADDR_VAR 0 4
10638: PUSH
10639: LD_VAR 0 10
10643: PPUSH
10644: CALL_OW 250
10648: ST_TO_ADDR
// y := GetY ( enemy ) ;
10649: LD_ADDR_VAR 0 5
10653: PUSH
10654: LD_VAR 0 10
10658: PPUSH
10659: CALL_OW 251
10663: ST_TO_ADDR
// _x := x + rand ( - 1 , 1 ) ;
10664: LD_ADDR_VAR 0 6
10668: PUSH
10669: LD_VAR 0 4
10673: PUSH
10674: LD_INT 1
10676: NEG
10677: PPUSH
10678: LD_INT 1
10680: PPUSH
10681: CALL_OW 12
10685: PLUS
10686: ST_TO_ADDR
// _y := y + rand ( - 1 , 1 ) ;
10687: LD_ADDR_VAR 0 7
10691: PUSH
10692: LD_VAR 0 5
10696: PUSH
10697: LD_INT 1
10699: NEG
10700: PPUSH
10701: LD_INT 1
10703: PPUSH
10704: CALL_OW 12
10708: PLUS
10709: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10710: LD_VAR 0 6
10714: PPUSH
10715: LD_VAR 0 7
10719: PPUSH
10720: CALL_OW 488
10724: NOT
10725: IFFALSE 10747
// begin _x := x ;
10727: LD_ADDR_VAR 0 6
10731: PUSH
10732: LD_VAR 0 4
10736: ST_TO_ADDR
// _y := y ;
10737: LD_ADDR_VAR 0 7
10741: PUSH
10742: LD_VAR 0 5
10746: ST_TO_ADDR
// end ; i := rand ( 1 , missile ) ;
10747: LD_ADDR_VAR 0 3
10751: PUSH
10752: LD_INT 1
10754: PPUSH
10755: LD_VAR 0 14
10759: PPUSH
10760: CALL_OW 12
10764: ST_TO_ADDR
// case i of 1 :
10765: LD_VAR 0 3
10769: PUSH
10770: LD_INT 1
10772: DOUBLE
10773: EQUAL
10774: IFTRUE 10778
10776: GO 10795
10778: POP
// ComAttackUnit ( unit , enemy ) ; 2 :
10779: LD_VAR 0 1
10783: PPUSH
10784: LD_VAR 0 10
10788: PPUSH
10789: CALL_OW 115
10793: GO 10856
10795: LD_INT 2
10797: DOUBLE
10798: EQUAL
10799: IFTRUE 10803
10801: GO 10825
10803: POP
// ComSpaceShift ( unit , _x , _y ) ; 3 :
10804: LD_VAR 0 1
10808: PPUSH
10809: LD_VAR 0 6
10813: PPUSH
10814: LD_VAR 0 7
10818: PPUSH
10819: CALL_OW 153
10823: GO 10856
10825: LD_INT 3
10827: DOUBLE
10828: EQUAL
10829: IFTRUE 10833
10831: GO 10855
10833: POP
// ComTimeShift ( unit , _x , _y ) ; end ;
10834: LD_VAR 0 1
10838: PPUSH
10839: LD_VAR 0 6
10843: PPUSH
10844: LD_VAR 0 7
10848: PPUSH
10849: CALL_OW 154
10853: GO 10856
10855: POP
// end ;
10856: LD_VAR 0 2
10860: RET
// export function ComStandNearbyBuilding ( unit , building ) ; var i , x , y , _x , _y ; begin
10861: LD_INT 0
10863: PPUSH
10864: PPUSH
10865: PPUSH
10866: PPUSH
10867: PPUSH
10868: PPUSH
// if not unit or not building then
10869: LD_VAR 0 1
10873: NOT
10874: PUSH
10875: LD_VAR 0 2
10879: NOT
10880: OR
10881: IFFALSE 10885
// exit ;
10883: GO 11043
// x := GetX ( building ) ;
10885: LD_ADDR_VAR 0 5
10889: PUSH
10890: LD_VAR 0 2
10894: PPUSH
10895: CALL_OW 250
10899: ST_TO_ADDR
// y := GetY ( building ) ;
10900: LD_ADDR_VAR 0 6
10904: PUSH
10905: LD_VAR 0 2
10909: PPUSH
10910: CALL_OW 251
10914: ST_TO_ADDR
// for i = 0 to 5 do
10915: LD_ADDR_VAR 0 4
10919: PUSH
10920: DOUBLE
10921: LD_INT 0
10923: DEC
10924: ST_TO_ADDR
10925: LD_INT 5
10927: PUSH
10928: FOR_TO
10929: IFFALSE 11041
// begin _x := ShiftX ( x , i , 3 ) ;
10931: LD_ADDR_VAR 0 7
10935: PUSH
10936: LD_VAR 0 5
10940: PPUSH
10941: LD_VAR 0 4
10945: PPUSH
10946: LD_INT 3
10948: PPUSH
10949: CALL_OW 272
10953: ST_TO_ADDR
// _y := ShiftY ( y , i , 3 ) ;
10954: LD_ADDR_VAR 0 8
10958: PUSH
10959: LD_VAR 0 6
10963: PPUSH
10964: LD_VAR 0 4
10968: PPUSH
10969: LD_INT 3
10971: PPUSH
10972: CALL_OW 273
10976: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
10977: LD_VAR 0 7
10981: PPUSH
10982: LD_VAR 0 8
10986: PPUSH
10987: CALL_OW 488
10991: NOT
10992: IFFALSE 10996
// continue ;
10994: GO 10928
// if HexInfo ( _x , _y ) = 0 then
10996: LD_VAR 0 7
11000: PPUSH
11001: LD_VAR 0 8
11005: PPUSH
11006: CALL_OW 428
11010: PUSH
11011: LD_INT 0
11013: EQUAL
11014: IFFALSE 11039
// begin ComMoveXY ( unit , _x , _y ) ;
11016: LD_VAR 0 1
11020: PPUSH
11021: LD_VAR 0 7
11025: PPUSH
11026: LD_VAR 0 8
11030: PPUSH
11031: CALL_OW 111
// exit ;
11035: POP
11036: POP
11037: GO 11043
// end ; end ;
11039: GO 10928
11041: POP
11042: POP
// end ;
11043: LD_VAR 0 3
11047: RET
// export function ScanBase ( side , base_area ) ; begin
11048: LD_INT 0
11050: PPUSH
// result := FilterUnitsInArea ( base_area , [ f_enemy , side ] ) ;
11051: LD_ADDR_VAR 0 3
11055: PUSH
11056: LD_VAR 0 2
11060: PPUSH
11061: LD_INT 81
11063: PUSH
11064: LD_VAR 0 1
11068: PUSH
11069: EMPTY
11070: LIST
11071: LIST
11072: PPUSH
11073: CALL_OW 70
11077: ST_TO_ADDR
// end ;
11078: LD_VAR 0 3
11082: RET
// export function AllowSpecClass ( unit ) ; var side , nat , tech ; begin
11083: LD_INT 0
11085: PPUSH
11086: PPUSH
11087: PPUSH
11088: PPUSH
// result := false ;
11089: LD_ADDR_VAR 0 2
11093: PUSH
11094: LD_INT 0
11096: ST_TO_ADDR
// side := GetSide ( unit ) ;
11097: LD_ADDR_VAR 0 3
11101: PUSH
11102: LD_VAR 0 1
11106: PPUSH
11107: CALL_OW 255
11111: ST_TO_ADDR
// nat := GetNation ( unit ) ;
11112: LD_ADDR_VAR 0 4
11116: PUSH
11117: LD_VAR 0 1
11121: PPUSH
11122: CALL_OW 248
11126: ST_TO_ADDR
// case nat of 1 :
11127: LD_VAR 0 4
11131: PUSH
11132: LD_INT 1
11134: DOUBLE
11135: EQUAL
11136: IFTRUE 11140
11138: GO 11151
11140: POP
// tech := tech_lassight ; 2 :
11141: LD_ADDR_VAR 0 5
11145: PUSH
11146: LD_INT 12
11148: ST_TO_ADDR
11149: GO 11190
11151: LD_INT 2
11153: DOUBLE
11154: EQUAL
11155: IFTRUE 11159
11157: GO 11170
11159: POP
// tech := tech_mortar ; 3 :
11160: LD_ADDR_VAR 0 5
11164: PUSH
11165: LD_INT 41
11167: ST_TO_ADDR
11168: GO 11190
11170: LD_INT 3
11172: DOUBLE
11173: EQUAL
11174: IFTRUE 11178
11176: GO 11189
11178: POP
// tech := tech_bazooka ; end ;
11179: LD_ADDR_VAR 0 5
11183: PUSH
11184: LD_INT 44
11186: ST_TO_ADDR
11187: GO 11190
11189: POP
// if Researched ( side , tech ) then
11190: LD_VAR 0 3
11194: PPUSH
11195: LD_VAR 0 5
11199: PPUSH
11200: CALL_OW 325
11204: IFFALSE 11231
// result := [ class_sniper , class_mortar , class_bazooker ] [ nat ] ;
11206: LD_ADDR_VAR 0 2
11210: PUSH
11211: LD_INT 5
11213: PUSH
11214: LD_INT 8
11216: PUSH
11217: LD_INT 9
11219: PUSH
11220: EMPTY
11221: LIST
11222: LIST
11223: LIST
11224: PUSH
11225: LD_VAR 0 4
11229: ARRAY
11230: ST_TO_ADDR
// end ;
11231: LD_VAR 0 2
11235: RET
// export function DetonateMines ( side , mines ) ; var i , tmp ; begin
11236: LD_INT 0
11238: PPUSH
11239: PPUSH
11240: PPUSH
// if not mines then
11241: LD_VAR 0 2
11245: NOT
11246: IFFALSE 11250
// exit ;
11248: GO 11394
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
11250: LD_ADDR_VAR 0 5
11254: PUSH
11255: LD_INT 81
11257: PUSH
11258: LD_VAR 0 1
11262: PUSH
11263: EMPTY
11264: LIST
11265: LIST
11266: PUSH
11267: LD_INT 3
11269: PUSH
11270: LD_INT 21
11272: PUSH
11273: LD_INT 3
11275: PUSH
11276: EMPTY
11277: LIST
11278: LIST
11279: PUSH
11280: EMPTY
11281: LIST
11282: LIST
11283: PUSH
11284: EMPTY
11285: LIST
11286: LIST
11287: PPUSH
11288: CALL_OW 69
11292: ST_TO_ADDR
// for i in mines do
11293: LD_ADDR_VAR 0 4
11297: PUSH
11298: LD_VAR 0 2
11302: PUSH
11303: FOR_IN
11304: IFFALSE 11392
// begin if not MineAtPos ( i [ 1 ] , i [ 2 ] ) then
11306: LD_VAR 0 4
11310: PUSH
11311: LD_INT 1
11313: ARRAY
11314: PPUSH
11315: LD_VAR 0 4
11319: PUSH
11320: LD_INT 2
11322: ARRAY
11323: PPUSH
11324: CALL_OW 458
11328: NOT
11329: IFFALSE 11333
// continue ;
11331: GO 11303
// if HexInfo ( i [ 1 ] , i [ 2 ] ) in tmp then
11333: LD_VAR 0 4
11337: PUSH
11338: LD_INT 1
11340: ARRAY
11341: PPUSH
11342: LD_VAR 0 4
11346: PUSH
11347: LD_INT 2
11349: ARRAY
11350: PPUSH
11351: CALL_OW 428
11355: PUSH
11356: LD_VAR 0 5
11360: IN
11361: IFFALSE 11390
// LaunchMineAtPos ( i [ 1 ] , i [ 2 ] , side ) ;
11363: LD_VAR 0 4
11367: PUSH
11368: LD_INT 1
11370: ARRAY
11371: PPUSH
11372: LD_VAR 0 4
11376: PUSH
11377: LD_INT 2
11379: ARRAY
11380: PPUSH
11381: LD_VAR 0 1
11385: PPUSH
11386: CALL_OW 456
// end ;
11390: GO 11303
11392: POP
11393: POP
// end ;
11394: LD_VAR 0 3
11398: RET
// export function Count ( array ) ; var i ; begin
11399: LD_INT 0
11401: PPUSH
11402: PPUSH
// result := 0 ;
11403: LD_ADDR_VAR 0 2
11407: PUSH
11408: LD_INT 0
11410: ST_TO_ADDR
// for i in array do
11411: LD_ADDR_VAR 0 3
11415: PUSH
11416: LD_VAR 0 1
11420: PUSH
11421: FOR_IN
11422: IFFALSE 11446
// if i then
11424: LD_VAR 0 3
11428: IFFALSE 11444
// result := result + 1 ;
11430: LD_ADDR_VAR 0 2
11434: PUSH
11435: LD_VAR 0 2
11439: PUSH
11440: LD_INT 1
11442: PLUS
11443: ST_TO_ADDR
11444: GO 11421
11446: POP
11447: POP
// end ;
11448: LD_VAR 0 2
11452: RET
// export function IsEmpty ( building ) ; begin
11453: LD_INT 0
11455: PPUSH
// if not building then
11456: LD_VAR 0 1
11460: NOT
11461: IFFALSE 11465
// exit ;
11463: GO 11508
// result := building in FilterAllUnits ( [ [ f_side , GetSide ( building ) ] , [ f_empty ] ] ) ;
11465: LD_ADDR_VAR 0 2
11469: PUSH
11470: LD_VAR 0 1
11474: PUSH
11475: LD_INT 22
11477: PUSH
11478: LD_VAR 0 1
11482: PPUSH
11483: CALL_OW 255
11487: PUSH
11488: EMPTY
11489: LIST
11490: LIST
11491: PUSH
11492: LD_INT 58
11494: PUSH
11495: EMPTY
11496: LIST
11497: PUSH
11498: EMPTY
11499: LIST
11500: LIST
11501: PPUSH
11502: CALL_OW 69
11506: IN
11507: ST_TO_ADDR
// end ;
11508: LD_VAR 0 2
11512: RET
// export function IsNotFull ( building ) ; begin
11513: LD_INT 0
11515: PPUSH
// if not building then
11516: LD_VAR 0 1
11520: NOT
11521: IFFALSE 11525
// exit ;
11523: GO 11544
// result := UnitsInside ( building ) < 6 ;
11525: LD_ADDR_VAR 0 2
11529: PUSH
11530: LD_VAR 0 1
11534: PPUSH
11535: CALL_OW 313
11539: PUSH
11540: LD_INT 6
11542: LESS
11543: ST_TO_ADDR
// end ;
11544: LD_VAR 0 2
11548: RET
// export function GetFacExt ( factory ) ; var tmp , i , list ; begin
11549: LD_INT 0
11551: PPUSH
11552: PPUSH
11553: PPUSH
11554: PPUSH
// tmp := [ ] ;
11555: LD_ADDR_VAR 0 3
11559: PUSH
11560: EMPTY
11561: ST_TO_ADDR
// list := [ ] ;
11562: LD_ADDR_VAR 0 5
11566: PUSH
11567: EMPTY
11568: ST_TO_ADDR
// for i = 16 to 25 do
11569: LD_ADDR_VAR 0 4
11573: PUSH
11574: DOUBLE
11575: LD_INT 16
11577: DEC
11578: ST_TO_ADDR
11579: LD_INT 25
11581: PUSH
11582: FOR_TO
11583: IFFALSE 11656
// tmp := tmp ^ FilterAllUnits ( [ [ [ f_side , GetSide ( factory ) ] , [ f_dist , factory , 6 ] , [ f_btype , i ] ] ] ) ;
11585: LD_ADDR_VAR 0 3
11589: PUSH
11590: LD_VAR 0 3
11594: PUSH
11595: LD_INT 22
11597: PUSH
11598: LD_VAR 0 1
11602: PPUSH
11603: CALL_OW 255
11607: PUSH
11608: EMPTY
11609: LIST
11610: LIST
11611: PUSH
11612: LD_INT 91
11614: PUSH
11615: LD_VAR 0 1
11619: PUSH
11620: LD_INT 6
11622: PUSH
11623: EMPTY
11624: LIST
11625: LIST
11626: LIST
11627: PUSH
11628: LD_INT 30
11630: PUSH
11631: LD_VAR 0 4
11635: PUSH
11636: EMPTY
11637: LIST
11638: LIST
11639: PUSH
11640: EMPTY
11641: LIST
11642: LIST
11643: LIST
11644: PUSH
11645: EMPTY
11646: LIST
11647: PPUSH
11648: CALL_OW 69
11652: ADD
11653: ST_TO_ADDR
11654: GO 11582
11656: POP
11657: POP
// for i = 1 to tmp do
11658: LD_ADDR_VAR 0 4
11662: PUSH
11663: DOUBLE
11664: LD_INT 1
11666: DEC
11667: ST_TO_ADDR
11668: LD_VAR 0 3
11672: PUSH
11673: FOR_TO
11674: IFFALSE 11762
// list := list ^ [ [ GetBType ( tmp [ i ] ) , GetX ( tmp [ i ] ) , GetY ( tmp [ i ] ) , GetDir ( tmp [ i ] ) ] ] ;
11676: LD_ADDR_VAR 0 5
11680: PUSH
11681: LD_VAR 0 5
11685: PUSH
11686: LD_VAR 0 3
11690: PUSH
11691: LD_VAR 0 4
11695: ARRAY
11696: PPUSH
11697: CALL_OW 266
11701: PUSH
11702: LD_VAR 0 3
11706: PUSH
11707: LD_VAR 0 4
11711: ARRAY
11712: PPUSH
11713: CALL_OW 250
11717: PUSH
11718: LD_VAR 0 3
11722: PUSH
11723: LD_VAR 0 4
11727: ARRAY
11728: PPUSH
11729: CALL_OW 251
11733: PUSH
11734: LD_VAR 0 3
11738: PUSH
11739: LD_VAR 0 4
11743: ARRAY
11744: PPUSH
11745: CALL_OW 254
11749: PUSH
11750: EMPTY
11751: LIST
11752: LIST
11753: LIST
11754: LIST
11755: PUSH
11756: EMPTY
11757: LIST
11758: ADD
11759: ST_TO_ADDR
11760: GO 11673
11762: POP
11763: POP
// result := list ;
11764: LD_ADDR_VAR 0 2
11768: PUSH
11769: LD_VAR 0 5
11773: ST_TO_ADDR
// end ;
11774: LD_VAR 0 2
11778: RET
// export function Produce ( factory , chassis , engine , control , weapon ) ; var i , tmp , _chassis , _weapon , _engine , _control ; begin
11779: LD_INT 0
11781: PPUSH
11782: PPUSH
11783: PPUSH
11784: PPUSH
11785: PPUSH
11786: PPUSH
11787: PPUSH
// if not factory then
11788: LD_VAR 0 1
11792: NOT
11793: IFFALSE 11797
// exit ;
11795: GO 12390
// if control = control_apeman then
11797: LD_VAR 0 4
11801: PUSH
11802: LD_INT 5
11804: EQUAL
11805: IFFALSE 11914
// begin tmp := UnitsInside ( factory ) ;
11807: LD_ADDR_VAR 0 8
11811: PUSH
11812: LD_VAR 0 1
11816: PPUSH
11817: CALL_OW 313
11821: ST_TO_ADDR
// if not UnitFilter ( tmp , [ f_class , class_apeman ] ) then
11822: LD_VAR 0 8
11826: PPUSH
11827: LD_INT 25
11829: PUSH
11830: LD_INT 12
11832: PUSH
11833: EMPTY
11834: LIST
11835: LIST
11836: PPUSH
11837: CALL_OW 72
11841: NOT
11842: IFFALSE 11852
// control := control_manual ;
11844: LD_ADDR_VAR 0 4
11848: PUSH
11849: LD_INT 1
11851: ST_TO_ADDR
// tmp := GetFacExt ( factory ) ;
11852: LD_ADDR_VAR 0 8
11856: PUSH
11857: LD_VAR 0 1
11861: PPUSH
11862: CALL 11549 0 1
11866: ST_TO_ADDR
// if tmp then
11867: LD_VAR 0 8
11871: IFFALSE 11914
// begin for i in tmp do
11873: LD_ADDR_VAR 0 7
11877: PUSH
11878: LD_VAR 0 8
11882: PUSH
11883: FOR_IN
11884: IFFALSE 11912
// if i [ 1 ] = b_ext_radio then
11886: LD_VAR 0 7
11890: PUSH
11891: LD_INT 1
11893: ARRAY
11894: PUSH
11895: LD_INT 22
11897: EQUAL
11898: IFFALSE 11910
// begin control := control_remote ;
11900: LD_ADDR_VAR 0 4
11904: PUSH
11905: LD_INT 2
11907: ST_TO_ADDR
// break ;
11908: GO 11912
// end ;
11910: GO 11883
11912: POP
11913: POP
// end ; end ; if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
11914: LD_VAR 0 1
11918: PPUSH
11919: LD_VAR 0 2
11923: PPUSH
11924: LD_VAR 0 3
11928: PPUSH
11929: LD_VAR 0 4
11933: PPUSH
11934: LD_VAR 0 5
11938: PPUSH
11939: CALL_OW 448
11943: IFFALSE 11978
// begin result := [ chassis , engine , control , weapon ] ;
11945: LD_ADDR_VAR 0 6
11949: PUSH
11950: LD_VAR 0 2
11954: PUSH
11955: LD_VAR 0 3
11959: PUSH
11960: LD_VAR 0 4
11964: PUSH
11965: LD_VAR 0 5
11969: PUSH
11970: EMPTY
11971: LIST
11972: LIST
11973: LIST
11974: LIST
11975: ST_TO_ADDR
// exit ;
11976: GO 12390
// end ; _chassis := AvailableChassisList ( factory ) ;
11978: LD_ADDR_VAR 0 9
11982: PUSH
11983: LD_VAR 0 1
11987: PPUSH
11988: CALL_OW 475
11992: ST_TO_ADDR
// _engine := AvailableEngineList ( factory ) ;
11993: LD_ADDR_VAR 0 11
11997: PUSH
11998: LD_VAR 0 1
12002: PPUSH
12003: CALL_OW 476
12007: ST_TO_ADDR
// _control := AvailableControlList ( factory ) ;
12008: LD_ADDR_VAR 0 12
12012: PUSH
12013: LD_VAR 0 1
12017: PPUSH
12018: CALL_OW 477
12022: ST_TO_ADDR
// _weapon := AvailableWeaponList ( factory ) ;
12023: LD_ADDR_VAR 0 10
12027: PUSH
12028: LD_VAR 0 1
12032: PPUSH
12033: CALL_OW 478
12037: ST_TO_ADDR
// if not _chassis or not _engine or not _control or not _weapon then
12038: LD_VAR 0 9
12042: NOT
12043: PUSH
12044: LD_VAR 0 11
12048: NOT
12049: OR
12050: PUSH
12051: LD_VAR 0 12
12055: NOT
12056: OR
12057: PUSH
12058: LD_VAR 0 10
12062: NOT
12063: OR
12064: IFFALSE 12099
// begin result := [ chassis , engine , control , weapon ] ;
12066: LD_ADDR_VAR 0 6
12070: PUSH
12071: LD_VAR 0 2
12075: PUSH
12076: LD_VAR 0 3
12080: PUSH
12081: LD_VAR 0 4
12085: PUSH
12086: LD_VAR 0 5
12090: PUSH
12091: EMPTY
12092: LIST
12093: LIST
12094: LIST
12095: LIST
12096: ST_TO_ADDR
// exit ;
12097: GO 12390
// end ; if not chassis in _chassis then
12099: LD_VAR 0 2
12103: PUSH
12104: LD_VAR 0 9
12108: IN
12109: NOT
12110: IFFALSE 12136
// chassis := _chassis [ rand ( 1 , _chassis ) ] ;
12112: LD_ADDR_VAR 0 2
12116: PUSH
12117: LD_VAR 0 9
12121: PUSH
12122: LD_INT 1
12124: PPUSH
12125: LD_VAR 0 9
12129: PPUSH
12130: CALL_OW 12
12134: ARRAY
12135: ST_TO_ADDR
// if not EngineCanBeMount ( chassis , engine ) then
12136: LD_VAR 0 2
12140: PPUSH
12141: LD_VAR 0 3
12145: PPUSH
12146: CALL 12395 0 2
12150: NOT
12151: IFFALSE 12210
// repeat engine := _engine [ 1 ] ;
12153: LD_ADDR_VAR 0 3
12157: PUSH
12158: LD_VAR 0 11
12162: PUSH
12163: LD_INT 1
12165: ARRAY
12166: ST_TO_ADDR
// _engine := Delete ( _engine , 1 ) ;
12167: LD_ADDR_VAR 0 11
12171: PUSH
12172: LD_VAR 0 11
12176: PPUSH
12177: LD_INT 1
12179: PPUSH
12180: CALL_OW 3
12184: ST_TO_ADDR
// until EngineCanBeMount ( chassis , engine ) or _engine = [ ] ;
12185: LD_VAR 0 2
12189: PPUSH
12190: LD_VAR 0 3
12194: PPUSH
12195: CALL 12395 0 2
12199: PUSH
12200: LD_VAR 0 11
12204: PUSH
12205: EMPTY
12206: EQUAL
12207: OR
12208: IFFALSE 12153
// if not control in _control then
12210: LD_VAR 0 4
12214: PUSH
12215: LD_VAR 0 12
12219: IN
12220: NOT
12221: IFFALSE 12247
// control := _control [ rand ( 1 , _control ) ] ;
12223: LD_ADDR_VAR 0 4
12227: PUSH
12228: LD_VAR 0 12
12232: PUSH
12233: LD_INT 1
12235: PPUSH
12236: LD_VAR 0 12
12240: PPUSH
12241: CALL_OW 12
12245: ARRAY
12246: ST_TO_ADDR
// if not WeaponCanBeMount ( chassis , weapon ) then
12247: LD_VAR 0 2
12251: PPUSH
12252: LD_VAR 0 5
12256: PPUSH
12257: CALL 12615 0 2
12261: NOT
12262: IFFALSE 12321
// repeat weapon := _weapon [ 1 ] ;
12264: LD_ADDR_VAR 0 5
12268: PUSH
12269: LD_VAR 0 10
12273: PUSH
12274: LD_INT 1
12276: ARRAY
12277: ST_TO_ADDR
// _weapon := Delete ( _weapon , 1 ) ;
12278: LD_ADDR_VAR 0 10
12282: PUSH
12283: LD_VAR 0 10
12287: PPUSH
12288: LD_INT 1
12290: PPUSH
12291: CALL_OW 3
12295: ST_TO_ADDR
// until WeaponCanBeMount ( chassis , weapon ) or _weapon = [ ] ;
12296: LD_VAR 0 2
12300: PPUSH
12301: LD_VAR 0 5
12305: PPUSH
12306: CALL 12615 0 2
12310: PUSH
12311: LD_VAR 0 10
12315: PUSH
12316: EMPTY
12317: EQUAL
12318: OR
12319: IFFALSE 12264
// result := [ ] ;
12321: LD_ADDR_VAR 0 6
12325: PUSH
12326: EMPTY
12327: ST_TO_ADDR
// if CanBeConstructed ( factory , chassis , engine , control , weapon ) then
12328: LD_VAR 0 1
12332: PPUSH
12333: LD_VAR 0 2
12337: PPUSH
12338: LD_VAR 0 3
12342: PPUSH
12343: LD_VAR 0 4
12347: PPUSH
12348: LD_VAR 0 5
12352: PPUSH
12353: CALL_OW 448
12357: IFFALSE 12390
// result := [ chassis , engine , control , weapon ] ;
12359: LD_ADDR_VAR 0 6
12363: PUSH
12364: LD_VAR 0 2
12368: PUSH
12369: LD_VAR 0 3
12373: PUSH
12374: LD_VAR 0 4
12378: PUSH
12379: LD_VAR 0 5
12383: PUSH
12384: EMPTY
12385: LIST
12386: LIST
12387: LIST
12388: LIST
12389: ST_TO_ADDR
// end ;
12390: LD_VAR 0 6
12394: RET
// export function EngineCanBeMount ( chassis , engine ) ; begin
12395: LD_INT 0
12397: PPUSH
// if not chassis or not engine then
12398: LD_VAR 0 1
12402: NOT
12403: PUSH
12404: LD_VAR 0 2
12408: NOT
12409: OR
12410: IFFALSE 12414
// exit ;
12412: GO 12610
// case engine of engine_solar :
12414: LD_VAR 0 2
12418: PUSH
12419: LD_INT 2
12421: DOUBLE
12422: EQUAL
12423: IFTRUE 12427
12425: GO 12465
12427: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked ] ; engine_combustion :
12428: LD_ADDR_VAR 0 3
12432: PUSH
12433: LD_INT 11
12435: PUSH
12436: LD_INT 12
12438: PUSH
12439: LD_INT 13
12441: PUSH
12442: LD_INT 14
12444: PUSH
12445: LD_INT 1
12447: PUSH
12448: LD_INT 2
12450: PUSH
12451: LD_INT 3
12453: PUSH
12454: EMPTY
12455: LIST
12456: LIST
12457: LIST
12458: LIST
12459: LIST
12460: LIST
12461: LIST
12462: ST_TO_ADDR
12463: GO 12594
12465: LD_INT 1
12467: DOUBLE
12468: EQUAL
12469: IFTRUE 12473
12471: GO 12535
12473: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked , us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_heavy_wheeled , ru_medium_tracked , ru_heavy_tracked ] ; engine_siberite :
12474: LD_ADDR_VAR 0 3
12478: PUSH
12479: LD_INT 11
12481: PUSH
12482: LD_INT 12
12484: PUSH
12485: LD_INT 13
12487: PUSH
12488: LD_INT 14
12490: PUSH
12491: LD_INT 1
12493: PUSH
12494: LD_INT 2
12496: PUSH
12497: LD_INT 3
12499: PUSH
12500: LD_INT 4
12502: PUSH
12503: LD_INT 5
12505: PUSH
12506: LD_INT 21
12508: PUSH
12509: LD_INT 23
12511: PUSH
12512: LD_INT 22
12514: PUSH
12515: LD_INT 24
12517: PUSH
12518: EMPTY
12519: LIST
12520: LIST
12521: LIST
12522: LIST
12523: LIST
12524: LIST
12525: LIST
12526: LIST
12527: LIST
12528: LIST
12529: LIST
12530: LIST
12531: LIST
12532: ST_TO_ADDR
12533: GO 12594
12535: LD_INT 3
12537: DOUBLE
12538: EQUAL
12539: IFTRUE 12543
12541: GO 12593
12543: POP
// result := [ ar_medium_trike , ar_half_tracked , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling , ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
12544: LD_ADDR_VAR 0 3
12548: PUSH
12549: LD_INT 13
12551: PUSH
12552: LD_INT 14
12554: PUSH
12555: LD_INT 2
12557: PUSH
12558: LD_INT 3
12560: PUSH
12561: LD_INT 4
12563: PUSH
12564: LD_INT 5
12566: PUSH
12567: LD_INT 21
12569: PUSH
12570: LD_INT 22
12572: PUSH
12573: LD_INT 23
12575: PUSH
12576: LD_INT 24
12578: PUSH
12579: EMPTY
12580: LIST
12581: LIST
12582: LIST
12583: LIST
12584: LIST
12585: LIST
12586: LIST
12587: LIST
12588: LIST
12589: LIST
12590: ST_TO_ADDR
12591: GO 12594
12593: POP
// result := ( chassis in result ) ;
12594: LD_ADDR_VAR 0 3
12598: PUSH
12599: LD_VAR 0 1
12603: PUSH
12604: LD_VAR 0 3
12608: IN
12609: ST_TO_ADDR
// end ;
12610: LD_VAR 0 3
12614: RET
// export function WeaponCanBeMount ( chassis , weapon ) ; begin
12615: LD_INT 0
12617: PPUSH
// if not chassis or not weapon then
12618: LD_VAR 0 1
12622: NOT
12623: PUSH
12624: LD_VAR 0 2
12628: NOT
12629: OR
12630: IFFALSE 12634
// exit ;
12632: GO 13696
// case weapon of us_machine_gun :
12634: LD_VAR 0 2
12638: PUSH
12639: LD_INT 2
12641: DOUBLE
12642: EQUAL
12643: IFTRUE 12647
12645: GO 12677
12647: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_light_gun :
12648: LD_ADDR_VAR 0 3
12652: PUSH
12653: LD_INT 1
12655: PUSH
12656: LD_INT 2
12658: PUSH
12659: LD_INT 3
12661: PUSH
12662: LD_INT 4
12664: PUSH
12665: LD_INT 5
12667: PUSH
12668: EMPTY
12669: LIST
12670: LIST
12671: LIST
12672: LIST
12673: LIST
12674: ST_TO_ADDR
12675: GO 13680
12677: LD_INT 3
12679: DOUBLE
12680: EQUAL
12681: IFTRUE 12685
12683: GO 12715
12685: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_radar :
12686: LD_ADDR_VAR 0 3
12690: PUSH
12691: LD_INT 1
12693: PUSH
12694: LD_INT 2
12696: PUSH
12697: LD_INT 3
12699: PUSH
12700: LD_INT 4
12702: PUSH
12703: LD_INT 5
12705: PUSH
12706: EMPTY
12707: LIST
12708: LIST
12709: LIST
12710: LIST
12711: LIST
12712: ST_TO_ADDR
12713: GO 13680
12715: LD_INT 11
12717: DOUBLE
12718: EQUAL
12719: IFTRUE 12723
12721: GO 12753
12723: POP
// result := [ us_light_wheeled , us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_gatling_gun :
12724: LD_ADDR_VAR 0 3
12728: PUSH
12729: LD_INT 1
12731: PUSH
12732: LD_INT 2
12734: PUSH
12735: LD_INT 3
12737: PUSH
12738: LD_INT 4
12740: PUSH
12741: LD_INT 5
12743: PUSH
12744: EMPTY
12745: LIST
12746: LIST
12747: LIST
12748: LIST
12749: LIST
12750: ST_TO_ADDR
12751: GO 13680
12753: LD_INT 4
12755: DOUBLE
12756: EQUAL
12757: IFTRUE 12761
12759: GO 12787
12761: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_double_gun :
12762: LD_ADDR_VAR 0 3
12766: PUSH
12767: LD_INT 2
12769: PUSH
12770: LD_INT 3
12772: PUSH
12773: LD_INT 4
12775: PUSH
12776: LD_INT 5
12778: PUSH
12779: EMPTY
12780: LIST
12781: LIST
12782: LIST
12783: LIST
12784: ST_TO_ADDR
12785: GO 13680
12787: LD_INT 5
12789: DOUBLE
12790: EQUAL
12791: IFTRUE 12795
12793: GO 12821
12795: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_laser :
12796: LD_ADDR_VAR 0 3
12800: PUSH
12801: LD_INT 2
12803: PUSH
12804: LD_INT 3
12806: PUSH
12807: LD_INT 4
12809: PUSH
12810: LD_INT 5
12812: PUSH
12813: EMPTY
12814: LIST
12815: LIST
12816: LIST
12817: LIST
12818: ST_TO_ADDR
12819: GO 13680
12821: LD_INT 9
12823: DOUBLE
12824: EQUAL
12825: IFTRUE 12829
12827: GO 12855
12829: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_rocket_launcher :
12830: LD_ADDR_VAR 0 3
12834: PUSH
12835: LD_INT 2
12837: PUSH
12838: LD_INT 3
12840: PUSH
12841: LD_INT 4
12843: PUSH
12844: LD_INT 5
12846: PUSH
12847: EMPTY
12848: LIST
12849: LIST
12850: LIST
12851: LIST
12852: ST_TO_ADDR
12853: GO 13680
12855: LD_INT 7
12857: DOUBLE
12858: EQUAL
12859: IFTRUE 12863
12861: GO 12889
12863: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_cargo_bay :
12864: LD_ADDR_VAR 0 3
12868: PUSH
12869: LD_INT 2
12871: PUSH
12872: LD_INT 3
12874: PUSH
12875: LD_INT 4
12877: PUSH
12878: LD_INT 5
12880: PUSH
12881: EMPTY
12882: LIST
12883: LIST
12884: LIST
12885: LIST
12886: ST_TO_ADDR
12887: GO 13680
12889: LD_INT 12
12891: DOUBLE
12892: EQUAL
12893: IFTRUE 12897
12895: GO 12923
12897: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_crane :
12898: LD_ADDR_VAR 0 3
12902: PUSH
12903: LD_INT 2
12905: PUSH
12906: LD_INT 3
12908: PUSH
12909: LD_INT 4
12911: PUSH
12912: LD_INT 5
12914: PUSH
12915: EMPTY
12916: LIST
12917: LIST
12918: LIST
12919: LIST
12920: ST_TO_ADDR
12921: GO 13680
12923: LD_INT 13
12925: DOUBLE
12926: EQUAL
12927: IFTRUE 12931
12929: GO 12957
12931: POP
// result := [ us_medium_wheeled , us_medium_tracked , us_heavy_tracked , us_morphling ] ; us_bulldozer :
12932: LD_ADDR_VAR 0 3
12936: PUSH
12937: LD_INT 2
12939: PUSH
12940: LD_INT 3
12942: PUSH
12943: LD_INT 4
12945: PUSH
12946: LD_INT 5
12948: PUSH
12949: EMPTY
12950: LIST
12951: LIST
12952: LIST
12953: LIST
12954: ST_TO_ADDR
12955: GO 13680
12957: LD_INT 14
12959: DOUBLE
12960: EQUAL
12961: IFTRUE 12965
12963: GO 12983
12965: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_heavy_gun :
12966: LD_ADDR_VAR 0 3
12970: PUSH
12971: LD_INT 4
12973: PUSH
12974: LD_INT 5
12976: PUSH
12977: EMPTY
12978: LIST
12979: LIST
12980: ST_TO_ADDR
12981: GO 13680
12983: LD_INT 6
12985: DOUBLE
12986: EQUAL
12987: IFTRUE 12991
12989: GO 13009
12991: POP
// result := [ us_heavy_tracked , us_morphling ] ; us_double_laser :
12992: LD_ADDR_VAR 0 3
12996: PUSH
12997: LD_INT 4
12999: PUSH
13000: LD_INT 5
13002: PUSH
13003: EMPTY
13004: LIST
13005: LIST
13006: ST_TO_ADDR
13007: GO 13680
13009: LD_INT 10
13011: DOUBLE
13012: EQUAL
13013: IFTRUE 13017
13015: GO 13035
13017: POP
// result := [ us_heavy_tracked , us_morphling ] ; ar_multimissile_ballista :
13018: LD_ADDR_VAR 0 3
13022: PUSH
13023: LD_INT 4
13025: PUSH
13026: LD_INT 5
13028: PUSH
13029: EMPTY
13030: LIST
13031: LIST
13032: ST_TO_ADDR
13033: GO 13680
13035: LD_INT 22
13037: DOUBLE
13038: EQUAL
13039: IFTRUE 13043
13041: GO 13069
13043: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_light_gun :
13044: LD_ADDR_VAR 0 3
13048: PUSH
13049: LD_INT 11
13051: PUSH
13052: LD_INT 12
13054: PUSH
13055: LD_INT 13
13057: PUSH
13058: LD_INT 14
13060: PUSH
13061: EMPTY
13062: LIST
13063: LIST
13064: LIST
13065: LIST
13066: ST_TO_ADDR
13067: GO 13680
13069: LD_INT 23
13071: DOUBLE
13072: EQUAL
13073: IFTRUE 13077
13075: GO 13103
13077: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_double_machine_gun :
13078: LD_ADDR_VAR 0 3
13082: PUSH
13083: LD_INT 11
13085: PUSH
13086: LD_INT 12
13088: PUSH
13089: LD_INT 13
13091: PUSH
13092: LD_INT 14
13094: PUSH
13095: EMPTY
13096: LIST
13097: LIST
13098: LIST
13099: LIST
13100: ST_TO_ADDR
13101: GO 13680
13103: LD_INT 24
13105: DOUBLE
13106: EQUAL
13107: IFTRUE 13111
13109: GO 13137
13111: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_radar :
13112: LD_ADDR_VAR 0 3
13116: PUSH
13117: LD_INT 11
13119: PUSH
13120: LD_INT 12
13122: PUSH
13123: LD_INT 13
13125: PUSH
13126: LD_INT 14
13128: PUSH
13129: EMPTY
13130: LIST
13131: LIST
13132: LIST
13133: LIST
13134: ST_TO_ADDR
13135: GO 13680
13137: LD_INT 30
13139: DOUBLE
13140: EQUAL
13141: IFTRUE 13145
13143: GO 13171
13145: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_gatling_gun :
13146: LD_ADDR_VAR 0 3
13150: PUSH
13151: LD_INT 11
13153: PUSH
13154: LD_INT 12
13156: PUSH
13157: LD_INT 13
13159: PUSH
13160: LD_INT 14
13162: PUSH
13163: EMPTY
13164: LIST
13165: LIST
13166: LIST
13167: LIST
13168: ST_TO_ADDR
13169: GO 13680
13171: LD_INT 25
13173: DOUBLE
13174: EQUAL
13175: IFTRUE 13179
13177: GO 13197
13179: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_gun :
13180: LD_ADDR_VAR 0 3
13184: PUSH
13185: LD_INT 13
13187: PUSH
13188: LD_INT 14
13190: PUSH
13191: EMPTY
13192: LIST
13193: LIST
13194: ST_TO_ADDR
13195: GO 13680
13197: LD_INT 27
13199: DOUBLE
13200: EQUAL
13201: IFTRUE 13205
13203: GO 13223
13205: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_mortar :
13206: LD_ADDR_VAR 0 3
13210: PUSH
13211: LD_INT 13
13213: PUSH
13214: LD_INT 14
13216: PUSH
13217: EMPTY
13218: LIST
13219: LIST
13220: ST_TO_ADDR
13221: GO 13680
13223: LD_EXP 68
13227: DOUBLE
13228: EQUAL
13229: IFTRUE 13233
13231: GO 13259
13233: POP
// result := [ ar_hovercraft , ar_light_trike , ar_medium_trike , ar_half_tracked ] ; ar_rocket_launcher :
13234: LD_ADDR_VAR 0 3
13238: PUSH
13239: LD_INT 11
13241: PUSH
13242: LD_INT 12
13244: PUSH
13245: LD_INT 13
13247: PUSH
13248: LD_INT 14
13250: PUSH
13251: EMPTY
13252: LIST
13253: LIST
13254: LIST
13255: LIST
13256: ST_TO_ADDR
13257: GO 13680
13259: LD_INT 28
13261: DOUBLE
13262: EQUAL
13263: IFTRUE 13267
13265: GO 13285
13267: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_selfpropelled_bomb :
13268: LD_ADDR_VAR 0 3
13272: PUSH
13273: LD_INT 13
13275: PUSH
13276: LD_INT 14
13278: PUSH
13279: EMPTY
13280: LIST
13281: LIST
13282: ST_TO_ADDR
13283: GO 13680
13285: LD_INT 29
13287: DOUBLE
13288: EQUAL
13289: IFTRUE 13293
13291: GO 13311
13293: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_control_tower :
13294: LD_ADDR_VAR 0 3
13298: PUSH
13299: LD_INT 13
13301: PUSH
13302: LD_INT 14
13304: PUSH
13305: EMPTY
13306: LIST
13307: LIST
13308: ST_TO_ADDR
13309: GO 13680
13311: LD_INT 31
13313: DOUBLE
13314: EQUAL
13315: IFTRUE 13319
13317: GO 13337
13319: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ar_flame_thrower :
13320: LD_ADDR_VAR 0 3
13324: PUSH
13325: LD_INT 13
13327: PUSH
13328: LD_INT 14
13330: PUSH
13331: EMPTY
13332: LIST
13333: LIST
13334: ST_TO_ADDR
13335: GO 13680
13337: LD_INT 26
13339: DOUBLE
13340: EQUAL
13341: IFTRUE 13345
13343: GO 13363
13345: POP
// result := [ ar_medium_trike , ar_half_tracked ] ; ru_heavy_machine_gun :
13346: LD_ADDR_VAR 0 3
13350: PUSH
13351: LD_INT 13
13353: PUSH
13354: LD_INT 14
13356: PUSH
13357: EMPTY
13358: LIST
13359: LIST
13360: ST_TO_ADDR
13361: GO 13680
13363: LD_INT 42
13365: DOUBLE
13366: EQUAL
13367: IFTRUE 13371
13369: GO 13397
13371: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gatling_gun :
13372: LD_ADDR_VAR 0 3
13376: PUSH
13377: LD_INT 21
13379: PUSH
13380: LD_INT 22
13382: PUSH
13383: LD_INT 23
13385: PUSH
13386: LD_INT 24
13388: PUSH
13389: EMPTY
13390: LIST
13391: LIST
13392: LIST
13393: LIST
13394: ST_TO_ADDR
13395: GO 13680
13397: LD_INT 43
13399: DOUBLE
13400: EQUAL
13401: IFTRUE 13405
13403: GO 13431
13405: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_gun :
13406: LD_ADDR_VAR 0 3
13410: PUSH
13411: LD_INT 21
13413: PUSH
13414: LD_INT 22
13416: PUSH
13417: LD_INT 23
13419: PUSH
13420: LD_INT 24
13422: PUSH
13423: EMPTY
13424: LIST
13425: LIST
13426: LIST
13427: LIST
13428: ST_TO_ADDR
13429: GO 13680
13431: LD_INT 44
13433: DOUBLE
13434: EQUAL
13435: IFTRUE 13439
13437: GO 13465
13439: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket_launcher :
13440: LD_ADDR_VAR 0 3
13444: PUSH
13445: LD_INT 21
13447: PUSH
13448: LD_INT 22
13450: PUSH
13451: LD_INT 23
13453: PUSH
13454: LD_INT 24
13456: PUSH
13457: EMPTY
13458: LIST
13459: LIST
13460: LIST
13461: LIST
13462: ST_TO_ADDR
13463: GO 13680
13465: LD_INT 45
13467: DOUBLE
13468: EQUAL
13469: IFTRUE 13473
13471: GO 13499
13473: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_time_lapser :
13474: LD_ADDR_VAR 0 3
13478: PUSH
13479: LD_INT 21
13481: PUSH
13482: LD_INT 22
13484: PUSH
13485: LD_INT 23
13487: PUSH
13488: LD_INT 24
13490: PUSH
13491: EMPTY
13492: LIST
13493: LIST
13494: LIST
13495: LIST
13496: ST_TO_ADDR
13497: GO 13680
13499: LD_INT 49
13501: DOUBLE
13502: EQUAL
13503: IFTRUE 13507
13505: GO 13533
13507: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_cargo_bay :
13508: LD_ADDR_VAR 0 3
13512: PUSH
13513: LD_INT 21
13515: PUSH
13516: LD_INT 22
13518: PUSH
13519: LD_INT 23
13521: PUSH
13522: LD_INT 24
13524: PUSH
13525: EMPTY
13526: LIST
13527: LIST
13528: LIST
13529: LIST
13530: ST_TO_ADDR
13531: GO 13680
13533: LD_INT 51
13535: DOUBLE
13536: EQUAL
13537: IFTRUE 13541
13539: GO 13567
13541: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_crane :
13542: LD_ADDR_VAR 0 3
13546: PUSH
13547: LD_INT 21
13549: PUSH
13550: LD_INT 22
13552: PUSH
13553: LD_INT 23
13555: PUSH
13556: LD_INT 24
13558: PUSH
13559: EMPTY
13560: LIST
13561: LIST
13562: LIST
13563: LIST
13564: ST_TO_ADDR
13565: GO 13680
13567: LD_INT 52
13569: DOUBLE
13570: EQUAL
13571: IFTRUE 13575
13573: GO 13601
13575: POP
// result := [ ru_medium_wheeled , ru_medium_tracked , ru_heavy_wheeled , ru_heavy_tracked ] ; ru_bulldozer :
13576: LD_ADDR_VAR 0 3
13580: PUSH
13581: LD_INT 21
13583: PUSH
13584: LD_INT 22
13586: PUSH
13587: LD_INT 23
13589: PUSH
13590: LD_INT 24
13592: PUSH
13593: EMPTY
13594: LIST
13595: LIST
13596: LIST
13597: LIST
13598: ST_TO_ADDR
13599: GO 13680
13601: LD_INT 53
13603: DOUBLE
13604: EQUAL
13605: IFTRUE 13609
13607: GO 13627
13609: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_heavy_gun :
13610: LD_ADDR_VAR 0 3
13614: PUSH
13615: LD_INT 23
13617: PUSH
13618: LD_INT 24
13620: PUSH
13621: EMPTY
13622: LIST
13623: LIST
13624: ST_TO_ADDR
13625: GO 13680
13627: LD_INT 46
13629: DOUBLE
13630: EQUAL
13631: IFTRUE 13635
13633: GO 13653
13635: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; ru_rocket :
13636: LD_ADDR_VAR 0 3
13640: PUSH
13641: LD_INT 23
13643: PUSH
13644: LD_INT 24
13646: PUSH
13647: EMPTY
13648: LIST
13649: LIST
13650: ST_TO_ADDR
13651: GO 13680
13653: LD_INT 47
13655: DOUBLE
13656: EQUAL
13657: IFTRUE 13661
13659: GO 13679
13661: POP
// result := [ ru_heavy_wheeled , ru_heavy_tracked ] ; end ;
13662: LD_ADDR_VAR 0 3
13666: PUSH
13667: LD_INT 23
13669: PUSH
13670: LD_INT 24
13672: PUSH
13673: EMPTY
13674: LIST
13675: LIST
13676: ST_TO_ADDR
13677: GO 13680
13679: POP
// result := ( chassis in result ) ;
13680: LD_ADDR_VAR 0 3
13684: PUSH
13685: LD_VAR 0 1
13689: PUSH
13690: LD_VAR 0 3
13694: IN
13695: ST_TO_ADDR
// end ;
13696: LD_VAR 0 3
13700: RET
// export function Reindex ( array , i_from , i_to , direction ) ; var i , j , k , d , tmp , length ; begin
13701: LD_INT 0
13703: PPUSH
13704: PPUSH
13705: PPUSH
13706: PPUSH
13707: PPUSH
13708: PPUSH
13709: PPUSH
// result := array ;
13710: LD_ADDR_VAR 0 5
13714: PUSH
13715: LD_VAR 0 1
13719: ST_TO_ADDR
// if not array or not i_from or not i_to or i_from > array or i_to > array then
13720: LD_VAR 0 1
13724: NOT
13725: PUSH
13726: LD_VAR 0 2
13730: NOT
13731: OR
13732: PUSH
13733: LD_VAR 0 3
13737: NOT
13738: OR
13739: PUSH
13740: LD_VAR 0 2
13744: PUSH
13745: LD_VAR 0 1
13749: GREATER
13750: OR
13751: PUSH
13752: LD_VAR 0 3
13756: PUSH
13757: LD_VAR 0 1
13761: GREATER
13762: OR
13763: IFFALSE 13767
// exit ;
13765: GO 14063
// if direction then
13767: LD_VAR 0 4
13771: IFFALSE 13835
// begin d := 1 ;
13773: LD_ADDR_VAR 0 9
13777: PUSH
13778: LD_INT 1
13780: ST_TO_ADDR
// if i_from > i_to then
13781: LD_VAR 0 2
13785: PUSH
13786: LD_VAR 0 3
13790: GREATER
13791: IFFALSE 13817
// length := ( array - i_from ) + i_to else
13793: LD_ADDR_VAR 0 11
13797: PUSH
13798: LD_VAR 0 1
13802: PUSH
13803: LD_VAR 0 2
13807: MINUS
13808: PUSH
13809: LD_VAR 0 3
13813: PLUS
13814: ST_TO_ADDR
13815: GO 13833
// length := i_to - i_from ;
13817: LD_ADDR_VAR 0 11
13821: PUSH
13822: LD_VAR 0 3
13826: PUSH
13827: LD_VAR 0 2
13831: MINUS
13832: ST_TO_ADDR
// end else
13833: GO 13896
// begin d := - 1 ;
13835: LD_ADDR_VAR 0 9
13839: PUSH
13840: LD_INT 1
13842: NEG
13843: ST_TO_ADDR
// if i_from > i_to then
13844: LD_VAR 0 2
13848: PUSH
13849: LD_VAR 0 3
13853: GREATER
13854: IFFALSE 13874
// length := i_from - i_to else
13856: LD_ADDR_VAR 0 11
13860: PUSH
13861: LD_VAR 0 2
13865: PUSH
13866: LD_VAR 0 3
13870: MINUS
13871: ST_TO_ADDR
13872: GO 13896
// length := ( array - i_to ) + i_from ;
13874: LD_ADDR_VAR 0 11
13878: PUSH
13879: LD_VAR 0 1
13883: PUSH
13884: LD_VAR 0 3
13888: MINUS
13889: PUSH
13890: LD_VAR 0 2
13894: PLUS
13895: ST_TO_ADDR
// end ; if not length then
13896: LD_VAR 0 11
13900: NOT
13901: IFFALSE 13905
// exit ;
13903: GO 14063
// tmp := array ;
13905: LD_ADDR_VAR 0 10
13909: PUSH
13910: LD_VAR 0 1
13914: ST_TO_ADDR
// for i = 1 to length do
13915: LD_ADDR_VAR 0 6
13919: PUSH
13920: DOUBLE
13921: LD_INT 1
13923: DEC
13924: ST_TO_ADDR
13925: LD_VAR 0 11
13929: PUSH
13930: FOR_TO
13931: IFFALSE 14051
// begin for j = 1 to array do
13933: LD_ADDR_VAR 0 7
13937: PUSH
13938: DOUBLE
13939: LD_INT 1
13941: DEC
13942: ST_TO_ADDR
13943: LD_VAR 0 1
13947: PUSH
13948: FOR_TO
13949: IFFALSE 14037
// begin k := j + d ;
13951: LD_ADDR_VAR 0 8
13955: PUSH
13956: LD_VAR 0 7
13960: PUSH
13961: LD_VAR 0 9
13965: PLUS
13966: ST_TO_ADDR
// if k > array then
13967: LD_VAR 0 8
13971: PUSH
13972: LD_VAR 0 1
13976: GREATER
13977: IFFALSE 13987
// k := 1 ;
13979: LD_ADDR_VAR 0 8
13983: PUSH
13984: LD_INT 1
13986: ST_TO_ADDR
// if not k then
13987: LD_VAR 0 8
13991: NOT
13992: IFFALSE 14004
// k := array ;
13994: LD_ADDR_VAR 0 8
13998: PUSH
13999: LD_VAR 0 1
14003: ST_TO_ADDR
// tmp := Replace ( tmp , k , array [ j ] ) ;
14004: LD_ADDR_VAR 0 10
14008: PUSH
14009: LD_VAR 0 10
14013: PPUSH
14014: LD_VAR 0 8
14018: PPUSH
14019: LD_VAR 0 1
14023: PUSH
14024: LD_VAR 0 7
14028: ARRAY
14029: PPUSH
14030: CALL_OW 1
14034: ST_TO_ADDR
// end ;
14035: GO 13948
14037: POP
14038: POP
// array := tmp ;
14039: LD_ADDR_VAR 0 1
14043: PUSH
14044: LD_VAR 0 10
14048: ST_TO_ADDR
// end ;
14049: GO 13930
14051: POP
14052: POP
// result := array ;
14053: LD_ADDR_VAR 0 5
14057: PUSH
14058: LD_VAR 0 1
14062: ST_TO_ADDR
// end ;
14063: LD_VAR 0 5
14067: RET
// export function GetElementIndex ( array , value ) ; var i ; begin
14068: LD_INT 0
14070: PPUSH
14071: PPUSH
// result := 0 ;
14072: LD_ADDR_VAR 0 3
14076: PUSH
14077: LD_INT 0
14079: ST_TO_ADDR
// if not array or not value in array then
14080: LD_VAR 0 1
14084: NOT
14085: PUSH
14086: LD_VAR 0 2
14090: PUSH
14091: LD_VAR 0 1
14095: IN
14096: NOT
14097: OR
14098: IFFALSE 14102
// exit ;
14100: GO 14156
// for i = 1 to array do
14102: LD_ADDR_VAR 0 4
14106: PUSH
14107: DOUBLE
14108: LD_INT 1
14110: DEC
14111: ST_TO_ADDR
14112: LD_VAR 0 1
14116: PUSH
14117: FOR_TO
14118: IFFALSE 14154
// if value = array [ i ] then
14120: LD_VAR 0 2
14124: PUSH
14125: LD_VAR 0 1
14129: PUSH
14130: LD_VAR 0 4
14134: ARRAY
14135: EQUAL
14136: IFFALSE 14152
// begin result := i ;
14138: LD_ADDR_VAR 0 3
14142: PUSH
14143: LD_VAR 0 4
14147: ST_TO_ADDR
// exit ;
14148: POP
14149: POP
14150: GO 14156
// end ;
14152: GO 14117
14154: POP
14155: POP
// end ;
14156: LD_VAR 0 3
14160: RET
// export function PrepareVehicle ( chassis , engine , control , weapon , fuel ) ; begin
14161: LD_INT 0
14163: PPUSH
// vc_chassis := chassis ;
14164: LD_ADDR_OWVAR 37
14168: PUSH
14169: LD_VAR 0 1
14173: ST_TO_ADDR
// vc_engine := engine ;
14174: LD_ADDR_OWVAR 39
14178: PUSH
14179: LD_VAR 0 2
14183: ST_TO_ADDR
// vc_control := control ;
14184: LD_ADDR_OWVAR 38
14188: PUSH
14189: LD_VAR 0 3
14193: ST_TO_ADDR
// vc_weapon := weapon ;
14194: LD_ADDR_OWVAR 40
14198: PUSH
14199: LD_VAR 0 4
14203: ST_TO_ADDR
// vc_fuel_battery := fuel ;
14204: LD_ADDR_OWVAR 41
14208: PUSH
14209: LD_VAR 0 5
14213: ST_TO_ADDR
// end ;
14214: LD_VAR 0 6
14218: RET
// export function WantPlant ( unit ) ; var task ; begin
14219: LD_INT 0
14221: PPUSH
14222: PPUSH
// result := false ;
14223: LD_ADDR_VAR 0 2
14227: PUSH
14228: LD_INT 0
14230: ST_TO_ADDR
// task := GetTaskList ( unit ) ;
14231: LD_ADDR_VAR 0 3
14235: PUSH
14236: LD_VAR 0 1
14240: PPUSH
14241: CALL_OW 437
14245: ST_TO_ADDR
// if task then
14246: LD_VAR 0 3
14250: IFFALSE 14278
// if task [ 1 ] [ 1 ] = p then
14252: LD_VAR 0 3
14256: PUSH
14257: LD_INT 1
14259: ARRAY
14260: PUSH
14261: LD_INT 1
14263: ARRAY
14264: PUSH
14265: LD_STRING p
14267: EQUAL
14268: IFFALSE 14278
// result := true ;
14270: LD_ADDR_VAR 0 2
14274: PUSH
14275: LD_INT 1
14277: ST_TO_ADDR
// end ;
14278: LD_VAR 0 2
14282: RET
// export function ReplaceIn ( arr , pos , value ) ; var i , tmp , s_arr ; begin
14283: LD_INT 0
14285: PPUSH
14286: PPUSH
14287: PPUSH
14288: PPUSH
// if pos < 1 then
14289: LD_VAR 0 2
14293: PUSH
14294: LD_INT 1
14296: LESS
14297: IFFALSE 14301
// exit ;
14299: GO 14604
// if pos = 1 then
14301: LD_VAR 0 2
14305: PUSH
14306: LD_INT 1
14308: EQUAL
14309: IFFALSE 14342
// result := Replace ( arr , pos [ 1 ] , value ) else
14311: LD_ADDR_VAR 0 4
14315: PUSH
14316: LD_VAR 0 1
14320: PPUSH
14321: LD_VAR 0 2
14325: PUSH
14326: LD_INT 1
14328: ARRAY
14329: PPUSH
14330: LD_VAR 0 3
14334: PPUSH
14335: CALL_OW 1
14339: ST_TO_ADDR
14340: GO 14604
// begin tmp := arr ;
14342: LD_ADDR_VAR 0 6
14346: PUSH
14347: LD_VAR 0 1
14351: ST_TO_ADDR
// s_arr := [ tmp ] ;
14352: LD_ADDR_VAR 0 7
14356: PUSH
14357: LD_VAR 0 6
14361: PUSH
14362: EMPTY
14363: LIST
14364: ST_TO_ADDR
// for i = 1 to pos - 1 do
14365: LD_ADDR_VAR 0 5
14369: PUSH
14370: DOUBLE
14371: LD_INT 1
14373: DEC
14374: ST_TO_ADDR
14375: LD_VAR 0 2
14379: PUSH
14380: LD_INT 1
14382: MINUS
14383: PUSH
14384: FOR_TO
14385: IFFALSE 14430
// begin tmp := tmp [ pos [ i ] ] ;
14387: LD_ADDR_VAR 0 6
14391: PUSH
14392: LD_VAR 0 6
14396: PUSH
14397: LD_VAR 0 2
14401: PUSH
14402: LD_VAR 0 5
14406: ARRAY
14407: ARRAY
14408: ST_TO_ADDR
// s_arr := s_arr ^ [ tmp ] ;
14409: LD_ADDR_VAR 0 7
14413: PUSH
14414: LD_VAR 0 7
14418: PUSH
14419: LD_VAR 0 6
14423: PUSH
14424: EMPTY
14425: LIST
14426: ADD
14427: ST_TO_ADDR
// end ;
14428: GO 14384
14430: POP
14431: POP
// tmp := Replace ( tmp , pos [ pos ] , value ) ;
14432: LD_ADDR_VAR 0 6
14436: PUSH
14437: LD_VAR 0 6
14441: PPUSH
14442: LD_VAR 0 2
14446: PUSH
14447: LD_VAR 0 2
14451: ARRAY
14452: PPUSH
14453: LD_VAR 0 3
14457: PPUSH
14458: CALL_OW 1
14462: ST_TO_ADDR
// s_arr := Replace ( s_arr , s_arr , tmp ) ;
14463: LD_ADDR_VAR 0 7
14467: PUSH
14468: LD_VAR 0 7
14472: PPUSH
14473: LD_VAR 0 7
14477: PPUSH
14478: LD_VAR 0 6
14482: PPUSH
14483: CALL_OW 1
14487: ST_TO_ADDR
// for i = s_arr downto 2 do
14488: LD_ADDR_VAR 0 5
14492: PUSH
14493: DOUBLE
14494: LD_VAR 0 7
14498: INC
14499: ST_TO_ADDR
14500: LD_INT 2
14502: PUSH
14503: FOR_DOWNTO
14504: IFFALSE 14588
// begin tmp := Replace ( s_arr [ i - 1 ] , pos [ i - 1 ] , s_arr [ i ] ) ;
14506: LD_ADDR_VAR 0 6
14510: PUSH
14511: LD_VAR 0 7
14515: PUSH
14516: LD_VAR 0 5
14520: PUSH
14521: LD_INT 1
14523: MINUS
14524: ARRAY
14525: PPUSH
14526: LD_VAR 0 2
14530: PUSH
14531: LD_VAR 0 5
14535: PUSH
14536: LD_INT 1
14538: MINUS
14539: ARRAY
14540: PPUSH
14541: LD_VAR 0 7
14545: PUSH
14546: LD_VAR 0 5
14550: ARRAY
14551: PPUSH
14552: CALL_OW 1
14556: ST_TO_ADDR
// s_arr := Replace ( s_arr , i - 1 , tmp ) ;
14557: LD_ADDR_VAR 0 7
14561: PUSH
14562: LD_VAR 0 7
14566: PPUSH
14567: LD_VAR 0 5
14571: PUSH
14572: LD_INT 1
14574: MINUS
14575: PPUSH
14576: LD_VAR 0 6
14580: PPUSH
14581: CALL_OW 1
14585: ST_TO_ADDR
// end ;
14586: GO 14503
14588: POP
14589: POP
// result := s_arr [ 1 ] ;
14590: LD_ADDR_VAR 0 4
14594: PUSH
14595: LD_VAR 0 7
14599: PUSH
14600: LD_INT 1
14602: ARRAY
14603: ST_TO_ADDR
// end ; end ;
14604: LD_VAR 0 4
14608: RET
// export function ReplaceWith ( list , pos1 , pos2 ) ; var i ; begin
14609: LD_INT 0
14611: PPUSH
14612: PPUSH
// if not list then
14613: LD_VAR 0 1
14617: NOT
14618: IFFALSE 14622
// exit ;
14620: GO 14713
// i := list [ pos1 ] ;
14622: LD_ADDR_VAR 0 5
14626: PUSH
14627: LD_VAR 0 1
14631: PUSH
14632: LD_VAR 0 2
14636: ARRAY
14637: ST_TO_ADDR
// if not i then
14638: LD_VAR 0 5
14642: NOT
14643: IFFALSE 14647
// exit ;
14645: GO 14713
// list := Replace ( list , pos1 , list [ pos2 ] ) ;
14647: LD_ADDR_VAR 0 1
14651: PUSH
14652: LD_VAR 0 1
14656: PPUSH
14657: LD_VAR 0 2
14661: PPUSH
14662: LD_VAR 0 1
14666: PUSH
14667: LD_VAR 0 3
14671: ARRAY
14672: PPUSH
14673: CALL_OW 1
14677: ST_TO_ADDR
// list := Replace ( list , pos2 , i ) ;
14678: LD_ADDR_VAR 0 1
14682: PUSH
14683: LD_VAR 0 1
14687: PPUSH
14688: LD_VAR 0 3
14692: PPUSH
14693: LD_VAR 0 5
14697: PPUSH
14698: CALL_OW 1
14702: ST_TO_ADDR
// result := list ;
14703: LD_ADDR_VAR 0 4
14707: PUSH
14708: LD_VAR 0 1
14712: ST_TO_ADDR
// end ;
14713: LD_VAR 0 4
14717: RET
// export function SortByDistanceUnit ( unit , list , asc , mode ) ; begin
14718: LD_INT 0
14720: PPUSH
// result := SortByDistanceXY ( GetX ( unit ) , GetY ( unit ) , list , asc , mode ) ;
14721: LD_ADDR_VAR 0 5
14725: PUSH
14726: LD_VAR 0 1
14730: PPUSH
14731: CALL_OW 250
14735: PPUSH
14736: LD_VAR 0 1
14740: PPUSH
14741: CALL_OW 251
14745: PPUSH
14746: LD_VAR 0 2
14750: PPUSH
14751: LD_VAR 0 3
14755: PPUSH
14756: LD_VAR 0 4
14760: PPUSH
14761: CALL 14771 0 5
14765: ST_TO_ADDR
// end ;
14766: LD_VAR 0 5
14770: RET
// export function SortByDistanceXY ( x , y , list , asc , mode ) ; var i , j , tmp ; begin
14771: LD_INT 0
14773: PPUSH
14774: PPUSH
14775: PPUSH
14776: PPUSH
// if not list then
14777: LD_VAR 0 3
14781: NOT
14782: IFFALSE 14786
// exit ;
14784: GO 15174
// result := [ ] ;
14786: LD_ADDR_VAR 0 6
14790: PUSH
14791: EMPTY
14792: ST_TO_ADDR
// for i in list do
14793: LD_ADDR_VAR 0 7
14797: PUSH
14798: LD_VAR 0 3
14802: PUSH
14803: FOR_IN
14804: IFFALSE 15006
// begin tmp := GetDistUnitXY ( i , x , y ) ;
14806: LD_ADDR_VAR 0 9
14810: PUSH
14811: LD_VAR 0 7
14815: PPUSH
14816: LD_VAR 0 1
14820: PPUSH
14821: LD_VAR 0 2
14825: PPUSH
14826: CALL_OW 297
14830: ST_TO_ADDR
// if not result then
14831: LD_VAR 0 6
14835: NOT
14836: IFFALSE 14862
// result := [ [ i , tmp ] ] else
14838: LD_ADDR_VAR 0 6
14842: PUSH
14843: LD_VAR 0 7
14847: PUSH
14848: LD_VAR 0 9
14852: PUSH
14853: EMPTY
14854: LIST
14855: LIST
14856: PUSH
14857: EMPTY
14858: LIST
14859: ST_TO_ADDR
14860: GO 15004
// begin if result [ result ] [ 2 ] < tmp then
14862: LD_VAR 0 6
14866: PUSH
14867: LD_VAR 0 6
14871: ARRAY
14872: PUSH
14873: LD_INT 2
14875: ARRAY
14876: PUSH
14877: LD_VAR 0 9
14881: LESS
14882: IFFALSE 14924
// result := Insert ( result , result + 1 , [ i , tmp ] ) else
14884: LD_ADDR_VAR 0 6
14888: PUSH
14889: LD_VAR 0 6
14893: PPUSH
14894: LD_VAR 0 6
14898: PUSH
14899: LD_INT 1
14901: PLUS
14902: PPUSH
14903: LD_VAR 0 7
14907: PUSH
14908: LD_VAR 0 9
14912: PUSH
14913: EMPTY
14914: LIST
14915: LIST
14916: PPUSH
14917: CALL_OW 2
14921: ST_TO_ADDR
14922: GO 15004
// for j = 1 to result do
14924: LD_ADDR_VAR 0 8
14928: PUSH
14929: DOUBLE
14930: LD_INT 1
14932: DEC
14933: ST_TO_ADDR
14934: LD_VAR 0 6
14938: PUSH
14939: FOR_TO
14940: IFFALSE 15002
// begin if tmp < result [ j ] [ 2 ] then
14942: LD_VAR 0 9
14946: PUSH
14947: LD_VAR 0 6
14951: PUSH
14952: LD_VAR 0 8
14956: ARRAY
14957: PUSH
14958: LD_INT 2
14960: ARRAY
14961: LESS
14962: IFFALSE 15000
// begin result := Insert ( result , j , [ i , tmp ] ) ;
14964: LD_ADDR_VAR 0 6
14968: PUSH
14969: LD_VAR 0 6
14973: PPUSH
14974: LD_VAR 0 8
14978: PPUSH
14979: LD_VAR 0 7
14983: PUSH
14984: LD_VAR 0 9
14988: PUSH
14989: EMPTY
14990: LIST
14991: LIST
14992: PPUSH
14993: CALL_OW 2
14997: ST_TO_ADDR
// break ;
14998: GO 15002
// end ; end ;
15000: GO 14939
15002: POP
15003: POP
// end ; end ;
15004: GO 14803
15006: POP
15007: POP
// if result and not asc then
15008: LD_VAR 0 6
15012: PUSH
15013: LD_VAR 0 4
15017: NOT
15018: AND
15019: IFFALSE 15094
// begin tmp := result ;
15021: LD_ADDR_VAR 0 9
15025: PUSH
15026: LD_VAR 0 6
15030: ST_TO_ADDR
// for i = tmp downto 1 do
15031: LD_ADDR_VAR 0 7
15035: PUSH
15036: DOUBLE
15037: LD_VAR 0 9
15041: INC
15042: ST_TO_ADDR
15043: LD_INT 1
15045: PUSH
15046: FOR_DOWNTO
15047: IFFALSE 15092
// result := Replace ( result , tmp - i + 1 , tmp [ i ] ) ;
15049: LD_ADDR_VAR 0 6
15053: PUSH
15054: LD_VAR 0 6
15058: PPUSH
15059: LD_VAR 0 9
15063: PUSH
15064: LD_VAR 0 7
15068: MINUS
15069: PUSH
15070: LD_INT 1
15072: PLUS
15073: PPUSH
15074: LD_VAR 0 9
15078: PUSH
15079: LD_VAR 0 7
15083: ARRAY
15084: PPUSH
15085: CALL_OW 1
15089: ST_TO_ADDR
15090: GO 15046
15092: POP
15093: POP
// end ; tmp := [ ] ;
15094: LD_ADDR_VAR 0 9
15098: PUSH
15099: EMPTY
15100: ST_TO_ADDR
// if mode then
15101: LD_VAR 0 5
15105: IFFALSE 15174
// begin for i = 1 to result do
15107: LD_ADDR_VAR 0 7
15111: PUSH
15112: DOUBLE
15113: LD_INT 1
15115: DEC
15116: ST_TO_ADDR
15117: LD_VAR 0 6
15121: PUSH
15122: FOR_TO
15123: IFFALSE 15162
// tmp := Replace ( tmp , i , result [ i ] [ 1 ] ) ;
15125: LD_ADDR_VAR 0 9
15129: PUSH
15130: LD_VAR 0 9
15134: PPUSH
15135: LD_VAR 0 7
15139: PPUSH
15140: LD_VAR 0 6
15144: PUSH
15145: LD_VAR 0 7
15149: ARRAY
15150: PUSH
15151: LD_INT 1
15153: ARRAY
15154: PPUSH
15155: CALL_OW 1
15159: ST_TO_ADDR
15160: GO 15122
15162: POP
15163: POP
// result := tmp ;
15164: LD_ADDR_VAR 0 6
15168: PUSH
15169: LD_VAR 0 9
15173: ST_TO_ADDR
// end ; end ;
15174: LD_VAR 0 6
15178: RET
// export function DangerAtRangeXY ( side , x , y , range ) ; var i , j , tmp , points , bpoints ; begin
15179: LD_INT 0
15181: PPUSH
15182: PPUSH
15183: PPUSH
15184: PPUSH
15185: PPUSH
15186: PPUSH
// result := [ 0 , 0 , 0 , [ ] ] ;
15187: LD_ADDR_VAR 0 5
15191: PUSH
15192: LD_INT 0
15194: PUSH
15195: LD_INT 0
15197: PUSH
15198: LD_INT 0
15200: PUSH
15201: EMPTY
15202: PUSH
15203: EMPTY
15204: LIST
15205: LIST
15206: LIST
15207: LIST
15208: ST_TO_ADDR
// if not x or not y then
15209: LD_VAR 0 2
15213: NOT
15214: PUSH
15215: LD_VAR 0 3
15219: NOT
15220: OR
15221: IFFALSE 15225
// exit ;
15223: GO 16877
// if not range then
15225: LD_VAR 0 4
15229: NOT
15230: IFFALSE 15240
// range := 10 ;
15232: LD_ADDR_VAR 0 4
15236: PUSH
15237: LD_INT 10
15239: ST_TO_ADDR
// tmp := FilterAllUnits ( [ [ f_enemy , side ] , [ f_distxy , x , y , range ] , [ f_not , [ f_type , unit_building ] ] ] ) ;
15240: LD_ADDR_VAR 0 8
15244: PUSH
15245: LD_INT 81
15247: PUSH
15248: LD_VAR 0 1
15252: PUSH
15253: EMPTY
15254: LIST
15255: LIST
15256: PUSH
15257: LD_INT 92
15259: PUSH
15260: LD_VAR 0 2
15264: PUSH
15265: LD_VAR 0 3
15269: PUSH
15270: LD_VAR 0 4
15274: PUSH
15275: EMPTY
15276: LIST
15277: LIST
15278: LIST
15279: LIST
15280: PUSH
15281: LD_INT 3
15283: PUSH
15284: LD_INT 21
15286: PUSH
15287: LD_INT 3
15289: PUSH
15290: EMPTY
15291: LIST
15292: LIST
15293: PUSH
15294: EMPTY
15295: LIST
15296: LIST
15297: PUSH
15298: EMPTY
15299: LIST
15300: LIST
15301: LIST
15302: PPUSH
15303: CALL_OW 69
15307: ST_TO_ADDR
// if not tmp then
15308: LD_VAR 0 8
15312: NOT
15313: IFFALSE 15317
// exit ;
15315: GO 16877
// for i in tmp do
15317: LD_ADDR_VAR 0 6
15321: PUSH
15322: LD_VAR 0 8
15326: PUSH
15327: FOR_IN
15328: IFFALSE 16852
// begin points := [ 0 , 0 , 0 ] ;
15330: LD_ADDR_VAR 0 9
15334: PUSH
15335: LD_INT 0
15337: PUSH
15338: LD_INT 0
15340: PUSH
15341: LD_INT 0
15343: PUSH
15344: EMPTY
15345: LIST
15346: LIST
15347: LIST
15348: ST_TO_ADDR
// bpoints := 1 ;
15349: LD_ADDR_VAR 0 10
15353: PUSH
15354: LD_INT 1
15356: ST_TO_ADDR
// case GetType ( i ) of unit_human :
15357: LD_VAR 0 6
15361: PPUSH
15362: CALL_OW 247
15366: PUSH
15367: LD_INT 1
15369: DOUBLE
15370: EQUAL
15371: IFTRUE 15375
15373: GO 15953
15375: POP
// begin if GetClass ( i ) = 1 then
15376: LD_VAR 0 6
15380: PPUSH
15381: CALL_OW 257
15385: PUSH
15386: LD_INT 1
15388: EQUAL
15389: IFFALSE 15410
// points := [ 10 , 5 , 3 ] ;
15391: LD_ADDR_VAR 0 9
15395: PUSH
15396: LD_INT 10
15398: PUSH
15399: LD_INT 5
15401: PUSH
15402: LD_INT 3
15404: PUSH
15405: EMPTY
15406: LIST
15407: LIST
15408: LIST
15409: ST_TO_ADDR
// if GetClass ( i ) in [ 2 , 3 , 4 ] then
15410: LD_VAR 0 6
15414: PPUSH
15415: CALL_OW 257
15419: PUSH
15420: LD_INT 2
15422: PUSH
15423: LD_INT 3
15425: PUSH
15426: LD_INT 4
15428: PUSH
15429: EMPTY
15430: LIST
15431: LIST
15432: LIST
15433: IN
15434: IFFALSE 15455
// points := [ 3 , 2 , 1 ] ;
15436: LD_ADDR_VAR 0 9
15440: PUSH
15441: LD_INT 3
15443: PUSH
15444: LD_INT 2
15446: PUSH
15447: LD_INT 1
15449: PUSH
15450: EMPTY
15451: LIST
15452: LIST
15453: LIST
15454: ST_TO_ADDR
// if GetClass ( i ) = 5 then
15455: LD_VAR 0 6
15459: PPUSH
15460: CALL_OW 257
15464: PUSH
15465: LD_INT 5
15467: EQUAL
15468: IFFALSE 15489
// points := [ 130 , 5 , 2 ] ;
15470: LD_ADDR_VAR 0 9
15474: PUSH
15475: LD_INT 130
15477: PUSH
15478: LD_INT 5
15480: PUSH
15481: LD_INT 2
15483: PUSH
15484: EMPTY
15485: LIST
15486: LIST
15487: LIST
15488: ST_TO_ADDR
// if GetClass ( i ) = 8 then
15489: LD_VAR 0 6
15493: PPUSH
15494: CALL_OW 257
15498: PUSH
15499: LD_INT 8
15501: EQUAL
15502: IFFALSE 15523
// points := [ 35 , 35 , 30 ] ;
15504: LD_ADDR_VAR 0 9
15508: PUSH
15509: LD_INT 35
15511: PUSH
15512: LD_INT 35
15514: PUSH
15515: LD_INT 30
15517: PUSH
15518: EMPTY
15519: LIST
15520: LIST
15521: LIST
15522: ST_TO_ADDR
// if GetClass ( i ) = 9 then
15523: LD_VAR 0 6
15527: PPUSH
15528: CALL_OW 257
15532: PUSH
15533: LD_INT 9
15535: EQUAL
15536: IFFALSE 15557
// points := [ 20 , 55 , 40 ] ;
15538: LD_ADDR_VAR 0 9
15542: PUSH
15543: LD_INT 20
15545: PUSH
15546: LD_INT 55
15548: PUSH
15549: LD_INT 40
15551: PUSH
15552: EMPTY
15553: LIST
15554: LIST
15555: LIST
15556: ST_TO_ADDR
// if GetClass ( i ) in [ 12 , 16 ] then
15557: LD_VAR 0 6
15561: PPUSH
15562: CALL_OW 257
15566: PUSH
15567: LD_INT 12
15569: PUSH
15570: LD_INT 16
15572: PUSH
15573: EMPTY
15574: LIST
15575: LIST
15576: IN
15577: IFFALSE 15598
// points := [ 5 , 3 , 2 ] ;
15579: LD_ADDR_VAR 0 9
15583: PUSH
15584: LD_INT 5
15586: PUSH
15587: LD_INT 3
15589: PUSH
15590: LD_INT 2
15592: PUSH
15593: EMPTY
15594: LIST
15595: LIST
15596: LIST
15597: ST_TO_ADDR
// if GetClass ( i ) = 17 then
15598: LD_VAR 0 6
15602: PPUSH
15603: CALL_OW 257
15607: PUSH
15608: LD_INT 17
15610: EQUAL
15611: IFFALSE 15632
// points := [ 100 , 50 , 75 ] ;
15613: LD_ADDR_VAR 0 9
15617: PUSH
15618: LD_INT 100
15620: PUSH
15621: LD_INT 50
15623: PUSH
15624: LD_INT 75
15626: PUSH
15627: EMPTY
15628: LIST
15629: LIST
15630: LIST
15631: ST_TO_ADDR
// if GetClass ( i ) = 15 then
15632: LD_VAR 0 6
15636: PPUSH
15637: CALL_OW 257
15641: PUSH
15642: LD_INT 15
15644: EQUAL
15645: IFFALSE 15666
// points := [ 10 , 5 , 3 ] ;
15647: LD_ADDR_VAR 0 9
15651: PUSH
15652: LD_INT 10
15654: PUSH
15655: LD_INT 5
15657: PUSH
15658: LD_INT 3
15660: PUSH
15661: EMPTY
15662: LIST
15663: LIST
15664: LIST
15665: ST_TO_ADDR
// if GetClass ( i ) = 14 then
15666: LD_VAR 0 6
15670: PPUSH
15671: CALL_OW 257
15675: PUSH
15676: LD_INT 14
15678: EQUAL
15679: IFFALSE 15700
// points := [ 10 , 0 , 0 ] ;
15681: LD_ADDR_VAR 0 9
15685: PUSH
15686: LD_INT 10
15688: PUSH
15689: LD_INT 0
15691: PUSH
15692: LD_INT 0
15694: PUSH
15695: EMPTY
15696: LIST
15697: LIST
15698: LIST
15699: ST_TO_ADDR
// if GetClass ( i ) = 11 then
15700: LD_VAR 0 6
15704: PPUSH
15705: CALL_OW 257
15709: PUSH
15710: LD_INT 11
15712: EQUAL
15713: IFFALSE 15734
// points := [ 30 , 10 , 5 ] ;
15715: LD_ADDR_VAR 0 9
15719: PUSH
15720: LD_INT 30
15722: PUSH
15723: LD_INT 10
15725: PUSH
15726: LD_INT 5
15728: PUSH
15729: EMPTY
15730: LIST
15731: LIST
15732: LIST
15733: ST_TO_ADDR
// if GetTech ( side , tech_stimdrugs ) = state_researched then
15734: LD_VAR 0 1
15738: PPUSH
15739: LD_INT 5
15741: PPUSH
15742: CALL_OW 321
15746: PUSH
15747: LD_INT 2
15749: EQUAL
15750: IFFALSE 15767
// bpoints := bpoints * 1.8 ;
15752: LD_ADDR_VAR 0 10
15756: PUSH
15757: LD_VAR 0 10
15761: PUSH
15762: LD_REAL  1.80000000000000E+0000
15765: MUL
15766: ST_TO_ADDR
// if GetClass ( i ) in [ 1 , 2 , 3 , 4 ] and GetTech ( side , tech_weap1 ) = state_researched then
15767: LD_VAR 0 6
15771: PPUSH
15772: CALL_OW 257
15776: PUSH
15777: LD_INT 1
15779: PUSH
15780: LD_INT 2
15782: PUSH
15783: LD_INT 3
15785: PUSH
15786: LD_INT 4
15788: PUSH
15789: EMPTY
15790: LIST
15791: LIST
15792: LIST
15793: LIST
15794: IN
15795: PUSH
15796: LD_VAR 0 1
15800: PPUSH
15801: LD_INT 51
15803: PPUSH
15804: CALL_OW 321
15808: PUSH
15809: LD_INT 2
15811: EQUAL
15812: AND
15813: IFFALSE 15830
// bpoints := bpoints * 1.2 ;
15815: LD_ADDR_VAR 0 10
15819: PUSH
15820: LD_VAR 0 10
15824: PUSH
15825: LD_REAL  1.20000000000000E+0000
15828: MUL
15829: ST_TO_ADDR
// if GetClass ( i ) in [ 5 , 7 , 9 ] and GetTech ( side , tech_weap2 ) = state_researched then
15830: LD_VAR 0 6
15834: PPUSH
15835: CALL_OW 257
15839: PUSH
15840: LD_INT 5
15842: PUSH
15843: LD_INT 7
15845: PUSH
15846: LD_INT 9
15848: PUSH
15849: EMPTY
15850: LIST
15851: LIST
15852: LIST
15853: IN
15854: PUSH
15855: LD_VAR 0 1
15859: PPUSH
15860: LD_INT 52
15862: PPUSH
15863: CALL_OW 321
15867: PUSH
15868: LD_INT 2
15870: EQUAL
15871: AND
15872: IFFALSE 15889
// bpoints := bpoints * 1.5 ;
15874: LD_ADDR_VAR 0 10
15878: PUSH
15879: LD_VAR 0 10
15883: PUSH
15884: LD_REAL  1.50000000000000E+0000
15887: MUL
15888: ST_TO_ADDR
// if GetTech ( side , tech_bio1 ) = state_researched then
15889: LD_VAR 0 1
15893: PPUSH
15894: LD_INT 66
15896: PPUSH
15897: CALL_OW 321
15901: PUSH
15902: LD_INT 2
15904: EQUAL
15905: IFFALSE 15922
// bpoints := bpoints * 1.1 ;
15907: LD_ADDR_VAR 0 10
15911: PUSH
15912: LD_VAR 0 10
15916: PUSH
15917: LD_REAL  1.10000000000000E+0000
15920: MUL
15921: ST_TO_ADDR
// bpoints := bpoints * ( GetSkill ( i , 1 ) * 1.15 ) ;
15922: LD_ADDR_VAR 0 10
15926: PUSH
15927: LD_VAR 0 10
15931: PUSH
15932: LD_VAR 0 6
15936: PPUSH
15937: LD_INT 1
15939: PPUSH
15940: CALL_OW 259
15944: PUSH
15945: LD_REAL  1.15000000000000E+0000
15948: MUL
15949: MUL
15950: ST_TO_ADDR
// end ; unit_vehicle :
15951: GO 16781
15953: LD_INT 2
15955: DOUBLE
15956: EQUAL
15957: IFTRUE 15961
15959: GO 16769
15961: POP
// begin if GetWeapon ( i ) in [ us_machine_gun , ru_heavy_machine_gun , ar_double_machine_gun ] then
15962: LD_VAR 0 6
15966: PPUSH
15967: CALL_OW 264
15971: PUSH
15972: LD_INT 2
15974: PUSH
15975: LD_INT 42
15977: PUSH
15978: LD_INT 24
15980: PUSH
15981: EMPTY
15982: LIST
15983: LIST
15984: LIST
15985: IN
15986: IFFALSE 16007
// points := [ 25 , 5 , 3 ] ;
15988: LD_ADDR_VAR 0 9
15992: PUSH
15993: LD_INT 25
15995: PUSH
15996: LD_INT 5
15998: PUSH
15999: LD_INT 3
16001: PUSH
16002: EMPTY
16003: LIST
16004: LIST
16005: LIST
16006: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_gatling_gun , ru_gatling_gun , ar_gatling_gun ] then
16007: LD_VAR 0 6
16011: PPUSH
16012: CALL_OW 264
16016: PUSH
16017: LD_INT 4
16019: PUSH
16020: LD_INT 43
16022: PUSH
16023: LD_INT 25
16025: PUSH
16026: EMPTY
16027: LIST
16028: LIST
16029: LIST
16030: IN
16031: IFFALSE 16052
// points := [ 40 , 15 , 5 ] ;
16033: LD_ADDR_VAR 0 9
16037: PUSH
16038: LD_INT 40
16040: PUSH
16041: LD_INT 15
16043: PUSH
16044: LD_INT 5
16046: PUSH
16047: EMPTY
16048: LIST
16049: LIST
16050: LIST
16051: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_light_gun , ar_light_gun ] then
16052: LD_VAR 0 6
16056: PPUSH
16057: CALL_OW 264
16061: PUSH
16062: LD_INT 3
16064: PUSH
16065: LD_INT 23
16067: PUSH
16068: EMPTY
16069: LIST
16070: LIST
16071: IN
16072: IFFALSE 16093
// points := [ 7 , 25 , 8 ] ;
16074: LD_ADDR_VAR 0 9
16078: PUSH
16079: LD_INT 7
16081: PUSH
16082: LD_INT 25
16084: PUSH
16085: LD_INT 8
16087: PUSH
16088: EMPTY
16089: LIST
16090: LIST
16091: LIST
16092: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_gun , ar_gun , ru_gun ] then
16093: LD_VAR 0 6
16097: PPUSH
16098: CALL_OW 264
16102: PUSH
16103: LD_INT 5
16105: PUSH
16106: LD_INT 27
16108: PUSH
16109: LD_INT 44
16111: PUSH
16112: EMPTY
16113: LIST
16114: LIST
16115: LIST
16116: IN
16117: IFFALSE 16138
// points := [ 14 , 50 , 16 ] ;
16119: LD_ADDR_VAR 0 9
16123: PUSH
16124: LD_INT 14
16126: PUSH
16127: LD_INT 50
16129: PUSH
16130: LD_INT 16
16132: PUSH
16133: EMPTY
16134: LIST
16135: LIST
16136: LIST
16137: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun ] then
16138: LD_VAR 0 6
16142: PPUSH
16143: CALL_OW 264
16147: PUSH
16148: LD_INT 6
16150: PUSH
16151: LD_INT 46
16153: PUSH
16154: EMPTY
16155: LIST
16156: LIST
16157: IN
16158: IFFALSE 16179
// points := [ 32 , 120 , 70 ] ;
16160: LD_ADDR_VAR 0 9
16164: PUSH
16165: LD_INT 32
16167: PUSH
16168: LD_INT 120
16170: PUSH
16171: LD_INT 70
16173: PUSH
16174: EMPTY
16175: LIST
16176: LIST
16177: LIST
16178: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher , ar_mortar ] then
16179: LD_VAR 0 6
16183: PPUSH
16184: CALL_OW 264
16188: PUSH
16189: LD_INT 7
16191: PUSH
16192: LD_INT 28
16194: PUSH
16195: LD_INT 45
16197: PUSH
16198: LD_EXP 68
16202: PUSH
16203: EMPTY
16204: LIST
16205: LIST
16206: LIST
16207: LIST
16208: IN
16209: IFFALSE 16230
// points := [ 35 , 20 , 45 ] ;
16211: LD_ADDR_VAR 0 9
16215: PUSH
16216: LD_INT 35
16218: PUSH
16219: LD_INT 20
16221: PUSH
16222: LD_INT 45
16224: PUSH
16225: EMPTY
16226: LIST
16227: LIST
16228: LIST
16229: ST_TO_ADDR
// if GetWeapon ( i ) in [ ru_rocket ] then
16230: LD_VAR 0 6
16234: PPUSH
16235: CALL_OW 264
16239: PUSH
16240: LD_INT 47
16242: PUSH
16243: EMPTY
16244: LIST
16245: IN
16246: IFFALSE 16267
// points := [ 67 , 45 , 75 ] ;
16248: LD_ADDR_VAR 0 9
16252: PUSH
16253: LD_INT 67
16255: PUSH
16256: LD_INT 45
16258: PUSH
16259: LD_INT 75
16261: PUSH
16262: EMPTY
16263: LIST
16264: LIST
16265: LIST
16266: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_flame_thrower ] then
16267: LD_VAR 0 6
16271: PPUSH
16272: CALL_OW 264
16276: PUSH
16277: LD_INT 26
16279: PUSH
16280: EMPTY
16281: LIST
16282: IN
16283: IFFALSE 16304
// points := [ 120 , 30 , 80 ] ;
16285: LD_ADDR_VAR 0 9
16289: PUSH
16290: LD_INT 120
16292: PUSH
16293: LD_INT 30
16295: PUSH
16296: LD_INT 80
16298: PUSH
16299: EMPTY
16300: LIST
16301: LIST
16302: LIST
16303: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_multimissile_ballista ] then
16304: LD_VAR 0 6
16308: PPUSH
16309: CALL_OW 264
16313: PUSH
16314: LD_INT 22
16316: PUSH
16317: EMPTY
16318: LIST
16319: IN
16320: IFFALSE 16341
// points := [ 40 , 1 , 1 ] ;
16322: LD_ADDR_VAR 0 9
16326: PUSH
16327: LD_INT 40
16329: PUSH
16330: LD_INT 1
16332: PUSH
16333: LD_INT 1
16335: PUSH
16336: EMPTY
16337: LIST
16338: LIST
16339: LIST
16340: ST_TO_ADDR
// if GetWeapon ( i ) in [ ar_selfpropelled_bomb ] then
16341: LD_VAR 0 6
16345: PPUSH
16346: CALL_OW 264
16350: PUSH
16351: LD_INT 29
16353: PUSH
16354: EMPTY
16355: LIST
16356: IN
16357: IFFALSE 16378
// points := [ 70 , 200 , 400 ] ;
16359: LD_ADDR_VAR 0 9
16363: PUSH
16364: LD_INT 70
16366: PUSH
16367: LD_INT 200
16369: PUSH
16370: LD_INT 400
16372: PUSH
16373: EMPTY
16374: LIST
16375: LIST
16376: LIST
16377: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_bulldozer , ru_bulldozer ] then
16378: LD_VAR 0 6
16382: PPUSH
16383: CALL_OW 264
16387: PUSH
16388: LD_INT 14
16390: PUSH
16391: LD_INT 53
16393: PUSH
16394: EMPTY
16395: LIST
16396: LIST
16397: IN
16398: IFFALSE 16419
// points := [ 40 , 10 , 20 ] ;
16400: LD_ADDR_VAR 0 9
16404: PUSH
16405: LD_INT 40
16407: PUSH
16408: LD_INT 10
16410: PUSH
16411: LD_INT 20
16413: PUSH
16414: EMPTY
16415: LIST
16416: LIST
16417: LIST
16418: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_laser ] then
16419: LD_VAR 0 6
16423: PPUSH
16424: CALL_OW 264
16428: PUSH
16429: LD_INT 9
16431: PUSH
16432: EMPTY
16433: LIST
16434: IN
16435: IFFALSE 16456
// points := [ 5 , 70 , 20 ] ;
16437: LD_ADDR_VAR 0 9
16441: PUSH
16442: LD_INT 5
16444: PUSH
16445: LD_INT 70
16447: PUSH
16448: LD_INT 20
16450: PUSH
16451: EMPTY
16452: LIST
16453: LIST
16454: LIST
16455: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_double_laser ] then
16456: LD_VAR 0 6
16460: PPUSH
16461: CALL_OW 264
16465: PUSH
16466: LD_INT 10
16468: PUSH
16469: EMPTY
16470: LIST
16471: IN
16472: IFFALSE 16493
// points := [ 35 , 110 , 70 ] ;
16474: LD_ADDR_VAR 0 9
16478: PUSH
16479: LD_INT 35
16481: PUSH
16482: LD_INT 110
16484: PUSH
16485: LD_INT 70
16487: PUSH
16488: EMPTY
16489: LIST
16490: LIST
16491: LIST
16492: ST_TO_ADDR
// if GetChassis ( i ) = 25 then
16493: LD_VAR 0 6
16497: PPUSH
16498: CALL_OW 265
16502: PUSH
16503: LD_INT 25
16505: EQUAL
16506: IFFALSE 16527
// points := [ 80 , 65 , 100 ] ;
16508: LD_ADDR_VAR 0 9
16512: PUSH
16513: LD_INT 80
16515: PUSH
16516: LD_INT 65
16518: PUSH
16519: LD_INT 100
16521: PUSH
16522: EMPTY
16523: LIST
16524: LIST
16525: LIST
16526: ST_TO_ADDR
// if GetControl ( i ) = control_manual then
16527: LD_VAR 0 6
16531: PPUSH
16532: CALL_OW 263
16536: PUSH
16537: LD_INT 1
16539: EQUAL
16540: IFFALSE 16575
// bpoints := bpoints * ( GetSkill ( IsDrivenBy ( i ) , 3 ) * 4 ) ;
16542: LD_ADDR_VAR 0 10
16546: PUSH
16547: LD_VAR 0 10
16551: PUSH
16552: LD_VAR 0 6
16556: PPUSH
16557: CALL_OW 311
16561: PPUSH
16562: LD_INT 3
16564: PPUSH
16565: CALL_OW 259
16569: PUSH
16570: LD_INT 4
16572: MUL
16573: MUL
16574: ST_TO_ADDR
// if GetControl ( i ) = control_remote then
16575: LD_VAR 0 6
16579: PPUSH
16580: CALL_OW 263
16584: PUSH
16585: LD_INT 2
16587: EQUAL
16588: IFFALSE 16639
// begin j := IsControledBy ( i ) ;
16590: LD_ADDR_VAR 0 7
16594: PUSH
16595: LD_VAR 0 6
16599: PPUSH
16600: CALL_OW 312
16604: ST_TO_ADDR
// if j then
16605: LD_VAR 0 7
16609: IFFALSE 16639
// bpoints := bpoints * ( GetSkill ( j , 3 ) * 3 ) ;
16611: LD_ADDR_VAR 0 10
16615: PUSH
16616: LD_VAR 0 10
16620: PUSH
16621: LD_VAR 0 7
16625: PPUSH
16626: LD_INT 3
16628: PPUSH
16629: CALL_OW 259
16633: PUSH
16634: LD_INT 3
16636: MUL
16637: MUL
16638: ST_TO_ADDR
// end ; if GetWeapon ( i ) in [ us_double_gun , us_heavy_gun , ru_heavy_gun , ru_gun , ru_rocket , ru_rocket_launcher , ar_rocket_launcher , us_rocket_launcher , ar_gun , ar_selfpropelled_bomb ] and GetTech ( side , tech_weap2 ) = state_researched then
16639: LD_VAR 0 6
16643: PPUSH
16644: CALL_OW 264
16648: PUSH
16649: LD_INT 5
16651: PUSH
16652: LD_INT 6
16654: PUSH
16655: LD_INT 46
16657: PUSH
16658: LD_INT 44
16660: PUSH
16661: LD_INT 47
16663: PUSH
16664: LD_INT 45
16666: PUSH
16667: LD_INT 28
16669: PUSH
16670: LD_INT 7
16672: PUSH
16673: LD_INT 27
16675: PUSH
16676: LD_INT 29
16678: PUSH
16679: EMPTY
16680: LIST
16681: LIST
16682: LIST
16683: LIST
16684: LIST
16685: LIST
16686: LIST
16687: LIST
16688: LIST
16689: LIST
16690: IN
16691: PUSH
16692: LD_VAR 0 1
16696: PPUSH
16697: LD_INT 52
16699: PPUSH
16700: CALL_OW 321
16704: PUSH
16705: LD_INT 2
16707: EQUAL
16708: AND
16709: IFFALSE 16726
// bpoints := bpoints * 1.2 ;
16711: LD_ADDR_VAR 0 10
16715: PUSH
16716: LD_VAR 0 10
16720: PUSH
16721: LD_REAL  1.20000000000000E+0000
16724: MUL
16725: ST_TO_ADDR
// if GetWeapon ( i ) in [ us_heavy_gun , ru_heavy_gun , ru_rocket ] then
16726: LD_VAR 0 6
16730: PPUSH
16731: CALL_OW 264
16735: PUSH
16736: LD_INT 6
16738: PUSH
16739: LD_INT 46
16741: PUSH
16742: LD_INT 47
16744: PUSH
16745: EMPTY
16746: LIST
16747: LIST
16748: LIST
16749: IN
16750: IFFALSE 16767
// bpoints := bpoints * 1.2 ;
16752: LD_ADDR_VAR 0 10
16756: PUSH
16757: LD_VAR 0 10
16761: PUSH
16762: LD_REAL  1.20000000000000E+0000
16765: MUL
16766: ST_TO_ADDR
// end ; unit_building :
16767: GO 16781
16769: LD_INT 3
16771: DOUBLE
16772: EQUAL
16773: IFTRUE 16777
16775: GO 16780
16777: POP
// ; end ;
16778: GO 16781
16780: POP
// for j = 1 to 3 do
16781: LD_ADDR_VAR 0 7
16785: PUSH
16786: DOUBLE
16787: LD_INT 1
16789: DEC
16790: ST_TO_ADDR
16791: LD_INT 3
16793: PUSH
16794: FOR_TO
16795: IFFALSE 16848
// result := Replace ( result , j , result [ j ] + ( points [ j ] * bpoints ) ) ;
16797: LD_ADDR_VAR 0 5
16801: PUSH
16802: LD_VAR 0 5
16806: PPUSH
16807: LD_VAR 0 7
16811: PPUSH
16812: LD_VAR 0 5
16816: PUSH
16817: LD_VAR 0 7
16821: ARRAY
16822: PUSH
16823: LD_VAR 0 9
16827: PUSH
16828: LD_VAR 0 7
16832: ARRAY
16833: PUSH
16834: LD_VAR 0 10
16838: MUL
16839: PLUS
16840: PPUSH
16841: CALL_OW 1
16845: ST_TO_ADDR
16846: GO 16794
16848: POP
16849: POP
// end ;
16850: GO 15327
16852: POP
16853: POP
// result := Replace ( result , 4 , tmp ) ;
16854: LD_ADDR_VAR 0 5
16858: PUSH
16859: LD_VAR 0 5
16863: PPUSH
16864: LD_INT 4
16866: PPUSH
16867: LD_VAR 0 8
16871: PPUSH
16872: CALL_OW 1
16876: ST_TO_ADDR
// end ;
16877: LD_VAR 0 5
16881: RET
// export function DangerAtRange ( unit , range ) ; begin
16882: LD_INT 0
16884: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , range ) ;
16885: LD_ADDR_VAR 0 3
16889: PUSH
16890: LD_VAR 0 1
16894: PPUSH
16895: CALL_OW 255
16899: PPUSH
16900: LD_VAR 0 1
16904: PPUSH
16905: CALL_OW 250
16909: PPUSH
16910: LD_VAR 0 1
16914: PPUSH
16915: CALL_OW 251
16919: PPUSH
16920: LD_VAR 0 2
16924: PPUSH
16925: CALL 15179 0 4
16929: ST_TO_ADDR
// end ;
16930: LD_VAR 0 3
16934: RET
// export function DangerInArea ( side , area ) ; begin
16935: LD_INT 0
16937: PPUSH
// result := FilterUnitsInArea ( area , [ f_enemy , side ] ) ;
16938: LD_ADDR_VAR 0 3
16942: PUSH
16943: LD_VAR 0 2
16947: PPUSH
16948: LD_INT 81
16950: PUSH
16951: LD_VAR 0 1
16955: PUSH
16956: EMPTY
16957: LIST
16958: LIST
16959: PPUSH
16960: CALL_OW 70
16964: ST_TO_ADDR
// end ;
16965: LD_VAR 0 3
16969: RET
// export function IsExtension ( b ) ; begin
16970: LD_INT 0
16972: PPUSH
// result := b in [ b_ext_stitch , b_ext_radar , b_ext_radio , b_ext_gun , b_ext_computer , b_ext_siberium , b_ext_noncombat , b_ext_track , b_ext_laser , b_ext_rocket ] ;
16973: LD_ADDR_VAR 0 2
16977: PUSH
16978: LD_VAR 0 1
16982: PUSH
16983: LD_INT 23
16985: PUSH
16986: LD_INT 20
16988: PUSH
16989: LD_INT 22
16991: PUSH
16992: LD_INT 17
16994: PUSH
16995: LD_INT 24
16997: PUSH
16998: LD_INT 21
17000: PUSH
17001: LD_INT 19
17003: PUSH
17004: LD_INT 16
17006: PUSH
17007: LD_INT 25
17009: PUSH
17010: LD_INT 18
17012: PUSH
17013: EMPTY
17014: LIST
17015: LIST
17016: LIST
17017: LIST
17018: LIST
17019: LIST
17020: LIST
17021: LIST
17022: LIST
17023: LIST
17024: IN
17025: ST_TO_ADDR
// end ;
17026: LD_VAR 0 2
17030: RET
// export function GetBaseBuildings ( base , area , checkLink ) ; var tmp , i ; begin
17031: LD_INT 0
17033: PPUSH
17034: PPUSH
17035: PPUSH
// result := [ ] ;
17036: LD_ADDR_VAR 0 4
17040: PUSH
17041: EMPTY
17042: ST_TO_ADDR
// tmp := FilterUnitsInArea ( area , [ f_type , unit_building ] ) ;
17043: LD_ADDR_VAR 0 5
17047: PUSH
17048: LD_VAR 0 2
17052: PPUSH
17053: LD_INT 21
17055: PUSH
17056: LD_INT 3
17058: PUSH
17059: EMPTY
17060: LIST
17061: LIST
17062: PPUSH
17063: CALL_OW 70
17067: ST_TO_ADDR
// if not tmp then
17068: LD_VAR 0 5
17072: NOT
17073: IFFALSE 17077
// exit ;
17075: GO 17141
// if checkLink then
17077: LD_VAR 0 3
17081: IFFALSE 17131
// begin for i in tmp do
17083: LD_ADDR_VAR 0 6
17087: PUSH
17088: LD_VAR 0 5
17092: PUSH
17093: FOR_IN
17094: IFFALSE 17129
// if GetBase ( i ) <> base then
17096: LD_VAR 0 6
17100: PPUSH
17101: CALL_OW 274
17105: PUSH
17106: LD_VAR 0 1
17110: NONEQUAL
17111: IFFALSE 17127
// ComLinkToBase ( base , i ) ;
17113: LD_VAR 0 1
17117: PPUSH
17118: LD_VAR 0 6
17122: PPUSH
17123: CALL_OW 169
17127: GO 17093
17129: POP
17130: POP
// end ; result := tmp ;
17131: LD_ADDR_VAR 0 4
17135: PUSH
17136: LD_VAR 0 5
17140: ST_TO_ADDR
// end ;
17141: LD_VAR 0 4
17145: RET
// export function ComComplete ( units , b ) ; var i ; begin
17146: LD_INT 0
17148: PPUSH
17149: PPUSH
// if not units then
17150: LD_VAR 0 1
17154: NOT
17155: IFFALSE 17159
// exit ;
17157: GO 17249
// for i in units do
17159: LD_ADDR_VAR 0 4
17163: PUSH
17164: LD_VAR 0 1
17168: PUSH
17169: FOR_IN
17170: IFFALSE 17247
// if BuildingStatus ( b ) = bs_build then
17172: LD_VAR 0 2
17176: PPUSH
17177: CALL_OW 461
17181: PUSH
17182: LD_INT 1
17184: EQUAL
17185: IFFALSE 17245
// SetTaskList ( i , [ [ h , GetX ( b ) , GetY ( b ) , b , 0 , 0 , 0 ] ] ) ;
17187: LD_VAR 0 4
17191: PPUSH
17192: LD_STRING h
17194: PUSH
17195: LD_VAR 0 2
17199: PPUSH
17200: CALL_OW 250
17204: PUSH
17205: LD_VAR 0 2
17209: PPUSH
17210: CALL_OW 251
17214: PUSH
17215: LD_VAR 0 2
17219: PUSH
17220: LD_INT 0
17222: PUSH
17223: LD_INT 0
17225: PUSH
17226: LD_INT 0
17228: PUSH
17229: EMPTY
17230: LIST
17231: LIST
17232: LIST
17233: LIST
17234: LIST
17235: LIST
17236: LIST
17237: PUSH
17238: EMPTY
17239: LIST
17240: PPUSH
17241: CALL_OW 446
17245: GO 17169
17247: POP
17248: POP
// end ;
17249: LD_VAR 0 3
17253: RET
// export function Connect ( vehicle ) ; var i , t , mech , tmp , j ; begin
17254: LD_INT 0
17256: PPUSH
17257: PPUSH
17258: PPUSH
17259: PPUSH
17260: PPUSH
17261: PPUSH
// if not vehicle or GetControl ( vehicle ) <> control_remote then
17262: LD_VAR 0 1
17266: NOT
17267: PUSH
17268: LD_VAR 0 1
17272: PPUSH
17273: CALL_OW 263
17277: PUSH
17278: LD_INT 2
17280: NONEQUAL
17281: OR
17282: IFFALSE 17286
// exit ;
17284: GO 17602
// tmp := FilterAllUnits ( [ [ f_side , GetSide ( vehicle ) ] , [ f_or , [ f_btype , b_control_tower ] , [ f_weapon , ar_control_tower ] ] ] ) ;
17286: LD_ADDR_VAR 0 6
17290: PUSH
17291: LD_INT 22
17293: PUSH
17294: LD_VAR 0 1
17298: PPUSH
17299: CALL_OW 255
17303: PUSH
17304: EMPTY
17305: LIST
17306: LIST
17307: PUSH
17308: LD_INT 2
17310: PUSH
17311: LD_INT 30
17313: PUSH
17314: LD_INT 36
17316: PUSH
17317: EMPTY
17318: LIST
17319: LIST
17320: PUSH
17321: LD_INT 34
17323: PUSH
17324: LD_INT 31
17326: PUSH
17327: EMPTY
17328: LIST
17329: LIST
17330: PUSH
17331: EMPTY
17332: LIST
17333: LIST
17334: LIST
17335: PUSH
17336: EMPTY
17337: LIST
17338: LIST
17339: PPUSH
17340: CALL_OW 69
17344: ST_TO_ADDR
// if not tmp then
17345: LD_VAR 0 6
17349: NOT
17350: IFFALSE 17354
// exit ;
17352: GO 17602
// result := [ ] ;
17354: LD_ADDR_VAR 0 2
17358: PUSH
17359: EMPTY
17360: ST_TO_ADDR
// for i in tmp do
17361: LD_ADDR_VAR 0 3
17365: PUSH
17366: LD_VAR 0 6
17370: PUSH
17371: FOR_IN
17372: IFFALSE 17443
// begin t := UnitsInside ( i ) ;
17374: LD_ADDR_VAR 0 4
17378: PUSH
17379: LD_VAR 0 3
17383: PPUSH
17384: CALL_OW 313
17388: ST_TO_ADDR
// if t then
17389: LD_VAR 0 4
17393: IFFALSE 17441
// for j in t do
17395: LD_ADDR_VAR 0 7
17399: PUSH
17400: LD_VAR 0 4
17404: PUSH
17405: FOR_IN
17406: IFFALSE 17439
// result := Replace ( result , result + 1 , j ) ;
17408: LD_ADDR_VAR 0 2
17412: PUSH
17413: LD_VAR 0 2
17417: PPUSH
17418: LD_VAR 0 2
17422: PUSH
17423: LD_INT 1
17425: PLUS
17426: PPUSH
17427: LD_VAR 0 7
17431: PPUSH
17432: CALL_OW 1
17436: ST_TO_ADDR
17437: GO 17405
17439: POP
17440: POP
// end ;
17441: GO 17371
17443: POP
17444: POP
// if not result then
17445: LD_VAR 0 2
17449: NOT
17450: IFFALSE 17454
// exit ;
17452: GO 17602
// mech := result [ 1 ] ;
17454: LD_ADDR_VAR 0 5
17458: PUSH
17459: LD_VAR 0 2
17463: PUSH
17464: LD_INT 1
17466: ARRAY
17467: ST_TO_ADDR
// if result > 1 then
17468: LD_VAR 0 2
17472: PUSH
17473: LD_INT 1
17475: GREATER
17476: IFFALSE 17588
// begin for i = 2 to result do
17478: LD_ADDR_VAR 0 3
17482: PUSH
17483: DOUBLE
17484: LD_INT 2
17486: DEC
17487: ST_TO_ADDR
17488: LD_VAR 0 2
17492: PUSH
17493: FOR_TO
17494: IFFALSE 17586
// begin t := GetSkill ( result [ i ] , 3 ) - UnitsLinked ( result [ i ] ) ;
17496: LD_ADDR_VAR 0 4
17500: PUSH
17501: LD_VAR 0 2
17505: PUSH
17506: LD_VAR 0 3
17510: ARRAY
17511: PPUSH
17512: LD_INT 3
17514: PPUSH
17515: CALL_OW 259
17519: PUSH
17520: LD_VAR 0 2
17524: PUSH
17525: LD_VAR 0 3
17529: ARRAY
17530: PPUSH
17531: CALL_OW 432
17535: MINUS
17536: ST_TO_ADDR
// if t >= ( GetSkill ( mech , 3 ) - UnitsLinked ( mech ) ) then
17537: LD_VAR 0 4
17541: PUSH
17542: LD_VAR 0 5
17546: PPUSH
17547: LD_INT 3
17549: PPUSH
17550: CALL_OW 259
17554: PUSH
17555: LD_VAR 0 5
17559: PPUSH
17560: CALL_OW 432
17564: MINUS
17565: GREATEREQUAL
17566: IFFALSE 17584
// mech := result [ i ] ;
17568: LD_ADDR_VAR 0 5
17572: PUSH
17573: LD_VAR 0 2
17577: PUSH
17578: LD_VAR 0 3
17582: ARRAY
17583: ST_TO_ADDR
// end ;
17584: GO 17493
17586: POP
17587: POP
// end ; ComLinkTo ( vehicle , mech ) ;
17588: LD_VAR 0 1
17592: PPUSH
17593: LD_VAR 0 5
17597: PPUSH
17598: CALL_OW 135
// end ;
17602: LD_VAR 0 2
17606: RET
// export function PrepareBase ( base_dep , area , name , skill , sources , personel ) ; var i , j , d , b , f , x , un , base , side , nation , buildings , tmp ; begin
17607: LD_INT 0
17609: PPUSH
17610: PPUSH
17611: PPUSH
17612: PPUSH
17613: PPUSH
17614: PPUSH
17615: PPUSH
17616: PPUSH
17617: PPUSH
17618: PPUSH
17619: PPUSH
17620: PPUSH
17621: PPUSH
// result := [ ] ;
17622: LD_ADDR_VAR 0 7
17626: PUSH
17627: EMPTY
17628: ST_TO_ADDR
// if not GetBType ( base_dep ) in [ b_depot , b_warehouse ] then
17629: LD_VAR 0 1
17633: PPUSH
17634: CALL_OW 266
17638: PUSH
17639: LD_INT 0
17641: PUSH
17642: LD_INT 1
17644: PUSH
17645: EMPTY
17646: LIST
17647: LIST
17648: IN
17649: NOT
17650: IFFALSE 17654
// exit ;
17652: GO 19288
// if name then
17654: LD_VAR 0 3
17658: IFFALSE 17674
// SetBName ( base_dep , name ) ;
17660: LD_VAR 0 1
17664: PPUSH
17665: LD_VAR 0 3
17669: PPUSH
17670: CALL_OW 500
// base := GetBase ( base_dep ) ;
17674: LD_ADDR_VAR 0 15
17678: PUSH
17679: LD_VAR 0 1
17683: PPUSH
17684: CALL_OW 274
17688: ST_TO_ADDR
// side := GetSide ( base_dep ) ;
17689: LD_ADDR_VAR 0 16
17693: PUSH
17694: LD_VAR 0 1
17698: PPUSH
17699: CALL_OW 255
17703: ST_TO_ADDR
// nation := GetNation ( base_dep ) ;
17704: LD_ADDR_VAR 0 17
17708: PUSH
17709: LD_VAR 0 1
17713: PPUSH
17714: CALL_OW 248
17718: ST_TO_ADDR
// if sources then
17719: LD_VAR 0 5
17723: IFFALSE 17770
// for i = 1 to 3 do
17725: LD_ADDR_VAR 0 8
17729: PUSH
17730: DOUBLE
17731: LD_INT 1
17733: DEC
17734: ST_TO_ADDR
17735: LD_INT 3
17737: PUSH
17738: FOR_TO
17739: IFFALSE 17768
// AddResourceType ( base , i , sources [ i ] ) ;
17741: LD_VAR 0 15
17745: PPUSH
17746: LD_VAR 0 8
17750: PPUSH
17751: LD_VAR 0 5
17755: PUSH
17756: LD_VAR 0 8
17760: ARRAY
17761: PPUSH
17762: CALL_OW 276
17766: GO 17738
17768: POP
17769: POP
// buildings := GetBaseBuildings ( base , area , true ) ;
17770: LD_ADDR_VAR 0 18
17774: PUSH
17775: LD_VAR 0 15
17779: PPUSH
17780: LD_VAR 0 2
17784: PPUSH
17785: LD_INT 1
17787: PPUSH
17788: CALL 17031 0 3
17792: ST_TO_ADDR
// InitHc ;
17793: CALL_OW 19
// InitUc ;
17797: CALL_OW 18
// uc_side := side ;
17801: LD_ADDR_OWVAR 20
17805: PUSH
17806: LD_VAR 0 16
17810: ST_TO_ADDR
// uc_nation := nation ;
17811: LD_ADDR_OWVAR 21
17815: PUSH
17816: LD_VAR 0 17
17820: ST_TO_ADDR
// if buildings then
17821: LD_VAR 0 18
17825: IFFALSE 19147
// begin tmp := UnitFilter ( buildings , [ f_or , [ f_btype , b_oil_mine ] , [ f_btype , b_siberite_mine ] ] ) ;
17827: LD_ADDR_VAR 0 19
17831: PUSH
17832: LD_VAR 0 18
17836: PPUSH
17837: LD_INT 2
17839: PUSH
17840: LD_INT 30
17842: PUSH
17843: LD_INT 29
17845: PUSH
17846: EMPTY
17847: LIST
17848: LIST
17849: PUSH
17850: LD_INT 30
17852: PUSH
17853: LD_INT 30
17855: PUSH
17856: EMPTY
17857: LIST
17858: LIST
17859: PUSH
17860: EMPTY
17861: LIST
17862: LIST
17863: LIST
17864: PPUSH
17865: CALL_OW 72
17869: ST_TO_ADDR
// if tmp then
17870: LD_VAR 0 19
17874: IFFALSE 17922
// for i in tmp do
17876: LD_ADDR_VAR 0 8
17880: PUSH
17881: LD_VAR 0 19
17885: PUSH
17886: FOR_IN
17887: IFFALSE 17920
// SetResourceVisibility ( GetX ( i ) , GetY ( i ) , side ) ;
17889: LD_VAR 0 8
17893: PPUSH
17894: CALL_OW 250
17898: PPUSH
17899: LD_VAR 0 8
17903: PPUSH
17904: CALL_OW 251
17908: PPUSH
17909: LD_VAR 0 16
17913: PPUSH
17914: CALL_OW 441
17918: GO 17886
17920: POP
17921: POP
// if UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) then
17922: LD_VAR 0 18
17926: PPUSH
17927: LD_INT 2
17929: PUSH
17930: LD_INT 30
17932: PUSH
17933: LD_INT 32
17935: PUSH
17936: EMPTY
17937: LIST
17938: LIST
17939: PUSH
17940: LD_INT 30
17942: PUSH
17943: LD_INT 33
17945: PUSH
17946: EMPTY
17947: LIST
17948: LIST
17949: PUSH
17950: EMPTY
17951: LIST
17952: LIST
17953: LIST
17954: PPUSH
17955: CALL_OW 72
17959: IFFALSE 18047
// begin for i in UnitFilter ( buildings , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] ) do
17961: LD_ADDR_VAR 0 8
17965: PUSH
17966: LD_VAR 0 18
17970: PPUSH
17971: LD_INT 2
17973: PUSH
17974: LD_INT 30
17976: PUSH
17977: LD_INT 32
17979: PUSH
17980: EMPTY
17981: LIST
17982: LIST
17983: PUSH
17984: LD_INT 30
17986: PUSH
17987: LD_INT 33
17989: PUSH
17990: EMPTY
17991: LIST
17992: LIST
17993: PUSH
17994: EMPTY
17995: LIST
17996: LIST
17997: LIST
17998: PPUSH
17999: CALL_OW 72
18003: PUSH
18004: FOR_IN
18005: IFFALSE 18045
// begin if not GetBWeapon ( i ) then
18007: LD_VAR 0 8
18011: PPUSH
18012: CALL_OW 269
18016: NOT
18017: IFFALSE 18043
// PlaceWeaponTurret ( i , GetTurretWeapon ( i , area ) ) ;
18019: LD_VAR 0 8
18023: PPUSH
18024: LD_VAR 0 8
18028: PPUSH
18029: LD_VAR 0 2
18033: PPUSH
18034: CALL 19293 0 2
18038: PPUSH
18039: CALL_OW 431
// end ;
18043: GO 18004
18045: POP
18046: POP
// end ; for i = 1 to personel do
18047: LD_ADDR_VAR 0 8
18051: PUSH
18052: DOUBLE
18053: LD_INT 1
18055: DEC
18056: ST_TO_ADDR
18057: LD_VAR 0 6
18061: PUSH
18062: FOR_TO
18063: IFFALSE 19127
// begin if i > 4 then
18065: LD_VAR 0 8
18069: PUSH
18070: LD_INT 4
18072: GREATER
18073: IFFALSE 18077
// break ;
18075: GO 19127
// case i of 1 :
18077: LD_VAR 0 8
18081: PUSH
18082: LD_INT 1
18084: DOUBLE
18085: EQUAL
18086: IFTRUE 18090
18088: GO 18170
18090: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_empty ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_armoury ] , [ f_btype , b_barracks ] ] ] ) ; 2 :
18091: LD_ADDR_VAR 0 12
18095: PUSH
18096: LD_VAR 0 18
18100: PPUSH
18101: LD_INT 22
18103: PUSH
18104: LD_VAR 0 16
18108: PUSH
18109: EMPTY
18110: LIST
18111: LIST
18112: PUSH
18113: LD_INT 58
18115: PUSH
18116: EMPTY
18117: LIST
18118: PUSH
18119: LD_INT 2
18121: PUSH
18122: LD_INT 30
18124: PUSH
18125: LD_INT 32
18127: PUSH
18128: EMPTY
18129: LIST
18130: LIST
18131: PUSH
18132: LD_INT 30
18134: PUSH
18135: LD_INT 4
18137: PUSH
18138: EMPTY
18139: LIST
18140: LIST
18141: PUSH
18142: LD_INT 30
18144: PUSH
18145: LD_INT 5
18147: PUSH
18148: EMPTY
18149: LIST
18150: LIST
18151: PUSH
18152: EMPTY
18153: LIST
18154: LIST
18155: LIST
18156: LIST
18157: PUSH
18158: EMPTY
18159: LIST
18160: LIST
18161: LIST
18162: PPUSH
18163: CALL_OW 72
18167: ST_TO_ADDR
18168: GO 18392
18170: LD_INT 2
18172: DOUBLE
18173: EQUAL
18174: IFTRUE 18178
18176: GO 18240
18178: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ; 3 :
18179: LD_ADDR_VAR 0 12
18183: PUSH
18184: LD_VAR 0 18
18188: PPUSH
18189: LD_INT 22
18191: PUSH
18192: LD_VAR 0 16
18196: PUSH
18197: EMPTY
18198: LIST
18199: LIST
18200: PUSH
18201: LD_INT 2
18203: PUSH
18204: LD_INT 30
18206: PUSH
18207: LD_INT 0
18209: PUSH
18210: EMPTY
18211: LIST
18212: LIST
18213: PUSH
18214: LD_INT 30
18216: PUSH
18217: LD_INT 1
18219: PUSH
18220: EMPTY
18221: LIST
18222: LIST
18223: PUSH
18224: EMPTY
18225: LIST
18226: LIST
18227: LIST
18228: PUSH
18229: EMPTY
18230: LIST
18231: LIST
18232: PPUSH
18233: CALL_OW 72
18237: ST_TO_ADDR
18238: GO 18392
18240: LD_INT 3
18242: DOUBLE
18243: EQUAL
18244: IFTRUE 18248
18246: GO 18310
18248: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_workshop ] , [ f_btype , b_factory ] ] ] ) ; 4 :
18249: LD_ADDR_VAR 0 12
18253: PUSH
18254: LD_VAR 0 18
18258: PPUSH
18259: LD_INT 22
18261: PUSH
18262: LD_VAR 0 16
18266: PUSH
18267: EMPTY
18268: LIST
18269: LIST
18270: PUSH
18271: LD_INT 2
18273: PUSH
18274: LD_INT 30
18276: PUSH
18277: LD_INT 2
18279: PUSH
18280: EMPTY
18281: LIST
18282: LIST
18283: PUSH
18284: LD_INT 30
18286: PUSH
18287: LD_INT 3
18289: PUSH
18290: EMPTY
18291: LIST
18292: LIST
18293: PUSH
18294: EMPTY
18295: LIST
18296: LIST
18297: LIST
18298: PUSH
18299: EMPTY
18300: LIST
18301: LIST
18302: PPUSH
18303: CALL_OW 72
18307: ST_TO_ADDR
18308: GO 18392
18310: LD_INT 4
18312: DOUBLE
18313: EQUAL
18314: IFTRUE 18318
18316: GO 18391
18318: POP
// f := UnitFilter ( buildings , [ [ f_side , side ] , [ f_or , [ f_btype , b_lab ] , [ f_btype , b_lab_half ] , [ f_btype , b_lab_full ] ] ] ) ; end ;
18319: LD_ADDR_VAR 0 12
18323: PUSH
18324: LD_VAR 0 18
18328: PPUSH
18329: LD_INT 22
18331: PUSH
18332: LD_VAR 0 16
18336: PUSH
18337: EMPTY
18338: LIST
18339: LIST
18340: PUSH
18341: LD_INT 2
18343: PUSH
18344: LD_INT 30
18346: PUSH
18347: LD_INT 6
18349: PUSH
18350: EMPTY
18351: LIST
18352: LIST
18353: PUSH
18354: LD_INT 30
18356: PUSH
18357: LD_INT 7
18359: PUSH
18360: EMPTY
18361: LIST
18362: LIST
18363: PUSH
18364: LD_INT 30
18366: PUSH
18367: LD_INT 8
18369: PUSH
18370: EMPTY
18371: LIST
18372: LIST
18373: PUSH
18374: EMPTY
18375: LIST
18376: LIST
18377: LIST
18378: LIST
18379: PUSH
18380: EMPTY
18381: LIST
18382: LIST
18383: PPUSH
18384: CALL_OW 72
18388: ST_TO_ADDR
18389: GO 18392
18391: POP
// if i = 1 then
18392: LD_VAR 0 8
18396: PUSH
18397: LD_INT 1
18399: EQUAL
18400: IFFALSE 18511
// begin tmp := [ ] ;
18402: LD_ADDR_VAR 0 19
18406: PUSH
18407: EMPTY
18408: ST_TO_ADDR
// for j in f do
18409: LD_ADDR_VAR 0 9
18413: PUSH
18414: LD_VAR 0 12
18418: PUSH
18419: FOR_IN
18420: IFFALSE 18493
// if GetBType ( j ) = b_bunker then
18422: LD_VAR 0 9
18426: PPUSH
18427: CALL_OW 266
18431: PUSH
18432: LD_INT 32
18434: EQUAL
18435: IFFALSE 18462
// tmp := Insert ( tmp , 1 , j ) else
18437: LD_ADDR_VAR 0 19
18441: PUSH
18442: LD_VAR 0 19
18446: PPUSH
18447: LD_INT 1
18449: PPUSH
18450: LD_VAR 0 9
18454: PPUSH
18455: CALL_OW 2
18459: ST_TO_ADDR
18460: GO 18491
// tmp := Insert ( tmp , tmp + 1 , j ) ;
18462: LD_ADDR_VAR 0 19
18466: PUSH
18467: LD_VAR 0 19
18471: PPUSH
18472: LD_VAR 0 19
18476: PUSH
18477: LD_INT 1
18479: PLUS
18480: PPUSH
18481: LD_VAR 0 9
18485: PPUSH
18486: CALL_OW 2
18490: ST_TO_ADDR
18491: GO 18419
18493: POP
18494: POP
// if tmp then
18495: LD_VAR 0 19
18499: IFFALSE 18511
// f := tmp ;
18501: LD_ADDR_VAR 0 12
18505: PUSH
18506: LD_VAR 0 19
18510: ST_TO_ADDR
// end ; x := personel [ i ] ;
18511: LD_ADDR_VAR 0 13
18515: PUSH
18516: LD_VAR 0 6
18520: PUSH
18521: LD_VAR 0 8
18525: ARRAY
18526: ST_TO_ADDR
// if x = - 1 then
18527: LD_VAR 0 13
18531: PUSH
18532: LD_INT 1
18534: NEG
18535: EQUAL
18536: IFFALSE 18745
// begin for j in f do
18538: LD_ADDR_VAR 0 9
18542: PUSH
18543: LD_VAR 0 12
18547: PUSH
18548: FOR_IN
18549: IFFALSE 18741
// repeat InitHc ;
18551: CALL_OW 19
// if GetBType ( j ) = b_barracks then
18555: LD_VAR 0 9
18559: PPUSH
18560: CALL_OW 266
18564: PUSH
18565: LD_INT 5
18567: EQUAL
18568: IFFALSE 18638
// begin if UnitsInside ( j ) < 3 then
18570: LD_VAR 0 9
18574: PPUSH
18575: CALL_OW 313
18579: PUSH
18580: LD_INT 3
18582: LESS
18583: IFFALSE 18619
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
18585: LD_INT 0
18587: PPUSH
18588: LD_INT 5
18590: PUSH
18591: LD_INT 8
18593: PUSH
18594: LD_INT 9
18596: PUSH
18597: EMPTY
18598: LIST
18599: LIST
18600: LIST
18601: PUSH
18602: LD_VAR 0 17
18606: ARRAY
18607: PPUSH
18608: LD_VAR 0 4
18612: PPUSH
18613: CALL_OW 380
18617: GO 18636
// PrepareHuman ( false , i , skill ) ;
18619: LD_INT 0
18621: PPUSH
18622: LD_VAR 0 8
18626: PPUSH
18627: LD_VAR 0 4
18631: PPUSH
18632: CALL_OW 380
// end else
18636: GO 18655
// PrepareHuman ( false , i , skill ) ;
18638: LD_INT 0
18640: PPUSH
18641: LD_VAR 0 8
18645: PPUSH
18646: LD_VAR 0 4
18650: PPUSH
18651: CALL_OW 380
// un := CreateHuman ;
18655: LD_ADDR_VAR 0 14
18659: PUSH
18660: CALL_OW 44
18664: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18665: LD_ADDR_VAR 0 7
18669: PUSH
18670: LD_VAR 0 7
18674: PPUSH
18675: LD_INT 1
18677: PPUSH
18678: LD_VAR 0 14
18682: PPUSH
18683: CALL_OW 2
18687: ST_TO_ADDR
// PlaceHumanInUnit ( un , j ) ;
18688: LD_VAR 0 14
18692: PPUSH
18693: LD_VAR 0 9
18697: PPUSH
18698: CALL_OW 52
// until UnitsInside ( j ) = 6 or GetBType ( j ) in [ b_bunker , b_breastwork ] ;
18702: LD_VAR 0 9
18706: PPUSH
18707: CALL_OW 313
18711: PUSH
18712: LD_INT 6
18714: EQUAL
18715: PUSH
18716: LD_VAR 0 9
18720: PPUSH
18721: CALL_OW 266
18725: PUSH
18726: LD_INT 32
18728: PUSH
18729: LD_INT 31
18731: PUSH
18732: EMPTY
18733: LIST
18734: LIST
18735: IN
18736: OR
18737: IFFALSE 18551
18739: GO 18548
18741: POP
18742: POP
// end else
18743: GO 19125
// for j = 1 to x do
18745: LD_ADDR_VAR 0 9
18749: PUSH
18750: DOUBLE
18751: LD_INT 1
18753: DEC
18754: ST_TO_ADDR
18755: LD_VAR 0 13
18759: PUSH
18760: FOR_TO
18761: IFFALSE 19123
// begin InitHc ;
18763: CALL_OW 19
// if not f then
18767: LD_VAR 0 12
18771: NOT
18772: IFFALSE 18861
// begin PrepareHuman ( false , i , skill ) ;
18774: LD_INT 0
18776: PPUSH
18777: LD_VAR 0 8
18781: PPUSH
18782: LD_VAR 0 4
18786: PPUSH
18787: CALL_OW 380
// un := CreateHuman ;
18791: LD_ADDR_VAR 0 14
18795: PUSH
18796: CALL_OW 44
18800: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
18801: LD_ADDR_VAR 0 7
18805: PUSH
18806: LD_VAR 0 7
18810: PPUSH
18811: LD_INT 1
18813: PPUSH
18814: LD_VAR 0 14
18818: PPUSH
18819: CALL_OW 2
18823: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
18824: LD_VAR 0 14
18828: PPUSH
18829: LD_VAR 0 1
18833: PPUSH
18834: CALL_OW 250
18838: PPUSH
18839: LD_VAR 0 1
18843: PPUSH
18844: CALL_OW 251
18848: PPUSH
18849: LD_INT 10
18851: PPUSH
18852: LD_INT 0
18854: PPUSH
18855: CALL_OW 50
// continue ;
18859: GO 18760
// end ; if ( UnitsInside ( f [ 1 ] ) and GetBType ( f [ 1 ] ) in [ b_bunker , b_breastwork ] ) or ( UnitsInside ( f [ 1 ] ) = 6 ) then
18861: LD_VAR 0 12
18865: PUSH
18866: LD_INT 1
18868: ARRAY
18869: PPUSH
18870: CALL_OW 313
18874: PUSH
18875: LD_VAR 0 12
18879: PUSH
18880: LD_INT 1
18882: ARRAY
18883: PPUSH
18884: CALL_OW 266
18888: PUSH
18889: LD_INT 32
18891: PUSH
18892: LD_INT 31
18894: PUSH
18895: EMPTY
18896: LIST
18897: LIST
18898: IN
18899: AND
18900: PUSH
18901: LD_VAR 0 12
18905: PUSH
18906: LD_INT 1
18908: ARRAY
18909: PPUSH
18910: CALL_OW 313
18914: PUSH
18915: LD_INT 6
18917: EQUAL
18918: OR
18919: IFFALSE 18939
// f := Delete ( f , 1 ) ;
18921: LD_ADDR_VAR 0 12
18925: PUSH
18926: LD_VAR 0 12
18930: PPUSH
18931: LD_INT 1
18933: PPUSH
18934: CALL_OW 3
18938: ST_TO_ADDR
// if not f then
18939: LD_VAR 0 12
18943: NOT
18944: IFFALSE 18962
// begin x := x + 2 ;
18946: LD_ADDR_VAR 0 13
18950: PUSH
18951: LD_VAR 0 13
18955: PUSH
18956: LD_INT 2
18958: PLUS
18959: ST_TO_ADDR
// continue ;
18960: GO 18760
// end ; if GetBType ( f [ 1 ] ) = b_barracks then
18962: LD_VAR 0 12
18966: PUSH
18967: LD_INT 1
18969: ARRAY
18970: PPUSH
18971: CALL_OW 266
18975: PUSH
18976: LD_INT 5
18978: EQUAL
18979: IFFALSE 19053
// begin if UnitsInside ( f [ 1 ] ) < 3 then
18981: LD_VAR 0 12
18985: PUSH
18986: LD_INT 1
18988: ARRAY
18989: PPUSH
18990: CALL_OW 313
18994: PUSH
18995: LD_INT 3
18997: LESS
18998: IFFALSE 19034
// PrepareHuman ( false , [ class_sniper , class_mortar , class_bazooker ] [ nation ] , skill ) else
19000: LD_INT 0
19002: PPUSH
19003: LD_INT 5
19005: PUSH
19006: LD_INT 8
19008: PUSH
19009: LD_INT 9
19011: PUSH
19012: EMPTY
19013: LIST
19014: LIST
19015: LIST
19016: PUSH
19017: LD_VAR 0 17
19021: ARRAY
19022: PPUSH
19023: LD_VAR 0 4
19027: PPUSH
19028: CALL_OW 380
19032: GO 19051
// PrepareHuman ( false , i , skill ) ;
19034: LD_INT 0
19036: PPUSH
19037: LD_VAR 0 8
19041: PPUSH
19042: LD_VAR 0 4
19046: PPUSH
19047: CALL_OW 380
// end else
19051: GO 19070
// PrepareHuman ( false , i , skill ) ;
19053: LD_INT 0
19055: PPUSH
19056: LD_VAR 0 8
19060: PPUSH
19061: LD_VAR 0 4
19065: PPUSH
19066: CALL_OW 380
// un := CreateHuman ;
19070: LD_ADDR_VAR 0 14
19074: PUSH
19075: CALL_OW 44
19079: ST_TO_ADDR
// result := Insert ( result , 1 , un ) ;
19080: LD_ADDR_VAR 0 7
19084: PUSH
19085: LD_VAR 0 7
19089: PPUSH
19090: LD_INT 1
19092: PPUSH
19093: LD_VAR 0 14
19097: PPUSH
19098: CALL_OW 2
19102: ST_TO_ADDR
// PlaceHumanInUnit ( un , f [ 1 ] ) ;
19103: LD_VAR 0 14
19107: PPUSH
19108: LD_VAR 0 12
19112: PUSH
19113: LD_INT 1
19115: ARRAY
19116: PPUSH
19117: CALL_OW 52
// end ;
19121: GO 18760
19123: POP
19124: POP
// end ;
19125: GO 18062
19127: POP
19128: POP
// result := result ^ buildings ;
19129: LD_ADDR_VAR 0 7
19133: PUSH
19134: LD_VAR 0 7
19138: PUSH
19139: LD_VAR 0 18
19143: ADD
19144: ST_TO_ADDR
// end else
19145: GO 19288
// begin for i = 1 to personel do
19147: LD_ADDR_VAR 0 8
19151: PUSH
19152: DOUBLE
19153: LD_INT 1
19155: DEC
19156: ST_TO_ADDR
19157: LD_VAR 0 6
19161: PUSH
19162: FOR_TO
19163: IFFALSE 19286
// begin if i > 4 then
19165: LD_VAR 0 8
19169: PUSH
19170: LD_INT 4
19172: GREATER
19173: IFFALSE 19177
// break ;
19175: GO 19286
// x := personel [ i ] ;
19177: LD_ADDR_VAR 0 13
19181: PUSH
19182: LD_VAR 0 6
19186: PUSH
19187: LD_VAR 0 8
19191: ARRAY
19192: ST_TO_ADDR
// if x = - 1 then
19193: LD_VAR 0 13
19197: PUSH
19198: LD_INT 1
19200: NEG
19201: EQUAL
19202: IFFALSE 19206
// continue ;
19204: GO 19162
// PrepareHuman ( false , i , skill ) ;
19206: LD_INT 0
19208: PPUSH
19209: LD_VAR 0 8
19213: PPUSH
19214: LD_VAR 0 4
19218: PPUSH
19219: CALL_OW 380
// un := CreateHuman ;
19223: LD_ADDR_VAR 0 14
19227: PUSH
19228: CALL_OW 44
19232: ST_TO_ADDR
// PlaceUnitXYR ( un , GetX ( base_dep ) , GetY ( base_dep ) , 10 , false ) ;
19233: LD_VAR 0 14
19237: PPUSH
19238: LD_VAR 0 1
19242: PPUSH
19243: CALL_OW 250
19247: PPUSH
19248: LD_VAR 0 1
19252: PPUSH
19253: CALL_OW 251
19257: PPUSH
19258: LD_INT 10
19260: PPUSH
19261: LD_INT 0
19263: PPUSH
19264: CALL_OW 50
// result := result ^ un ;
19268: LD_ADDR_VAR 0 7
19272: PUSH
19273: LD_VAR 0 7
19277: PUSH
19278: LD_VAR 0 14
19282: ADD
19283: ST_TO_ADDR
// end ;
19284: GO 19162
19286: POP
19287: POP
// end ; end ;
19288: LD_VAR 0 7
19292: RET
// export function GetTurretWeapon ( tower , area ) ; var hex , list , factories , base , i , j , x , y , nat , h , tmp , height , side , fac_list , weapon ; begin
19293: LD_INT 0
19295: PPUSH
19296: PPUSH
19297: PPUSH
19298: PPUSH
19299: PPUSH
19300: PPUSH
19301: PPUSH
19302: PPUSH
19303: PPUSH
19304: PPUSH
19305: PPUSH
19306: PPUSH
19307: PPUSH
19308: PPUSH
19309: PPUSH
19310: PPUSH
// result := false ;
19311: LD_ADDR_VAR 0 3
19315: PUSH
19316: LD_INT 0
19318: ST_TO_ADDR
// if not tower or not GetBType ( tower ) in [ b_bunker , b_turret ] then
19319: LD_VAR 0 1
19323: NOT
19324: PUSH
19325: LD_VAR 0 1
19329: PPUSH
19330: CALL_OW 266
19334: PUSH
19335: LD_INT 32
19337: PUSH
19338: LD_INT 33
19340: PUSH
19341: EMPTY
19342: LIST
19343: LIST
19344: IN
19345: NOT
19346: OR
19347: IFFALSE 19351
// exit ;
19349: GO 20460
// nat := GetNation ( tower ) ;
19351: LD_ADDR_VAR 0 12
19355: PUSH
19356: LD_VAR 0 1
19360: PPUSH
19361: CALL_OW 248
19365: ST_TO_ADDR
// side := GetSide ( tower ) ;
19366: LD_ADDR_VAR 0 16
19370: PUSH
19371: LD_VAR 0 1
19375: PPUSH
19376: CALL_OW 255
19380: ST_TO_ADDR
// x := GetX ( tower ) ;
19381: LD_ADDR_VAR 0 10
19385: PUSH
19386: LD_VAR 0 1
19390: PPUSH
19391: CALL_OW 250
19395: ST_TO_ADDR
// y := GetY ( tower ) ;
19396: LD_ADDR_VAR 0 11
19400: PUSH
19401: LD_VAR 0 1
19405: PPUSH
19406: CALL_OW 251
19410: ST_TO_ADDR
// if not x or not y then
19411: LD_VAR 0 10
19415: NOT
19416: PUSH
19417: LD_VAR 0 11
19421: NOT
19422: OR
19423: IFFALSE 19427
// exit ;
19425: GO 20460
// weapon := 0 ;
19427: LD_ADDR_VAR 0 18
19431: PUSH
19432: LD_INT 0
19434: ST_TO_ADDR
// fac_list := [ ] ;
19435: LD_ADDR_VAR 0 17
19439: PUSH
19440: EMPTY
19441: ST_TO_ADDR
// factories := UnitFilter ( GetBaseBuildings ( GetBase ( tower ) , area , false ) , [ f_btype , b_factory ] ) ;
19442: LD_ADDR_VAR 0 6
19446: PUSH
19447: LD_VAR 0 1
19451: PPUSH
19452: CALL_OW 274
19456: PPUSH
19457: LD_VAR 0 2
19461: PPUSH
19462: LD_INT 0
19464: PPUSH
19465: CALL 17031 0 3
19469: PPUSH
19470: LD_INT 30
19472: PUSH
19473: LD_INT 3
19475: PUSH
19476: EMPTY
19477: LIST
19478: LIST
19479: PPUSH
19480: CALL_OW 72
19484: ST_TO_ADDR
// if not factories then
19485: LD_VAR 0 6
19489: NOT
19490: IFFALSE 19494
// exit ;
19492: GO 20460
// for i in factories do
19494: LD_ADDR_VAR 0 8
19498: PUSH
19499: LD_VAR 0 6
19503: PUSH
19504: FOR_IN
19505: IFFALSE 19530
// fac_list := fac_list union AvailableWeaponList ( i ) ;
19507: LD_ADDR_VAR 0 17
19511: PUSH
19512: LD_VAR 0 17
19516: PUSH
19517: LD_VAR 0 8
19521: PPUSH
19522: CALL_OW 478
19526: UNION
19527: ST_TO_ADDR
19528: GO 19504
19530: POP
19531: POP
// if not fac_list then
19532: LD_VAR 0 17
19536: NOT
19537: IFFALSE 19541
// exit ;
19539: GO 20460
// list := [ [ us_gatling_gun , us_double_gun , us_laser , us_double_laser , us_heavy_gun , us_rocket_launcher , us_radar ] , [ ar_gun , ar_rocket_launcher , ar_flame_thrower , ar_radar ] , [ ru_gatling_gun , ru_gun , ru_heavy_gun , ru_rocket_launcher , ru_rocket , ru_time_lapser ] ] [ nat ] ;
19541: LD_ADDR_VAR 0 5
19545: PUSH
19546: LD_INT 4
19548: PUSH
19549: LD_INT 5
19551: PUSH
19552: LD_INT 9
19554: PUSH
19555: LD_INT 10
19557: PUSH
19558: LD_INT 6
19560: PUSH
19561: LD_INT 7
19563: PUSH
19564: LD_INT 11
19566: PUSH
19567: EMPTY
19568: LIST
19569: LIST
19570: LIST
19571: LIST
19572: LIST
19573: LIST
19574: LIST
19575: PUSH
19576: LD_INT 27
19578: PUSH
19579: LD_INT 28
19581: PUSH
19582: LD_INT 26
19584: PUSH
19585: LD_INT 30
19587: PUSH
19588: EMPTY
19589: LIST
19590: LIST
19591: LIST
19592: LIST
19593: PUSH
19594: LD_INT 43
19596: PUSH
19597: LD_INT 44
19599: PUSH
19600: LD_INT 46
19602: PUSH
19603: LD_INT 45
19605: PUSH
19606: LD_INT 47
19608: PUSH
19609: LD_INT 49
19611: PUSH
19612: EMPTY
19613: LIST
19614: LIST
19615: LIST
19616: LIST
19617: LIST
19618: LIST
19619: PUSH
19620: EMPTY
19621: LIST
19622: LIST
19623: LIST
19624: PUSH
19625: LD_VAR 0 12
19629: ARRAY
19630: ST_TO_ADDR
// list := list isect fac_list ;
19631: LD_ADDR_VAR 0 5
19635: PUSH
19636: LD_VAR 0 5
19640: PUSH
19641: LD_VAR 0 17
19645: ISECT
19646: ST_TO_ADDR
// if not list then
19647: LD_VAR 0 5
19651: NOT
19652: IFFALSE 19656
// exit ;
19654: GO 20460
// if nat = nation_russian and ru_time_lapser in list and GetTech ( tech_lapser , side ) = state_researched then
19656: LD_VAR 0 12
19660: PUSH
19661: LD_INT 3
19663: EQUAL
19664: PUSH
19665: LD_INT 49
19667: PUSH
19668: LD_VAR 0 5
19672: IN
19673: AND
19674: PUSH
19675: LD_INT 31
19677: PPUSH
19678: LD_VAR 0 16
19682: PPUSH
19683: CALL_OW 321
19687: PUSH
19688: LD_INT 2
19690: EQUAL
19691: AND
19692: IFFALSE 19752
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_bweapon , ru_time_lapser ] , [ f_dist , tower , 10 ] ] ) then
19694: LD_INT 22
19696: PUSH
19697: LD_VAR 0 16
19701: PUSH
19702: EMPTY
19703: LIST
19704: LIST
19705: PUSH
19706: LD_INT 35
19708: PUSH
19709: LD_INT 49
19711: PUSH
19712: EMPTY
19713: LIST
19714: LIST
19715: PUSH
19716: LD_INT 91
19718: PUSH
19719: LD_VAR 0 1
19723: PUSH
19724: LD_INT 10
19726: PUSH
19727: EMPTY
19728: LIST
19729: LIST
19730: LIST
19731: PUSH
19732: EMPTY
19733: LIST
19734: LIST
19735: LIST
19736: PPUSH
19737: CALL_OW 69
19741: NOT
19742: IFFALSE 19752
// weapon := ru_time_lapser ;
19744: LD_ADDR_VAR 0 18
19748: PUSH
19749: LD_INT 49
19751: ST_TO_ADDR
// end ; if nat in [ 1 , 2 ] and ( us_radar in list or ar_radar in list ) and GetTech ( tech_radar , side ) = state_researched then
19752: LD_VAR 0 12
19756: PUSH
19757: LD_INT 1
19759: PUSH
19760: LD_INT 2
19762: PUSH
19763: EMPTY
19764: LIST
19765: LIST
19766: IN
19767: PUSH
19768: LD_INT 11
19770: PUSH
19771: LD_VAR 0 5
19775: IN
19776: PUSH
19777: LD_INT 30
19779: PUSH
19780: LD_VAR 0 5
19784: IN
19785: OR
19786: AND
19787: PUSH
19788: LD_INT 6
19790: PPUSH
19791: LD_VAR 0 16
19795: PPUSH
19796: CALL_OW 321
19800: PUSH
19801: LD_INT 2
19803: EQUAL
19804: AND
19805: IFFALSE 19970
// begin if not FilterAllUnits ( [ [ f_side , side ] , [ f_or , [ f_bweapon , us_radar ] , [ f_bweapon , ar_radar ] ] , [ f_dist , tower , 18 ] ] ) and FilterAllUnits ( [ [ [ f_side , side ] , [ f_or , [ f_btype , b_bunker ] , [ f_btype , b_turret ] ] , [ f_dist , tower , 12 ] ] ] ) > 2 then
19807: LD_INT 22
19809: PUSH
19810: LD_VAR 0 16
19814: PUSH
19815: EMPTY
19816: LIST
19817: LIST
19818: PUSH
19819: LD_INT 2
19821: PUSH
19822: LD_INT 35
19824: PUSH
19825: LD_INT 11
19827: PUSH
19828: EMPTY
19829: LIST
19830: LIST
19831: PUSH
19832: LD_INT 35
19834: PUSH
19835: LD_INT 30
19837: PUSH
19838: EMPTY
19839: LIST
19840: LIST
19841: PUSH
19842: EMPTY
19843: LIST
19844: LIST
19845: LIST
19846: PUSH
19847: LD_INT 91
19849: PUSH
19850: LD_VAR 0 1
19854: PUSH
19855: LD_INT 18
19857: PUSH
19858: EMPTY
19859: LIST
19860: LIST
19861: LIST
19862: PUSH
19863: EMPTY
19864: LIST
19865: LIST
19866: LIST
19867: PPUSH
19868: CALL_OW 69
19872: NOT
19873: PUSH
19874: LD_INT 22
19876: PUSH
19877: LD_VAR 0 16
19881: PUSH
19882: EMPTY
19883: LIST
19884: LIST
19885: PUSH
19886: LD_INT 2
19888: PUSH
19889: LD_INT 30
19891: PUSH
19892: LD_INT 32
19894: PUSH
19895: EMPTY
19896: LIST
19897: LIST
19898: PUSH
19899: LD_INT 30
19901: PUSH
19902: LD_INT 33
19904: PUSH
19905: EMPTY
19906: LIST
19907: LIST
19908: PUSH
19909: EMPTY
19910: LIST
19911: LIST
19912: LIST
19913: PUSH
19914: LD_INT 91
19916: PUSH
19917: LD_VAR 0 1
19921: PUSH
19922: LD_INT 12
19924: PUSH
19925: EMPTY
19926: LIST
19927: LIST
19928: LIST
19929: PUSH
19930: EMPTY
19931: LIST
19932: LIST
19933: LIST
19934: PUSH
19935: EMPTY
19936: LIST
19937: PPUSH
19938: CALL_OW 69
19942: PUSH
19943: LD_INT 2
19945: GREATER
19946: AND
19947: IFFALSE 19970
// weapon := [ us_radar , ar_radar ] [ nat ] ;
19949: LD_ADDR_VAR 0 18
19953: PUSH
19954: LD_INT 11
19956: PUSH
19957: LD_INT 30
19959: PUSH
19960: EMPTY
19961: LIST
19962: LIST
19963: PUSH
19964: LD_VAR 0 12
19968: ARRAY
19969: ST_TO_ADDR
// end ; if not weapon and GetTech ( tech_rocket , side ) = state_researched and ( us_rocket_launcher in list or ar_rocket_launcher in list or ru_rocket_launcher in list ) then
19970: LD_VAR 0 18
19974: NOT
19975: PUSH
19976: LD_INT 40
19978: PPUSH
19979: LD_VAR 0 16
19983: PPUSH
19984: CALL_OW 321
19988: PUSH
19989: LD_INT 2
19991: EQUAL
19992: AND
19993: PUSH
19994: LD_INT 7
19996: PUSH
19997: LD_VAR 0 5
20001: IN
20002: PUSH
20003: LD_INT 28
20005: PUSH
20006: LD_VAR 0 5
20010: IN
20011: OR
20012: PUSH
20013: LD_INT 45
20015: PUSH
20016: LD_VAR 0 5
20020: IN
20021: OR
20022: AND
20023: IFFALSE 20277
// begin hex := GetHexInfo ( x , y ) ;
20025: LD_ADDR_VAR 0 4
20029: PUSH
20030: LD_VAR 0 10
20034: PPUSH
20035: LD_VAR 0 11
20039: PPUSH
20040: CALL_OW 546
20044: ST_TO_ADDR
// if hex [ 1 ] then
20045: LD_VAR 0 4
20049: PUSH
20050: LD_INT 1
20052: ARRAY
20053: IFFALSE 20057
// exit ;
20055: GO 20460
// height := hex [ 2 ] ;
20057: LD_ADDR_VAR 0 15
20061: PUSH
20062: LD_VAR 0 4
20066: PUSH
20067: LD_INT 2
20069: ARRAY
20070: ST_TO_ADDR
// tmp := [ 0 , 2 , 3 , 5 ] ;
20071: LD_ADDR_VAR 0 14
20075: PUSH
20076: LD_INT 0
20078: PUSH
20079: LD_INT 2
20081: PUSH
20082: LD_INT 3
20084: PUSH
20085: LD_INT 5
20087: PUSH
20088: EMPTY
20089: LIST
20090: LIST
20091: LIST
20092: LIST
20093: ST_TO_ADDR
// for i in tmp do
20094: LD_ADDR_VAR 0 8
20098: PUSH
20099: LD_VAR 0 14
20103: PUSH
20104: FOR_IN
20105: IFFALSE 20275
// begin j := [ ShiftX ( x , i , 5 ) , ShiftY ( y , i , 5 ) ] ;
20107: LD_ADDR_VAR 0 9
20111: PUSH
20112: LD_VAR 0 10
20116: PPUSH
20117: LD_VAR 0 8
20121: PPUSH
20122: LD_INT 5
20124: PPUSH
20125: CALL_OW 272
20129: PUSH
20130: LD_VAR 0 11
20134: PPUSH
20135: LD_VAR 0 8
20139: PPUSH
20140: LD_INT 5
20142: PPUSH
20143: CALL_OW 273
20147: PUSH
20148: EMPTY
20149: LIST
20150: LIST
20151: ST_TO_ADDR
// if ValidHex ( j [ 1 ] , j [ 2 ] ) then
20152: LD_VAR 0 9
20156: PUSH
20157: LD_INT 1
20159: ARRAY
20160: PPUSH
20161: LD_VAR 0 9
20165: PUSH
20166: LD_INT 2
20168: ARRAY
20169: PPUSH
20170: CALL_OW 488
20174: IFFALSE 20273
// begin hex := GetHexInfo ( j [ 1 ] , j [ 2 ] ) ;
20176: LD_ADDR_VAR 0 4
20180: PUSH
20181: LD_VAR 0 9
20185: PUSH
20186: LD_INT 1
20188: ARRAY
20189: PPUSH
20190: LD_VAR 0 9
20194: PUSH
20195: LD_INT 2
20197: ARRAY
20198: PPUSH
20199: CALL_OW 546
20203: ST_TO_ADDR
// if hex [ 1 ] then
20204: LD_VAR 0 4
20208: PUSH
20209: LD_INT 1
20211: ARRAY
20212: IFFALSE 20216
// continue ;
20214: GO 20104
// h := hex [ 2 ] ;
20216: LD_ADDR_VAR 0 13
20220: PUSH
20221: LD_VAR 0 4
20225: PUSH
20226: LD_INT 2
20228: ARRAY
20229: ST_TO_ADDR
// if h + 7 < height then
20230: LD_VAR 0 13
20234: PUSH
20235: LD_INT 7
20237: PLUS
20238: PUSH
20239: LD_VAR 0 15
20243: LESS
20244: IFFALSE 20273
// begin weapon := [ us_rocket_launcher , ar_rocket_launcher , ru_rocket_launcher ] [ nat ] ;
20246: LD_ADDR_VAR 0 18
20250: PUSH
20251: LD_INT 7
20253: PUSH
20254: LD_INT 28
20256: PUSH
20257: LD_INT 45
20259: PUSH
20260: EMPTY
20261: LIST
20262: LIST
20263: LIST
20264: PUSH
20265: LD_VAR 0 12
20269: ARRAY
20270: ST_TO_ADDR
// break ;
20271: GO 20275
// end ; end ; end ;
20273: GO 20104
20275: POP
20276: POP
// end ; if not weapon then
20277: LD_VAR 0 18
20281: NOT
20282: IFFALSE 20342
// begin list := list diff [ us_radar , ar_radar , ru_time_lapser ] ;
20284: LD_ADDR_VAR 0 5
20288: PUSH
20289: LD_VAR 0 5
20293: PUSH
20294: LD_INT 11
20296: PUSH
20297: LD_INT 30
20299: PUSH
20300: LD_INT 49
20302: PUSH
20303: EMPTY
20304: LIST
20305: LIST
20306: LIST
20307: DIFF
20308: ST_TO_ADDR
// if not list then
20309: LD_VAR 0 5
20313: NOT
20314: IFFALSE 20318
// exit ;
20316: GO 20460
// weapon := list [ rand ( 1 , list ) ] ;
20318: LD_ADDR_VAR 0 18
20322: PUSH
20323: LD_VAR 0 5
20327: PUSH
20328: LD_INT 1
20330: PPUSH
20331: LD_VAR 0 5
20335: PPUSH
20336: CALL_OW 12
20340: ARRAY
20341: ST_TO_ADDR
// end ; if weapon then
20342: LD_VAR 0 18
20346: IFFALSE 20460
// begin tmp := CostOfWeapon ( weapon ) ;
20348: LD_ADDR_VAR 0 14
20352: PUSH
20353: LD_VAR 0 18
20357: PPUSH
20358: CALL_OW 451
20362: ST_TO_ADDR
// j := GetBase ( tower ) ;
20363: LD_ADDR_VAR 0 9
20367: PUSH
20368: LD_VAR 0 1
20372: PPUSH
20373: CALL_OW 274
20377: ST_TO_ADDR
// if GetResourceType ( j , mat_cans ) >= tmp [ 1 ] and GetResourceType ( j , mat_oil ) >= tmp [ 2 ] and GetResourceType ( j , mat_siberit ) >= tmp [ 3 ] then
20378: LD_VAR 0 9
20382: PPUSH
20383: LD_INT 1
20385: PPUSH
20386: CALL_OW 275
20390: PUSH
20391: LD_VAR 0 14
20395: PUSH
20396: LD_INT 1
20398: ARRAY
20399: GREATEREQUAL
20400: PUSH
20401: LD_VAR 0 9
20405: PPUSH
20406: LD_INT 2
20408: PPUSH
20409: CALL_OW 275
20413: PUSH
20414: LD_VAR 0 14
20418: PUSH
20419: LD_INT 2
20421: ARRAY
20422: GREATEREQUAL
20423: AND
20424: PUSH
20425: LD_VAR 0 9
20429: PPUSH
20430: LD_INT 3
20432: PPUSH
20433: CALL_OW 275
20437: PUSH
20438: LD_VAR 0 14
20442: PUSH
20443: LD_INT 3
20445: ARRAY
20446: GREATEREQUAL
20447: AND
20448: IFFALSE 20460
// result := weapon ;
20450: LD_ADDR_VAR 0 3
20454: PUSH
20455: LD_VAR 0 18
20459: ST_TO_ADDR
// end ; end ;
20460: LD_VAR 0 3
20464: RET
// export function CompareArray ( array1 , array2 ) ; var i ; begin
20465: LD_INT 0
20467: PPUSH
20468: PPUSH
// result := true ;
20469: LD_ADDR_VAR 0 3
20473: PUSH
20474: LD_INT 1
20476: ST_TO_ADDR
// if array1 = array2 then
20477: LD_VAR 0 1
20481: PUSH
20482: LD_VAR 0 2
20486: EQUAL
20487: IFFALSE 20547
// begin for i = 1 to array1 do
20489: LD_ADDR_VAR 0 4
20493: PUSH
20494: DOUBLE
20495: LD_INT 1
20497: DEC
20498: ST_TO_ADDR
20499: LD_VAR 0 1
20503: PUSH
20504: FOR_TO
20505: IFFALSE 20543
// if array1 [ i ] <> array2 [ i ] then
20507: LD_VAR 0 1
20511: PUSH
20512: LD_VAR 0 4
20516: ARRAY
20517: PUSH
20518: LD_VAR 0 2
20522: PUSH
20523: LD_VAR 0 4
20527: ARRAY
20528: NONEQUAL
20529: IFFALSE 20541
// begin result := false ;
20531: LD_ADDR_VAR 0 3
20535: PUSH
20536: LD_INT 0
20538: ST_TO_ADDR
// break ;
20539: GO 20543
// end ;
20541: GO 20504
20543: POP
20544: POP
// end else
20545: GO 20555
// result := false ;
20547: LD_ADDR_VAR 0 3
20551: PUSH
20552: LD_INT 0
20554: ST_TO_ADDR
// end ;
20555: LD_VAR 0 3
20559: RET
// export function CompareArrayValues ( array1 , array2 ) ; var i ; begin
20560: LD_INT 0
20562: PPUSH
20563: PPUSH
// if not array1 or not array2 then
20564: LD_VAR 0 1
20568: NOT
20569: PUSH
20570: LD_VAR 0 2
20574: NOT
20575: OR
20576: IFFALSE 20580
// exit ;
20578: GO 20644
// result := true ;
20580: LD_ADDR_VAR 0 3
20584: PUSH
20585: LD_INT 1
20587: ST_TO_ADDR
// for i = 1 to array1 do
20588: LD_ADDR_VAR 0 4
20592: PUSH
20593: DOUBLE
20594: LD_INT 1
20596: DEC
20597: ST_TO_ADDR
20598: LD_VAR 0 1
20602: PUSH
20603: FOR_TO
20604: IFFALSE 20642
// if array1 [ i ] <> array2 [ i ] then
20606: LD_VAR 0 1
20610: PUSH
20611: LD_VAR 0 4
20615: ARRAY
20616: PUSH
20617: LD_VAR 0 2
20621: PUSH
20622: LD_VAR 0 4
20626: ARRAY
20627: NONEQUAL
20628: IFFALSE 20640
// begin result := false ;
20630: LD_ADDR_VAR 0 3
20634: PUSH
20635: LD_INT 0
20637: ST_TO_ADDR
// break ;
20638: GO 20642
// end ;
20640: GO 20603
20642: POP
20643: POP
// end ;
20644: LD_VAR 0 3
20648: RET
// export function VehicleCost ( fac , list ) ; var cost , pom ; begin
20649: LD_INT 0
20651: PPUSH
20652: PPUSH
20653: PPUSH
// pom := GetBase ( fac ) ;
20654: LD_ADDR_VAR 0 5
20658: PUSH
20659: LD_VAR 0 1
20663: PPUSH
20664: CALL_OW 274
20668: ST_TO_ADDR
// cost := CostOfVehicle ( list [ 1 ] , list [ 2 ] , list [ 3 ] , list [ 4 ] ) ;
20669: LD_ADDR_VAR 0 4
20673: PUSH
20674: LD_VAR 0 2
20678: PUSH
20679: LD_INT 1
20681: ARRAY
20682: PPUSH
20683: LD_VAR 0 2
20687: PUSH
20688: LD_INT 2
20690: ARRAY
20691: PPUSH
20692: LD_VAR 0 2
20696: PUSH
20697: LD_INT 3
20699: ARRAY
20700: PPUSH
20701: LD_VAR 0 2
20705: PUSH
20706: LD_INT 4
20708: ARRAY
20709: PPUSH
20710: CALL_OW 449
20714: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20715: LD_ADDR_VAR 0 3
20719: PUSH
20720: LD_VAR 0 5
20724: PPUSH
20725: LD_INT 1
20727: PPUSH
20728: CALL_OW 275
20732: PUSH
20733: LD_VAR 0 4
20737: PUSH
20738: LD_INT 1
20740: ARRAY
20741: GREATEREQUAL
20742: PUSH
20743: LD_VAR 0 5
20747: PPUSH
20748: LD_INT 2
20750: PPUSH
20751: CALL_OW 275
20755: PUSH
20756: LD_VAR 0 4
20760: PUSH
20761: LD_INT 2
20763: ARRAY
20764: GREATEREQUAL
20765: AND
20766: PUSH
20767: LD_VAR 0 5
20771: PPUSH
20772: LD_INT 3
20774: PPUSH
20775: CALL_OW 275
20779: PUSH
20780: LD_VAR 0 4
20784: PUSH
20785: LD_INT 3
20787: ARRAY
20788: GREATEREQUAL
20789: AND
20790: ST_TO_ADDR
// end ;
20791: LD_VAR 0 3
20795: RET
// export function UpgradeCost ( building ) ; var pom , cost , btype ; begin
20796: LD_INT 0
20798: PPUSH
20799: PPUSH
20800: PPUSH
20801: PPUSH
// pom := GetBase ( building ) ;
20802: LD_ADDR_VAR 0 3
20806: PUSH
20807: LD_VAR 0 1
20811: PPUSH
20812: CALL_OW 274
20816: ST_TO_ADDR
// if not pom then
20817: LD_VAR 0 3
20821: NOT
20822: IFFALSE 20826
// exit ;
20824: GO 20996
// btype := GetBType ( building ) ;
20826: LD_ADDR_VAR 0 5
20830: PUSH
20831: LD_VAR 0 1
20835: PPUSH
20836: CALL_OW 266
20840: ST_TO_ADDR
// if btype = b_armoury then
20841: LD_VAR 0 5
20845: PUSH
20846: LD_INT 4
20848: EQUAL
20849: IFFALSE 20859
// btype := b_barracks ;
20851: LD_ADDR_VAR 0 5
20855: PUSH
20856: LD_INT 5
20858: ST_TO_ADDR
// if btype = b_depot then
20859: LD_VAR 0 5
20863: PUSH
20864: LD_INT 0
20866: EQUAL
20867: IFFALSE 20877
// btype := b_warehouse ;
20869: LD_ADDR_VAR 0 5
20873: PUSH
20874: LD_INT 1
20876: ST_TO_ADDR
// if btype = b_workshop then
20877: LD_VAR 0 5
20881: PUSH
20882: LD_INT 2
20884: EQUAL
20885: IFFALSE 20895
// btype := b_factory ;
20887: LD_ADDR_VAR 0 5
20891: PUSH
20892: LD_INT 3
20894: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
20895: LD_ADDR_VAR 0 4
20899: PUSH
20900: LD_VAR 0 5
20904: PPUSH
20905: LD_VAR 0 1
20909: PPUSH
20910: CALL_OW 248
20914: PPUSH
20915: CALL_OW 450
20919: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
20920: LD_ADDR_VAR 0 2
20924: PUSH
20925: LD_VAR 0 3
20929: PPUSH
20930: LD_INT 1
20932: PPUSH
20933: CALL_OW 275
20937: PUSH
20938: LD_VAR 0 4
20942: PUSH
20943: LD_INT 1
20945: ARRAY
20946: GREATEREQUAL
20947: PUSH
20948: LD_VAR 0 3
20952: PPUSH
20953: LD_INT 2
20955: PPUSH
20956: CALL_OW 275
20960: PUSH
20961: LD_VAR 0 4
20965: PUSH
20966: LD_INT 2
20968: ARRAY
20969: GREATEREQUAL
20970: AND
20971: PUSH
20972: LD_VAR 0 3
20976: PPUSH
20977: LD_INT 3
20979: PPUSH
20980: CALL_OW 275
20984: PUSH
20985: LD_VAR 0 4
20989: PUSH
20990: LD_INT 3
20992: ARRAY
20993: GREATEREQUAL
20994: AND
20995: ST_TO_ADDR
// end ;
20996: LD_VAR 0 2
21000: RET
// export function UpgradeLabCost ( building , btype ) ; var pom , cost ; begin
21001: LD_INT 0
21003: PPUSH
21004: PPUSH
21005: PPUSH
// pom := GetBase ( building ) ;
21006: LD_ADDR_VAR 0 4
21010: PUSH
21011: LD_VAR 0 1
21015: PPUSH
21016: CALL_OW 274
21020: ST_TO_ADDR
// if not pom then
21021: LD_VAR 0 4
21025: NOT
21026: IFFALSE 21030
// exit ;
21028: GO 21131
// cost := CostOfBuilding ( btype , GetNation ( building ) ) ;
21030: LD_ADDR_VAR 0 5
21034: PUSH
21035: LD_VAR 0 2
21039: PPUSH
21040: LD_VAR 0 1
21044: PPUSH
21045: CALL_OW 248
21049: PPUSH
21050: CALL_OW 450
21054: ST_TO_ADDR
// result := GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ;
21055: LD_ADDR_VAR 0 3
21059: PUSH
21060: LD_VAR 0 4
21064: PPUSH
21065: LD_INT 1
21067: PPUSH
21068: CALL_OW 275
21072: PUSH
21073: LD_VAR 0 5
21077: PUSH
21078: LD_INT 1
21080: ARRAY
21081: GREATEREQUAL
21082: PUSH
21083: LD_VAR 0 4
21087: PPUSH
21088: LD_INT 2
21090: PPUSH
21091: CALL_OW 275
21095: PUSH
21096: LD_VAR 0 5
21100: PUSH
21101: LD_INT 2
21103: ARRAY
21104: GREATEREQUAL
21105: AND
21106: PUSH
21107: LD_VAR 0 4
21111: PPUSH
21112: LD_INT 3
21114: PPUSH
21115: CALL_OW 275
21119: PUSH
21120: LD_VAR 0 5
21124: PUSH
21125: LD_INT 3
21127: ARRAY
21128: GREATEREQUAL
21129: AND
21130: ST_TO_ADDR
// end ;
21131: LD_VAR 0 3
21135: RET
// export function TryClearPlaceForBuilding ( btype , x , y , d , buildings , cleaners , parking ) ; var i , j , _x , _y , tmp , hexes , r , xy , dep , driver ; begin
21136: LD_INT 0
21138: PPUSH
21139: PPUSH
21140: PPUSH
21141: PPUSH
21142: PPUSH
21143: PPUSH
21144: PPUSH
21145: PPUSH
21146: PPUSH
21147: PPUSH
21148: PPUSH
// result := false ;
21149: LD_ADDR_VAR 0 8
21153: PUSH
21154: LD_INT 0
21156: ST_TO_ADDR
// if not buildings or not btype or not x or not y then
21157: LD_VAR 0 5
21161: NOT
21162: PUSH
21163: LD_VAR 0 1
21167: NOT
21168: OR
21169: PUSH
21170: LD_VAR 0 2
21174: NOT
21175: OR
21176: PUSH
21177: LD_VAR 0 3
21181: NOT
21182: OR
21183: IFFALSE 21187
// exit ;
21185: GO 22001
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( buildings [ 1 ] ) , 0 ) ;
21187: LD_ADDR_VAR 0 14
21191: PUSH
21192: LD_VAR 0 1
21196: PPUSH
21197: LD_VAR 0 2
21201: PPUSH
21202: LD_VAR 0 3
21206: PPUSH
21207: LD_VAR 0 4
21211: PPUSH
21212: LD_VAR 0 5
21216: PUSH
21217: LD_INT 1
21219: ARRAY
21220: PPUSH
21221: CALL_OW 248
21225: PPUSH
21226: LD_INT 0
21228: PPUSH
21229: CALL 23238 0 6
21233: ST_TO_ADDR
// if not hexes then
21234: LD_VAR 0 14
21238: NOT
21239: IFFALSE 21243
// exit ;
21241: GO 22001
// dep := UnitFilter ( buildings , [ [ f_side , GetSide ( tmp ) ] , [ f_or , [ f_btype , b_depot ] , [ f_btype , b_warehouse ] ] ] ) ;
21243: LD_ADDR_VAR 0 17
21247: PUSH
21248: LD_VAR 0 5
21252: PPUSH
21253: LD_INT 22
21255: PUSH
21256: LD_VAR 0 13
21260: PPUSH
21261: CALL_OW 255
21265: PUSH
21266: EMPTY
21267: LIST
21268: LIST
21269: PUSH
21270: LD_INT 2
21272: PUSH
21273: LD_INT 30
21275: PUSH
21276: LD_INT 0
21278: PUSH
21279: EMPTY
21280: LIST
21281: LIST
21282: PUSH
21283: LD_INT 30
21285: PUSH
21286: LD_INT 1
21288: PUSH
21289: EMPTY
21290: LIST
21291: LIST
21292: PUSH
21293: EMPTY
21294: LIST
21295: LIST
21296: LIST
21297: PUSH
21298: EMPTY
21299: LIST
21300: LIST
21301: PPUSH
21302: CALL_OW 72
21306: ST_TO_ADDR
// for i = 1 to hexes do
21307: LD_ADDR_VAR 0 9
21311: PUSH
21312: DOUBLE
21313: LD_INT 1
21315: DEC
21316: ST_TO_ADDR
21317: LD_VAR 0 14
21321: PUSH
21322: FOR_TO
21323: IFFALSE 21999
// begin tmp := HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
21325: LD_ADDR_VAR 0 13
21329: PUSH
21330: LD_VAR 0 14
21334: PUSH
21335: LD_VAR 0 9
21339: ARRAY
21340: PUSH
21341: LD_INT 1
21343: ARRAY
21344: PPUSH
21345: LD_VAR 0 14
21349: PUSH
21350: LD_VAR 0 9
21354: ARRAY
21355: PUSH
21356: LD_INT 2
21358: ARRAY
21359: PPUSH
21360: CALL_OW 428
21364: ST_TO_ADDR
// if IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or GetType ( tmp ) = unit_building then
21365: LD_VAR 0 14
21369: PUSH
21370: LD_VAR 0 9
21374: ARRAY
21375: PUSH
21376: LD_INT 1
21378: ARRAY
21379: PPUSH
21380: LD_VAR 0 14
21384: PUSH
21385: LD_VAR 0 9
21389: ARRAY
21390: PUSH
21391: LD_INT 2
21393: ARRAY
21394: PPUSH
21395: CALL_OW 351
21399: PUSH
21400: LD_VAR 0 14
21404: PUSH
21405: LD_VAR 0 9
21409: ARRAY
21410: PUSH
21411: LD_INT 1
21413: ARRAY
21414: PPUSH
21415: LD_VAR 0 14
21419: PUSH
21420: LD_VAR 0 9
21424: ARRAY
21425: PUSH
21426: LD_INT 2
21428: ARRAY
21429: PPUSH
21430: CALL_OW 488
21434: NOT
21435: OR
21436: PUSH
21437: LD_VAR 0 13
21441: PPUSH
21442: CALL_OW 247
21446: PUSH
21447: LD_INT 3
21449: EQUAL
21450: OR
21451: IFFALSE 21457
// exit ;
21453: POP
21454: POP
21455: GO 22001
// if not tmp then
21457: LD_VAR 0 13
21461: NOT
21462: IFFALSE 21466
// continue ;
21464: GO 21322
// result := true ;
21466: LD_ADDR_VAR 0 8
21470: PUSH
21471: LD_INT 1
21473: ST_TO_ADDR
// if cleaners and GetType ( tmp ) = unit_vehicle and GetControl ( tmp ) = control_manual then
21474: LD_VAR 0 6
21478: PUSH
21479: LD_VAR 0 13
21483: PPUSH
21484: CALL_OW 247
21488: PUSH
21489: LD_INT 2
21491: EQUAL
21492: AND
21493: PUSH
21494: LD_VAR 0 13
21498: PPUSH
21499: CALL_OW 263
21503: PUSH
21504: LD_INT 1
21506: EQUAL
21507: AND
21508: IFFALSE 21672
// begin if IsDrivenBy ( tmp ) then
21510: LD_VAR 0 13
21514: PPUSH
21515: CALL_OW 311
21519: IFFALSE 21523
// continue ;
21521: GO 21322
// if UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) then
21523: LD_VAR 0 6
21527: PPUSH
21528: LD_INT 3
21530: PUSH
21531: LD_INT 60
21533: PUSH
21534: EMPTY
21535: LIST
21536: PUSH
21537: EMPTY
21538: LIST
21539: LIST
21540: PUSH
21541: LD_INT 3
21543: PUSH
21544: LD_INT 55
21546: PUSH
21547: EMPTY
21548: LIST
21549: PUSH
21550: EMPTY
21551: LIST
21552: LIST
21553: PUSH
21554: EMPTY
21555: LIST
21556: LIST
21557: PPUSH
21558: CALL_OW 72
21562: IFFALSE 21670
// begin driver := UnitFilter ( cleaners , [ [ f_not , [ f_hastask ] ] , [ f_not , [ f_driving ] ] ] ) [ 1 ] ;
21564: LD_ADDR_VAR 0 18
21568: PUSH
21569: LD_VAR 0 6
21573: PPUSH
21574: LD_INT 3
21576: PUSH
21577: LD_INT 60
21579: PUSH
21580: EMPTY
21581: LIST
21582: PUSH
21583: EMPTY
21584: LIST
21585: LIST
21586: PUSH
21587: LD_INT 3
21589: PUSH
21590: LD_INT 55
21592: PUSH
21593: EMPTY
21594: LIST
21595: PUSH
21596: EMPTY
21597: LIST
21598: LIST
21599: PUSH
21600: EMPTY
21601: LIST
21602: LIST
21603: PPUSH
21604: CALL_OW 72
21608: PUSH
21609: LD_INT 1
21611: ARRAY
21612: ST_TO_ADDR
// if IsInUnit ( driver ) then
21613: LD_VAR 0 18
21617: PPUSH
21618: CALL_OW 310
21622: IFFALSE 21633
// ComExit ( driver ) ;
21624: LD_VAR 0 18
21628: PPUSH
21629: CALL 46366 0 1
// AddComEnterUnit ( driver , tmp ) ;
21633: LD_VAR 0 18
21637: PPUSH
21638: LD_VAR 0 13
21642: PPUSH
21643: CALL_OW 180
// AddComMoveToArea ( driver , parking ) ;
21647: LD_VAR 0 18
21651: PPUSH
21652: LD_VAR 0 7
21656: PPUSH
21657: CALL_OW 173
// AddComExitVehicle ( driver ) ;
21661: LD_VAR 0 18
21665: PPUSH
21666: CALL_OW 181
// end ; continue ;
21670: GO 21322
// end ; if not cleaners or not tmp in cleaners then
21672: LD_VAR 0 6
21676: NOT
21677: PUSH
21678: LD_VAR 0 13
21682: PUSH
21683: LD_VAR 0 6
21687: IN
21688: NOT
21689: OR
21690: IFFALSE 21997
// begin if dep then
21692: LD_VAR 0 17
21696: IFFALSE 21832
// begin xy := [ ShiftX ( GetX ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) , ShiftY ( GetY ( dep [ 1 ] ) , GetDir ( dep [ 1 ] ) , 5 ) ] ;
21698: LD_ADDR_VAR 0 16
21702: PUSH
21703: LD_VAR 0 17
21707: PUSH
21708: LD_INT 1
21710: ARRAY
21711: PPUSH
21712: CALL_OW 250
21716: PPUSH
21717: LD_VAR 0 17
21721: PUSH
21722: LD_INT 1
21724: ARRAY
21725: PPUSH
21726: CALL_OW 254
21730: PPUSH
21731: LD_INT 5
21733: PPUSH
21734: CALL_OW 272
21738: PUSH
21739: LD_VAR 0 17
21743: PUSH
21744: LD_INT 1
21746: ARRAY
21747: PPUSH
21748: CALL_OW 251
21752: PPUSH
21753: LD_VAR 0 17
21757: PUSH
21758: LD_INT 1
21760: ARRAY
21761: PPUSH
21762: CALL_OW 254
21766: PPUSH
21767: LD_INT 5
21769: PPUSH
21770: CALL_OW 273
21774: PUSH
21775: EMPTY
21776: LIST
21777: LIST
21778: ST_TO_ADDR
// if ValidHex ( xy [ 1 ] , xy [ 2 ] ) then
21779: LD_VAR 0 16
21783: PUSH
21784: LD_INT 1
21786: ARRAY
21787: PPUSH
21788: LD_VAR 0 16
21792: PUSH
21793: LD_INT 2
21795: ARRAY
21796: PPUSH
21797: CALL_OW 488
21801: IFFALSE 21832
// begin ComMoveXY ( tmp , xy [ 1 ] , xy [ 2 ] ) ;
21803: LD_VAR 0 13
21807: PPUSH
21808: LD_VAR 0 16
21812: PUSH
21813: LD_INT 1
21815: ARRAY
21816: PPUSH
21817: LD_VAR 0 16
21821: PUSH
21822: LD_INT 2
21824: ARRAY
21825: PPUSH
21826: CALL_OW 111
// continue ;
21830: GO 21322
// end ; end ; r := GetDir ( tmp ) ;
21832: LD_ADDR_VAR 0 15
21836: PUSH
21837: LD_VAR 0 13
21841: PPUSH
21842: CALL_OW 254
21846: ST_TO_ADDR
// if r = 5 then
21847: LD_VAR 0 15
21851: PUSH
21852: LD_INT 5
21854: EQUAL
21855: IFFALSE 21865
// r := 0 ;
21857: LD_ADDR_VAR 0 15
21861: PUSH
21862: LD_INT 0
21864: ST_TO_ADDR
// for j = r to 5 do
21865: LD_ADDR_VAR 0 10
21869: PUSH
21870: DOUBLE
21871: LD_VAR 0 15
21875: DEC
21876: ST_TO_ADDR
21877: LD_INT 5
21879: PUSH
21880: FOR_TO
21881: IFFALSE 21995
// begin _x := ShiftX ( GetX ( tmp ) , j , 2 ) ;
21883: LD_ADDR_VAR 0 11
21887: PUSH
21888: LD_VAR 0 13
21892: PPUSH
21893: CALL_OW 250
21897: PPUSH
21898: LD_VAR 0 10
21902: PPUSH
21903: LD_INT 2
21905: PPUSH
21906: CALL_OW 272
21910: ST_TO_ADDR
// _y := ShiftY ( GetY ( tmp ) , j , 2 ) ;
21911: LD_ADDR_VAR 0 12
21915: PUSH
21916: LD_VAR 0 13
21920: PPUSH
21921: CALL_OW 251
21925: PPUSH
21926: LD_VAR 0 10
21930: PPUSH
21931: LD_INT 2
21933: PPUSH
21934: CALL_OW 273
21938: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not HexInfo ( _x , _y ) then
21939: LD_VAR 0 11
21943: PPUSH
21944: LD_VAR 0 12
21948: PPUSH
21949: CALL_OW 488
21953: PUSH
21954: LD_VAR 0 11
21958: PPUSH
21959: LD_VAR 0 12
21963: PPUSH
21964: CALL_OW 428
21968: NOT
21969: AND
21970: IFFALSE 21993
// begin ComMoveXY ( tmp , _x , _y ) ;
21972: LD_VAR 0 13
21976: PPUSH
21977: LD_VAR 0 11
21981: PPUSH
21982: LD_VAR 0 12
21986: PPUSH
21987: CALL_OW 111
// break ;
21991: GO 21995
// end ; end ;
21993: GO 21880
21995: POP
21996: POP
// end ; end ;
21997: GO 21322
21999: POP
22000: POP
// end ;
22001: LD_VAR 0 8
22005: RET
// export function BuildingTechInvented ( side , btype ) ; begin
22006: LD_INT 0
22008: PPUSH
// result := true ;
22009: LD_ADDR_VAR 0 3
22013: PUSH
22014: LD_INT 1
22016: ST_TO_ADDR
// case btype of b_ext_computer , b_turret :
22017: LD_VAR 0 2
22021: PUSH
22022: LD_INT 24
22024: DOUBLE
22025: EQUAL
22026: IFTRUE 22036
22028: LD_INT 33
22030: DOUBLE
22031: EQUAL
22032: IFTRUE 22036
22034: GO 22061
22036: POP
// result := ( GetTech ( tech_ai , side ) = state_researched ) ; b_ext_radar :
22037: LD_ADDR_VAR 0 3
22041: PUSH
22042: LD_INT 32
22044: PPUSH
22045: LD_VAR 0 1
22049: PPUSH
22050: CALL_OW 321
22054: PUSH
22055: LD_INT 2
22057: EQUAL
22058: ST_TO_ADDR
22059: GO 22381
22061: LD_INT 20
22063: DOUBLE
22064: EQUAL
22065: IFTRUE 22069
22067: GO 22094
22069: POP
// result := ( GetTech ( tech_radar , side ) = state_researched ) ; b_ext_radio , b_control_tower :
22070: LD_ADDR_VAR 0 3
22074: PUSH
22075: LD_INT 6
22077: PPUSH
22078: LD_VAR 0 1
22082: PPUSH
22083: CALL_OW 321
22087: PUSH
22088: LD_INT 2
22090: EQUAL
22091: ST_TO_ADDR
22092: GO 22381
22094: LD_INT 22
22096: DOUBLE
22097: EQUAL
22098: IFTRUE 22108
22100: LD_INT 36
22102: DOUBLE
22103: EQUAL
22104: IFTRUE 22108
22106: GO 22133
22108: POP
// result := ( GetTech ( tech_remcont , side ) = state_researched ) ; b_siberite_mine :
22109: LD_ADDR_VAR 0 3
22113: PUSH
22114: LD_INT 15
22116: PPUSH
22117: LD_VAR 0 1
22121: PPUSH
22122: CALL_OW 321
22126: PUSH
22127: LD_INT 2
22129: EQUAL
22130: ST_TO_ADDR
22131: GO 22381
22133: LD_INT 30
22135: DOUBLE
22136: EQUAL
22137: IFTRUE 22141
22139: GO 22166
22141: POP
// result := ( GetTech ( tech_sibdet , side ) = state_researched ) ; b_siberite_power , b_ext_siberium :
22142: LD_ADDR_VAR 0 3
22146: PUSH
22147: LD_INT 20
22149: PPUSH
22150: LD_VAR 0 1
22154: PPUSH
22155: CALL_OW 321
22159: PUSH
22160: LD_INT 2
22162: EQUAL
22163: ST_TO_ADDR
22164: GO 22381
22166: LD_INT 28
22168: DOUBLE
22169: EQUAL
22170: IFTRUE 22180
22172: LD_INT 21
22174: DOUBLE
22175: EQUAL
22176: IFTRUE 22180
22178: GO 22205
22180: POP
// result := ( GetTech ( tech_sibpow , side ) = state_researched ) ; b_ext_track :
22181: LD_ADDR_VAR 0 3
22185: PUSH
22186: LD_INT 21
22188: PPUSH
22189: LD_VAR 0 1
22193: PPUSH
22194: CALL_OW 321
22198: PUSH
22199: LD_INT 2
22201: EQUAL
22202: ST_TO_ADDR
22203: GO 22381
22205: LD_INT 16
22207: DOUBLE
22208: EQUAL
22209: IFTRUE 22213
22211: GO 22240
22213: POP
// result := ( GetTech ( tech_track , side ) = state_researched ) ; b_ext_noncombat , b_ext_stitch :
22214: LD_ADDR_VAR 0 3
22218: PUSH
22219: LD_EXP 76
22223: PPUSH
22224: LD_VAR 0 1
22228: PPUSH
22229: CALL_OW 321
22233: PUSH
22234: LD_INT 2
22236: EQUAL
22237: ST_TO_ADDR
22238: GO 22381
22240: LD_INT 19
22242: DOUBLE
22243: EQUAL
22244: IFTRUE 22254
22246: LD_INT 23
22248: DOUBLE
22249: EQUAL
22250: IFTRUE 22254
22252: GO 22281
22254: POP
// result := ( GetTech ( tech_cargo , side ) = state_researched ) ; b_ext_gun :
22255: LD_ADDR_VAR 0 3
22259: PUSH
22260: LD_EXP 75
22264: PPUSH
22265: LD_VAR 0 1
22269: PPUSH
22270: CALL_OW 321
22274: PUSH
22275: LD_INT 2
22277: EQUAL
22278: ST_TO_ADDR
22279: GO 22381
22281: LD_INT 17
22283: DOUBLE
22284: EQUAL
22285: IFTRUE 22289
22287: GO 22314
22289: POP
// result := ( GetTech ( tech_gun , side ) = state_researched ) ; b_ext_rocket :
22290: LD_ADDR_VAR 0 3
22294: PUSH
22295: LD_INT 39
22297: PPUSH
22298: LD_VAR 0 1
22302: PPUSH
22303: CALL_OW 321
22307: PUSH
22308: LD_INT 2
22310: EQUAL
22311: ST_TO_ADDR
22312: GO 22381
22314: LD_INT 18
22316: DOUBLE
22317: EQUAL
22318: IFTRUE 22322
22320: GO 22347
22322: POP
// result := ( GetTech ( tech_rocket , side ) = state_researched ) ; b_solar_power :
22323: LD_ADDR_VAR 0 3
22327: PUSH
22328: LD_INT 40
22330: PPUSH
22331: LD_VAR 0 1
22335: PPUSH
22336: CALL_OW 321
22340: PUSH
22341: LD_INT 2
22343: EQUAL
22344: ST_TO_ADDR
22345: GO 22381
22347: LD_INT 27
22349: DOUBLE
22350: EQUAL
22351: IFTRUE 22355
22353: GO 22380
22355: POP
// result := ( GetTech ( tech_solpow , side ) = state_researched ) ; end ;
22356: LD_ADDR_VAR 0 3
22360: PUSH
22361: LD_INT 35
22363: PPUSH
22364: LD_VAR 0 1
22368: PPUSH
22369: CALL_OW 321
22373: PUSH
22374: LD_INT 2
22376: EQUAL
22377: ST_TO_ADDR
22378: GO 22381
22380: POP
// end ;
22381: LD_VAR 0 3
22385: RET
// export function CanBeBuilt ( depot , btype , x , y , d ) ; var i , j , side , pom , cost , hexes , height , dist , hex , tech ; begin
22386: LD_INT 0
22388: PPUSH
22389: PPUSH
22390: PPUSH
22391: PPUSH
22392: PPUSH
22393: PPUSH
22394: PPUSH
22395: PPUSH
22396: PPUSH
22397: PPUSH
22398: PPUSH
// result := false ;
22399: LD_ADDR_VAR 0 6
22403: PUSH
22404: LD_INT 0
22406: ST_TO_ADDR
// if not depot or not GetBType ( depot ) in [ b_depot , b_warehouse ] or not btype or not d in [ 0 , 1 , 2 , 3 , 4 , 5 ] or not ValidHex ( x , y ) then
22407: LD_VAR 0 1
22411: NOT
22412: PUSH
22413: LD_VAR 0 1
22417: PPUSH
22418: CALL_OW 266
22422: PUSH
22423: LD_INT 0
22425: PUSH
22426: LD_INT 1
22428: PUSH
22429: EMPTY
22430: LIST
22431: LIST
22432: IN
22433: NOT
22434: OR
22435: PUSH
22436: LD_VAR 0 2
22440: NOT
22441: OR
22442: PUSH
22443: LD_VAR 0 5
22447: PUSH
22448: LD_INT 0
22450: PUSH
22451: LD_INT 1
22453: PUSH
22454: LD_INT 2
22456: PUSH
22457: LD_INT 3
22459: PUSH
22460: LD_INT 4
22462: PUSH
22463: LD_INT 5
22465: PUSH
22466: EMPTY
22467: LIST
22468: LIST
22469: LIST
22470: LIST
22471: LIST
22472: LIST
22473: IN
22474: NOT
22475: OR
22476: PUSH
22477: LD_VAR 0 3
22481: PPUSH
22482: LD_VAR 0 4
22486: PPUSH
22487: CALL_OW 488
22491: NOT
22492: OR
22493: IFFALSE 22497
// exit ;
22495: GO 23233
// side := GetSide ( depot ) ;
22497: LD_ADDR_VAR 0 9
22501: PUSH
22502: LD_VAR 0 1
22506: PPUSH
22507: CALL_OW 255
22511: ST_TO_ADDR
// if not BuildingTechInvented ( side , btype ) then
22512: LD_VAR 0 9
22516: PPUSH
22517: LD_VAR 0 2
22521: PPUSH
22522: CALL 22006 0 2
22526: NOT
22527: IFFALSE 22531
// exit ;
22529: GO 23233
// pom := GetBase ( depot ) ;
22531: LD_ADDR_VAR 0 10
22535: PUSH
22536: LD_VAR 0 1
22540: PPUSH
22541: CALL_OW 274
22545: ST_TO_ADDR
// cost := CostOfBuilding ( btype , GetNation ( depot ) ) ;
22546: LD_ADDR_VAR 0 11
22550: PUSH
22551: LD_VAR 0 2
22555: PPUSH
22556: LD_VAR 0 1
22560: PPUSH
22561: CALL_OW 248
22565: PPUSH
22566: CALL_OW 450
22570: ST_TO_ADDR
// if not ( GetResourceType ( pom , mat_cans ) >= cost [ 1 ] and GetResourceType ( pom , mat_oil ) >= cost [ 2 ] and GetResourceType ( pom , mat_siberit ) >= cost [ 3 ] ) then
22571: LD_VAR 0 10
22575: PPUSH
22576: LD_INT 1
22578: PPUSH
22579: CALL_OW 275
22583: PUSH
22584: LD_VAR 0 11
22588: PUSH
22589: LD_INT 1
22591: ARRAY
22592: GREATEREQUAL
22593: PUSH
22594: LD_VAR 0 10
22598: PPUSH
22599: LD_INT 2
22601: PPUSH
22602: CALL_OW 275
22606: PUSH
22607: LD_VAR 0 11
22611: PUSH
22612: LD_INT 2
22614: ARRAY
22615: GREATEREQUAL
22616: AND
22617: PUSH
22618: LD_VAR 0 10
22622: PPUSH
22623: LD_INT 3
22625: PPUSH
22626: CALL_OW 275
22630: PUSH
22631: LD_VAR 0 11
22635: PUSH
22636: LD_INT 3
22638: ARRAY
22639: GREATEREQUAL
22640: AND
22641: NOT
22642: IFFALSE 22646
// exit ;
22644: GO 23233
// if GetBType ( depot ) = b_depot then
22646: LD_VAR 0 1
22650: PPUSH
22651: CALL_OW 266
22655: PUSH
22656: LD_INT 0
22658: EQUAL
22659: IFFALSE 22671
// dist := 28 else
22661: LD_ADDR_VAR 0 14
22665: PUSH
22666: LD_INT 28
22668: ST_TO_ADDR
22669: GO 22679
// dist := 36 ;
22671: LD_ADDR_VAR 0 14
22675: PUSH
22676: LD_INT 36
22678: ST_TO_ADDR
// if GetDistUnitXY ( depot , x , y ) > dist then
22679: LD_VAR 0 1
22683: PPUSH
22684: LD_VAR 0 3
22688: PPUSH
22689: LD_VAR 0 4
22693: PPUSH
22694: CALL_OW 297
22698: PUSH
22699: LD_VAR 0 14
22703: GREATER
22704: IFFALSE 22708
// exit ;
22706: GO 23233
// hexes := GetBuildingHexes ( btype , x , y , d , GetNation ( depot ) , 0 ) ;
22708: LD_ADDR_VAR 0 12
22712: PUSH
22713: LD_VAR 0 2
22717: PPUSH
22718: LD_VAR 0 3
22722: PPUSH
22723: LD_VAR 0 4
22727: PPUSH
22728: LD_VAR 0 5
22732: PPUSH
22733: LD_VAR 0 1
22737: PPUSH
22738: CALL_OW 248
22742: PPUSH
22743: LD_INT 0
22745: PPUSH
22746: CALL 23238 0 6
22750: ST_TO_ADDR
// if not hexes then
22751: LD_VAR 0 12
22755: NOT
22756: IFFALSE 22760
// exit ;
22758: GO 23233
// hex := GetHexInfo ( x , y ) ;
22760: LD_ADDR_VAR 0 15
22764: PUSH
22765: LD_VAR 0 3
22769: PPUSH
22770: LD_VAR 0 4
22774: PPUSH
22775: CALL_OW 546
22779: ST_TO_ADDR
// if hex [ 1 ] then
22780: LD_VAR 0 15
22784: PUSH
22785: LD_INT 1
22787: ARRAY
22788: IFFALSE 22792
// exit ;
22790: GO 23233
// height := hex [ 2 ] ;
22792: LD_ADDR_VAR 0 13
22796: PUSH
22797: LD_VAR 0 15
22801: PUSH
22802: LD_INT 2
22804: ARRAY
22805: ST_TO_ADDR
// for i = 1 to hexes do
22806: LD_ADDR_VAR 0 7
22810: PUSH
22811: DOUBLE
22812: LD_INT 1
22814: DEC
22815: ST_TO_ADDR
22816: LD_VAR 0 12
22820: PUSH
22821: FOR_TO
22822: IFFALSE 23152
// begin if not ValidHex ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) or HexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) > 0 or IsEnvironment ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) then
22824: LD_VAR 0 12
22828: PUSH
22829: LD_VAR 0 7
22833: ARRAY
22834: PUSH
22835: LD_INT 1
22837: ARRAY
22838: PPUSH
22839: LD_VAR 0 12
22843: PUSH
22844: LD_VAR 0 7
22848: ARRAY
22849: PUSH
22850: LD_INT 2
22852: ARRAY
22853: PPUSH
22854: CALL_OW 488
22858: NOT
22859: PUSH
22860: LD_VAR 0 12
22864: PUSH
22865: LD_VAR 0 7
22869: ARRAY
22870: PUSH
22871: LD_INT 1
22873: ARRAY
22874: PPUSH
22875: LD_VAR 0 12
22879: PUSH
22880: LD_VAR 0 7
22884: ARRAY
22885: PUSH
22886: LD_INT 2
22888: ARRAY
22889: PPUSH
22890: CALL_OW 428
22894: PUSH
22895: LD_INT 0
22897: GREATER
22898: OR
22899: PUSH
22900: LD_VAR 0 12
22904: PUSH
22905: LD_VAR 0 7
22909: ARRAY
22910: PUSH
22911: LD_INT 1
22913: ARRAY
22914: PPUSH
22915: LD_VAR 0 12
22919: PUSH
22920: LD_VAR 0 7
22924: ARRAY
22925: PUSH
22926: LD_INT 2
22928: ARRAY
22929: PPUSH
22930: CALL_OW 351
22934: OR
22935: IFFALSE 22941
// exit ;
22937: POP
22938: POP
22939: GO 23233
// j := GetHexInfo ( hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
22941: LD_ADDR_VAR 0 8
22945: PUSH
22946: LD_VAR 0 12
22950: PUSH
22951: LD_VAR 0 7
22955: ARRAY
22956: PUSH
22957: LD_INT 1
22959: ARRAY
22960: PPUSH
22961: LD_VAR 0 12
22965: PUSH
22966: LD_VAR 0 7
22970: ARRAY
22971: PUSH
22972: LD_INT 2
22974: ARRAY
22975: PPUSH
22976: CALL_OW 546
22980: ST_TO_ADDR
// if j [ 1 ] or j [ 2 ] > height + 2 or j [ 2 ] < height - 2 or not j [ 3 ] in [ 0 , 8 , 9 , 10 , 11 , 12 , 13 , 16 , 17 , 18 , 19 , 20 , 21 ] or not j [ 5 ] or not j [ 6 ] in [ 1 , 2 , 7 , 9 , 10 , 11 ] then
22981: LD_VAR 0 8
22985: PUSH
22986: LD_INT 1
22988: ARRAY
22989: PUSH
22990: LD_VAR 0 8
22994: PUSH
22995: LD_INT 2
22997: ARRAY
22998: PUSH
22999: LD_VAR 0 13
23003: PUSH
23004: LD_INT 2
23006: PLUS
23007: GREATER
23008: OR
23009: PUSH
23010: LD_VAR 0 8
23014: PUSH
23015: LD_INT 2
23017: ARRAY
23018: PUSH
23019: LD_VAR 0 13
23023: PUSH
23024: LD_INT 2
23026: MINUS
23027: LESS
23028: OR
23029: PUSH
23030: LD_VAR 0 8
23034: PUSH
23035: LD_INT 3
23037: ARRAY
23038: PUSH
23039: LD_INT 0
23041: PUSH
23042: LD_INT 8
23044: PUSH
23045: LD_INT 9
23047: PUSH
23048: LD_INT 10
23050: PUSH
23051: LD_INT 11
23053: PUSH
23054: LD_INT 12
23056: PUSH
23057: LD_INT 13
23059: PUSH
23060: LD_INT 16
23062: PUSH
23063: LD_INT 17
23065: PUSH
23066: LD_INT 18
23068: PUSH
23069: LD_INT 19
23071: PUSH
23072: LD_INT 20
23074: PUSH
23075: LD_INT 21
23077: PUSH
23078: EMPTY
23079: LIST
23080: LIST
23081: LIST
23082: LIST
23083: LIST
23084: LIST
23085: LIST
23086: LIST
23087: LIST
23088: LIST
23089: LIST
23090: LIST
23091: LIST
23092: IN
23093: NOT
23094: OR
23095: PUSH
23096: LD_VAR 0 8
23100: PUSH
23101: LD_INT 5
23103: ARRAY
23104: NOT
23105: OR
23106: PUSH
23107: LD_VAR 0 8
23111: PUSH
23112: LD_INT 6
23114: ARRAY
23115: PUSH
23116: LD_INT 1
23118: PUSH
23119: LD_INT 2
23121: PUSH
23122: LD_INT 7
23124: PUSH
23125: LD_INT 9
23127: PUSH
23128: LD_INT 10
23130: PUSH
23131: LD_INT 11
23133: PUSH
23134: EMPTY
23135: LIST
23136: LIST
23137: LIST
23138: LIST
23139: LIST
23140: LIST
23141: IN
23142: NOT
23143: OR
23144: IFFALSE 23150
// exit ;
23146: POP
23147: POP
23148: GO 23233
// end ;
23150: GO 22821
23152: POP
23153: POP
// if DangerAtRangeXY ( side , x , y , 20 ) [ 4 ] then
23154: LD_VAR 0 9
23158: PPUSH
23159: LD_VAR 0 3
23163: PPUSH
23164: LD_VAR 0 4
23168: PPUSH
23169: LD_INT 20
23171: PPUSH
23172: CALL 15179 0 4
23176: PUSH
23177: LD_INT 4
23179: ARRAY
23180: IFFALSE 23184
// exit ;
23182: GO 23233
// if btype in [ b_oil_mine , b_siberite_mine ] and not GetResourceVisibility ( x , y , side ) then
23184: LD_VAR 0 2
23188: PUSH
23189: LD_INT 29
23191: PUSH
23192: LD_INT 30
23194: PUSH
23195: EMPTY
23196: LIST
23197: LIST
23198: IN
23199: PUSH
23200: LD_VAR 0 3
23204: PPUSH
23205: LD_VAR 0 4
23209: PPUSH
23210: LD_VAR 0 9
23214: PPUSH
23215: CALL_OW 440
23219: NOT
23220: AND
23221: IFFALSE 23225
// exit ;
23223: GO 23233
// result := true ;
23225: LD_ADDR_VAR 0 6
23229: PUSH
23230: LD_INT 1
23232: ST_TO_ADDR
// end ;
23233: LD_VAR 0 6
23237: RET
// export function GetBuildingHexes ( btype , x , y , dir , nation , mode ) ; var i , temp_list , temp_list2 ; var fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 , fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 , fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ; var fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 , fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ; var fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 , fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ; var fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 , fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ; begin
23238: LD_INT 0
23240: PPUSH
23241: PPUSH
23242: PPUSH
23243: PPUSH
23244: PPUSH
23245: PPUSH
23246: PPUSH
23247: PPUSH
23248: PPUSH
23249: PPUSH
23250: PPUSH
23251: PPUSH
23252: PPUSH
23253: PPUSH
23254: PPUSH
23255: PPUSH
23256: PPUSH
23257: PPUSH
23258: PPUSH
23259: PPUSH
23260: PPUSH
23261: PPUSH
23262: PPUSH
23263: PPUSH
23264: PPUSH
23265: PPUSH
23266: PPUSH
23267: PPUSH
23268: PPUSH
23269: PPUSH
23270: PPUSH
23271: PPUSH
23272: PPUSH
23273: PPUSH
23274: PPUSH
23275: PPUSH
23276: PPUSH
23277: PPUSH
23278: PPUSH
23279: PPUSH
23280: PPUSH
23281: PPUSH
23282: PPUSH
23283: PPUSH
23284: PPUSH
23285: PPUSH
23286: PPUSH
23287: PPUSH
23288: PPUSH
23289: PPUSH
23290: PPUSH
23291: PPUSH
23292: PPUSH
23293: PPUSH
23294: PPUSH
23295: PPUSH
23296: PPUSH
23297: PPUSH
// result = [ ] ;
23298: LD_ADDR_VAR 0 7
23302: PUSH
23303: EMPTY
23304: ST_TO_ADDR
// temp_list = [ ] ;
23305: LD_ADDR_VAR 0 9
23309: PUSH
23310: EMPTY
23311: ST_TO_ADDR
// if not dir in [ 0 , 1 , 2 , 3 , 4 , 5 ] or ( btype in [ b_depot , b_warehouse ] and not nation in [ nation_american , nation_arabian , nation_russian ] ) then
23312: LD_VAR 0 4
23316: PUSH
23317: LD_INT 0
23319: PUSH
23320: LD_INT 1
23322: PUSH
23323: LD_INT 2
23325: PUSH
23326: LD_INT 3
23328: PUSH
23329: LD_INT 4
23331: PUSH
23332: LD_INT 5
23334: PUSH
23335: EMPTY
23336: LIST
23337: LIST
23338: LIST
23339: LIST
23340: LIST
23341: LIST
23342: IN
23343: NOT
23344: PUSH
23345: LD_VAR 0 1
23349: PUSH
23350: LD_INT 0
23352: PUSH
23353: LD_INT 1
23355: PUSH
23356: EMPTY
23357: LIST
23358: LIST
23359: IN
23360: PUSH
23361: LD_VAR 0 5
23365: PUSH
23366: LD_INT 1
23368: PUSH
23369: LD_INT 2
23371: PUSH
23372: LD_INT 3
23374: PUSH
23375: EMPTY
23376: LIST
23377: LIST
23378: LIST
23379: IN
23380: NOT
23381: AND
23382: OR
23383: IFFALSE 23387
// exit ;
23385: GO 41778
// if btype in [ b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon ] then
23387: LD_VAR 0 1
23391: PUSH
23392: LD_INT 6
23394: PUSH
23395: LD_INT 7
23397: PUSH
23398: LD_INT 8
23400: PUSH
23401: LD_INT 13
23403: PUSH
23404: LD_INT 12
23406: PUSH
23407: LD_INT 15
23409: PUSH
23410: LD_INT 11
23412: PUSH
23413: LD_INT 14
23415: PUSH
23416: LD_INT 10
23418: PUSH
23419: EMPTY
23420: LIST
23421: LIST
23422: LIST
23423: LIST
23424: LIST
23425: LIST
23426: LIST
23427: LIST
23428: LIST
23429: IN
23430: IFFALSE 23440
// btype = b_lab ;
23432: LD_ADDR_VAR 0 1
23436: PUSH
23437: LD_INT 6
23439: ST_TO_ADDR
// if not mode in [ 0 , 1 , 2 ] or ( not btype in [ b_depot , b_warehouse , b_workshop , b_factory , b_lab , b_control_tower , b_armoury , b_barracks , b_breastwork , b_bunker , b_turret ] and mode = 1 ) or ( not btype in [ b_workshop , b_factory ] and mode = 2 ) then
23440: LD_VAR 0 6
23444: PUSH
23445: LD_INT 0
23447: PUSH
23448: LD_INT 1
23450: PUSH
23451: LD_INT 2
23453: PUSH
23454: EMPTY
23455: LIST
23456: LIST
23457: LIST
23458: IN
23459: NOT
23460: PUSH
23461: LD_VAR 0 1
23465: PUSH
23466: LD_INT 0
23468: PUSH
23469: LD_INT 1
23471: PUSH
23472: LD_INT 2
23474: PUSH
23475: LD_INT 3
23477: PUSH
23478: LD_INT 6
23480: PUSH
23481: LD_INT 36
23483: PUSH
23484: LD_INT 4
23486: PUSH
23487: LD_INT 5
23489: PUSH
23490: LD_INT 31
23492: PUSH
23493: LD_INT 32
23495: PUSH
23496: LD_INT 33
23498: PUSH
23499: EMPTY
23500: LIST
23501: LIST
23502: LIST
23503: LIST
23504: LIST
23505: LIST
23506: LIST
23507: LIST
23508: LIST
23509: LIST
23510: LIST
23511: IN
23512: NOT
23513: PUSH
23514: LD_VAR 0 6
23518: PUSH
23519: LD_INT 1
23521: EQUAL
23522: AND
23523: OR
23524: PUSH
23525: LD_VAR 0 1
23529: PUSH
23530: LD_INT 2
23532: PUSH
23533: LD_INT 3
23535: PUSH
23536: EMPTY
23537: LIST
23538: LIST
23539: IN
23540: NOT
23541: PUSH
23542: LD_VAR 0 6
23546: PUSH
23547: LD_INT 2
23549: EQUAL
23550: AND
23551: OR
23552: IFFALSE 23562
// mode = 0 ;
23554: LD_ADDR_VAR 0 6
23558: PUSH
23559: LD_INT 0
23561: ST_TO_ADDR
// case mode of 0 :
23562: LD_VAR 0 6
23566: PUSH
23567: LD_INT 0
23569: DOUBLE
23570: EQUAL
23571: IFTRUE 23575
23573: GO 35028
23575: POP
// begin fDepotAm0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
23576: LD_ADDR_VAR 0 11
23580: PUSH
23581: LD_INT 0
23583: PUSH
23584: LD_INT 0
23586: PUSH
23587: EMPTY
23588: LIST
23589: LIST
23590: PUSH
23591: LD_INT 0
23593: PUSH
23594: LD_INT 1
23596: NEG
23597: PUSH
23598: EMPTY
23599: LIST
23600: LIST
23601: PUSH
23602: LD_INT 1
23604: PUSH
23605: LD_INT 0
23607: PUSH
23608: EMPTY
23609: LIST
23610: LIST
23611: PUSH
23612: LD_INT 1
23614: PUSH
23615: LD_INT 1
23617: PUSH
23618: EMPTY
23619: LIST
23620: LIST
23621: PUSH
23622: LD_INT 0
23624: PUSH
23625: LD_INT 1
23627: PUSH
23628: EMPTY
23629: LIST
23630: LIST
23631: PUSH
23632: LD_INT 1
23634: NEG
23635: PUSH
23636: LD_INT 0
23638: PUSH
23639: EMPTY
23640: LIST
23641: LIST
23642: PUSH
23643: LD_INT 1
23645: NEG
23646: PUSH
23647: LD_INT 1
23649: NEG
23650: PUSH
23651: EMPTY
23652: LIST
23653: LIST
23654: PUSH
23655: LD_INT 1
23657: NEG
23658: PUSH
23659: LD_INT 2
23661: NEG
23662: PUSH
23663: EMPTY
23664: LIST
23665: LIST
23666: PUSH
23667: LD_INT 0
23669: PUSH
23670: LD_INT 2
23672: NEG
23673: PUSH
23674: EMPTY
23675: LIST
23676: LIST
23677: PUSH
23678: LD_INT 1
23680: PUSH
23681: LD_INT 1
23683: NEG
23684: PUSH
23685: EMPTY
23686: LIST
23687: LIST
23688: PUSH
23689: LD_INT 1
23691: PUSH
23692: LD_INT 2
23694: PUSH
23695: EMPTY
23696: LIST
23697: LIST
23698: PUSH
23699: LD_INT 0
23701: PUSH
23702: LD_INT 2
23704: PUSH
23705: EMPTY
23706: LIST
23707: LIST
23708: PUSH
23709: LD_INT 1
23711: NEG
23712: PUSH
23713: LD_INT 1
23715: PUSH
23716: EMPTY
23717: LIST
23718: LIST
23719: PUSH
23720: LD_INT 1
23722: PUSH
23723: LD_INT 3
23725: PUSH
23726: EMPTY
23727: LIST
23728: LIST
23729: PUSH
23730: LD_INT 0
23732: PUSH
23733: LD_INT 3
23735: PUSH
23736: EMPTY
23737: LIST
23738: LIST
23739: PUSH
23740: LD_INT 1
23742: NEG
23743: PUSH
23744: LD_INT 2
23746: PUSH
23747: EMPTY
23748: LIST
23749: LIST
23750: PUSH
23751: EMPTY
23752: LIST
23753: LIST
23754: LIST
23755: LIST
23756: LIST
23757: LIST
23758: LIST
23759: LIST
23760: LIST
23761: LIST
23762: LIST
23763: LIST
23764: LIST
23765: LIST
23766: LIST
23767: LIST
23768: ST_TO_ADDR
// fDepotAm1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
23769: LD_ADDR_VAR 0 12
23773: PUSH
23774: LD_INT 0
23776: PUSH
23777: LD_INT 0
23779: PUSH
23780: EMPTY
23781: LIST
23782: LIST
23783: PUSH
23784: LD_INT 0
23786: PUSH
23787: LD_INT 1
23789: NEG
23790: PUSH
23791: EMPTY
23792: LIST
23793: LIST
23794: PUSH
23795: LD_INT 1
23797: PUSH
23798: LD_INT 0
23800: PUSH
23801: EMPTY
23802: LIST
23803: LIST
23804: PUSH
23805: LD_INT 1
23807: PUSH
23808: LD_INT 1
23810: PUSH
23811: EMPTY
23812: LIST
23813: LIST
23814: PUSH
23815: LD_INT 0
23817: PUSH
23818: LD_INT 1
23820: PUSH
23821: EMPTY
23822: LIST
23823: LIST
23824: PUSH
23825: LD_INT 1
23827: NEG
23828: PUSH
23829: LD_INT 0
23831: PUSH
23832: EMPTY
23833: LIST
23834: LIST
23835: PUSH
23836: LD_INT 1
23838: NEG
23839: PUSH
23840: LD_INT 1
23842: NEG
23843: PUSH
23844: EMPTY
23845: LIST
23846: LIST
23847: PUSH
23848: LD_INT 1
23850: PUSH
23851: LD_INT 1
23853: NEG
23854: PUSH
23855: EMPTY
23856: LIST
23857: LIST
23858: PUSH
23859: LD_INT 2
23861: PUSH
23862: LD_INT 0
23864: PUSH
23865: EMPTY
23866: LIST
23867: LIST
23868: PUSH
23869: LD_INT 2
23871: PUSH
23872: LD_INT 1
23874: PUSH
23875: EMPTY
23876: LIST
23877: LIST
23878: PUSH
23879: LD_INT 1
23881: NEG
23882: PUSH
23883: LD_INT 1
23885: PUSH
23886: EMPTY
23887: LIST
23888: LIST
23889: PUSH
23890: LD_INT 2
23892: NEG
23893: PUSH
23894: LD_INT 0
23896: PUSH
23897: EMPTY
23898: LIST
23899: LIST
23900: PUSH
23901: LD_INT 2
23903: NEG
23904: PUSH
23905: LD_INT 1
23907: NEG
23908: PUSH
23909: EMPTY
23910: LIST
23911: LIST
23912: PUSH
23913: LD_INT 2
23915: NEG
23916: PUSH
23917: LD_INT 1
23919: PUSH
23920: EMPTY
23921: LIST
23922: LIST
23923: PUSH
23924: LD_INT 3
23926: NEG
23927: PUSH
23928: LD_INT 0
23930: PUSH
23931: EMPTY
23932: LIST
23933: LIST
23934: PUSH
23935: LD_INT 3
23937: NEG
23938: PUSH
23939: LD_INT 1
23941: NEG
23942: PUSH
23943: EMPTY
23944: LIST
23945: LIST
23946: PUSH
23947: EMPTY
23948: LIST
23949: LIST
23950: LIST
23951: LIST
23952: LIST
23953: LIST
23954: LIST
23955: LIST
23956: LIST
23957: LIST
23958: LIST
23959: LIST
23960: LIST
23961: LIST
23962: LIST
23963: LIST
23964: ST_TO_ADDR
// fDepotAm2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
23965: LD_ADDR_VAR 0 13
23969: PUSH
23970: LD_INT 0
23972: PUSH
23973: LD_INT 0
23975: PUSH
23976: EMPTY
23977: LIST
23978: LIST
23979: PUSH
23980: LD_INT 0
23982: PUSH
23983: LD_INT 1
23985: NEG
23986: PUSH
23987: EMPTY
23988: LIST
23989: LIST
23990: PUSH
23991: LD_INT 1
23993: PUSH
23994: LD_INT 0
23996: PUSH
23997: EMPTY
23998: LIST
23999: LIST
24000: PUSH
24001: LD_INT 1
24003: PUSH
24004: LD_INT 1
24006: PUSH
24007: EMPTY
24008: LIST
24009: LIST
24010: PUSH
24011: LD_INT 0
24013: PUSH
24014: LD_INT 1
24016: PUSH
24017: EMPTY
24018: LIST
24019: LIST
24020: PUSH
24021: LD_INT 1
24023: NEG
24024: PUSH
24025: LD_INT 0
24027: PUSH
24028: EMPTY
24029: LIST
24030: LIST
24031: PUSH
24032: LD_INT 1
24034: NEG
24035: PUSH
24036: LD_INT 1
24038: NEG
24039: PUSH
24040: EMPTY
24041: LIST
24042: LIST
24043: PUSH
24044: LD_INT 1
24046: NEG
24047: PUSH
24048: LD_INT 2
24050: NEG
24051: PUSH
24052: EMPTY
24053: LIST
24054: LIST
24055: PUSH
24056: LD_INT 2
24058: PUSH
24059: LD_INT 1
24061: PUSH
24062: EMPTY
24063: LIST
24064: LIST
24065: PUSH
24066: LD_INT 2
24068: PUSH
24069: LD_INT 2
24071: PUSH
24072: EMPTY
24073: LIST
24074: LIST
24075: PUSH
24076: LD_INT 1
24078: PUSH
24079: LD_INT 2
24081: PUSH
24082: EMPTY
24083: LIST
24084: LIST
24085: PUSH
24086: LD_INT 2
24088: NEG
24089: PUSH
24090: LD_INT 1
24092: NEG
24093: PUSH
24094: EMPTY
24095: LIST
24096: LIST
24097: PUSH
24098: LD_INT 2
24100: NEG
24101: PUSH
24102: LD_INT 2
24104: NEG
24105: PUSH
24106: EMPTY
24107: LIST
24108: LIST
24109: PUSH
24110: LD_INT 2
24112: NEG
24113: PUSH
24114: LD_INT 3
24116: NEG
24117: PUSH
24118: EMPTY
24119: LIST
24120: LIST
24121: PUSH
24122: LD_INT 3
24124: NEG
24125: PUSH
24126: LD_INT 2
24128: NEG
24129: PUSH
24130: EMPTY
24131: LIST
24132: LIST
24133: PUSH
24134: LD_INT 3
24136: NEG
24137: PUSH
24138: LD_INT 3
24140: NEG
24141: PUSH
24142: EMPTY
24143: LIST
24144: LIST
24145: PUSH
24146: EMPTY
24147: LIST
24148: LIST
24149: LIST
24150: LIST
24151: LIST
24152: LIST
24153: LIST
24154: LIST
24155: LIST
24156: LIST
24157: LIST
24158: LIST
24159: LIST
24160: LIST
24161: LIST
24162: LIST
24163: ST_TO_ADDR
// fDepotAm3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
24164: LD_ADDR_VAR 0 14
24168: PUSH
24169: LD_INT 0
24171: PUSH
24172: LD_INT 0
24174: PUSH
24175: EMPTY
24176: LIST
24177: LIST
24178: PUSH
24179: LD_INT 0
24181: PUSH
24182: LD_INT 1
24184: NEG
24185: PUSH
24186: EMPTY
24187: LIST
24188: LIST
24189: PUSH
24190: LD_INT 1
24192: PUSH
24193: LD_INT 0
24195: PUSH
24196: EMPTY
24197: LIST
24198: LIST
24199: PUSH
24200: LD_INT 1
24202: PUSH
24203: LD_INT 1
24205: PUSH
24206: EMPTY
24207: LIST
24208: LIST
24209: PUSH
24210: LD_INT 0
24212: PUSH
24213: LD_INT 1
24215: PUSH
24216: EMPTY
24217: LIST
24218: LIST
24219: PUSH
24220: LD_INT 1
24222: NEG
24223: PUSH
24224: LD_INT 0
24226: PUSH
24227: EMPTY
24228: LIST
24229: LIST
24230: PUSH
24231: LD_INT 1
24233: NEG
24234: PUSH
24235: LD_INT 1
24237: NEG
24238: PUSH
24239: EMPTY
24240: LIST
24241: LIST
24242: PUSH
24243: LD_INT 1
24245: NEG
24246: PUSH
24247: LD_INT 2
24249: NEG
24250: PUSH
24251: EMPTY
24252: LIST
24253: LIST
24254: PUSH
24255: LD_INT 0
24257: PUSH
24258: LD_INT 2
24260: NEG
24261: PUSH
24262: EMPTY
24263: LIST
24264: LIST
24265: PUSH
24266: LD_INT 1
24268: PUSH
24269: LD_INT 1
24271: NEG
24272: PUSH
24273: EMPTY
24274: LIST
24275: LIST
24276: PUSH
24277: LD_INT 1
24279: PUSH
24280: LD_INT 2
24282: PUSH
24283: EMPTY
24284: LIST
24285: LIST
24286: PUSH
24287: LD_INT 0
24289: PUSH
24290: LD_INT 2
24292: PUSH
24293: EMPTY
24294: LIST
24295: LIST
24296: PUSH
24297: LD_INT 1
24299: NEG
24300: PUSH
24301: LD_INT 1
24303: PUSH
24304: EMPTY
24305: LIST
24306: LIST
24307: PUSH
24308: LD_INT 1
24310: NEG
24311: PUSH
24312: LD_INT 3
24314: NEG
24315: PUSH
24316: EMPTY
24317: LIST
24318: LIST
24319: PUSH
24320: LD_INT 0
24322: PUSH
24323: LD_INT 3
24325: NEG
24326: PUSH
24327: EMPTY
24328: LIST
24329: LIST
24330: PUSH
24331: LD_INT 1
24333: PUSH
24334: LD_INT 2
24336: NEG
24337: PUSH
24338: EMPTY
24339: LIST
24340: LIST
24341: PUSH
24342: EMPTY
24343: LIST
24344: LIST
24345: LIST
24346: LIST
24347: LIST
24348: LIST
24349: LIST
24350: LIST
24351: LIST
24352: LIST
24353: LIST
24354: LIST
24355: LIST
24356: LIST
24357: LIST
24358: LIST
24359: ST_TO_ADDR
// fDepotAm4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
24360: LD_ADDR_VAR 0 15
24364: PUSH
24365: LD_INT 0
24367: PUSH
24368: LD_INT 0
24370: PUSH
24371: EMPTY
24372: LIST
24373: LIST
24374: PUSH
24375: LD_INT 0
24377: PUSH
24378: LD_INT 1
24380: NEG
24381: PUSH
24382: EMPTY
24383: LIST
24384: LIST
24385: PUSH
24386: LD_INT 1
24388: PUSH
24389: LD_INT 0
24391: PUSH
24392: EMPTY
24393: LIST
24394: LIST
24395: PUSH
24396: LD_INT 1
24398: PUSH
24399: LD_INT 1
24401: PUSH
24402: EMPTY
24403: LIST
24404: LIST
24405: PUSH
24406: LD_INT 0
24408: PUSH
24409: LD_INT 1
24411: PUSH
24412: EMPTY
24413: LIST
24414: LIST
24415: PUSH
24416: LD_INT 1
24418: NEG
24419: PUSH
24420: LD_INT 0
24422: PUSH
24423: EMPTY
24424: LIST
24425: LIST
24426: PUSH
24427: LD_INT 1
24429: NEG
24430: PUSH
24431: LD_INT 1
24433: NEG
24434: PUSH
24435: EMPTY
24436: LIST
24437: LIST
24438: PUSH
24439: LD_INT 1
24441: PUSH
24442: LD_INT 1
24444: NEG
24445: PUSH
24446: EMPTY
24447: LIST
24448: LIST
24449: PUSH
24450: LD_INT 2
24452: PUSH
24453: LD_INT 0
24455: PUSH
24456: EMPTY
24457: LIST
24458: LIST
24459: PUSH
24460: LD_INT 2
24462: PUSH
24463: LD_INT 1
24465: PUSH
24466: EMPTY
24467: LIST
24468: LIST
24469: PUSH
24470: LD_INT 1
24472: NEG
24473: PUSH
24474: LD_INT 1
24476: PUSH
24477: EMPTY
24478: LIST
24479: LIST
24480: PUSH
24481: LD_INT 2
24483: NEG
24484: PUSH
24485: LD_INT 0
24487: PUSH
24488: EMPTY
24489: LIST
24490: LIST
24491: PUSH
24492: LD_INT 2
24494: NEG
24495: PUSH
24496: LD_INT 1
24498: NEG
24499: PUSH
24500: EMPTY
24501: LIST
24502: LIST
24503: PUSH
24504: LD_INT 2
24506: PUSH
24507: LD_INT 1
24509: NEG
24510: PUSH
24511: EMPTY
24512: LIST
24513: LIST
24514: PUSH
24515: LD_INT 3
24517: PUSH
24518: LD_INT 0
24520: PUSH
24521: EMPTY
24522: LIST
24523: LIST
24524: PUSH
24525: LD_INT 3
24527: PUSH
24528: LD_INT 1
24530: PUSH
24531: EMPTY
24532: LIST
24533: LIST
24534: PUSH
24535: EMPTY
24536: LIST
24537: LIST
24538: LIST
24539: LIST
24540: LIST
24541: LIST
24542: LIST
24543: LIST
24544: LIST
24545: LIST
24546: LIST
24547: LIST
24548: LIST
24549: LIST
24550: LIST
24551: LIST
24552: ST_TO_ADDR
// fDepotAm5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
24553: LD_ADDR_VAR 0 16
24557: PUSH
24558: LD_INT 0
24560: PUSH
24561: LD_INT 0
24563: PUSH
24564: EMPTY
24565: LIST
24566: LIST
24567: PUSH
24568: LD_INT 0
24570: PUSH
24571: LD_INT 1
24573: NEG
24574: PUSH
24575: EMPTY
24576: LIST
24577: LIST
24578: PUSH
24579: LD_INT 1
24581: PUSH
24582: LD_INT 0
24584: PUSH
24585: EMPTY
24586: LIST
24587: LIST
24588: PUSH
24589: LD_INT 1
24591: PUSH
24592: LD_INT 1
24594: PUSH
24595: EMPTY
24596: LIST
24597: LIST
24598: PUSH
24599: LD_INT 0
24601: PUSH
24602: LD_INT 1
24604: PUSH
24605: EMPTY
24606: LIST
24607: LIST
24608: PUSH
24609: LD_INT 1
24611: NEG
24612: PUSH
24613: LD_INT 0
24615: PUSH
24616: EMPTY
24617: LIST
24618: LIST
24619: PUSH
24620: LD_INT 1
24622: NEG
24623: PUSH
24624: LD_INT 1
24626: NEG
24627: PUSH
24628: EMPTY
24629: LIST
24630: LIST
24631: PUSH
24632: LD_INT 1
24634: NEG
24635: PUSH
24636: LD_INT 2
24638: NEG
24639: PUSH
24640: EMPTY
24641: LIST
24642: LIST
24643: PUSH
24644: LD_INT 2
24646: PUSH
24647: LD_INT 1
24649: PUSH
24650: EMPTY
24651: LIST
24652: LIST
24653: PUSH
24654: LD_INT 2
24656: PUSH
24657: LD_INT 2
24659: PUSH
24660: EMPTY
24661: LIST
24662: LIST
24663: PUSH
24664: LD_INT 1
24666: PUSH
24667: LD_INT 2
24669: PUSH
24670: EMPTY
24671: LIST
24672: LIST
24673: PUSH
24674: LD_INT 2
24676: NEG
24677: PUSH
24678: LD_INT 1
24680: NEG
24681: PUSH
24682: EMPTY
24683: LIST
24684: LIST
24685: PUSH
24686: LD_INT 2
24688: NEG
24689: PUSH
24690: LD_INT 2
24692: NEG
24693: PUSH
24694: EMPTY
24695: LIST
24696: LIST
24697: PUSH
24698: LD_INT 3
24700: PUSH
24701: LD_INT 2
24703: PUSH
24704: EMPTY
24705: LIST
24706: LIST
24707: PUSH
24708: LD_INT 3
24710: PUSH
24711: LD_INT 3
24713: PUSH
24714: EMPTY
24715: LIST
24716: LIST
24717: PUSH
24718: LD_INT 2
24720: PUSH
24721: LD_INT 3
24723: PUSH
24724: EMPTY
24725: LIST
24726: LIST
24727: PUSH
24728: EMPTY
24729: LIST
24730: LIST
24731: LIST
24732: LIST
24733: LIST
24734: LIST
24735: LIST
24736: LIST
24737: LIST
24738: LIST
24739: LIST
24740: LIST
24741: LIST
24742: LIST
24743: LIST
24744: LIST
24745: ST_TO_ADDR
// fDepotAr0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24746: LD_ADDR_VAR 0 17
24750: PUSH
24751: LD_INT 0
24753: PUSH
24754: LD_INT 0
24756: PUSH
24757: EMPTY
24758: LIST
24759: LIST
24760: PUSH
24761: LD_INT 0
24763: PUSH
24764: LD_INT 1
24766: NEG
24767: PUSH
24768: EMPTY
24769: LIST
24770: LIST
24771: PUSH
24772: LD_INT 1
24774: PUSH
24775: LD_INT 0
24777: PUSH
24778: EMPTY
24779: LIST
24780: LIST
24781: PUSH
24782: LD_INT 1
24784: PUSH
24785: LD_INT 1
24787: PUSH
24788: EMPTY
24789: LIST
24790: LIST
24791: PUSH
24792: LD_INT 0
24794: PUSH
24795: LD_INT 1
24797: PUSH
24798: EMPTY
24799: LIST
24800: LIST
24801: PUSH
24802: LD_INT 1
24804: NEG
24805: PUSH
24806: LD_INT 0
24808: PUSH
24809: EMPTY
24810: LIST
24811: LIST
24812: PUSH
24813: LD_INT 1
24815: NEG
24816: PUSH
24817: LD_INT 1
24819: NEG
24820: PUSH
24821: EMPTY
24822: LIST
24823: LIST
24824: PUSH
24825: LD_INT 1
24827: NEG
24828: PUSH
24829: LD_INT 2
24831: NEG
24832: PUSH
24833: EMPTY
24834: LIST
24835: LIST
24836: PUSH
24837: LD_INT 0
24839: PUSH
24840: LD_INT 2
24842: NEG
24843: PUSH
24844: EMPTY
24845: LIST
24846: LIST
24847: PUSH
24848: LD_INT 1
24850: PUSH
24851: LD_INT 1
24853: NEG
24854: PUSH
24855: EMPTY
24856: LIST
24857: LIST
24858: PUSH
24859: LD_INT 2
24861: PUSH
24862: LD_INT 0
24864: PUSH
24865: EMPTY
24866: LIST
24867: LIST
24868: PUSH
24869: LD_INT 2
24871: PUSH
24872: LD_INT 1
24874: PUSH
24875: EMPTY
24876: LIST
24877: LIST
24878: PUSH
24879: LD_INT 2
24881: PUSH
24882: LD_INT 2
24884: PUSH
24885: EMPTY
24886: LIST
24887: LIST
24888: PUSH
24889: LD_INT 1
24891: PUSH
24892: LD_INT 2
24894: PUSH
24895: EMPTY
24896: LIST
24897: LIST
24898: PUSH
24899: LD_INT 0
24901: PUSH
24902: LD_INT 2
24904: PUSH
24905: EMPTY
24906: LIST
24907: LIST
24908: PUSH
24909: LD_INT 1
24911: NEG
24912: PUSH
24913: LD_INT 1
24915: PUSH
24916: EMPTY
24917: LIST
24918: LIST
24919: PUSH
24920: LD_INT 2
24922: NEG
24923: PUSH
24924: LD_INT 0
24926: PUSH
24927: EMPTY
24928: LIST
24929: LIST
24930: PUSH
24931: LD_INT 2
24933: NEG
24934: PUSH
24935: LD_INT 1
24937: NEG
24938: PUSH
24939: EMPTY
24940: LIST
24941: LIST
24942: PUSH
24943: LD_INT 2
24945: NEG
24946: PUSH
24947: LD_INT 2
24949: NEG
24950: PUSH
24951: EMPTY
24952: LIST
24953: LIST
24954: PUSH
24955: EMPTY
24956: LIST
24957: LIST
24958: LIST
24959: LIST
24960: LIST
24961: LIST
24962: LIST
24963: LIST
24964: LIST
24965: LIST
24966: LIST
24967: LIST
24968: LIST
24969: LIST
24970: LIST
24971: LIST
24972: LIST
24973: LIST
24974: LIST
24975: ST_TO_ADDR
// fDepotAr1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
24976: LD_ADDR_VAR 0 18
24980: PUSH
24981: LD_INT 0
24983: PUSH
24984: LD_INT 0
24986: PUSH
24987: EMPTY
24988: LIST
24989: LIST
24990: PUSH
24991: LD_INT 0
24993: PUSH
24994: LD_INT 1
24996: NEG
24997: PUSH
24998: EMPTY
24999: LIST
25000: LIST
25001: PUSH
25002: LD_INT 1
25004: PUSH
25005: LD_INT 0
25007: PUSH
25008: EMPTY
25009: LIST
25010: LIST
25011: PUSH
25012: LD_INT 1
25014: PUSH
25015: LD_INT 1
25017: PUSH
25018: EMPTY
25019: LIST
25020: LIST
25021: PUSH
25022: LD_INT 0
25024: PUSH
25025: LD_INT 1
25027: PUSH
25028: EMPTY
25029: LIST
25030: LIST
25031: PUSH
25032: LD_INT 1
25034: NEG
25035: PUSH
25036: LD_INT 0
25038: PUSH
25039: EMPTY
25040: LIST
25041: LIST
25042: PUSH
25043: LD_INT 1
25045: NEG
25046: PUSH
25047: LD_INT 1
25049: NEG
25050: PUSH
25051: EMPTY
25052: LIST
25053: LIST
25054: PUSH
25055: LD_INT 1
25057: NEG
25058: PUSH
25059: LD_INT 2
25061: NEG
25062: PUSH
25063: EMPTY
25064: LIST
25065: LIST
25066: PUSH
25067: LD_INT 0
25069: PUSH
25070: LD_INT 2
25072: NEG
25073: PUSH
25074: EMPTY
25075: LIST
25076: LIST
25077: PUSH
25078: LD_INT 1
25080: PUSH
25081: LD_INT 1
25083: NEG
25084: PUSH
25085: EMPTY
25086: LIST
25087: LIST
25088: PUSH
25089: LD_INT 2
25091: PUSH
25092: LD_INT 0
25094: PUSH
25095: EMPTY
25096: LIST
25097: LIST
25098: PUSH
25099: LD_INT 2
25101: PUSH
25102: LD_INT 1
25104: PUSH
25105: EMPTY
25106: LIST
25107: LIST
25108: PUSH
25109: LD_INT 2
25111: PUSH
25112: LD_INT 2
25114: PUSH
25115: EMPTY
25116: LIST
25117: LIST
25118: PUSH
25119: LD_INT 1
25121: PUSH
25122: LD_INT 2
25124: PUSH
25125: EMPTY
25126: LIST
25127: LIST
25128: PUSH
25129: LD_INT 0
25131: PUSH
25132: LD_INT 2
25134: PUSH
25135: EMPTY
25136: LIST
25137: LIST
25138: PUSH
25139: LD_INT 1
25141: NEG
25142: PUSH
25143: LD_INT 1
25145: PUSH
25146: EMPTY
25147: LIST
25148: LIST
25149: PUSH
25150: LD_INT 2
25152: NEG
25153: PUSH
25154: LD_INT 0
25156: PUSH
25157: EMPTY
25158: LIST
25159: LIST
25160: PUSH
25161: LD_INT 2
25163: NEG
25164: PUSH
25165: LD_INT 1
25167: NEG
25168: PUSH
25169: EMPTY
25170: LIST
25171: LIST
25172: PUSH
25173: LD_INT 2
25175: NEG
25176: PUSH
25177: LD_INT 2
25179: NEG
25180: PUSH
25181: EMPTY
25182: LIST
25183: LIST
25184: PUSH
25185: EMPTY
25186: LIST
25187: LIST
25188: LIST
25189: LIST
25190: LIST
25191: LIST
25192: LIST
25193: LIST
25194: LIST
25195: LIST
25196: LIST
25197: LIST
25198: LIST
25199: LIST
25200: LIST
25201: LIST
25202: LIST
25203: LIST
25204: LIST
25205: ST_TO_ADDR
// fDepotAr2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25206: LD_ADDR_VAR 0 19
25210: PUSH
25211: LD_INT 0
25213: PUSH
25214: LD_INT 0
25216: PUSH
25217: EMPTY
25218: LIST
25219: LIST
25220: PUSH
25221: LD_INT 0
25223: PUSH
25224: LD_INT 1
25226: NEG
25227: PUSH
25228: EMPTY
25229: LIST
25230: LIST
25231: PUSH
25232: LD_INT 1
25234: PUSH
25235: LD_INT 0
25237: PUSH
25238: EMPTY
25239: LIST
25240: LIST
25241: PUSH
25242: LD_INT 1
25244: PUSH
25245: LD_INT 1
25247: PUSH
25248: EMPTY
25249: LIST
25250: LIST
25251: PUSH
25252: LD_INT 0
25254: PUSH
25255: LD_INT 1
25257: PUSH
25258: EMPTY
25259: LIST
25260: LIST
25261: PUSH
25262: LD_INT 1
25264: NEG
25265: PUSH
25266: LD_INT 0
25268: PUSH
25269: EMPTY
25270: LIST
25271: LIST
25272: PUSH
25273: LD_INT 1
25275: NEG
25276: PUSH
25277: LD_INT 1
25279: NEG
25280: PUSH
25281: EMPTY
25282: LIST
25283: LIST
25284: PUSH
25285: LD_INT 1
25287: NEG
25288: PUSH
25289: LD_INT 2
25291: NEG
25292: PUSH
25293: EMPTY
25294: LIST
25295: LIST
25296: PUSH
25297: LD_INT 0
25299: PUSH
25300: LD_INT 2
25302: NEG
25303: PUSH
25304: EMPTY
25305: LIST
25306: LIST
25307: PUSH
25308: LD_INT 1
25310: PUSH
25311: LD_INT 1
25313: NEG
25314: PUSH
25315: EMPTY
25316: LIST
25317: LIST
25318: PUSH
25319: LD_INT 2
25321: PUSH
25322: LD_INT 0
25324: PUSH
25325: EMPTY
25326: LIST
25327: LIST
25328: PUSH
25329: LD_INT 2
25331: PUSH
25332: LD_INT 1
25334: PUSH
25335: EMPTY
25336: LIST
25337: LIST
25338: PUSH
25339: LD_INT 2
25341: PUSH
25342: LD_INT 2
25344: PUSH
25345: EMPTY
25346: LIST
25347: LIST
25348: PUSH
25349: LD_INT 1
25351: PUSH
25352: LD_INT 2
25354: PUSH
25355: EMPTY
25356: LIST
25357: LIST
25358: PUSH
25359: LD_INT 0
25361: PUSH
25362: LD_INT 2
25364: PUSH
25365: EMPTY
25366: LIST
25367: LIST
25368: PUSH
25369: LD_INT 1
25371: NEG
25372: PUSH
25373: LD_INT 1
25375: PUSH
25376: EMPTY
25377: LIST
25378: LIST
25379: PUSH
25380: LD_INT 2
25382: NEG
25383: PUSH
25384: LD_INT 0
25386: PUSH
25387: EMPTY
25388: LIST
25389: LIST
25390: PUSH
25391: LD_INT 2
25393: NEG
25394: PUSH
25395: LD_INT 1
25397: NEG
25398: PUSH
25399: EMPTY
25400: LIST
25401: LIST
25402: PUSH
25403: LD_INT 2
25405: NEG
25406: PUSH
25407: LD_INT 2
25409: NEG
25410: PUSH
25411: EMPTY
25412: LIST
25413: LIST
25414: PUSH
25415: EMPTY
25416: LIST
25417: LIST
25418: LIST
25419: LIST
25420: LIST
25421: LIST
25422: LIST
25423: LIST
25424: LIST
25425: LIST
25426: LIST
25427: LIST
25428: LIST
25429: LIST
25430: LIST
25431: LIST
25432: LIST
25433: LIST
25434: LIST
25435: ST_TO_ADDR
// fDepotAr3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25436: LD_ADDR_VAR 0 20
25440: PUSH
25441: LD_INT 0
25443: PUSH
25444: LD_INT 0
25446: PUSH
25447: EMPTY
25448: LIST
25449: LIST
25450: PUSH
25451: LD_INT 0
25453: PUSH
25454: LD_INT 1
25456: NEG
25457: PUSH
25458: EMPTY
25459: LIST
25460: LIST
25461: PUSH
25462: LD_INT 1
25464: PUSH
25465: LD_INT 0
25467: PUSH
25468: EMPTY
25469: LIST
25470: LIST
25471: PUSH
25472: LD_INT 1
25474: PUSH
25475: LD_INT 1
25477: PUSH
25478: EMPTY
25479: LIST
25480: LIST
25481: PUSH
25482: LD_INT 0
25484: PUSH
25485: LD_INT 1
25487: PUSH
25488: EMPTY
25489: LIST
25490: LIST
25491: PUSH
25492: LD_INT 1
25494: NEG
25495: PUSH
25496: LD_INT 0
25498: PUSH
25499: EMPTY
25500: LIST
25501: LIST
25502: PUSH
25503: LD_INT 1
25505: NEG
25506: PUSH
25507: LD_INT 1
25509: NEG
25510: PUSH
25511: EMPTY
25512: LIST
25513: LIST
25514: PUSH
25515: LD_INT 1
25517: NEG
25518: PUSH
25519: LD_INT 2
25521: NEG
25522: PUSH
25523: EMPTY
25524: LIST
25525: LIST
25526: PUSH
25527: LD_INT 0
25529: PUSH
25530: LD_INT 2
25532: NEG
25533: PUSH
25534: EMPTY
25535: LIST
25536: LIST
25537: PUSH
25538: LD_INT 1
25540: PUSH
25541: LD_INT 1
25543: NEG
25544: PUSH
25545: EMPTY
25546: LIST
25547: LIST
25548: PUSH
25549: LD_INT 2
25551: PUSH
25552: LD_INT 0
25554: PUSH
25555: EMPTY
25556: LIST
25557: LIST
25558: PUSH
25559: LD_INT 2
25561: PUSH
25562: LD_INT 1
25564: PUSH
25565: EMPTY
25566: LIST
25567: LIST
25568: PUSH
25569: LD_INT 2
25571: PUSH
25572: LD_INT 2
25574: PUSH
25575: EMPTY
25576: LIST
25577: LIST
25578: PUSH
25579: LD_INT 1
25581: PUSH
25582: LD_INT 2
25584: PUSH
25585: EMPTY
25586: LIST
25587: LIST
25588: PUSH
25589: LD_INT 0
25591: PUSH
25592: LD_INT 2
25594: PUSH
25595: EMPTY
25596: LIST
25597: LIST
25598: PUSH
25599: LD_INT 1
25601: NEG
25602: PUSH
25603: LD_INT 1
25605: PUSH
25606: EMPTY
25607: LIST
25608: LIST
25609: PUSH
25610: LD_INT 2
25612: NEG
25613: PUSH
25614: LD_INT 0
25616: PUSH
25617: EMPTY
25618: LIST
25619: LIST
25620: PUSH
25621: LD_INT 2
25623: NEG
25624: PUSH
25625: LD_INT 1
25627: NEG
25628: PUSH
25629: EMPTY
25630: LIST
25631: LIST
25632: PUSH
25633: LD_INT 2
25635: NEG
25636: PUSH
25637: LD_INT 2
25639: NEG
25640: PUSH
25641: EMPTY
25642: LIST
25643: LIST
25644: PUSH
25645: EMPTY
25646: LIST
25647: LIST
25648: LIST
25649: LIST
25650: LIST
25651: LIST
25652: LIST
25653: LIST
25654: LIST
25655: LIST
25656: LIST
25657: LIST
25658: LIST
25659: LIST
25660: LIST
25661: LIST
25662: LIST
25663: LIST
25664: LIST
25665: ST_TO_ADDR
// fDepotAr4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25666: LD_ADDR_VAR 0 21
25670: PUSH
25671: LD_INT 0
25673: PUSH
25674: LD_INT 0
25676: PUSH
25677: EMPTY
25678: LIST
25679: LIST
25680: PUSH
25681: LD_INT 0
25683: PUSH
25684: LD_INT 1
25686: NEG
25687: PUSH
25688: EMPTY
25689: LIST
25690: LIST
25691: PUSH
25692: LD_INT 1
25694: PUSH
25695: LD_INT 0
25697: PUSH
25698: EMPTY
25699: LIST
25700: LIST
25701: PUSH
25702: LD_INT 1
25704: PUSH
25705: LD_INT 1
25707: PUSH
25708: EMPTY
25709: LIST
25710: LIST
25711: PUSH
25712: LD_INT 0
25714: PUSH
25715: LD_INT 1
25717: PUSH
25718: EMPTY
25719: LIST
25720: LIST
25721: PUSH
25722: LD_INT 1
25724: NEG
25725: PUSH
25726: LD_INT 0
25728: PUSH
25729: EMPTY
25730: LIST
25731: LIST
25732: PUSH
25733: LD_INT 1
25735: NEG
25736: PUSH
25737: LD_INT 1
25739: NEG
25740: PUSH
25741: EMPTY
25742: LIST
25743: LIST
25744: PUSH
25745: LD_INT 1
25747: NEG
25748: PUSH
25749: LD_INT 2
25751: NEG
25752: PUSH
25753: EMPTY
25754: LIST
25755: LIST
25756: PUSH
25757: LD_INT 0
25759: PUSH
25760: LD_INT 2
25762: NEG
25763: PUSH
25764: EMPTY
25765: LIST
25766: LIST
25767: PUSH
25768: LD_INT 1
25770: PUSH
25771: LD_INT 1
25773: NEG
25774: PUSH
25775: EMPTY
25776: LIST
25777: LIST
25778: PUSH
25779: LD_INT 2
25781: PUSH
25782: LD_INT 0
25784: PUSH
25785: EMPTY
25786: LIST
25787: LIST
25788: PUSH
25789: LD_INT 2
25791: PUSH
25792: LD_INT 1
25794: PUSH
25795: EMPTY
25796: LIST
25797: LIST
25798: PUSH
25799: LD_INT 2
25801: PUSH
25802: LD_INT 2
25804: PUSH
25805: EMPTY
25806: LIST
25807: LIST
25808: PUSH
25809: LD_INT 1
25811: PUSH
25812: LD_INT 2
25814: PUSH
25815: EMPTY
25816: LIST
25817: LIST
25818: PUSH
25819: LD_INT 0
25821: PUSH
25822: LD_INT 2
25824: PUSH
25825: EMPTY
25826: LIST
25827: LIST
25828: PUSH
25829: LD_INT 1
25831: NEG
25832: PUSH
25833: LD_INT 1
25835: PUSH
25836: EMPTY
25837: LIST
25838: LIST
25839: PUSH
25840: LD_INT 2
25842: NEG
25843: PUSH
25844: LD_INT 0
25846: PUSH
25847: EMPTY
25848: LIST
25849: LIST
25850: PUSH
25851: LD_INT 2
25853: NEG
25854: PUSH
25855: LD_INT 1
25857: NEG
25858: PUSH
25859: EMPTY
25860: LIST
25861: LIST
25862: PUSH
25863: LD_INT 2
25865: NEG
25866: PUSH
25867: LD_INT 2
25869: NEG
25870: PUSH
25871: EMPTY
25872: LIST
25873: LIST
25874: PUSH
25875: EMPTY
25876: LIST
25877: LIST
25878: LIST
25879: LIST
25880: LIST
25881: LIST
25882: LIST
25883: LIST
25884: LIST
25885: LIST
25886: LIST
25887: LIST
25888: LIST
25889: LIST
25890: LIST
25891: LIST
25892: LIST
25893: LIST
25894: LIST
25895: ST_TO_ADDR
// fDepotAr5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
25896: LD_ADDR_VAR 0 22
25900: PUSH
25901: LD_INT 0
25903: PUSH
25904: LD_INT 0
25906: PUSH
25907: EMPTY
25908: LIST
25909: LIST
25910: PUSH
25911: LD_INT 0
25913: PUSH
25914: LD_INT 1
25916: NEG
25917: PUSH
25918: EMPTY
25919: LIST
25920: LIST
25921: PUSH
25922: LD_INT 1
25924: PUSH
25925: LD_INT 0
25927: PUSH
25928: EMPTY
25929: LIST
25930: LIST
25931: PUSH
25932: LD_INT 1
25934: PUSH
25935: LD_INT 1
25937: PUSH
25938: EMPTY
25939: LIST
25940: LIST
25941: PUSH
25942: LD_INT 0
25944: PUSH
25945: LD_INT 1
25947: PUSH
25948: EMPTY
25949: LIST
25950: LIST
25951: PUSH
25952: LD_INT 1
25954: NEG
25955: PUSH
25956: LD_INT 0
25958: PUSH
25959: EMPTY
25960: LIST
25961: LIST
25962: PUSH
25963: LD_INT 1
25965: NEG
25966: PUSH
25967: LD_INT 1
25969: NEG
25970: PUSH
25971: EMPTY
25972: LIST
25973: LIST
25974: PUSH
25975: LD_INT 1
25977: NEG
25978: PUSH
25979: LD_INT 2
25981: NEG
25982: PUSH
25983: EMPTY
25984: LIST
25985: LIST
25986: PUSH
25987: LD_INT 0
25989: PUSH
25990: LD_INT 2
25992: NEG
25993: PUSH
25994: EMPTY
25995: LIST
25996: LIST
25997: PUSH
25998: LD_INT 1
26000: PUSH
26001: LD_INT 1
26003: NEG
26004: PUSH
26005: EMPTY
26006: LIST
26007: LIST
26008: PUSH
26009: LD_INT 2
26011: PUSH
26012: LD_INT 0
26014: PUSH
26015: EMPTY
26016: LIST
26017: LIST
26018: PUSH
26019: LD_INT 2
26021: PUSH
26022: LD_INT 1
26024: PUSH
26025: EMPTY
26026: LIST
26027: LIST
26028: PUSH
26029: LD_INT 2
26031: PUSH
26032: LD_INT 2
26034: PUSH
26035: EMPTY
26036: LIST
26037: LIST
26038: PUSH
26039: LD_INT 1
26041: PUSH
26042: LD_INT 2
26044: PUSH
26045: EMPTY
26046: LIST
26047: LIST
26048: PUSH
26049: LD_INT 0
26051: PUSH
26052: LD_INT 2
26054: PUSH
26055: EMPTY
26056: LIST
26057: LIST
26058: PUSH
26059: LD_INT 1
26061: NEG
26062: PUSH
26063: LD_INT 1
26065: PUSH
26066: EMPTY
26067: LIST
26068: LIST
26069: PUSH
26070: LD_INT 2
26072: NEG
26073: PUSH
26074: LD_INT 0
26076: PUSH
26077: EMPTY
26078: LIST
26079: LIST
26080: PUSH
26081: LD_INT 2
26083: NEG
26084: PUSH
26085: LD_INT 1
26087: NEG
26088: PUSH
26089: EMPTY
26090: LIST
26091: LIST
26092: PUSH
26093: LD_INT 2
26095: NEG
26096: PUSH
26097: LD_INT 2
26099: NEG
26100: PUSH
26101: EMPTY
26102: LIST
26103: LIST
26104: PUSH
26105: EMPTY
26106: LIST
26107: LIST
26108: LIST
26109: LIST
26110: LIST
26111: LIST
26112: LIST
26113: LIST
26114: LIST
26115: LIST
26116: LIST
26117: LIST
26118: LIST
26119: LIST
26120: LIST
26121: LIST
26122: LIST
26123: LIST
26124: LIST
26125: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
26126: LD_ADDR_VAR 0 23
26130: PUSH
26131: LD_INT 0
26133: PUSH
26134: LD_INT 0
26136: PUSH
26137: EMPTY
26138: LIST
26139: LIST
26140: PUSH
26141: LD_INT 0
26143: PUSH
26144: LD_INT 1
26146: NEG
26147: PUSH
26148: EMPTY
26149: LIST
26150: LIST
26151: PUSH
26152: LD_INT 1
26154: PUSH
26155: LD_INT 0
26157: PUSH
26158: EMPTY
26159: LIST
26160: LIST
26161: PUSH
26162: LD_INT 1
26164: PUSH
26165: LD_INT 1
26167: PUSH
26168: EMPTY
26169: LIST
26170: LIST
26171: PUSH
26172: LD_INT 0
26174: PUSH
26175: LD_INT 1
26177: PUSH
26178: EMPTY
26179: LIST
26180: LIST
26181: PUSH
26182: LD_INT 1
26184: NEG
26185: PUSH
26186: LD_INT 0
26188: PUSH
26189: EMPTY
26190: LIST
26191: LIST
26192: PUSH
26193: LD_INT 1
26195: NEG
26196: PUSH
26197: LD_INT 1
26199: NEG
26200: PUSH
26201: EMPTY
26202: LIST
26203: LIST
26204: PUSH
26205: LD_INT 1
26207: NEG
26208: PUSH
26209: LD_INT 2
26211: NEG
26212: PUSH
26213: EMPTY
26214: LIST
26215: LIST
26216: PUSH
26217: LD_INT 0
26219: PUSH
26220: LD_INT 2
26222: NEG
26223: PUSH
26224: EMPTY
26225: LIST
26226: LIST
26227: PUSH
26228: LD_INT 1
26230: PUSH
26231: LD_INT 1
26233: NEG
26234: PUSH
26235: EMPTY
26236: LIST
26237: LIST
26238: PUSH
26239: LD_INT 2
26241: PUSH
26242: LD_INT 0
26244: PUSH
26245: EMPTY
26246: LIST
26247: LIST
26248: PUSH
26249: LD_INT 2
26251: PUSH
26252: LD_INT 1
26254: PUSH
26255: EMPTY
26256: LIST
26257: LIST
26258: PUSH
26259: LD_INT 2
26261: PUSH
26262: LD_INT 2
26264: PUSH
26265: EMPTY
26266: LIST
26267: LIST
26268: PUSH
26269: LD_INT 1
26271: PUSH
26272: LD_INT 2
26274: PUSH
26275: EMPTY
26276: LIST
26277: LIST
26278: PUSH
26279: LD_INT 0
26281: PUSH
26282: LD_INT 2
26284: PUSH
26285: EMPTY
26286: LIST
26287: LIST
26288: PUSH
26289: LD_INT 1
26291: NEG
26292: PUSH
26293: LD_INT 1
26295: PUSH
26296: EMPTY
26297: LIST
26298: LIST
26299: PUSH
26300: LD_INT 2
26302: NEG
26303: PUSH
26304: LD_INT 0
26306: PUSH
26307: EMPTY
26308: LIST
26309: LIST
26310: PUSH
26311: LD_INT 2
26313: NEG
26314: PUSH
26315: LD_INT 1
26317: NEG
26318: PUSH
26319: EMPTY
26320: LIST
26321: LIST
26322: PUSH
26323: LD_INT 2
26325: NEG
26326: PUSH
26327: LD_INT 2
26329: NEG
26330: PUSH
26331: EMPTY
26332: LIST
26333: LIST
26334: PUSH
26335: LD_INT 2
26337: NEG
26338: PUSH
26339: LD_INT 3
26341: NEG
26342: PUSH
26343: EMPTY
26344: LIST
26345: LIST
26346: PUSH
26347: LD_INT 1
26349: NEG
26350: PUSH
26351: LD_INT 3
26353: NEG
26354: PUSH
26355: EMPTY
26356: LIST
26357: LIST
26358: PUSH
26359: LD_INT 1
26361: PUSH
26362: LD_INT 2
26364: NEG
26365: PUSH
26366: EMPTY
26367: LIST
26368: LIST
26369: PUSH
26370: LD_INT 2
26372: PUSH
26373: LD_INT 1
26375: NEG
26376: PUSH
26377: EMPTY
26378: LIST
26379: LIST
26380: PUSH
26381: EMPTY
26382: LIST
26383: LIST
26384: LIST
26385: LIST
26386: LIST
26387: LIST
26388: LIST
26389: LIST
26390: LIST
26391: LIST
26392: LIST
26393: LIST
26394: LIST
26395: LIST
26396: LIST
26397: LIST
26398: LIST
26399: LIST
26400: LIST
26401: LIST
26402: LIST
26403: LIST
26404: LIST
26405: ST_TO_ADDR
// fDepotRu1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 3 , 2 ] ] ;
26406: LD_ADDR_VAR 0 24
26410: PUSH
26411: LD_INT 0
26413: PUSH
26414: LD_INT 0
26416: PUSH
26417: EMPTY
26418: LIST
26419: LIST
26420: PUSH
26421: LD_INT 0
26423: PUSH
26424: LD_INT 1
26426: NEG
26427: PUSH
26428: EMPTY
26429: LIST
26430: LIST
26431: PUSH
26432: LD_INT 1
26434: PUSH
26435: LD_INT 0
26437: PUSH
26438: EMPTY
26439: LIST
26440: LIST
26441: PUSH
26442: LD_INT 1
26444: PUSH
26445: LD_INT 1
26447: PUSH
26448: EMPTY
26449: LIST
26450: LIST
26451: PUSH
26452: LD_INT 0
26454: PUSH
26455: LD_INT 1
26457: PUSH
26458: EMPTY
26459: LIST
26460: LIST
26461: PUSH
26462: LD_INT 1
26464: NEG
26465: PUSH
26466: LD_INT 0
26468: PUSH
26469: EMPTY
26470: LIST
26471: LIST
26472: PUSH
26473: LD_INT 1
26475: NEG
26476: PUSH
26477: LD_INT 1
26479: NEG
26480: PUSH
26481: EMPTY
26482: LIST
26483: LIST
26484: PUSH
26485: LD_INT 1
26487: NEG
26488: PUSH
26489: LD_INT 2
26491: NEG
26492: PUSH
26493: EMPTY
26494: LIST
26495: LIST
26496: PUSH
26497: LD_INT 0
26499: PUSH
26500: LD_INT 2
26502: NEG
26503: PUSH
26504: EMPTY
26505: LIST
26506: LIST
26507: PUSH
26508: LD_INT 1
26510: PUSH
26511: LD_INT 1
26513: NEG
26514: PUSH
26515: EMPTY
26516: LIST
26517: LIST
26518: PUSH
26519: LD_INT 2
26521: PUSH
26522: LD_INT 0
26524: PUSH
26525: EMPTY
26526: LIST
26527: LIST
26528: PUSH
26529: LD_INT 2
26531: PUSH
26532: LD_INT 1
26534: PUSH
26535: EMPTY
26536: LIST
26537: LIST
26538: PUSH
26539: LD_INT 2
26541: PUSH
26542: LD_INT 2
26544: PUSH
26545: EMPTY
26546: LIST
26547: LIST
26548: PUSH
26549: LD_INT 1
26551: PUSH
26552: LD_INT 2
26554: PUSH
26555: EMPTY
26556: LIST
26557: LIST
26558: PUSH
26559: LD_INT 0
26561: PUSH
26562: LD_INT 2
26564: PUSH
26565: EMPTY
26566: LIST
26567: LIST
26568: PUSH
26569: LD_INT 1
26571: NEG
26572: PUSH
26573: LD_INT 1
26575: PUSH
26576: EMPTY
26577: LIST
26578: LIST
26579: PUSH
26580: LD_INT 2
26582: NEG
26583: PUSH
26584: LD_INT 0
26586: PUSH
26587: EMPTY
26588: LIST
26589: LIST
26590: PUSH
26591: LD_INT 2
26593: NEG
26594: PUSH
26595: LD_INT 1
26597: NEG
26598: PUSH
26599: EMPTY
26600: LIST
26601: LIST
26602: PUSH
26603: LD_INT 2
26605: NEG
26606: PUSH
26607: LD_INT 2
26609: NEG
26610: PUSH
26611: EMPTY
26612: LIST
26613: LIST
26614: PUSH
26615: LD_INT 1
26617: PUSH
26618: LD_INT 2
26620: NEG
26621: PUSH
26622: EMPTY
26623: LIST
26624: LIST
26625: PUSH
26626: LD_INT 2
26628: PUSH
26629: LD_INT 1
26631: NEG
26632: PUSH
26633: EMPTY
26634: LIST
26635: LIST
26636: PUSH
26637: LD_INT 3
26639: PUSH
26640: LD_INT 1
26642: PUSH
26643: EMPTY
26644: LIST
26645: LIST
26646: PUSH
26647: LD_INT 3
26649: PUSH
26650: LD_INT 2
26652: PUSH
26653: EMPTY
26654: LIST
26655: LIST
26656: PUSH
26657: EMPTY
26658: LIST
26659: LIST
26660: LIST
26661: LIST
26662: LIST
26663: LIST
26664: LIST
26665: LIST
26666: LIST
26667: LIST
26668: LIST
26669: LIST
26670: LIST
26671: LIST
26672: LIST
26673: LIST
26674: LIST
26675: LIST
26676: LIST
26677: LIST
26678: LIST
26679: LIST
26680: LIST
26681: ST_TO_ADDR
// fDepotRu2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ 1 , 3 ] ] ;
26682: LD_ADDR_VAR 0 25
26686: PUSH
26687: LD_INT 0
26689: PUSH
26690: LD_INT 0
26692: PUSH
26693: EMPTY
26694: LIST
26695: LIST
26696: PUSH
26697: LD_INT 0
26699: PUSH
26700: LD_INT 1
26702: NEG
26703: PUSH
26704: EMPTY
26705: LIST
26706: LIST
26707: PUSH
26708: LD_INT 1
26710: PUSH
26711: LD_INT 0
26713: PUSH
26714: EMPTY
26715: LIST
26716: LIST
26717: PUSH
26718: LD_INT 1
26720: PUSH
26721: LD_INT 1
26723: PUSH
26724: EMPTY
26725: LIST
26726: LIST
26727: PUSH
26728: LD_INT 0
26730: PUSH
26731: LD_INT 1
26733: PUSH
26734: EMPTY
26735: LIST
26736: LIST
26737: PUSH
26738: LD_INT 1
26740: NEG
26741: PUSH
26742: LD_INT 0
26744: PUSH
26745: EMPTY
26746: LIST
26747: LIST
26748: PUSH
26749: LD_INT 1
26751: NEG
26752: PUSH
26753: LD_INT 1
26755: NEG
26756: PUSH
26757: EMPTY
26758: LIST
26759: LIST
26760: PUSH
26761: LD_INT 1
26763: NEG
26764: PUSH
26765: LD_INT 2
26767: NEG
26768: PUSH
26769: EMPTY
26770: LIST
26771: LIST
26772: PUSH
26773: LD_INT 0
26775: PUSH
26776: LD_INT 2
26778: NEG
26779: PUSH
26780: EMPTY
26781: LIST
26782: LIST
26783: PUSH
26784: LD_INT 1
26786: PUSH
26787: LD_INT 1
26789: NEG
26790: PUSH
26791: EMPTY
26792: LIST
26793: LIST
26794: PUSH
26795: LD_INT 2
26797: PUSH
26798: LD_INT 0
26800: PUSH
26801: EMPTY
26802: LIST
26803: LIST
26804: PUSH
26805: LD_INT 2
26807: PUSH
26808: LD_INT 1
26810: PUSH
26811: EMPTY
26812: LIST
26813: LIST
26814: PUSH
26815: LD_INT 2
26817: PUSH
26818: LD_INT 2
26820: PUSH
26821: EMPTY
26822: LIST
26823: LIST
26824: PUSH
26825: LD_INT 1
26827: PUSH
26828: LD_INT 2
26830: PUSH
26831: EMPTY
26832: LIST
26833: LIST
26834: PUSH
26835: LD_INT 0
26837: PUSH
26838: LD_INT 2
26840: PUSH
26841: EMPTY
26842: LIST
26843: LIST
26844: PUSH
26845: LD_INT 1
26847: NEG
26848: PUSH
26849: LD_INT 1
26851: PUSH
26852: EMPTY
26853: LIST
26854: LIST
26855: PUSH
26856: LD_INT 2
26858: NEG
26859: PUSH
26860: LD_INT 0
26862: PUSH
26863: EMPTY
26864: LIST
26865: LIST
26866: PUSH
26867: LD_INT 2
26869: NEG
26870: PUSH
26871: LD_INT 1
26873: NEG
26874: PUSH
26875: EMPTY
26876: LIST
26877: LIST
26878: PUSH
26879: LD_INT 2
26881: NEG
26882: PUSH
26883: LD_INT 2
26885: NEG
26886: PUSH
26887: EMPTY
26888: LIST
26889: LIST
26890: PUSH
26891: LD_INT 3
26893: PUSH
26894: LD_INT 1
26896: PUSH
26897: EMPTY
26898: LIST
26899: LIST
26900: PUSH
26901: LD_INT 3
26903: PUSH
26904: LD_INT 2
26906: PUSH
26907: EMPTY
26908: LIST
26909: LIST
26910: PUSH
26911: LD_INT 2
26913: PUSH
26914: LD_INT 3
26916: PUSH
26917: EMPTY
26918: LIST
26919: LIST
26920: PUSH
26921: LD_INT 1
26923: PUSH
26924: LD_INT 3
26926: PUSH
26927: EMPTY
26928: LIST
26929: LIST
26930: PUSH
26931: EMPTY
26932: LIST
26933: LIST
26934: LIST
26935: LIST
26936: LIST
26937: LIST
26938: LIST
26939: LIST
26940: LIST
26941: LIST
26942: LIST
26943: LIST
26944: LIST
26945: LIST
26946: LIST
26947: LIST
26948: LIST
26949: LIST
26950: LIST
26951: LIST
26952: LIST
26953: LIST
26954: LIST
26955: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
26956: LD_ADDR_VAR 0 26
26960: PUSH
26961: LD_INT 0
26963: PUSH
26964: LD_INT 0
26966: PUSH
26967: EMPTY
26968: LIST
26969: LIST
26970: PUSH
26971: LD_INT 0
26973: PUSH
26974: LD_INT 1
26976: NEG
26977: PUSH
26978: EMPTY
26979: LIST
26980: LIST
26981: PUSH
26982: LD_INT 1
26984: PUSH
26985: LD_INT 0
26987: PUSH
26988: EMPTY
26989: LIST
26990: LIST
26991: PUSH
26992: LD_INT 1
26994: PUSH
26995: LD_INT 1
26997: PUSH
26998: EMPTY
26999: LIST
27000: LIST
27001: PUSH
27002: LD_INT 0
27004: PUSH
27005: LD_INT 1
27007: PUSH
27008: EMPTY
27009: LIST
27010: LIST
27011: PUSH
27012: LD_INT 1
27014: NEG
27015: PUSH
27016: LD_INT 0
27018: PUSH
27019: EMPTY
27020: LIST
27021: LIST
27022: PUSH
27023: LD_INT 1
27025: NEG
27026: PUSH
27027: LD_INT 1
27029: NEG
27030: PUSH
27031: EMPTY
27032: LIST
27033: LIST
27034: PUSH
27035: LD_INT 1
27037: NEG
27038: PUSH
27039: LD_INT 2
27041: NEG
27042: PUSH
27043: EMPTY
27044: LIST
27045: LIST
27046: PUSH
27047: LD_INT 0
27049: PUSH
27050: LD_INT 2
27052: NEG
27053: PUSH
27054: EMPTY
27055: LIST
27056: LIST
27057: PUSH
27058: LD_INT 1
27060: PUSH
27061: LD_INT 1
27063: NEG
27064: PUSH
27065: EMPTY
27066: LIST
27067: LIST
27068: PUSH
27069: LD_INT 2
27071: PUSH
27072: LD_INT 0
27074: PUSH
27075: EMPTY
27076: LIST
27077: LIST
27078: PUSH
27079: LD_INT 2
27081: PUSH
27082: LD_INT 1
27084: PUSH
27085: EMPTY
27086: LIST
27087: LIST
27088: PUSH
27089: LD_INT 2
27091: PUSH
27092: LD_INT 2
27094: PUSH
27095: EMPTY
27096: LIST
27097: LIST
27098: PUSH
27099: LD_INT 1
27101: PUSH
27102: LD_INT 2
27104: PUSH
27105: EMPTY
27106: LIST
27107: LIST
27108: PUSH
27109: LD_INT 0
27111: PUSH
27112: LD_INT 2
27114: PUSH
27115: EMPTY
27116: LIST
27117: LIST
27118: PUSH
27119: LD_INT 1
27121: NEG
27122: PUSH
27123: LD_INT 1
27125: PUSH
27126: EMPTY
27127: LIST
27128: LIST
27129: PUSH
27130: LD_INT 2
27132: NEG
27133: PUSH
27134: LD_INT 0
27136: PUSH
27137: EMPTY
27138: LIST
27139: LIST
27140: PUSH
27141: LD_INT 2
27143: NEG
27144: PUSH
27145: LD_INT 1
27147: NEG
27148: PUSH
27149: EMPTY
27150: LIST
27151: LIST
27152: PUSH
27153: LD_INT 2
27155: NEG
27156: PUSH
27157: LD_INT 2
27159: NEG
27160: PUSH
27161: EMPTY
27162: LIST
27163: LIST
27164: PUSH
27165: LD_INT 2
27167: PUSH
27168: LD_INT 3
27170: PUSH
27171: EMPTY
27172: LIST
27173: LIST
27174: PUSH
27175: LD_INT 1
27177: PUSH
27178: LD_INT 3
27180: PUSH
27181: EMPTY
27182: LIST
27183: LIST
27184: PUSH
27185: LD_INT 1
27187: NEG
27188: PUSH
27189: LD_INT 2
27191: PUSH
27192: EMPTY
27193: LIST
27194: LIST
27195: PUSH
27196: LD_INT 2
27198: NEG
27199: PUSH
27200: LD_INT 1
27202: PUSH
27203: EMPTY
27204: LIST
27205: LIST
27206: PUSH
27207: EMPTY
27208: LIST
27209: LIST
27210: LIST
27211: LIST
27212: LIST
27213: LIST
27214: LIST
27215: LIST
27216: LIST
27217: LIST
27218: LIST
27219: LIST
27220: LIST
27221: LIST
27222: LIST
27223: LIST
27224: LIST
27225: LIST
27226: LIST
27227: LIST
27228: LIST
27229: LIST
27230: LIST
27231: ST_TO_ADDR
// fDepotRu4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27232: LD_ADDR_VAR 0 27
27236: PUSH
27237: LD_INT 0
27239: PUSH
27240: LD_INT 0
27242: PUSH
27243: EMPTY
27244: LIST
27245: LIST
27246: PUSH
27247: LD_INT 0
27249: PUSH
27250: LD_INT 1
27252: NEG
27253: PUSH
27254: EMPTY
27255: LIST
27256: LIST
27257: PUSH
27258: LD_INT 1
27260: PUSH
27261: LD_INT 0
27263: PUSH
27264: EMPTY
27265: LIST
27266: LIST
27267: PUSH
27268: LD_INT 1
27270: PUSH
27271: LD_INT 1
27273: PUSH
27274: EMPTY
27275: LIST
27276: LIST
27277: PUSH
27278: LD_INT 0
27280: PUSH
27281: LD_INT 1
27283: PUSH
27284: EMPTY
27285: LIST
27286: LIST
27287: PUSH
27288: LD_INT 1
27290: NEG
27291: PUSH
27292: LD_INT 0
27294: PUSH
27295: EMPTY
27296: LIST
27297: LIST
27298: PUSH
27299: LD_INT 1
27301: NEG
27302: PUSH
27303: LD_INT 1
27305: NEG
27306: PUSH
27307: EMPTY
27308: LIST
27309: LIST
27310: PUSH
27311: LD_INT 1
27313: NEG
27314: PUSH
27315: LD_INT 2
27317: NEG
27318: PUSH
27319: EMPTY
27320: LIST
27321: LIST
27322: PUSH
27323: LD_INT 0
27325: PUSH
27326: LD_INT 2
27328: NEG
27329: PUSH
27330: EMPTY
27331: LIST
27332: LIST
27333: PUSH
27334: LD_INT 1
27336: PUSH
27337: LD_INT 1
27339: NEG
27340: PUSH
27341: EMPTY
27342: LIST
27343: LIST
27344: PUSH
27345: LD_INT 2
27347: PUSH
27348: LD_INT 0
27350: PUSH
27351: EMPTY
27352: LIST
27353: LIST
27354: PUSH
27355: LD_INT 2
27357: PUSH
27358: LD_INT 1
27360: PUSH
27361: EMPTY
27362: LIST
27363: LIST
27364: PUSH
27365: LD_INT 2
27367: PUSH
27368: LD_INT 2
27370: PUSH
27371: EMPTY
27372: LIST
27373: LIST
27374: PUSH
27375: LD_INT 1
27377: PUSH
27378: LD_INT 2
27380: PUSH
27381: EMPTY
27382: LIST
27383: LIST
27384: PUSH
27385: LD_INT 0
27387: PUSH
27388: LD_INT 2
27390: PUSH
27391: EMPTY
27392: LIST
27393: LIST
27394: PUSH
27395: LD_INT 1
27397: NEG
27398: PUSH
27399: LD_INT 1
27401: PUSH
27402: EMPTY
27403: LIST
27404: LIST
27405: PUSH
27406: LD_INT 2
27408: NEG
27409: PUSH
27410: LD_INT 0
27412: PUSH
27413: EMPTY
27414: LIST
27415: LIST
27416: PUSH
27417: LD_INT 2
27419: NEG
27420: PUSH
27421: LD_INT 1
27423: NEG
27424: PUSH
27425: EMPTY
27426: LIST
27427: LIST
27428: PUSH
27429: LD_INT 2
27431: NEG
27432: PUSH
27433: LD_INT 2
27435: NEG
27436: PUSH
27437: EMPTY
27438: LIST
27439: LIST
27440: PUSH
27441: LD_INT 1
27443: NEG
27444: PUSH
27445: LD_INT 2
27447: PUSH
27448: EMPTY
27449: LIST
27450: LIST
27451: PUSH
27452: LD_INT 2
27454: NEG
27455: PUSH
27456: LD_INT 1
27458: PUSH
27459: EMPTY
27460: LIST
27461: LIST
27462: PUSH
27463: LD_INT 3
27465: NEG
27466: PUSH
27467: LD_INT 1
27469: NEG
27470: PUSH
27471: EMPTY
27472: LIST
27473: LIST
27474: PUSH
27475: LD_INT 3
27477: NEG
27478: PUSH
27479: LD_INT 2
27481: NEG
27482: PUSH
27483: EMPTY
27484: LIST
27485: LIST
27486: PUSH
27487: EMPTY
27488: LIST
27489: LIST
27490: LIST
27491: LIST
27492: LIST
27493: LIST
27494: LIST
27495: LIST
27496: LIST
27497: LIST
27498: LIST
27499: LIST
27500: LIST
27501: LIST
27502: LIST
27503: LIST
27504: LIST
27505: LIST
27506: LIST
27507: LIST
27508: LIST
27509: LIST
27510: LIST
27511: ST_TO_ADDR
// fDepotRu5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
27512: LD_ADDR_VAR 0 28
27516: PUSH
27517: LD_INT 0
27519: PUSH
27520: LD_INT 0
27522: PUSH
27523: EMPTY
27524: LIST
27525: LIST
27526: PUSH
27527: LD_INT 0
27529: PUSH
27530: LD_INT 1
27532: NEG
27533: PUSH
27534: EMPTY
27535: LIST
27536: LIST
27537: PUSH
27538: LD_INT 1
27540: PUSH
27541: LD_INT 0
27543: PUSH
27544: EMPTY
27545: LIST
27546: LIST
27547: PUSH
27548: LD_INT 1
27550: PUSH
27551: LD_INT 1
27553: PUSH
27554: EMPTY
27555: LIST
27556: LIST
27557: PUSH
27558: LD_INT 0
27560: PUSH
27561: LD_INT 1
27563: PUSH
27564: EMPTY
27565: LIST
27566: LIST
27567: PUSH
27568: LD_INT 1
27570: NEG
27571: PUSH
27572: LD_INT 0
27574: PUSH
27575: EMPTY
27576: LIST
27577: LIST
27578: PUSH
27579: LD_INT 1
27581: NEG
27582: PUSH
27583: LD_INT 1
27585: NEG
27586: PUSH
27587: EMPTY
27588: LIST
27589: LIST
27590: PUSH
27591: LD_INT 1
27593: NEG
27594: PUSH
27595: LD_INT 2
27597: NEG
27598: PUSH
27599: EMPTY
27600: LIST
27601: LIST
27602: PUSH
27603: LD_INT 0
27605: PUSH
27606: LD_INT 2
27608: NEG
27609: PUSH
27610: EMPTY
27611: LIST
27612: LIST
27613: PUSH
27614: LD_INT 1
27616: PUSH
27617: LD_INT 1
27619: NEG
27620: PUSH
27621: EMPTY
27622: LIST
27623: LIST
27624: PUSH
27625: LD_INT 2
27627: PUSH
27628: LD_INT 0
27630: PUSH
27631: EMPTY
27632: LIST
27633: LIST
27634: PUSH
27635: LD_INT 2
27637: PUSH
27638: LD_INT 1
27640: PUSH
27641: EMPTY
27642: LIST
27643: LIST
27644: PUSH
27645: LD_INT 2
27647: PUSH
27648: LD_INT 2
27650: PUSH
27651: EMPTY
27652: LIST
27653: LIST
27654: PUSH
27655: LD_INT 1
27657: PUSH
27658: LD_INT 2
27660: PUSH
27661: EMPTY
27662: LIST
27663: LIST
27664: PUSH
27665: LD_INT 0
27667: PUSH
27668: LD_INT 2
27670: PUSH
27671: EMPTY
27672: LIST
27673: LIST
27674: PUSH
27675: LD_INT 1
27677: NEG
27678: PUSH
27679: LD_INT 1
27681: PUSH
27682: EMPTY
27683: LIST
27684: LIST
27685: PUSH
27686: LD_INT 2
27688: NEG
27689: PUSH
27690: LD_INT 0
27692: PUSH
27693: EMPTY
27694: LIST
27695: LIST
27696: PUSH
27697: LD_INT 2
27699: NEG
27700: PUSH
27701: LD_INT 1
27703: NEG
27704: PUSH
27705: EMPTY
27706: LIST
27707: LIST
27708: PUSH
27709: LD_INT 2
27711: NEG
27712: PUSH
27713: LD_INT 2
27715: NEG
27716: PUSH
27717: EMPTY
27718: LIST
27719: LIST
27720: PUSH
27721: LD_INT 2
27723: NEG
27724: PUSH
27725: LD_INT 3
27727: NEG
27728: PUSH
27729: EMPTY
27730: LIST
27731: LIST
27732: PUSH
27733: LD_INT 1
27735: NEG
27736: PUSH
27737: LD_INT 3
27739: NEG
27740: PUSH
27741: EMPTY
27742: LIST
27743: LIST
27744: PUSH
27745: LD_INT 3
27747: NEG
27748: PUSH
27749: LD_INT 1
27751: NEG
27752: PUSH
27753: EMPTY
27754: LIST
27755: LIST
27756: PUSH
27757: LD_INT 3
27759: NEG
27760: PUSH
27761: LD_INT 2
27763: NEG
27764: PUSH
27765: EMPTY
27766: LIST
27767: LIST
27768: PUSH
27769: EMPTY
27770: LIST
27771: LIST
27772: LIST
27773: LIST
27774: LIST
27775: LIST
27776: LIST
27777: LIST
27778: LIST
27779: LIST
27780: LIST
27781: LIST
27782: LIST
27783: LIST
27784: LIST
27785: LIST
27786: LIST
27787: LIST
27788: LIST
27789: LIST
27790: LIST
27791: LIST
27792: LIST
27793: ST_TO_ADDR
// fFactory0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
27794: LD_ADDR_VAR 0 29
27798: PUSH
27799: LD_INT 0
27801: PUSH
27802: LD_INT 0
27804: PUSH
27805: EMPTY
27806: LIST
27807: LIST
27808: PUSH
27809: LD_INT 0
27811: PUSH
27812: LD_INT 1
27814: NEG
27815: PUSH
27816: EMPTY
27817: LIST
27818: LIST
27819: PUSH
27820: LD_INT 1
27822: PUSH
27823: LD_INT 0
27825: PUSH
27826: EMPTY
27827: LIST
27828: LIST
27829: PUSH
27830: LD_INT 1
27832: PUSH
27833: LD_INT 1
27835: PUSH
27836: EMPTY
27837: LIST
27838: LIST
27839: PUSH
27840: LD_INT 0
27842: PUSH
27843: LD_INT 1
27845: PUSH
27846: EMPTY
27847: LIST
27848: LIST
27849: PUSH
27850: LD_INT 1
27852: NEG
27853: PUSH
27854: LD_INT 0
27856: PUSH
27857: EMPTY
27858: LIST
27859: LIST
27860: PUSH
27861: LD_INT 1
27863: NEG
27864: PUSH
27865: LD_INT 1
27867: NEG
27868: PUSH
27869: EMPTY
27870: LIST
27871: LIST
27872: PUSH
27873: LD_INT 1
27875: NEG
27876: PUSH
27877: LD_INT 2
27879: NEG
27880: PUSH
27881: EMPTY
27882: LIST
27883: LIST
27884: PUSH
27885: LD_INT 0
27887: PUSH
27888: LD_INT 2
27890: NEG
27891: PUSH
27892: EMPTY
27893: LIST
27894: LIST
27895: PUSH
27896: LD_INT 1
27898: PUSH
27899: LD_INT 1
27901: NEG
27902: PUSH
27903: EMPTY
27904: LIST
27905: LIST
27906: PUSH
27907: LD_INT 2
27909: PUSH
27910: LD_INT 0
27912: PUSH
27913: EMPTY
27914: LIST
27915: LIST
27916: PUSH
27917: LD_INT 2
27919: PUSH
27920: LD_INT 1
27922: PUSH
27923: EMPTY
27924: LIST
27925: LIST
27926: PUSH
27927: LD_INT 1
27929: PUSH
27930: LD_INT 2
27932: PUSH
27933: EMPTY
27934: LIST
27935: LIST
27936: PUSH
27937: LD_INT 0
27939: PUSH
27940: LD_INT 2
27942: PUSH
27943: EMPTY
27944: LIST
27945: LIST
27946: PUSH
27947: LD_INT 1
27949: NEG
27950: PUSH
27951: LD_INT 1
27953: PUSH
27954: EMPTY
27955: LIST
27956: LIST
27957: PUSH
27958: LD_INT 2
27960: NEG
27961: PUSH
27962: LD_INT 1
27964: NEG
27965: PUSH
27966: EMPTY
27967: LIST
27968: LIST
27969: PUSH
27970: LD_INT 2
27972: NEG
27973: PUSH
27974: LD_INT 2
27976: NEG
27977: PUSH
27978: EMPTY
27979: LIST
27980: LIST
27981: PUSH
27982: LD_INT 2
27984: NEG
27985: PUSH
27986: LD_INT 3
27988: NEG
27989: PUSH
27990: EMPTY
27991: LIST
27992: LIST
27993: PUSH
27994: LD_INT 2
27996: PUSH
27997: LD_INT 1
27999: NEG
28000: PUSH
28001: EMPTY
28002: LIST
28003: LIST
28004: PUSH
28005: LD_INT 3
28007: PUSH
28008: LD_INT 1
28010: PUSH
28011: EMPTY
28012: LIST
28013: LIST
28014: PUSH
28015: LD_INT 1
28017: PUSH
28018: LD_INT 3
28020: PUSH
28021: EMPTY
28022: LIST
28023: LIST
28024: PUSH
28025: LD_INT 1
28027: NEG
28028: PUSH
28029: LD_INT 2
28031: PUSH
28032: EMPTY
28033: LIST
28034: LIST
28035: PUSH
28036: LD_INT 3
28038: NEG
28039: PUSH
28040: LD_INT 2
28042: NEG
28043: PUSH
28044: EMPTY
28045: LIST
28046: LIST
28047: PUSH
28048: EMPTY
28049: LIST
28050: LIST
28051: LIST
28052: LIST
28053: LIST
28054: LIST
28055: LIST
28056: LIST
28057: LIST
28058: LIST
28059: LIST
28060: LIST
28061: LIST
28062: LIST
28063: LIST
28064: LIST
28065: LIST
28066: LIST
28067: LIST
28068: LIST
28069: LIST
28070: LIST
28071: LIST
28072: ST_TO_ADDR
// fFactory1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28073: LD_ADDR_VAR 0 30
28077: PUSH
28078: LD_INT 0
28080: PUSH
28081: LD_INT 0
28083: PUSH
28084: EMPTY
28085: LIST
28086: LIST
28087: PUSH
28088: LD_INT 0
28090: PUSH
28091: LD_INT 1
28093: NEG
28094: PUSH
28095: EMPTY
28096: LIST
28097: LIST
28098: PUSH
28099: LD_INT 1
28101: PUSH
28102: LD_INT 0
28104: PUSH
28105: EMPTY
28106: LIST
28107: LIST
28108: PUSH
28109: LD_INT 1
28111: PUSH
28112: LD_INT 1
28114: PUSH
28115: EMPTY
28116: LIST
28117: LIST
28118: PUSH
28119: LD_INT 0
28121: PUSH
28122: LD_INT 1
28124: PUSH
28125: EMPTY
28126: LIST
28127: LIST
28128: PUSH
28129: LD_INT 1
28131: NEG
28132: PUSH
28133: LD_INT 0
28135: PUSH
28136: EMPTY
28137: LIST
28138: LIST
28139: PUSH
28140: LD_INT 1
28142: NEG
28143: PUSH
28144: LD_INT 1
28146: NEG
28147: PUSH
28148: EMPTY
28149: LIST
28150: LIST
28151: PUSH
28152: LD_INT 1
28154: NEG
28155: PUSH
28156: LD_INT 2
28158: NEG
28159: PUSH
28160: EMPTY
28161: LIST
28162: LIST
28163: PUSH
28164: LD_INT 0
28166: PUSH
28167: LD_INT 2
28169: NEG
28170: PUSH
28171: EMPTY
28172: LIST
28173: LIST
28174: PUSH
28175: LD_INT 1
28177: PUSH
28178: LD_INT 1
28180: NEG
28181: PUSH
28182: EMPTY
28183: LIST
28184: LIST
28185: PUSH
28186: LD_INT 2
28188: PUSH
28189: LD_INT 0
28191: PUSH
28192: EMPTY
28193: LIST
28194: LIST
28195: PUSH
28196: LD_INT 2
28198: PUSH
28199: LD_INT 1
28201: PUSH
28202: EMPTY
28203: LIST
28204: LIST
28205: PUSH
28206: LD_INT 2
28208: PUSH
28209: LD_INT 2
28211: PUSH
28212: EMPTY
28213: LIST
28214: LIST
28215: PUSH
28216: LD_INT 1
28218: PUSH
28219: LD_INT 2
28221: PUSH
28222: EMPTY
28223: LIST
28224: LIST
28225: PUSH
28226: LD_INT 1
28228: NEG
28229: PUSH
28230: LD_INT 1
28232: PUSH
28233: EMPTY
28234: LIST
28235: LIST
28236: PUSH
28237: LD_INT 2
28239: NEG
28240: PUSH
28241: LD_INT 0
28243: PUSH
28244: EMPTY
28245: LIST
28246: LIST
28247: PUSH
28248: LD_INT 2
28250: NEG
28251: PUSH
28252: LD_INT 1
28254: NEG
28255: PUSH
28256: EMPTY
28257: LIST
28258: LIST
28259: PUSH
28260: LD_INT 1
28262: NEG
28263: PUSH
28264: LD_INT 3
28266: NEG
28267: PUSH
28268: EMPTY
28269: LIST
28270: LIST
28271: PUSH
28272: LD_INT 1
28274: PUSH
28275: LD_INT 2
28277: NEG
28278: PUSH
28279: EMPTY
28280: LIST
28281: LIST
28282: PUSH
28283: LD_INT 3
28285: PUSH
28286: LD_INT 2
28288: PUSH
28289: EMPTY
28290: LIST
28291: LIST
28292: PUSH
28293: LD_INT 2
28295: PUSH
28296: LD_INT 3
28298: PUSH
28299: EMPTY
28300: LIST
28301: LIST
28302: PUSH
28303: LD_INT 2
28305: NEG
28306: PUSH
28307: LD_INT 1
28309: PUSH
28310: EMPTY
28311: LIST
28312: LIST
28313: PUSH
28314: LD_INT 3
28316: NEG
28317: PUSH
28318: LD_INT 1
28320: NEG
28321: PUSH
28322: EMPTY
28323: LIST
28324: LIST
28325: PUSH
28326: EMPTY
28327: LIST
28328: LIST
28329: LIST
28330: LIST
28331: LIST
28332: LIST
28333: LIST
28334: LIST
28335: LIST
28336: LIST
28337: LIST
28338: LIST
28339: LIST
28340: LIST
28341: LIST
28342: LIST
28343: LIST
28344: LIST
28345: LIST
28346: LIST
28347: LIST
28348: LIST
28349: LIST
28350: ST_TO_ADDR
// fFactory2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28351: LD_ADDR_VAR 0 31
28355: PUSH
28356: LD_INT 0
28358: PUSH
28359: LD_INT 0
28361: PUSH
28362: EMPTY
28363: LIST
28364: LIST
28365: PUSH
28366: LD_INT 0
28368: PUSH
28369: LD_INT 1
28371: NEG
28372: PUSH
28373: EMPTY
28374: LIST
28375: LIST
28376: PUSH
28377: LD_INT 1
28379: PUSH
28380: LD_INT 0
28382: PUSH
28383: EMPTY
28384: LIST
28385: LIST
28386: PUSH
28387: LD_INT 1
28389: PUSH
28390: LD_INT 1
28392: PUSH
28393: EMPTY
28394: LIST
28395: LIST
28396: PUSH
28397: LD_INT 0
28399: PUSH
28400: LD_INT 1
28402: PUSH
28403: EMPTY
28404: LIST
28405: LIST
28406: PUSH
28407: LD_INT 1
28409: NEG
28410: PUSH
28411: LD_INT 0
28413: PUSH
28414: EMPTY
28415: LIST
28416: LIST
28417: PUSH
28418: LD_INT 1
28420: NEG
28421: PUSH
28422: LD_INT 1
28424: NEG
28425: PUSH
28426: EMPTY
28427: LIST
28428: LIST
28429: PUSH
28430: LD_INT 1
28432: NEG
28433: PUSH
28434: LD_INT 2
28436: NEG
28437: PUSH
28438: EMPTY
28439: LIST
28440: LIST
28441: PUSH
28442: LD_INT 1
28444: PUSH
28445: LD_INT 1
28447: NEG
28448: PUSH
28449: EMPTY
28450: LIST
28451: LIST
28452: PUSH
28453: LD_INT 2
28455: PUSH
28456: LD_INT 0
28458: PUSH
28459: EMPTY
28460: LIST
28461: LIST
28462: PUSH
28463: LD_INT 2
28465: PUSH
28466: LD_INT 1
28468: PUSH
28469: EMPTY
28470: LIST
28471: LIST
28472: PUSH
28473: LD_INT 2
28475: PUSH
28476: LD_INT 2
28478: PUSH
28479: EMPTY
28480: LIST
28481: LIST
28482: PUSH
28483: LD_INT 1
28485: PUSH
28486: LD_INT 2
28488: PUSH
28489: EMPTY
28490: LIST
28491: LIST
28492: PUSH
28493: LD_INT 0
28495: PUSH
28496: LD_INT 2
28498: PUSH
28499: EMPTY
28500: LIST
28501: LIST
28502: PUSH
28503: LD_INT 1
28505: NEG
28506: PUSH
28507: LD_INT 1
28509: PUSH
28510: EMPTY
28511: LIST
28512: LIST
28513: PUSH
28514: LD_INT 2
28516: NEG
28517: PUSH
28518: LD_INT 1
28520: NEG
28521: PUSH
28522: EMPTY
28523: LIST
28524: LIST
28525: PUSH
28526: LD_INT 2
28528: NEG
28529: PUSH
28530: LD_INT 2
28532: NEG
28533: PUSH
28534: EMPTY
28535: LIST
28536: LIST
28537: PUSH
28538: LD_INT 2
28540: NEG
28541: PUSH
28542: LD_INT 3
28544: NEG
28545: PUSH
28546: EMPTY
28547: LIST
28548: LIST
28549: PUSH
28550: LD_INT 2
28552: PUSH
28553: LD_INT 1
28555: NEG
28556: PUSH
28557: EMPTY
28558: LIST
28559: LIST
28560: PUSH
28561: LD_INT 3
28563: PUSH
28564: LD_INT 1
28566: PUSH
28567: EMPTY
28568: LIST
28569: LIST
28570: PUSH
28571: LD_INT 1
28573: PUSH
28574: LD_INT 3
28576: PUSH
28577: EMPTY
28578: LIST
28579: LIST
28580: PUSH
28581: LD_INT 1
28583: NEG
28584: PUSH
28585: LD_INT 2
28587: PUSH
28588: EMPTY
28589: LIST
28590: LIST
28591: PUSH
28592: LD_INT 3
28594: NEG
28595: PUSH
28596: LD_INT 2
28598: NEG
28599: PUSH
28600: EMPTY
28601: LIST
28602: LIST
28603: PUSH
28604: EMPTY
28605: LIST
28606: LIST
28607: LIST
28608: LIST
28609: LIST
28610: LIST
28611: LIST
28612: LIST
28613: LIST
28614: LIST
28615: LIST
28616: LIST
28617: LIST
28618: LIST
28619: LIST
28620: LIST
28621: LIST
28622: LIST
28623: LIST
28624: LIST
28625: LIST
28626: LIST
28627: LIST
28628: ST_TO_ADDR
// fFactory3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
28629: LD_ADDR_VAR 0 32
28633: PUSH
28634: LD_INT 0
28636: PUSH
28637: LD_INT 0
28639: PUSH
28640: EMPTY
28641: LIST
28642: LIST
28643: PUSH
28644: LD_INT 0
28646: PUSH
28647: LD_INT 1
28649: NEG
28650: PUSH
28651: EMPTY
28652: LIST
28653: LIST
28654: PUSH
28655: LD_INT 1
28657: PUSH
28658: LD_INT 0
28660: PUSH
28661: EMPTY
28662: LIST
28663: LIST
28664: PUSH
28665: LD_INT 1
28667: PUSH
28668: LD_INT 1
28670: PUSH
28671: EMPTY
28672: LIST
28673: LIST
28674: PUSH
28675: LD_INT 0
28677: PUSH
28678: LD_INT 1
28680: PUSH
28681: EMPTY
28682: LIST
28683: LIST
28684: PUSH
28685: LD_INT 1
28687: NEG
28688: PUSH
28689: LD_INT 0
28691: PUSH
28692: EMPTY
28693: LIST
28694: LIST
28695: PUSH
28696: LD_INT 1
28698: NEG
28699: PUSH
28700: LD_INT 1
28702: NEG
28703: PUSH
28704: EMPTY
28705: LIST
28706: LIST
28707: PUSH
28708: LD_INT 1
28710: NEG
28711: PUSH
28712: LD_INT 2
28714: NEG
28715: PUSH
28716: EMPTY
28717: LIST
28718: LIST
28719: PUSH
28720: LD_INT 0
28722: PUSH
28723: LD_INT 2
28725: NEG
28726: PUSH
28727: EMPTY
28728: LIST
28729: LIST
28730: PUSH
28731: LD_INT 1
28733: PUSH
28734: LD_INT 1
28736: NEG
28737: PUSH
28738: EMPTY
28739: LIST
28740: LIST
28741: PUSH
28742: LD_INT 2
28744: PUSH
28745: LD_INT 1
28747: PUSH
28748: EMPTY
28749: LIST
28750: LIST
28751: PUSH
28752: LD_INT 2
28754: PUSH
28755: LD_INT 2
28757: PUSH
28758: EMPTY
28759: LIST
28760: LIST
28761: PUSH
28762: LD_INT 1
28764: PUSH
28765: LD_INT 2
28767: PUSH
28768: EMPTY
28769: LIST
28770: LIST
28771: PUSH
28772: LD_INT 0
28774: PUSH
28775: LD_INT 2
28777: PUSH
28778: EMPTY
28779: LIST
28780: LIST
28781: PUSH
28782: LD_INT 1
28784: NEG
28785: PUSH
28786: LD_INT 1
28788: PUSH
28789: EMPTY
28790: LIST
28791: LIST
28792: PUSH
28793: LD_INT 2
28795: NEG
28796: PUSH
28797: LD_INT 0
28799: PUSH
28800: EMPTY
28801: LIST
28802: LIST
28803: PUSH
28804: LD_INT 2
28806: NEG
28807: PUSH
28808: LD_INT 1
28810: NEG
28811: PUSH
28812: EMPTY
28813: LIST
28814: LIST
28815: PUSH
28816: LD_INT 1
28818: NEG
28819: PUSH
28820: LD_INT 3
28822: NEG
28823: PUSH
28824: EMPTY
28825: LIST
28826: LIST
28827: PUSH
28828: LD_INT 1
28830: PUSH
28831: LD_INT 2
28833: NEG
28834: PUSH
28835: EMPTY
28836: LIST
28837: LIST
28838: PUSH
28839: LD_INT 3
28841: PUSH
28842: LD_INT 2
28844: PUSH
28845: EMPTY
28846: LIST
28847: LIST
28848: PUSH
28849: LD_INT 2
28851: PUSH
28852: LD_INT 3
28854: PUSH
28855: EMPTY
28856: LIST
28857: LIST
28858: PUSH
28859: LD_INT 2
28861: NEG
28862: PUSH
28863: LD_INT 1
28865: PUSH
28866: EMPTY
28867: LIST
28868: LIST
28869: PUSH
28870: LD_INT 3
28872: NEG
28873: PUSH
28874: LD_INT 1
28876: NEG
28877: PUSH
28878: EMPTY
28879: LIST
28880: LIST
28881: PUSH
28882: EMPTY
28883: LIST
28884: LIST
28885: LIST
28886: LIST
28887: LIST
28888: LIST
28889: LIST
28890: LIST
28891: LIST
28892: LIST
28893: LIST
28894: LIST
28895: LIST
28896: LIST
28897: LIST
28898: LIST
28899: LIST
28900: LIST
28901: LIST
28902: LIST
28903: LIST
28904: LIST
28905: LIST
28906: ST_TO_ADDR
// fFactory4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] ] ;
28907: LD_ADDR_VAR 0 33
28911: PUSH
28912: LD_INT 0
28914: PUSH
28915: LD_INT 0
28917: PUSH
28918: EMPTY
28919: LIST
28920: LIST
28921: PUSH
28922: LD_INT 0
28924: PUSH
28925: LD_INT 1
28927: NEG
28928: PUSH
28929: EMPTY
28930: LIST
28931: LIST
28932: PUSH
28933: LD_INT 1
28935: PUSH
28936: LD_INT 0
28938: PUSH
28939: EMPTY
28940: LIST
28941: LIST
28942: PUSH
28943: LD_INT 1
28945: PUSH
28946: LD_INT 1
28948: PUSH
28949: EMPTY
28950: LIST
28951: LIST
28952: PUSH
28953: LD_INT 0
28955: PUSH
28956: LD_INT 1
28958: PUSH
28959: EMPTY
28960: LIST
28961: LIST
28962: PUSH
28963: LD_INT 1
28965: NEG
28966: PUSH
28967: LD_INT 0
28969: PUSH
28970: EMPTY
28971: LIST
28972: LIST
28973: PUSH
28974: LD_INT 1
28976: NEG
28977: PUSH
28978: LD_INT 1
28980: NEG
28981: PUSH
28982: EMPTY
28983: LIST
28984: LIST
28985: PUSH
28986: LD_INT 1
28988: NEG
28989: PUSH
28990: LD_INT 2
28992: NEG
28993: PUSH
28994: EMPTY
28995: LIST
28996: LIST
28997: PUSH
28998: LD_INT 1
29000: PUSH
29001: LD_INT 1
29003: NEG
29004: PUSH
29005: EMPTY
29006: LIST
29007: LIST
29008: PUSH
29009: LD_INT 2
29011: PUSH
29012: LD_INT 0
29014: PUSH
29015: EMPTY
29016: LIST
29017: LIST
29018: PUSH
29019: LD_INT 2
29021: PUSH
29022: LD_INT 1
29024: PUSH
29025: EMPTY
29026: LIST
29027: LIST
29028: PUSH
29029: LD_INT 1
29031: PUSH
29032: LD_INT 2
29034: PUSH
29035: EMPTY
29036: LIST
29037: LIST
29038: PUSH
29039: LD_INT 0
29041: PUSH
29042: LD_INT 2
29044: PUSH
29045: EMPTY
29046: LIST
29047: LIST
29048: PUSH
29049: LD_INT 1
29051: NEG
29052: PUSH
29053: LD_INT 1
29055: PUSH
29056: EMPTY
29057: LIST
29058: LIST
29059: PUSH
29060: LD_INT 2
29062: NEG
29063: PUSH
29064: LD_INT 0
29066: PUSH
29067: EMPTY
29068: LIST
29069: LIST
29070: PUSH
29071: LD_INT 2
29073: NEG
29074: PUSH
29075: LD_INT 1
29077: NEG
29078: PUSH
29079: EMPTY
29080: LIST
29081: LIST
29082: PUSH
29083: LD_INT 2
29085: NEG
29086: PUSH
29087: LD_INT 2
29089: NEG
29090: PUSH
29091: EMPTY
29092: LIST
29093: LIST
29094: PUSH
29095: LD_INT 2
29097: NEG
29098: PUSH
29099: LD_INT 3
29101: NEG
29102: PUSH
29103: EMPTY
29104: LIST
29105: LIST
29106: PUSH
29107: LD_INT 2
29109: PUSH
29110: LD_INT 1
29112: NEG
29113: PUSH
29114: EMPTY
29115: LIST
29116: LIST
29117: PUSH
29118: LD_INT 3
29120: PUSH
29121: LD_INT 1
29123: PUSH
29124: EMPTY
29125: LIST
29126: LIST
29127: PUSH
29128: LD_INT 1
29130: PUSH
29131: LD_INT 3
29133: PUSH
29134: EMPTY
29135: LIST
29136: LIST
29137: PUSH
29138: LD_INT 1
29140: NEG
29141: PUSH
29142: LD_INT 2
29144: PUSH
29145: EMPTY
29146: LIST
29147: LIST
29148: PUSH
29149: LD_INT 3
29151: NEG
29152: PUSH
29153: LD_INT 2
29155: NEG
29156: PUSH
29157: EMPTY
29158: LIST
29159: LIST
29160: PUSH
29161: EMPTY
29162: LIST
29163: LIST
29164: LIST
29165: LIST
29166: LIST
29167: LIST
29168: LIST
29169: LIST
29170: LIST
29171: LIST
29172: LIST
29173: LIST
29174: LIST
29175: LIST
29176: LIST
29177: LIST
29178: LIST
29179: LIST
29180: LIST
29181: LIST
29182: LIST
29183: LIST
29184: LIST
29185: ST_TO_ADDR
// fFactory5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
29186: LD_ADDR_VAR 0 34
29190: PUSH
29191: LD_INT 0
29193: PUSH
29194: LD_INT 0
29196: PUSH
29197: EMPTY
29198: LIST
29199: LIST
29200: PUSH
29201: LD_INT 0
29203: PUSH
29204: LD_INT 1
29206: NEG
29207: PUSH
29208: EMPTY
29209: LIST
29210: LIST
29211: PUSH
29212: LD_INT 1
29214: PUSH
29215: LD_INT 0
29217: PUSH
29218: EMPTY
29219: LIST
29220: LIST
29221: PUSH
29222: LD_INT 1
29224: PUSH
29225: LD_INT 1
29227: PUSH
29228: EMPTY
29229: LIST
29230: LIST
29231: PUSH
29232: LD_INT 0
29234: PUSH
29235: LD_INT 1
29237: PUSH
29238: EMPTY
29239: LIST
29240: LIST
29241: PUSH
29242: LD_INT 1
29244: NEG
29245: PUSH
29246: LD_INT 0
29248: PUSH
29249: EMPTY
29250: LIST
29251: LIST
29252: PUSH
29253: LD_INT 1
29255: NEG
29256: PUSH
29257: LD_INT 1
29259: NEG
29260: PUSH
29261: EMPTY
29262: LIST
29263: LIST
29264: PUSH
29265: LD_INT 1
29267: NEG
29268: PUSH
29269: LD_INT 2
29271: NEG
29272: PUSH
29273: EMPTY
29274: LIST
29275: LIST
29276: PUSH
29277: LD_INT 0
29279: PUSH
29280: LD_INT 2
29282: NEG
29283: PUSH
29284: EMPTY
29285: LIST
29286: LIST
29287: PUSH
29288: LD_INT 1
29290: PUSH
29291: LD_INT 1
29293: NEG
29294: PUSH
29295: EMPTY
29296: LIST
29297: LIST
29298: PUSH
29299: LD_INT 2
29301: PUSH
29302: LD_INT 1
29304: PUSH
29305: EMPTY
29306: LIST
29307: LIST
29308: PUSH
29309: LD_INT 2
29311: PUSH
29312: LD_INT 2
29314: PUSH
29315: EMPTY
29316: LIST
29317: LIST
29318: PUSH
29319: LD_INT 1
29321: PUSH
29322: LD_INT 2
29324: PUSH
29325: EMPTY
29326: LIST
29327: LIST
29328: PUSH
29329: LD_INT 1
29331: NEG
29332: PUSH
29333: LD_INT 1
29335: PUSH
29336: EMPTY
29337: LIST
29338: LIST
29339: PUSH
29340: LD_INT 2
29342: NEG
29343: PUSH
29344: LD_INT 0
29346: PUSH
29347: EMPTY
29348: LIST
29349: LIST
29350: PUSH
29351: LD_INT 2
29353: NEG
29354: PUSH
29355: LD_INT 1
29357: NEG
29358: PUSH
29359: EMPTY
29360: LIST
29361: LIST
29362: PUSH
29363: LD_INT 2
29365: NEG
29366: PUSH
29367: LD_INT 2
29369: NEG
29370: PUSH
29371: EMPTY
29372: LIST
29373: LIST
29374: PUSH
29375: LD_INT 1
29377: NEG
29378: PUSH
29379: LD_INT 3
29381: NEG
29382: PUSH
29383: EMPTY
29384: LIST
29385: LIST
29386: PUSH
29387: LD_INT 1
29389: PUSH
29390: LD_INT 2
29392: NEG
29393: PUSH
29394: EMPTY
29395: LIST
29396: LIST
29397: PUSH
29398: LD_INT 3
29400: PUSH
29401: LD_INT 2
29403: PUSH
29404: EMPTY
29405: LIST
29406: LIST
29407: PUSH
29408: LD_INT 2
29410: PUSH
29411: LD_INT 3
29413: PUSH
29414: EMPTY
29415: LIST
29416: LIST
29417: PUSH
29418: LD_INT 2
29420: NEG
29421: PUSH
29422: LD_INT 1
29424: PUSH
29425: EMPTY
29426: LIST
29427: LIST
29428: PUSH
29429: LD_INT 3
29431: NEG
29432: PUSH
29433: LD_INT 1
29435: NEG
29436: PUSH
29437: EMPTY
29438: LIST
29439: LIST
29440: PUSH
29441: EMPTY
29442: LIST
29443: LIST
29444: LIST
29445: LIST
29446: LIST
29447: LIST
29448: LIST
29449: LIST
29450: LIST
29451: LIST
29452: LIST
29453: LIST
29454: LIST
29455: LIST
29456: LIST
29457: LIST
29458: LIST
29459: LIST
29460: LIST
29461: LIST
29462: LIST
29463: LIST
29464: LIST
29465: ST_TO_ADDR
// fExt0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29466: LD_ADDR_VAR 0 35
29470: PUSH
29471: LD_INT 0
29473: PUSH
29474: LD_INT 0
29476: PUSH
29477: EMPTY
29478: LIST
29479: LIST
29480: PUSH
29481: LD_INT 0
29483: PUSH
29484: LD_INT 1
29486: NEG
29487: PUSH
29488: EMPTY
29489: LIST
29490: LIST
29491: PUSH
29492: LD_INT 1
29494: PUSH
29495: LD_INT 0
29497: PUSH
29498: EMPTY
29499: LIST
29500: LIST
29501: PUSH
29502: LD_INT 1
29504: PUSH
29505: LD_INT 1
29507: PUSH
29508: EMPTY
29509: LIST
29510: LIST
29511: PUSH
29512: LD_INT 0
29514: PUSH
29515: LD_INT 1
29517: PUSH
29518: EMPTY
29519: LIST
29520: LIST
29521: PUSH
29522: LD_INT 1
29524: NEG
29525: PUSH
29526: LD_INT 0
29528: PUSH
29529: EMPTY
29530: LIST
29531: LIST
29532: PUSH
29533: LD_INT 1
29535: NEG
29536: PUSH
29537: LD_INT 1
29539: NEG
29540: PUSH
29541: EMPTY
29542: LIST
29543: LIST
29544: PUSH
29545: LD_INT 2
29547: PUSH
29548: LD_INT 1
29550: PUSH
29551: EMPTY
29552: LIST
29553: LIST
29554: PUSH
29555: LD_INT 2
29557: NEG
29558: PUSH
29559: LD_INT 1
29561: NEG
29562: PUSH
29563: EMPTY
29564: LIST
29565: LIST
29566: PUSH
29567: EMPTY
29568: LIST
29569: LIST
29570: LIST
29571: LIST
29572: LIST
29573: LIST
29574: LIST
29575: LIST
29576: LIST
29577: ST_TO_ADDR
// fExt1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29578: LD_ADDR_VAR 0 36
29582: PUSH
29583: LD_INT 0
29585: PUSH
29586: LD_INT 0
29588: PUSH
29589: EMPTY
29590: LIST
29591: LIST
29592: PUSH
29593: LD_INT 0
29595: PUSH
29596: LD_INT 1
29598: NEG
29599: PUSH
29600: EMPTY
29601: LIST
29602: LIST
29603: PUSH
29604: LD_INT 1
29606: PUSH
29607: LD_INT 0
29609: PUSH
29610: EMPTY
29611: LIST
29612: LIST
29613: PUSH
29614: LD_INT 1
29616: PUSH
29617: LD_INT 1
29619: PUSH
29620: EMPTY
29621: LIST
29622: LIST
29623: PUSH
29624: LD_INT 0
29626: PUSH
29627: LD_INT 1
29629: PUSH
29630: EMPTY
29631: LIST
29632: LIST
29633: PUSH
29634: LD_INT 1
29636: NEG
29637: PUSH
29638: LD_INT 0
29640: PUSH
29641: EMPTY
29642: LIST
29643: LIST
29644: PUSH
29645: LD_INT 1
29647: NEG
29648: PUSH
29649: LD_INT 1
29651: NEG
29652: PUSH
29653: EMPTY
29654: LIST
29655: LIST
29656: PUSH
29657: LD_INT 1
29659: NEG
29660: PUSH
29661: LD_INT 2
29663: NEG
29664: PUSH
29665: EMPTY
29666: LIST
29667: LIST
29668: PUSH
29669: LD_INT 1
29671: PUSH
29672: LD_INT 2
29674: PUSH
29675: EMPTY
29676: LIST
29677: LIST
29678: PUSH
29679: EMPTY
29680: LIST
29681: LIST
29682: LIST
29683: LIST
29684: LIST
29685: LIST
29686: LIST
29687: LIST
29688: LIST
29689: ST_TO_ADDR
// fExt2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
29690: LD_ADDR_VAR 0 37
29694: PUSH
29695: LD_INT 0
29697: PUSH
29698: LD_INT 0
29700: PUSH
29701: EMPTY
29702: LIST
29703: LIST
29704: PUSH
29705: LD_INT 0
29707: PUSH
29708: LD_INT 1
29710: NEG
29711: PUSH
29712: EMPTY
29713: LIST
29714: LIST
29715: PUSH
29716: LD_INT 1
29718: PUSH
29719: LD_INT 0
29721: PUSH
29722: EMPTY
29723: LIST
29724: LIST
29725: PUSH
29726: LD_INT 1
29728: PUSH
29729: LD_INT 1
29731: PUSH
29732: EMPTY
29733: LIST
29734: LIST
29735: PUSH
29736: LD_INT 0
29738: PUSH
29739: LD_INT 1
29741: PUSH
29742: EMPTY
29743: LIST
29744: LIST
29745: PUSH
29746: LD_INT 1
29748: NEG
29749: PUSH
29750: LD_INT 0
29752: PUSH
29753: EMPTY
29754: LIST
29755: LIST
29756: PUSH
29757: LD_INT 1
29759: NEG
29760: PUSH
29761: LD_INT 1
29763: NEG
29764: PUSH
29765: EMPTY
29766: LIST
29767: LIST
29768: PUSH
29769: LD_INT 1
29771: PUSH
29772: LD_INT 1
29774: NEG
29775: PUSH
29776: EMPTY
29777: LIST
29778: LIST
29779: PUSH
29780: LD_INT 1
29782: NEG
29783: PUSH
29784: LD_INT 1
29786: PUSH
29787: EMPTY
29788: LIST
29789: LIST
29790: PUSH
29791: EMPTY
29792: LIST
29793: LIST
29794: LIST
29795: LIST
29796: LIST
29797: LIST
29798: LIST
29799: LIST
29800: LIST
29801: ST_TO_ADDR
// fExt3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ - 2 , - 1 ] ] ;
29802: LD_ADDR_VAR 0 38
29806: PUSH
29807: LD_INT 0
29809: PUSH
29810: LD_INT 0
29812: PUSH
29813: EMPTY
29814: LIST
29815: LIST
29816: PUSH
29817: LD_INT 0
29819: PUSH
29820: LD_INT 1
29822: NEG
29823: PUSH
29824: EMPTY
29825: LIST
29826: LIST
29827: PUSH
29828: LD_INT 1
29830: PUSH
29831: LD_INT 0
29833: PUSH
29834: EMPTY
29835: LIST
29836: LIST
29837: PUSH
29838: LD_INT 1
29840: PUSH
29841: LD_INT 1
29843: PUSH
29844: EMPTY
29845: LIST
29846: LIST
29847: PUSH
29848: LD_INT 0
29850: PUSH
29851: LD_INT 1
29853: PUSH
29854: EMPTY
29855: LIST
29856: LIST
29857: PUSH
29858: LD_INT 1
29860: NEG
29861: PUSH
29862: LD_INT 0
29864: PUSH
29865: EMPTY
29866: LIST
29867: LIST
29868: PUSH
29869: LD_INT 1
29871: NEG
29872: PUSH
29873: LD_INT 1
29875: NEG
29876: PUSH
29877: EMPTY
29878: LIST
29879: LIST
29880: PUSH
29881: LD_INT 2
29883: PUSH
29884: LD_INT 1
29886: PUSH
29887: EMPTY
29888: LIST
29889: LIST
29890: PUSH
29891: LD_INT 2
29893: NEG
29894: PUSH
29895: LD_INT 1
29897: NEG
29898: PUSH
29899: EMPTY
29900: LIST
29901: LIST
29902: PUSH
29903: EMPTY
29904: LIST
29905: LIST
29906: LIST
29907: LIST
29908: LIST
29909: LIST
29910: LIST
29911: LIST
29912: LIST
29913: ST_TO_ADDR
// fExt4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , 2 ] ] ;
29914: LD_ADDR_VAR 0 39
29918: PUSH
29919: LD_INT 0
29921: PUSH
29922: LD_INT 0
29924: PUSH
29925: EMPTY
29926: LIST
29927: LIST
29928: PUSH
29929: LD_INT 0
29931: PUSH
29932: LD_INT 1
29934: NEG
29935: PUSH
29936: EMPTY
29937: LIST
29938: LIST
29939: PUSH
29940: LD_INT 1
29942: PUSH
29943: LD_INT 0
29945: PUSH
29946: EMPTY
29947: LIST
29948: LIST
29949: PUSH
29950: LD_INT 1
29952: PUSH
29953: LD_INT 1
29955: PUSH
29956: EMPTY
29957: LIST
29958: LIST
29959: PUSH
29960: LD_INT 0
29962: PUSH
29963: LD_INT 1
29965: PUSH
29966: EMPTY
29967: LIST
29968: LIST
29969: PUSH
29970: LD_INT 1
29972: NEG
29973: PUSH
29974: LD_INT 0
29976: PUSH
29977: EMPTY
29978: LIST
29979: LIST
29980: PUSH
29981: LD_INT 1
29983: NEG
29984: PUSH
29985: LD_INT 1
29987: NEG
29988: PUSH
29989: EMPTY
29990: LIST
29991: LIST
29992: PUSH
29993: LD_INT 1
29995: NEG
29996: PUSH
29997: LD_INT 2
29999: NEG
30000: PUSH
30001: EMPTY
30002: LIST
30003: LIST
30004: PUSH
30005: LD_INT 1
30007: PUSH
30008: LD_INT 2
30010: PUSH
30011: EMPTY
30012: LIST
30013: LIST
30014: PUSH
30015: EMPTY
30016: LIST
30017: LIST
30018: LIST
30019: LIST
30020: LIST
30021: LIST
30022: LIST
30023: LIST
30024: LIST
30025: ST_TO_ADDR
// fExt5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ - 1 , 1 ] ] ;
30026: LD_ADDR_VAR 0 40
30030: PUSH
30031: LD_INT 0
30033: PUSH
30034: LD_INT 0
30036: PUSH
30037: EMPTY
30038: LIST
30039: LIST
30040: PUSH
30041: LD_INT 0
30043: PUSH
30044: LD_INT 1
30046: NEG
30047: PUSH
30048: EMPTY
30049: LIST
30050: LIST
30051: PUSH
30052: LD_INT 1
30054: PUSH
30055: LD_INT 0
30057: PUSH
30058: EMPTY
30059: LIST
30060: LIST
30061: PUSH
30062: LD_INT 1
30064: PUSH
30065: LD_INT 1
30067: PUSH
30068: EMPTY
30069: LIST
30070: LIST
30071: PUSH
30072: LD_INT 0
30074: PUSH
30075: LD_INT 1
30077: PUSH
30078: EMPTY
30079: LIST
30080: LIST
30081: PUSH
30082: LD_INT 1
30084: NEG
30085: PUSH
30086: LD_INT 0
30088: PUSH
30089: EMPTY
30090: LIST
30091: LIST
30092: PUSH
30093: LD_INT 1
30095: NEG
30096: PUSH
30097: LD_INT 1
30099: NEG
30100: PUSH
30101: EMPTY
30102: LIST
30103: LIST
30104: PUSH
30105: LD_INT 1
30107: PUSH
30108: LD_INT 1
30110: NEG
30111: PUSH
30112: EMPTY
30113: LIST
30114: LIST
30115: PUSH
30116: LD_INT 1
30118: NEG
30119: PUSH
30120: LD_INT 1
30122: PUSH
30123: EMPTY
30124: LIST
30125: LIST
30126: PUSH
30127: EMPTY
30128: LIST
30129: LIST
30130: LIST
30131: LIST
30132: LIST
30133: LIST
30134: LIST
30135: LIST
30136: LIST
30137: ST_TO_ADDR
// fLab0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30138: LD_ADDR_VAR 0 41
30142: PUSH
30143: LD_INT 0
30145: PUSH
30146: LD_INT 0
30148: PUSH
30149: EMPTY
30150: LIST
30151: LIST
30152: PUSH
30153: LD_INT 0
30155: PUSH
30156: LD_INT 1
30158: NEG
30159: PUSH
30160: EMPTY
30161: LIST
30162: LIST
30163: PUSH
30164: LD_INT 1
30166: PUSH
30167: LD_INT 0
30169: PUSH
30170: EMPTY
30171: LIST
30172: LIST
30173: PUSH
30174: LD_INT 1
30176: PUSH
30177: LD_INT 1
30179: PUSH
30180: EMPTY
30181: LIST
30182: LIST
30183: PUSH
30184: LD_INT 0
30186: PUSH
30187: LD_INT 1
30189: PUSH
30190: EMPTY
30191: LIST
30192: LIST
30193: PUSH
30194: LD_INT 1
30196: NEG
30197: PUSH
30198: LD_INT 0
30200: PUSH
30201: EMPTY
30202: LIST
30203: LIST
30204: PUSH
30205: LD_INT 1
30207: NEG
30208: PUSH
30209: LD_INT 1
30211: NEG
30212: PUSH
30213: EMPTY
30214: LIST
30215: LIST
30216: PUSH
30217: LD_INT 1
30219: NEG
30220: PUSH
30221: LD_INT 2
30223: NEG
30224: PUSH
30225: EMPTY
30226: LIST
30227: LIST
30228: PUSH
30229: LD_INT 1
30231: PUSH
30232: LD_INT 1
30234: NEG
30235: PUSH
30236: EMPTY
30237: LIST
30238: LIST
30239: PUSH
30240: LD_INT 2
30242: PUSH
30243: LD_INT 0
30245: PUSH
30246: EMPTY
30247: LIST
30248: LIST
30249: PUSH
30250: LD_INT 2
30252: PUSH
30253: LD_INT 1
30255: PUSH
30256: EMPTY
30257: LIST
30258: LIST
30259: PUSH
30260: LD_INT 2
30262: PUSH
30263: LD_INT 2
30265: PUSH
30266: EMPTY
30267: LIST
30268: LIST
30269: PUSH
30270: LD_INT 1
30272: PUSH
30273: LD_INT 2
30275: PUSH
30276: EMPTY
30277: LIST
30278: LIST
30279: PUSH
30280: LD_INT 1
30282: NEG
30283: PUSH
30284: LD_INT 1
30286: PUSH
30287: EMPTY
30288: LIST
30289: LIST
30290: PUSH
30291: LD_INT 2
30293: NEG
30294: PUSH
30295: LD_INT 0
30297: PUSH
30298: EMPTY
30299: LIST
30300: LIST
30301: PUSH
30302: LD_INT 2
30304: NEG
30305: PUSH
30306: LD_INT 1
30308: NEG
30309: PUSH
30310: EMPTY
30311: LIST
30312: LIST
30313: PUSH
30314: LD_INT 2
30316: NEG
30317: PUSH
30318: LD_INT 2
30320: NEG
30321: PUSH
30322: EMPTY
30323: LIST
30324: LIST
30325: PUSH
30326: LD_INT 2
30328: NEG
30329: PUSH
30330: LD_INT 3
30332: NEG
30333: PUSH
30334: EMPTY
30335: LIST
30336: LIST
30337: PUSH
30338: LD_INT 2
30340: PUSH
30341: LD_INT 1
30343: NEG
30344: PUSH
30345: EMPTY
30346: LIST
30347: LIST
30348: PUSH
30349: LD_INT 3
30351: PUSH
30352: LD_INT 0
30354: PUSH
30355: EMPTY
30356: LIST
30357: LIST
30358: PUSH
30359: LD_INT 3
30361: PUSH
30362: LD_INT 1
30364: PUSH
30365: EMPTY
30366: LIST
30367: LIST
30368: PUSH
30369: LD_INT 3
30371: PUSH
30372: LD_INT 2
30374: PUSH
30375: EMPTY
30376: LIST
30377: LIST
30378: PUSH
30379: LD_INT 3
30381: PUSH
30382: LD_INT 3
30384: PUSH
30385: EMPTY
30386: LIST
30387: LIST
30388: PUSH
30389: LD_INT 2
30391: PUSH
30392: LD_INT 3
30394: PUSH
30395: EMPTY
30396: LIST
30397: LIST
30398: PUSH
30399: LD_INT 2
30401: NEG
30402: PUSH
30403: LD_INT 1
30405: PUSH
30406: EMPTY
30407: LIST
30408: LIST
30409: PUSH
30410: LD_INT 3
30412: NEG
30413: PUSH
30414: LD_INT 0
30416: PUSH
30417: EMPTY
30418: LIST
30419: LIST
30420: PUSH
30421: LD_INT 3
30423: NEG
30424: PUSH
30425: LD_INT 1
30427: NEG
30428: PUSH
30429: EMPTY
30430: LIST
30431: LIST
30432: PUSH
30433: LD_INT 3
30435: NEG
30436: PUSH
30437: LD_INT 2
30439: NEG
30440: PUSH
30441: EMPTY
30442: LIST
30443: LIST
30444: PUSH
30445: LD_INT 3
30447: NEG
30448: PUSH
30449: LD_INT 3
30451: NEG
30452: PUSH
30453: EMPTY
30454: LIST
30455: LIST
30456: PUSH
30457: EMPTY
30458: LIST
30459: LIST
30460: LIST
30461: LIST
30462: LIST
30463: LIST
30464: LIST
30465: LIST
30466: LIST
30467: LIST
30468: LIST
30469: LIST
30470: LIST
30471: LIST
30472: LIST
30473: LIST
30474: LIST
30475: LIST
30476: LIST
30477: LIST
30478: LIST
30479: LIST
30480: LIST
30481: LIST
30482: LIST
30483: LIST
30484: LIST
30485: LIST
30486: LIST
30487: ST_TO_ADDR
// fLab1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
30488: LD_ADDR_VAR 0 42
30492: PUSH
30493: LD_INT 0
30495: PUSH
30496: LD_INT 0
30498: PUSH
30499: EMPTY
30500: LIST
30501: LIST
30502: PUSH
30503: LD_INT 0
30505: PUSH
30506: LD_INT 1
30508: NEG
30509: PUSH
30510: EMPTY
30511: LIST
30512: LIST
30513: PUSH
30514: LD_INT 1
30516: PUSH
30517: LD_INT 0
30519: PUSH
30520: EMPTY
30521: LIST
30522: LIST
30523: PUSH
30524: LD_INT 1
30526: PUSH
30527: LD_INT 1
30529: PUSH
30530: EMPTY
30531: LIST
30532: LIST
30533: PUSH
30534: LD_INT 0
30536: PUSH
30537: LD_INT 1
30539: PUSH
30540: EMPTY
30541: LIST
30542: LIST
30543: PUSH
30544: LD_INT 1
30546: NEG
30547: PUSH
30548: LD_INT 0
30550: PUSH
30551: EMPTY
30552: LIST
30553: LIST
30554: PUSH
30555: LD_INT 1
30557: NEG
30558: PUSH
30559: LD_INT 1
30561: NEG
30562: PUSH
30563: EMPTY
30564: LIST
30565: LIST
30566: PUSH
30567: LD_INT 1
30569: NEG
30570: PUSH
30571: LD_INT 2
30573: NEG
30574: PUSH
30575: EMPTY
30576: LIST
30577: LIST
30578: PUSH
30579: LD_INT 0
30581: PUSH
30582: LD_INT 2
30584: NEG
30585: PUSH
30586: EMPTY
30587: LIST
30588: LIST
30589: PUSH
30590: LD_INT 1
30592: PUSH
30593: LD_INT 1
30595: NEG
30596: PUSH
30597: EMPTY
30598: LIST
30599: LIST
30600: PUSH
30601: LD_INT 2
30603: PUSH
30604: LD_INT 1
30606: PUSH
30607: EMPTY
30608: LIST
30609: LIST
30610: PUSH
30611: LD_INT 2
30613: PUSH
30614: LD_INT 2
30616: PUSH
30617: EMPTY
30618: LIST
30619: LIST
30620: PUSH
30621: LD_INT 1
30623: PUSH
30624: LD_INT 2
30626: PUSH
30627: EMPTY
30628: LIST
30629: LIST
30630: PUSH
30631: LD_INT 0
30633: PUSH
30634: LD_INT 2
30636: PUSH
30637: EMPTY
30638: LIST
30639: LIST
30640: PUSH
30641: LD_INT 1
30643: NEG
30644: PUSH
30645: LD_INT 1
30647: PUSH
30648: EMPTY
30649: LIST
30650: LIST
30651: PUSH
30652: LD_INT 2
30654: NEG
30655: PUSH
30656: LD_INT 1
30658: NEG
30659: PUSH
30660: EMPTY
30661: LIST
30662: LIST
30663: PUSH
30664: LD_INT 2
30666: NEG
30667: PUSH
30668: LD_INT 2
30670: NEG
30671: PUSH
30672: EMPTY
30673: LIST
30674: LIST
30675: PUSH
30676: LD_INT 2
30678: NEG
30679: PUSH
30680: LD_INT 3
30682: NEG
30683: PUSH
30684: EMPTY
30685: LIST
30686: LIST
30687: PUSH
30688: LD_INT 1
30690: NEG
30691: PUSH
30692: LD_INT 3
30694: NEG
30695: PUSH
30696: EMPTY
30697: LIST
30698: LIST
30699: PUSH
30700: LD_INT 0
30702: PUSH
30703: LD_INT 3
30705: NEG
30706: PUSH
30707: EMPTY
30708: LIST
30709: LIST
30710: PUSH
30711: LD_INT 1
30713: PUSH
30714: LD_INT 2
30716: NEG
30717: PUSH
30718: EMPTY
30719: LIST
30720: LIST
30721: PUSH
30722: LD_INT 3
30724: PUSH
30725: LD_INT 2
30727: PUSH
30728: EMPTY
30729: LIST
30730: LIST
30731: PUSH
30732: LD_INT 3
30734: PUSH
30735: LD_INT 3
30737: PUSH
30738: EMPTY
30739: LIST
30740: LIST
30741: PUSH
30742: LD_INT 2
30744: PUSH
30745: LD_INT 3
30747: PUSH
30748: EMPTY
30749: LIST
30750: LIST
30751: PUSH
30752: LD_INT 1
30754: PUSH
30755: LD_INT 3
30757: PUSH
30758: EMPTY
30759: LIST
30760: LIST
30761: PUSH
30762: LD_INT 0
30764: PUSH
30765: LD_INT 3
30767: PUSH
30768: EMPTY
30769: LIST
30770: LIST
30771: PUSH
30772: LD_INT 1
30774: NEG
30775: PUSH
30776: LD_INT 2
30778: PUSH
30779: EMPTY
30780: LIST
30781: LIST
30782: PUSH
30783: LD_INT 3
30785: NEG
30786: PUSH
30787: LD_INT 2
30789: NEG
30790: PUSH
30791: EMPTY
30792: LIST
30793: LIST
30794: PUSH
30795: LD_INT 3
30797: NEG
30798: PUSH
30799: LD_INT 3
30801: NEG
30802: PUSH
30803: EMPTY
30804: LIST
30805: LIST
30806: PUSH
30807: EMPTY
30808: LIST
30809: LIST
30810: LIST
30811: LIST
30812: LIST
30813: LIST
30814: LIST
30815: LIST
30816: LIST
30817: LIST
30818: LIST
30819: LIST
30820: LIST
30821: LIST
30822: LIST
30823: LIST
30824: LIST
30825: LIST
30826: LIST
30827: LIST
30828: LIST
30829: LIST
30830: LIST
30831: LIST
30832: LIST
30833: LIST
30834: LIST
30835: LIST
30836: LIST
30837: ST_TO_ADDR
// fLab2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
30838: LD_ADDR_VAR 0 43
30842: PUSH
30843: LD_INT 0
30845: PUSH
30846: LD_INT 0
30848: PUSH
30849: EMPTY
30850: LIST
30851: LIST
30852: PUSH
30853: LD_INT 0
30855: PUSH
30856: LD_INT 1
30858: NEG
30859: PUSH
30860: EMPTY
30861: LIST
30862: LIST
30863: PUSH
30864: LD_INT 1
30866: PUSH
30867: LD_INT 0
30869: PUSH
30870: EMPTY
30871: LIST
30872: LIST
30873: PUSH
30874: LD_INT 1
30876: PUSH
30877: LD_INT 1
30879: PUSH
30880: EMPTY
30881: LIST
30882: LIST
30883: PUSH
30884: LD_INT 0
30886: PUSH
30887: LD_INT 1
30889: PUSH
30890: EMPTY
30891: LIST
30892: LIST
30893: PUSH
30894: LD_INT 1
30896: NEG
30897: PUSH
30898: LD_INT 0
30900: PUSH
30901: EMPTY
30902: LIST
30903: LIST
30904: PUSH
30905: LD_INT 1
30907: NEG
30908: PUSH
30909: LD_INT 1
30911: NEG
30912: PUSH
30913: EMPTY
30914: LIST
30915: LIST
30916: PUSH
30917: LD_INT 1
30919: NEG
30920: PUSH
30921: LD_INT 2
30923: NEG
30924: PUSH
30925: EMPTY
30926: LIST
30927: LIST
30928: PUSH
30929: LD_INT 0
30931: PUSH
30932: LD_INT 2
30934: NEG
30935: PUSH
30936: EMPTY
30937: LIST
30938: LIST
30939: PUSH
30940: LD_INT 1
30942: PUSH
30943: LD_INT 1
30945: NEG
30946: PUSH
30947: EMPTY
30948: LIST
30949: LIST
30950: PUSH
30951: LD_INT 2
30953: PUSH
30954: LD_INT 0
30956: PUSH
30957: EMPTY
30958: LIST
30959: LIST
30960: PUSH
30961: LD_INT 2
30963: PUSH
30964: LD_INT 1
30966: PUSH
30967: EMPTY
30968: LIST
30969: LIST
30970: PUSH
30971: LD_INT 1
30973: PUSH
30974: LD_INT 2
30976: PUSH
30977: EMPTY
30978: LIST
30979: LIST
30980: PUSH
30981: LD_INT 0
30983: PUSH
30984: LD_INT 2
30986: PUSH
30987: EMPTY
30988: LIST
30989: LIST
30990: PUSH
30991: LD_INT 1
30993: NEG
30994: PUSH
30995: LD_INT 1
30997: PUSH
30998: EMPTY
30999: LIST
31000: LIST
31001: PUSH
31002: LD_INT 2
31004: NEG
31005: PUSH
31006: LD_INT 0
31008: PUSH
31009: EMPTY
31010: LIST
31011: LIST
31012: PUSH
31013: LD_INT 2
31015: NEG
31016: PUSH
31017: LD_INT 1
31019: NEG
31020: PUSH
31021: EMPTY
31022: LIST
31023: LIST
31024: PUSH
31025: LD_INT 1
31027: NEG
31028: PUSH
31029: LD_INT 3
31031: NEG
31032: PUSH
31033: EMPTY
31034: LIST
31035: LIST
31036: PUSH
31037: LD_INT 0
31039: PUSH
31040: LD_INT 3
31042: NEG
31043: PUSH
31044: EMPTY
31045: LIST
31046: LIST
31047: PUSH
31048: LD_INT 1
31050: PUSH
31051: LD_INT 2
31053: NEG
31054: PUSH
31055: EMPTY
31056: LIST
31057: LIST
31058: PUSH
31059: LD_INT 2
31061: PUSH
31062: LD_INT 1
31064: NEG
31065: PUSH
31066: EMPTY
31067: LIST
31068: LIST
31069: PUSH
31070: LD_INT 3
31072: PUSH
31073: LD_INT 0
31075: PUSH
31076: EMPTY
31077: LIST
31078: LIST
31079: PUSH
31080: LD_INT 3
31082: PUSH
31083: LD_INT 1
31085: PUSH
31086: EMPTY
31087: LIST
31088: LIST
31089: PUSH
31090: LD_INT 1
31092: PUSH
31093: LD_INT 3
31095: PUSH
31096: EMPTY
31097: LIST
31098: LIST
31099: PUSH
31100: LD_INT 0
31102: PUSH
31103: LD_INT 3
31105: PUSH
31106: EMPTY
31107: LIST
31108: LIST
31109: PUSH
31110: LD_INT 1
31112: NEG
31113: PUSH
31114: LD_INT 2
31116: PUSH
31117: EMPTY
31118: LIST
31119: LIST
31120: PUSH
31121: LD_INT 2
31123: NEG
31124: PUSH
31125: LD_INT 1
31127: PUSH
31128: EMPTY
31129: LIST
31130: LIST
31131: PUSH
31132: LD_INT 3
31134: NEG
31135: PUSH
31136: LD_INT 0
31138: PUSH
31139: EMPTY
31140: LIST
31141: LIST
31142: PUSH
31143: LD_INT 3
31145: NEG
31146: PUSH
31147: LD_INT 1
31149: NEG
31150: PUSH
31151: EMPTY
31152: LIST
31153: LIST
31154: PUSH
31155: EMPTY
31156: LIST
31157: LIST
31158: LIST
31159: LIST
31160: LIST
31161: LIST
31162: LIST
31163: LIST
31164: LIST
31165: LIST
31166: LIST
31167: LIST
31168: LIST
31169: LIST
31170: LIST
31171: LIST
31172: LIST
31173: LIST
31174: LIST
31175: LIST
31176: LIST
31177: LIST
31178: LIST
31179: LIST
31180: LIST
31181: LIST
31182: LIST
31183: LIST
31184: LIST
31185: ST_TO_ADDR
// fLab3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31186: LD_ADDR_VAR 0 44
31190: PUSH
31191: LD_INT 0
31193: PUSH
31194: LD_INT 0
31196: PUSH
31197: EMPTY
31198: LIST
31199: LIST
31200: PUSH
31201: LD_INT 0
31203: PUSH
31204: LD_INT 1
31206: NEG
31207: PUSH
31208: EMPTY
31209: LIST
31210: LIST
31211: PUSH
31212: LD_INT 1
31214: PUSH
31215: LD_INT 0
31217: PUSH
31218: EMPTY
31219: LIST
31220: LIST
31221: PUSH
31222: LD_INT 1
31224: PUSH
31225: LD_INT 1
31227: PUSH
31228: EMPTY
31229: LIST
31230: LIST
31231: PUSH
31232: LD_INT 0
31234: PUSH
31235: LD_INT 1
31237: PUSH
31238: EMPTY
31239: LIST
31240: LIST
31241: PUSH
31242: LD_INT 1
31244: NEG
31245: PUSH
31246: LD_INT 0
31248: PUSH
31249: EMPTY
31250: LIST
31251: LIST
31252: PUSH
31253: LD_INT 1
31255: NEG
31256: PUSH
31257: LD_INT 1
31259: NEG
31260: PUSH
31261: EMPTY
31262: LIST
31263: LIST
31264: PUSH
31265: LD_INT 1
31267: NEG
31268: PUSH
31269: LD_INT 2
31271: NEG
31272: PUSH
31273: EMPTY
31274: LIST
31275: LIST
31276: PUSH
31277: LD_INT 1
31279: PUSH
31280: LD_INT 1
31282: NEG
31283: PUSH
31284: EMPTY
31285: LIST
31286: LIST
31287: PUSH
31288: LD_INT 2
31290: PUSH
31291: LD_INT 0
31293: PUSH
31294: EMPTY
31295: LIST
31296: LIST
31297: PUSH
31298: LD_INT 2
31300: PUSH
31301: LD_INT 1
31303: PUSH
31304: EMPTY
31305: LIST
31306: LIST
31307: PUSH
31308: LD_INT 2
31310: PUSH
31311: LD_INT 2
31313: PUSH
31314: EMPTY
31315: LIST
31316: LIST
31317: PUSH
31318: LD_INT 1
31320: PUSH
31321: LD_INT 2
31323: PUSH
31324: EMPTY
31325: LIST
31326: LIST
31327: PUSH
31328: LD_INT 1
31330: NEG
31331: PUSH
31332: LD_INT 1
31334: PUSH
31335: EMPTY
31336: LIST
31337: LIST
31338: PUSH
31339: LD_INT 2
31341: NEG
31342: PUSH
31343: LD_INT 0
31345: PUSH
31346: EMPTY
31347: LIST
31348: LIST
31349: PUSH
31350: LD_INT 2
31352: NEG
31353: PUSH
31354: LD_INT 1
31356: NEG
31357: PUSH
31358: EMPTY
31359: LIST
31360: LIST
31361: PUSH
31362: LD_INT 2
31364: NEG
31365: PUSH
31366: LD_INT 2
31368: NEG
31369: PUSH
31370: EMPTY
31371: LIST
31372: LIST
31373: PUSH
31374: LD_INT 2
31376: NEG
31377: PUSH
31378: LD_INT 3
31380: NEG
31381: PUSH
31382: EMPTY
31383: LIST
31384: LIST
31385: PUSH
31386: LD_INT 2
31388: PUSH
31389: LD_INT 1
31391: NEG
31392: PUSH
31393: EMPTY
31394: LIST
31395: LIST
31396: PUSH
31397: LD_INT 3
31399: PUSH
31400: LD_INT 0
31402: PUSH
31403: EMPTY
31404: LIST
31405: LIST
31406: PUSH
31407: LD_INT 3
31409: PUSH
31410: LD_INT 1
31412: PUSH
31413: EMPTY
31414: LIST
31415: LIST
31416: PUSH
31417: LD_INT 3
31419: PUSH
31420: LD_INT 2
31422: PUSH
31423: EMPTY
31424: LIST
31425: LIST
31426: PUSH
31427: LD_INT 3
31429: PUSH
31430: LD_INT 3
31432: PUSH
31433: EMPTY
31434: LIST
31435: LIST
31436: PUSH
31437: LD_INT 2
31439: PUSH
31440: LD_INT 3
31442: PUSH
31443: EMPTY
31444: LIST
31445: LIST
31446: PUSH
31447: LD_INT 2
31449: NEG
31450: PUSH
31451: LD_INT 1
31453: PUSH
31454: EMPTY
31455: LIST
31456: LIST
31457: PUSH
31458: LD_INT 3
31460: NEG
31461: PUSH
31462: LD_INT 0
31464: PUSH
31465: EMPTY
31466: LIST
31467: LIST
31468: PUSH
31469: LD_INT 3
31471: NEG
31472: PUSH
31473: LD_INT 1
31475: NEG
31476: PUSH
31477: EMPTY
31478: LIST
31479: LIST
31480: PUSH
31481: LD_INT 3
31483: NEG
31484: PUSH
31485: LD_INT 2
31487: NEG
31488: PUSH
31489: EMPTY
31490: LIST
31491: LIST
31492: PUSH
31493: LD_INT 3
31495: NEG
31496: PUSH
31497: LD_INT 3
31499: NEG
31500: PUSH
31501: EMPTY
31502: LIST
31503: LIST
31504: PUSH
31505: EMPTY
31506: LIST
31507: LIST
31508: LIST
31509: LIST
31510: LIST
31511: LIST
31512: LIST
31513: LIST
31514: LIST
31515: LIST
31516: LIST
31517: LIST
31518: LIST
31519: LIST
31520: LIST
31521: LIST
31522: LIST
31523: LIST
31524: LIST
31525: LIST
31526: LIST
31527: LIST
31528: LIST
31529: LIST
31530: LIST
31531: LIST
31532: LIST
31533: LIST
31534: LIST
31535: ST_TO_ADDR
// fLab4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
31536: LD_ADDR_VAR 0 45
31540: PUSH
31541: LD_INT 0
31543: PUSH
31544: LD_INT 0
31546: PUSH
31547: EMPTY
31548: LIST
31549: LIST
31550: PUSH
31551: LD_INT 0
31553: PUSH
31554: LD_INT 1
31556: NEG
31557: PUSH
31558: EMPTY
31559: LIST
31560: LIST
31561: PUSH
31562: LD_INT 1
31564: PUSH
31565: LD_INT 0
31567: PUSH
31568: EMPTY
31569: LIST
31570: LIST
31571: PUSH
31572: LD_INT 1
31574: PUSH
31575: LD_INT 1
31577: PUSH
31578: EMPTY
31579: LIST
31580: LIST
31581: PUSH
31582: LD_INT 0
31584: PUSH
31585: LD_INT 1
31587: PUSH
31588: EMPTY
31589: LIST
31590: LIST
31591: PUSH
31592: LD_INT 1
31594: NEG
31595: PUSH
31596: LD_INT 0
31598: PUSH
31599: EMPTY
31600: LIST
31601: LIST
31602: PUSH
31603: LD_INT 1
31605: NEG
31606: PUSH
31607: LD_INT 1
31609: NEG
31610: PUSH
31611: EMPTY
31612: LIST
31613: LIST
31614: PUSH
31615: LD_INT 1
31617: NEG
31618: PUSH
31619: LD_INT 2
31621: NEG
31622: PUSH
31623: EMPTY
31624: LIST
31625: LIST
31626: PUSH
31627: LD_INT 0
31629: PUSH
31630: LD_INT 2
31632: NEG
31633: PUSH
31634: EMPTY
31635: LIST
31636: LIST
31637: PUSH
31638: LD_INT 1
31640: PUSH
31641: LD_INT 1
31643: NEG
31644: PUSH
31645: EMPTY
31646: LIST
31647: LIST
31648: PUSH
31649: LD_INT 2
31651: PUSH
31652: LD_INT 1
31654: PUSH
31655: EMPTY
31656: LIST
31657: LIST
31658: PUSH
31659: LD_INT 2
31661: PUSH
31662: LD_INT 2
31664: PUSH
31665: EMPTY
31666: LIST
31667: LIST
31668: PUSH
31669: LD_INT 1
31671: PUSH
31672: LD_INT 2
31674: PUSH
31675: EMPTY
31676: LIST
31677: LIST
31678: PUSH
31679: LD_INT 0
31681: PUSH
31682: LD_INT 2
31684: PUSH
31685: EMPTY
31686: LIST
31687: LIST
31688: PUSH
31689: LD_INT 1
31691: NEG
31692: PUSH
31693: LD_INT 1
31695: PUSH
31696: EMPTY
31697: LIST
31698: LIST
31699: PUSH
31700: LD_INT 2
31702: NEG
31703: PUSH
31704: LD_INT 1
31706: NEG
31707: PUSH
31708: EMPTY
31709: LIST
31710: LIST
31711: PUSH
31712: LD_INT 2
31714: NEG
31715: PUSH
31716: LD_INT 2
31718: NEG
31719: PUSH
31720: EMPTY
31721: LIST
31722: LIST
31723: PUSH
31724: LD_INT 2
31726: NEG
31727: PUSH
31728: LD_INT 3
31730: NEG
31731: PUSH
31732: EMPTY
31733: LIST
31734: LIST
31735: PUSH
31736: LD_INT 1
31738: NEG
31739: PUSH
31740: LD_INT 3
31742: NEG
31743: PUSH
31744: EMPTY
31745: LIST
31746: LIST
31747: PUSH
31748: LD_INT 0
31750: PUSH
31751: LD_INT 3
31753: NEG
31754: PUSH
31755: EMPTY
31756: LIST
31757: LIST
31758: PUSH
31759: LD_INT 1
31761: PUSH
31762: LD_INT 2
31764: NEG
31765: PUSH
31766: EMPTY
31767: LIST
31768: LIST
31769: PUSH
31770: LD_INT 3
31772: PUSH
31773: LD_INT 2
31775: PUSH
31776: EMPTY
31777: LIST
31778: LIST
31779: PUSH
31780: LD_INT 3
31782: PUSH
31783: LD_INT 3
31785: PUSH
31786: EMPTY
31787: LIST
31788: LIST
31789: PUSH
31790: LD_INT 2
31792: PUSH
31793: LD_INT 3
31795: PUSH
31796: EMPTY
31797: LIST
31798: LIST
31799: PUSH
31800: LD_INT 1
31802: PUSH
31803: LD_INT 3
31805: PUSH
31806: EMPTY
31807: LIST
31808: LIST
31809: PUSH
31810: LD_INT 0
31812: PUSH
31813: LD_INT 3
31815: PUSH
31816: EMPTY
31817: LIST
31818: LIST
31819: PUSH
31820: LD_INT 1
31822: NEG
31823: PUSH
31824: LD_INT 2
31826: PUSH
31827: EMPTY
31828: LIST
31829: LIST
31830: PUSH
31831: LD_INT 3
31833: NEG
31834: PUSH
31835: LD_INT 2
31837: NEG
31838: PUSH
31839: EMPTY
31840: LIST
31841: LIST
31842: PUSH
31843: LD_INT 3
31845: NEG
31846: PUSH
31847: LD_INT 3
31849: NEG
31850: PUSH
31851: EMPTY
31852: LIST
31853: LIST
31854: PUSH
31855: EMPTY
31856: LIST
31857: LIST
31858: LIST
31859: LIST
31860: LIST
31861: LIST
31862: LIST
31863: LIST
31864: LIST
31865: LIST
31866: LIST
31867: LIST
31868: LIST
31869: LIST
31870: LIST
31871: LIST
31872: LIST
31873: LIST
31874: LIST
31875: LIST
31876: LIST
31877: LIST
31878: LIST
31879: LIST
31880: LIST
31881: LIST
31882: LIST
31883: LIST
31884: LIST
31885: ST_TO_ADDR
// fLab5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
31886: LD_ADDR_VAR 0 46
31890: PUSH
31891: LD_INT 0
31893: PUSH
31894: LD_INT 0
31896: PUSH
31897: EMPTY
31898: LIST
31899: LIST
31900: PUSH
31901: LD_INT 0
31903: PUSH
31904: LD_INT 1
31906: NEG
31907: PUSH
31908: EMPTY
31909: LIST
31910: LIST
31911: PUSH
31912: LD_INT 1
31914: PUSH
31915: LD_INT 0
31917: PUSH
31918: EMPTY
31919: LIST
31920: LIST
31921: PUSH
31922: LD_INT 1
31924: PUSH
31925: LD_INT 1
31927: PUSH
31928: EMPTY
31929: LIST
31930: LIST
31931: PUSH
31932: LD_INT 0
31934: PUSH
31935: LD_INT 1
31937: PUSH
31938: EMPTY
31939: LIST
31940: LIST
31941: PUSH
31942: LD_INT 1
31944: NEG
31945: PUSH
31946: LD_INT 0
31948: PUSH
31949: EMPTY
31950: LIST
31951: LIST
31952: PUSH
31953: LD_INT 1
31955: NEG
31956: PUSH
31957: LD_INT 1
31959: NEG
31960: PUSH
31961: EMPTY
31962: LIST
31963: LIST
31964: PUSH
31965: LD_INT 1
31967: NEG
31968: PUSH
31969: LD_INT 2
31971: NEG
31972: PUSH
31973: EMPTY
31974: LIST
31975: LIST
31976: PUSH
31977: LD_INT 0
31979: PUSH
31980: LD_INT 2
31982: NEG
31983: PUSH
31984: EMPTY
31985: LIST
31986: LIST
31987: PUSH
31988: LD_INT 1
31990: PUSH
31991: LD_INT 1
31993: NEG
31994: PUSH
31995: EMPTY
31996: LIST
31997: LIST
31998: PUSH
31999: LD_INT 2
32001: PUSH
32002: LD_INT 0
32004: PUSH
32005: EMPTY
32006: LIST
32007: LIST
32008: PUSH
32009: LD_INT 2
32011: PUSH
32012: LD_INT 1
32014: PUSH
32015: EMPTY
32016: LIST
32017: LIST
32018: PUSH
32019: LD_INT 1
32021: PUSH
32022: LD_INT 2
32024: PUSH
32025: EMPTY
32026: LIST
32027: LIST
32028: PUSH
32029: LD_INT 0
32031: PUSH
32032: LD_INT 2
32034: PUSH
32035: EMPTY
32036: LIST
32037: LIST
32038: PUSH
32039: LD_INT 1
32041: NEG
32042: PUSH
32043: LD_INT 1
32045: PUSH
32046: EMPTY
32047: LIST
32048: LIST
32049: PUSH
32050: LD_INT 2
32052: NEG
32053: PUSH
32054: LD_INT 0
32056: PUSH
32057: EMPTY
32058: LIST
32059: LIST
32060: PUSH
32061: LD_INT 2
32063: NEG
32064: PUSH
32065: LD_INT 1
32067: NEG
32068: PUSH
32069: EMPTY
32070: LIST
32071: LIST
32072: PUSH
32073: LD_INT 1
32075: NEG
32076: PUSH
32077: LD_INT 3
32079: NEG
32080: PUSH
32081: EMPTY
32082: LIST
32083: LIST
32084: PUSH
32085: LD_INT 0
32087: PUSH
32088: LD_INT 3
32090: NEG
32091: PUSH
32092: EMPTY
32093: LIST
32094: LIST
32095: PUSH
32096: LD_INT 1
32098: PUSH
32099: LD_INT 2
32101: NEG
32102: PUSH
32103: EMPTY
32104: LIST
32105: LIST
32106: PUSH
32107: LD_INT 2
32109: PUSH
32110: LD_INT 1
32112: NEG
32113: PUSH
32114: EMPTY
32115: LIST
32116: LIST
32117: PUSH
32118: LD_INT 3
32120: PUSH
32121: LD_INT 0
32123: PUSH
32124: EMPTY
32125: LIST
32126: LIST
32127: PUSH
32128: LD_INT 3
32130: PUSH
32131: LD_INT 1
32133: PUSH
32134: EMPTY
32135: LIST
32136: LIST
32137: PUSH
32138: LD_INT 1
32140: PUSH
32141: LD_INT 3
32143: PUSH
32144: EMPTY
32145: LIST
32146: LIST
32147: PUSH
32148: LD_INT 0
32150: PUSH
32151: LD_INT 3
32153: PUSH
32154: EMPTY
32155: LIST
32156: LIST
32157: PUSH
32158: LD_INT 1
32160: NEG
32161: PUSH
32162: LD_INT 2
32164: PUSH
32165: EMPTY
32166: LIST
32167: LIST
32168: PUSH
32169: LD_INT 2
32171: NEG
32172: PUSH
32173: LD_INT 1
32175: PUSH
32176: EMPTY
32177: LIST
32178: LIST
32179: PUSH
32180: LD_INT 3
32182: NEG
32183: PUSH
32184: LD_INT 0
32186: PUSH
32187: EMPTY
32188: LIST
32189: LIST
32190: PUSH
32191: LD_INT 3
32193: NEG
32194: PUSH
32195: LD_INT 1
32197: NEG
32198: PUSH
32199: EMPTY
32200: LIST
32201: LIST
32202: PUSH
32203: EMPTY
32204: LIST
32205: LIST
32206: LIST
32207: LIST
32208: LIST
32209: LIST
32210: LIST
32211: LIST
32212: LIST
32213: LIST
32214: LIST
32215: LIST
32216: LIST
32217: LIST
32218: LIST
32219: LIST
32220: LIST
32221: LIST
32222: LIST
32223: LIST
32224: LIST
32225: LIST
32226: LIST
32227: LIST
32228: LIST
32229: LIST
32230: LIST
32231: LIST
32232: LIST
32233: ST_TO_ADDR
// fControlTower0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32234: LD_ADDR_VAR 0 47
32238: PUSH
32239: LD_INT 0
32241: PUSH
32242: LD_INT 0
32244: PUSH
32245: EMPTY
32246: LIST
32247: LIST
32248: PUSH
32249: LD_INT 0
32251: PUSH
32252: LD_INT 1
32254: NEG
32255: PUSH
32256: EMPTY
32257: LIST
32258: LIST
32259: PUSH
32260: LD_INT 1
32262: PUSH
32263: LD_INT 0
32265: PUSH
32266: EMPTY
32267: LIST
32268: LIST
32269: PUSH
32270: LD_INT 1
32272: PUSH
32273: LD_INT 1
32275: PUSH
32276: EMPTY
32277: LIST
32278: LIST
32279: PUSH
32280: LD_INT 0
32282: PUSH
32283: LD_INT 1
32285: PUSH
32286: EMPTY
32287: LIST
32288: LIST
32289: PUSH
32290: LD_INT 1
32292: NEG
32293: PUSH
32294: LD_INT 0
32296: PUSH
32297: EMPTY
32298: LIST
32299: LIST
32300: PUSH
32301: LD_INT 1
32303: NEG
32304: PUSH
32305: LD_INT 1
32307: NEG
32308: PUSH
32309: EMPTY
32310: LIST
32311: LIST
32312: PUSH
32313: LD_INT 1
32315: NEG
32316: PUSH
32317: LD_INT 2
32319: NEG
32320: PUSH
32321: EMPTY
32322: LIST
32323: LIST
32324: PUSH
32325: LD_INT 0
32327: PUSH
32328: LD_INT 2
32330: NEG
32331: PUSH
32332: EMPTY
32333: LIST
32334: LIST
32335: PUSH
32336: LD_INT 1
32338: PUSH
32339: LD_INT 1
32341: NEG
32342: PUSH
32343: EMPTY
32344: LIST
32345: LIST
32346: PUSH
32347: LD_INT 2
32349: NEG
32350: PUSH
32351: LD_INT 1
32353: NEG
32354: PUSH
32355: EMPTY
32356: LIST
32357: LIST
32358: PUSH
32359: LD_INT 2
32361: NEG
32362: PUSH
32363: LD_INT 2
32365: NEG
32366: PUSH
32367: EMPTY
32368: LIST
32369: LIST
32370: PUSH
32371: EMPTY
32372: LIST
32373: LIST
32374: LIST
32375: LIST
32376: LIST
32377: LIST
32378: LIST
32379: LIST
32380: LIST
32381: LIST
32382: LIST
32383: LIST
32384: ST_TO_ADDR
// fControlTower1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
32385: LD_ADDR_VAR 0 48
32389: PUSH
32390: LD_INT 0
32392: PUSH
32393: LD_INT 0
32395: PUSH
32396: EMPTY
32397: LIST
32398: LIST
32399: PUSH
32400: LD_INT 0
32402: PUSH
32403: LD_INT 1
32405: NEG
32406: PUSH
32407: EMPTY
32408: LIST
32409: LIST
32410: PUSH
32411: LD_INT 1
32413: PUSH
32414: LD_INT 0
32416: PUSH
32417: EMPTY
32418: LIST
32419: LIST
32420: PUSH
32421: LD_INT 1
32423: PUSH
32424: LD_INT 1
32426: PUSH
32427: EMPTY
32428: LIST
32429: LIST
32430: PUSH
32431: LD_INT 0
32433: PUSH
32434: LD_INT 1
32436: PUSH
32437: EMPTY
32438: LIST
32439: LIST
32440: PUSH
32441: LD_INT 1
32443: NEG
32444: PUSH
32445: LD_INT 0
32447: PUSH
32448: EMPTY
32449: LIST
32450: LIST
32451: PUSH
32452: LD_INT 1
32454: NEG
32455: PUSH
32456: LD_INT 1
32458: NEG
32459: PUSH
32460: EMPTY
32461: LIST
32462: LIST
32463: PUSH
32464: LD_INT 1
32466: NEG
32467: PUSH
32468: LD_INT 2
32470: NEG
32471: PUSH
32472: EMPTY
32473: LIST
32474: LIST
32475: PUSH
32476: LD_INT 0
32478: PUSH
32479: LD_INT 2
32481: NEG
32482: PUSH
32483: EMPTY
32484: LIST
32485: LIST
32486: PUSH
32487: LD_INT 1
32489: PUSH
32490: LD_INT 1
32492: NEG
32493: PUSH
32494: EMPTY
32495: LIST
32496: LIST
32497: PUSH
32498: LD_INT 2
32500: PUSH
32501: LD_INT 0
32503: PUSH
32504: EMPTY
32505: LIST
32506: LIST
32507: PUSH
32508: LD_INT 2
32510: PUSH
32511: LD_INT 1
32513: PUSH
32514: EMPTY
32515: LIST
32516: LIST
32517: PUSH
32518: EMPTY
32519: LIST
32520: LIST
32521: LIST
32522: LIST
32523: LIST
32524: LIST
32525: LIST
32526: LIST
32527: LIST
32528: LIST
32529: LIST
32530: LIST
32531: ST_TO_ADDR
// fControlTower2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
32532: LD_ADDR_VAR 0 49
32536: PUSH
32537: LD_INT 0
32539: PUSH
32540: LD_INT 0
32542: PUSH
32543: EMPTY
32544: LIST
32545: LIST
32546: PUSH
32547: LD_INT 0
32549: PUSH
32550: LD_INT 1
32552: NEG
32553: PUSH
32554: EMPTY
32555: LIST
32556: LIST
32557: PUSH
32558: LD_INT 1
32560: PUSH
32561: LD_INT 0
32563: PUSH
32564: EMPTY
32565: LIST
32566: LIST
32567: PUSH
32568: LD_INT 1
32570: PUSH
32571: LD_INT 1
32573: PUSH
32574: EMPTY
32575: LIST
32576: LIST
32577: PUSH
32578: LD_INT 0
32580: PUSH
32581: LD_INT 1
32583: PUSH
32584: EMPTY
32585: LIST
32586: LIST
32587: PUSH
32588: LD_INT 1
32590: NEG
32591: PUSH
32592: LD_INT 0
32594: PUSH
32595: EMPTY
32596: LIST
32597: LIST
32598: PUSH
32599: LD_INT 1
32601: NEG
32602: PUSH
32603: LD_INT 1
32605: NEG
32606: PUSH
32607: EMPTY
32608: LIST
32609: LIST
32610: PUSH
32611: LD_INT 1
32613: PUSH
32614: LD_INT 1
32616: NEG
32617: PUSH
32618: EMPTY
32619: LIST
32620: LIST
32621: PUSH
32622: LD_INT 2
32624: PUSH
32625: LD_INT 0
32627: PUSH
32628: EMPTY
32629: LIST
32630: LIST
32631: PUSH
32632: LD_INT 2
32634: PUSH
32635: LD_INT 1
32637: PUSH
32638: EMPTY
32639: LIST
32640: LIST
32641: PUSH
32642: LD_INT 2
32644: PUSH
32645: LD_INT 2
32647: PUSH
32648: EMPTY
32649: LIST
32650: LIST
32651: PUSH
32652: LD_INT 1
32654: PUSH
32655: LD_INT 2
32657: PUSH
32658: EMPTY
32659: LIST
32660: LIST
32661: PUSH
32662: EMPTY
32663: LIST
32664: LIST
32665: LIST
32666: LIST
32667: LIST
32668: LIST
32669: LIST
32670: LIST
32671: LIST
32672: LIST
32673: LIST
32674: LIST
32675: ST_TO_ADDR
// fControlTower3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
32676: LD_ADDR_VAR 0 50
32680: PUSH
32681: LD_INT 0
32683: PUSH
32684: LD_INT 0
32686: PUSH
32687: EMPTY
32688: LIST
32689: LIST
32690: PUSH
32691: LD_INT 0
32693: PUSH
32694: LD_INT 1
32696: NEG
32697: PUSH
32698: EMPTY
32699: LIST
32700: LIST
32701: PUSH
32702: LD_INT 1
32704: PUSH
32705: LD_INT 0
32707: PUSH
32708: EMPTY
32709: LIST
32710: LIST
32711: PUSH
32712: LD_INT 1
32714: PUSH
32715: LD_INT 1
32717: PUSH
32718: EMPTY
32719: LIST
32720: LIST
32721: PUSH
32722: LD_INT 0
32724: PUSH
32725: LD_INT 1
32727: PUSH
32728: EMPTY
32729: LIST
32730: LIST
32731: PUSH
32732: LD_INT 1
32734: NEG
32735: PUSH
32736: LD_INT 0
32738: PUSH
32739: EMPTY
32740: LIST
32741: LIST
32742: PUSH
32743: LD_INT 1
32745: NEG
32746: PUSH
32747: LD_INT 1
32749: NEG
32750: PUSH
32751: EMPTY
32752: LIST
32753: LIST
32754: PUSH
32755: LD_INT 2
32757: PUSH
32758: LD_INT 1
32760: PUSH
32761: EMPTY
32762: LIST
32763: LIST
32764: PUSH
32765: LD_INT 2
32767: PUSH
32768: LD_INT 2
32770: PUSH
32771: EMPTY
32772: LIST
32773: LIST
32774: PUSH
32775: LD_INT 1
32777: PUSH
32778: LD_INT 2
32780: PUSH
32781: EMPTY
32782: LIST
32783: LIST
32784: PUSH
32785: LD_INT 0
32787: PUSH
32788: LD_INT 2
32790: PUSH
32791: EMPTY
32792: LIST
32793: LIST
32794: PUSH
32795: LD_INT 1
32797: NEG
32798: PUSH
32799: LD_INT 1
32801: PUSH
32802: EMPTY
32803: LIST
32804: LIST
32805: PUSH
32806: EMPTY
32807: LIST
32808: LIST
32809: LIST
32810: LIST
32811: LIST
32812: LIST
32813: LIST
32814: LIST
32815: LIST
32816: LIST
32817: LIST
32818: LIST
32819: ST_TO_ADDR
// fControlTower4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
32820: LD_ADDR_VAR 0 51
32824: PUSH
32825: LD_INT 0
32827: PUSH
32828: LD_INT 0
32830: PUSH
32831: EMPTY
32832: LIST
32833: LIST
32834: PUSH
32835: LD_INT 0
32837: PUSH
32838: LD_INT 1
32840: NEG
32841: PUSH
32842: EMPTY
32843: LIST
32844: LIST
32845: PUSH
32846: LD_INT 1
32848: PUSH
32849: LD_INT 0
32851: PUSH
32852: EMPTY
32853: LIST
32854: LIST
32855: PUSH
32856: LD_INT 1
32858: PUSH
32859: LD_INT 1
32861: PUSH
32862: EMPTY
32863: LIST
32864: LIST
32865: PUSH
32866: LD_INT 0
32868: PUSH
32869: LD_INT 1
32871: PUSH
32872: EMPTY
32873: LIST
32874: LIST
32875: PUSH
32876: LD_INT 1
32878: NEG
32879: PUSH
32880: LD_INT 0
32882: PUSH
32883: EMPTY
32884: LIST
32885: LIST
32886: PUSH
32887: LD_INT 1
32889: NEG
32890: PUSH
32891: LD_INT 1
32893: NEG
32894: PUSH
32895: EMPTY
32896: LIST
32897: LIST
32898: PUSH
32899: LD_INT 1
32901: PUSH
32902: LD_INT 2
32904: PUSH
32905: EMPTY
32906: LIST
32907: LIST
32908: PUSH
32909: LD_INT 0
32911: PUSH
32912: LD_INT 2
32914: PUSH
32915: EMPTY
32916: LIST
32917: LIST
32918: PUSH
32919: LD_INT 1
32921: NEG
32922: PUSH
32923: LD_INT 1
32925: PUSH
32926: EMPTY
32927: LIST
32928: LIST
32929: PUSH
32930: LD_INT 2
32932: NEG
32933: PUSH
32934: LD_INT 0
32936: PUSH
32937: EMPTY
32938: LIST
32939: LIST
32940: PUSH
32941: LD_INT 2
32943: NEG
32944: PUSH
32945: LD_INT 1
32947: NEG
32948: PUSH
32949: EMPTY
32950: LIST
32951: LIST
32952: PUSH
32953: EMPTY
32954: LIST
32955: LIST
32956: LIST
32957: LIST
32958: LIST
32959: LIST
32960: LIST
32961: LIST
32962: LIST
32963: LIST
32964: LIST
32965: LIST
32966: ST_TO_ADDR
// fControlTower5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
32967: LD_ADDR_VAR 0 52
32971: PUSH
32972: LD_INT 0
32974: PUSH
32975: LD_INT 0
32977: PUSH
32978: EMPTY
32979: LIST
32980: LIST
32981: PUSH
32982: LD_INT 0
32984: PUSH
32985: LD_INT 1
32987: NEG
32988: PUSH
32989: EMPTY
32990: LIST
32991: LIST
32992: PUSH
32993: LD_INT 1
32995: PUSH
32996: LD_INT 0
32998: PUSH
32999: EMPTY
33000: LIST
33001: LIST
33002: PUSH
33003: LD_INT 1
33005: PUSH
33006: LD_INT 1
33008: PUSH
33009: EMPTY
33010: LIST
33011: LIST
33012: PUSH
33013: LD_INT 0
33015: PUSH
33016: LD_INT 1
33018: PUSH
33019: EMPTY
33020: LIST
33021: LIST
33022: PUSH
33023: LD_INT 1
33025: NEG
33026: PUSH
33027: LD_INT 0
33029: PUSH
33030: EMPTY
33031: LIST
33032: LIST
33033: PUSH
33034: LD_INT 1
33036: NEG
33037: PUSH
33038: LD_INT 1
33040: NEG
33041: PUSH
33042: EMPTY
33043: LIST
33044: LIST
33045: PUSH
33046: LD_INT 1
33048: NEG
33049: PUSH
33050: LD_INT 2
33052: NEG
33053: PUSH
33054: EMPTY
33055: LIST
33056: LIST
33057: PUSH
33058: LD_INT 1
33060: NEG
33061: PUSH
33062: LD_INT 1
33064: PUSH
33065: EMPTY
33066: LIST
33067: LIST
33068: PUSH
33069: LD_INT 2
33071: NEG
33072: PUSH
33073: LD_INT 0
33075: PUSH
33076: EMPTY
33077: LIST
33078: LIST
33079: PUSH
33080: LD_INT 2
33082: NEG
33083: PUSH
33084: LD_INT 1
33086: NEG
33087: PUSH
33088: EMPTY
33089: LIST
33090: LIST
33091: PUSH
33092: LD_INT 2
33094: NEG
33095: PUSH
33096: LD_INT 2
33098: NEG
33099: PUSH
33100: EMPTY
33101: LIST
33102: LIST
33103: PUSH
33104: EMPTY
33105: LIST
33106: LIST
33107: LIST
33108: LIST
33109: LIST
33110: LIST
33111: LIST
33112: LIST
33113: LIST
33114: LIST
33115: LIST
33116: LIST
33117: ST_TO_ADDR
// fBarracks0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33118: LD_ADDR_VAR 0 53
33122: PUSH
33123: LD_INT 0
33125: PUSH
33126: LD_INT 0
33128: PUSH
33129: EMPTY
33130: LIST
33131: LIST
33132: PUSH
33133: LD_INT 0
33135: PUSH
33136: LD_INT 1
33138: NEG
33139: PUSH
33140: EMPTY
33141: LIST
33142: LIST
33143: PUSH
33144: LD_INT 1
33146: PUSH
33147: LD_INT 0
33149: PUSH
33150: EMPTY
33151: LIST
33152: LIST
33153: PUSH
33154: LD_INT 1
33156: PUSH
33157: LD_INT 1
33159: PUSH
33160: EMPTY
33161: LIST
33162: LIST
33163: PUSH
33164: LD_INT 0
33166: PUSH
33167: LD_INT 1
33169: PUSH
33170: EMPTY
33171: LIST
33172: LIST
33173: PUSH
33174: LD_INT 1
33176: NEG
33177: PUSH
33178: LD_INT 0
33180: PUSH
33181: EMPTY
33182: LIST
33183: LIST
33184: PUSH
33185: LD_INT 1
33187: NEG
33188: PUSH
33189: LD_INT 1
33191: NEG
33192: PUSH
33193: EMPTY
33194: LIST
33195: LIST
33196: PUSH
33197: LD_INT 1
33199: NEG
33200: PUSH
33201: LD_INT 2
33203: NEG
33204: PUSH
33205: EMPTY
33206: LIST
33207: LIST
33208: PUSH
33209: LD_INT 0
33211: PUSH
33212: LD_INT 2
33214: NEG
33215: PUSH
33216: EMPTY
33217: LIST
33218: LIST
33219: PUSH
33220: LD_INT 1
33222: PUSH
33223: LD_INT 1
33225: NEG
33226: PUSH
33227: EMPTY
33228: LIST
33229: LIST
33230: PUSH
33231: LD_INT 2
33233: PUSH
33234: LD_INT 0
33236: PUSH
33237: EMPTY
33238: LIST
33239: LIST
33240: PUSH
33241: LD_INT 2
33243: PUSH
33244: LD_INT 1
33246: PUSH
33247: EMPTY
33248: LIST
33249: LIST
33250: PUSH
33251: LD_INT 2
33253: PUSH
33254: LD_INT 2
33256: PUSH
33257: EMPTY
33258: LIST
33259: LIST
33260: PUSH
33261: LD_INT 1
33263: PUSH
33264: LD_INT 2
33266: PUSH
33267: EMPTY
33268: LIST
33269: LIST
33270: PUSH
33271: LD_INT 0
33273: PUSH
33274: LD_INT 2
33276: PUSH
33277: EMPTY
33278: LIST
33279: LIST
33280: PUSH
33281: LD_INT 1
33283: NEG
33284: PUSH
33285: LD_INT 1
33287: PUSH
33288: EMPTY
33289: LIST
33290: LIST
33291: PUSH
33292: LD_INT 2
33294: NEG
33295: PUSH
33296: LD_INT 0
33298: PUSH
33299: EMPTY
33300: LIST
33301: LIST
33302: PUSH
33303: LD_INT 2
33305: NEG
33306: PUSH
33307: LD_INT 1
33309: NEG
33310: PUSH
33311: EMPTY
33312: LIST
33313: LIST
33314: PUSH
33315: LD_INT 2
33317: NEG
33318: PUSH
33319: LD_INT 2
33321: NEG
33322: PUSH
33323: EMPTY
33324: LIST
33325: LIST
33326: PUSH
33327: EMPTY
33328: LIST
33329: LIST
33330: LIST
33331: LIST
33332: LIST
33333: LIST
33334: LIST
33335: LIST
33336: LIST
33337: LIST
33338: LIST
33339: LIST
33340: LIST
33341: LIST
33342: LIST
33343: LIST
33344: LIST
33345: LIST
33346: LIST
33347: ST_TO_ADDR
// fBarracks1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33348: LD_ADDR_VAR 0 54
33352: PUSH
33353: LD_INT 0
33355: PUSH
33356: LD_INT 0
33358: PUSH
33359: EMPTY
33360: LIST
33361: LIST
33362: PUSH
33363: LD_INT 0
33365: PUSH
33366: LD_INT 1
33368: NEG
33369: PUSH
33370: EMPTY
33371: LIST
33372: LIST
33373: PUSH
33374: LD_INT 1
33376: PUSH
33377: LD_INT 0
33379: PUSH
33380: EMPTY
33381: LIST
33382: LIST
33383: PUSH
33384: LD_INT 1
33386: PUSH
33387: LD_INT 1
33389: PUSH
33390: EMPTY
33391: LIST
33392: LIST
33393: PUSH
33394: LD_INT 0
33396: PUSH
33397: LD_INT 1
33399: PUSH
33400: EMPTY
33401: LIST
33402: LIST
33403: PUSH
33404: LD_INT 1
33406: NEG
33407: PUSH
33408: LD_INT 0
33410: PUSH
33411: EMPTY
33412: LIST
33413: LIST
33414: PUSH
33415: LD_INT 1
33417: NEG
33418: PUSH
33419: LD_INT 1
33421: NEG
33422: PUSH
33423: EMPTY
33424: LIST
33425: LIST
33426: PUSH
33427: LD_INT 1
33429: NEG
33430: PUSH
33431: LD_INT 2
33433: NEG
33434: PUSH
33435: EMPTY
33436: LIST
33437: LIST
33438: PUSH
33439: LD_INT 0
33441: PUSH
33442: LD_INT 2
33444: NEG
33445: PUSH
33446: EMPTY
33447: LIST
33448: LIST
33449: PUSH
33450: LD_INT 1
33452: PUSH
33453: LD_INT 1
33455: NEG
33456: PUSH
33457: EMPTY
33458: LIST
33459: LIST
33460: PUSH
33461: LD_INT 2
33463: PUSH
33464: LD_INT 0
33466: PUSH
33467: EMPTY
33468: LIST
33469: LIST
33470: PUSH
33471: LD_INT 2
33473: PUSH
33474: LD_INT 1
33476: PUSH
33477: EMPTY
33478: LIST
33479: LIST
33480: PUSH
33481: LD_INT 2
33483: PUSH
33484: LD_INT 2
33486: PUSH
33487: EMPTY
33488: LIST
33489: LIST
33490: PUSH
33491: LD_INT 1
33493: PUSH
33494: LD_INT 2
33496: PUSH
33497: EMPTY
33498: LIST
33499: LIST
33500: PUSH
33501: LD_INT 0
33503: PUSH
33504: LD_INT 2
33506: PUSH
33507: EMPTY
33508: LIST
33509: LIST
33510: PUSH
33511: LD_INT 1
33513: NEG
33514: PUSH
33515: LD_INT 1
33517: PUSH
33518: EMPTY
33519: LIST
33520: LIST
33521: PUSH
33522: LD_INT 2
33524: NEG
33525: PUSH
33526: LD_INT 0
33528: PUSH
33529: EMPTY
33530: LIST
33531: LIST
33532: PUSH
33533: LD_INT 2
33535: NEG
33536: PUSH
33537: LD_INT 1
33539: NEG
33540: PUSH
33541: EMPTY
33542: LIST
33543: LIST
33544: PUSH
33545: LD_INT 2
33547: NEG
33548: PUSH
33549: LD_INT 2
33551: NEG
33552: PUSH
33553: EMPTY
33554: LIST
33555: LIST
33556: PUSH
33557: EMPTY
33558: LIST
33559: LIST
33560: LIST
33561: LIST
33562: LIST
33563: LIST
33564: LIST
33565: LIST
33566: LIST
33567: LIST
33568: LIST
33569: LIST
33570: LIST
33571: LIST
33572: LIST
33573: LIST
33574: LIST
33575: LIST
33576: LIST
33577: ST_TO_ADDR
// fBarracks2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33578: LD_ADDR_VAR 0 55
33582: PUSH
33583: LD_INT 0
33585: PUSH
33586: LD_INT 0
33588: PUSH
33589: EMPTY
33590: LIST
33591: LIST
33592: PUSH
33593: LD_INT 0
33595: PUSH
33596: LD_INT 1
33598: NEG
33599: PUSH
33600: EMPTY
33601: LIST
33602: LIST
33603: PUSH
33604: LD_INT 1
33606: PUSH
33607: LD_INT 0
33609: PUSH
33610: EMPTY
33611: LIST
33612: LIST
33613: PUSH
33614: LD_INT 1
33616: PUSH
33617: LD_INT 1
33619: PUSH
33620: EMPTY
33621: LIST
33622: LIST
33623: PUSH
33624: LD_INT 0
33626: PUSH
33627: LD_INT 1
33629: PUSH
33630: EMPTY
33631: LIST
33632: LIST
33633: PUSH
33634: LD_INT 1
33636: NEG
33637: PUSH
33638: LD_INT 0
33640: PUSH
33641: EMPTY
33642: LIST
33643: LIST
33644: PUSH
33645: LD_INT 1
33647: NEG
33648: PUSH
33649: LD_INT 1
33651: NEG
33652: PUSH
33653: EMPTY
33654: LIST
33655: LIST
33656: PUSH
33657: LD_INT 1
33659: NEG
33660: PUSH
33661: LD_INT 2
33663: NEG
33664: PUSH
33665: EMPTY
33666: LIST
33667: LIST
33668: PUSH
33669: LD_INT 0
33671: PUSH
33672: LD_INT 2
33674: NEG
33675: PUSH
33676: EMPTY
33677: LIST
33678: LIST
33679: PUSH
33680: LD_INT 1
33682: PUSH
33683: LD_INT 1
33685: NEG
33686: PUSH
33687: EMPTY
33688: LIST
33689: LIST
33690: PUSH
33691: LD_INT 2
33693: PUSH
33694: LD_INT 0
33696: PUSH
33697: EMPTY
33698: LIST
33699: LIST
33700: PUSH
33701: LD_INT 2
33703: PUSH
33704: LD_INT 1
33706: PUSH
33707: EMPTY
33708: LIST
33709: LIST
33710: PUSH
33711: LD_INT 2
33713: PUSH
33714: LD_INT 2
33716: PUSH
33717: EMPTY
33718: LIST
33719: LIST
33720: PUSH
33721: LD_INT 1
33723: PUSH
33724: LD_INT 2
33726: PUSH
33727: EMPTY
33728: LIST
33729: LIST
33730: PUSH
33731: LD_INT 0
33733: PUSH
33734: LD_INT 2
33736: PUSH
33737: EMPTY
33738: LIST
33739: LIST
33740: PUSH
33741: LD_INT 1
33743: NEG
33744: PUSH
33745: LD_INT 1
33747: PUSH
33748: EMPTY
33749: LIST
33750: LIST
33751: PUSH
33752: LD_INT 2
33754: NEG
33755: PUSH
33756: LD_INT 0
33758: PUSH
33759: EMPTY
33760: LIST
33761: LIST
33762: PUSH
33763: LD_INT 2
33765: NEG
33766: PUSH
33767: LD_INT 1
33769: NEG
33770: PUSH
33771: EMPTY
33772: LIST
33773: LIST
33774: PUSH
33775: LD_INT 2
33777: NEG
33778: PUSH
33779: LD_INT 2
33781: NEG
33782: PUSH
33783: EMPTY
33784: LIST
33785: LIST
33786: PUSH
33787: EMPTY
33788: LIST
33789: LIST
33790: LIST
33791: LIST
33792: LIST
33793: LIST
33794: LIST
33795: LIST
33796: LIST
33797: LIST
33798: LIST
33799: LIST
33800: LIST
33801: LIST
33802: LIST
33803: LIST
33804: LIST
33805: LIST
33806: LIST
33807: ST_TO_ADDR
// fBarracks3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
33808: LD_ADDR_VAR 0 56
33812: PUSH
33813: LD_INT 0
33815: PUSH
33816: LD_INT 0
33818: PUSH
33819: EMPTY
33820: LIST
33821: LIST
33822: PUSH
33823: LD_INT 0
33825: PUSH
33826: LD_INT 1
33828: NEG
33829: PUSH
33830: EMPTY
33831: LIST
33832: LIST
33833: PUSH
33834: LD_INT 1
33836: PUSH
33837: LD_INT 0
33839: PUSH
33840: EMPTY
33841: LIST
33842: LIST
33843: PUSH
33844: LD_INT 1
33846: PUSH
33847: LD_INT 1
33849: PUSH
33850: EMPTY
33851: LIST
33852: LIST
33853: PUSH
33854: LD_INT 0
33856: PUSH
33857: LD_INT 1
33859: PUSH
33860: EMPTY
33861: LIST
33862: LIST
33863: PUSH
33864: LD_INT 1
33866: NEG
33867: PUSH
33868: LD_INT 0
33870: PUSH
33871: EMPTY
33872: LIST
33873: LIST
33874: PUSH
33875: LD_INT 1
33877: NEG
33878: PUSH
33879: LD_INT 1
33881: NEG
33882: PUSH
33883: EMPTY
33884: LIST
33885: LIST
33886: PUSH
33887: LD_INT 1
33889: NEG
33890: PUSH
33891: LD_INT 2
33893: NEG
33894: PUSH
33895: EMPTY
33896: LIST
33897: LIST
33898: PUSH
33899: LD_INT 0
33901: PUSH
33902: LD_INT 2
33904: NEG
33905: PUSH
33906: EMPTY
33907: LIST
33908: LIST
33909: PUSH
33910: LD_INT 1
33912: PUSH
33913: LD_INT 1
33915: NEG
33916: PUSH
33917: EMPTY
33918: LIST
33919: LIST
33920: PUSH
33921: LD_INT 2
33923: PUSH
33924: LD_INT 0
33926: PUSH
33927: EMPTY
33928: LIST
33929: LIST
33930: PUSH
33931: LD_INT 2
33933: PUSH
33934: LD_INT 1
33936: PUSH
33937: EMPTY
33938: LIST
33939: LIST
33940: PUSH
33941: LD_INT 2
33943: PUSH
33944: LD_INT 2
33946: PUSH
33947: EMPTY
33948: LIST
33949: LIST
33950: PUSH
33951: LD_INT 1
33953: PUSH
33954: LD_INT 2
33956: PUSH
33957: EMPTY
33958: LIST
33959: LIST
33960: PUSH
33961: LD_INT 0
33963: PUSH
33964: LD_INT 2
33966: PUSH
33967: EMPTY
33968: LIST
33969: LIST
33970: PUSH
33971: LD_INT 1
33973: NEG
33974: PUSH
33975: LD_INT 1
33977: PUSH
33978: EMPTY
33979: LIST
33980: LIST
33981: PUSH
33982: LD_INT 2
33984: NEG
33985: PUSH
33986: LD_INT 0
33988: PUSH
33989: EMPTY
33990: LIST
33991: LIST
33992: PUSH
33993: LD_INT 2
33995: NEG
33996: PUSH
33997: LD_INT 1
33999: NEG
34000: PUSH
34001: EMPTY
34002: LIST
34003: LIST
34004: PUSH
34005: LD_INT 2
34007: NEG
34008: PUSH
34009: LD_INT 2
34011: NEG
34012: PUSH
34013: EMPTY
34014: LIST
34015: LIST
34016: PUSH
34017: EMPTY
34018: LIST
34019: LIST
34020: LIST
34021: LIST
34022: LIST
34023: LIST
34024: LIST
34025: LIST
34026: LIST
34027: LIST
34028: LIST
34029: LIST
34030: LIST
34031: LIST
34032: LIST
34033: LIST
34034: LIST
34035: LIST
34036: LIST
34037: ST_TO_ADDR
// fBarracks4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34038: LD_ADDR_VAR 0 57
34042: PUSH
34043: LD_INT 0
34045: PUSH
34046: LD_INT 0
34048: PUSH
34049: EMPTY
34050: LIST
34051: LIST
34052: PUSH
34053: LD_INT 0
34055: PUSH
34056: LD_INT 1
34058: NEG
34059: PUSH
34060: EMPTY
34061: LIST
34062: LIST
34063: PUSH
34064: LD_INT 1
34066: PUSH
34067: LD_INT 0
34069: PUSH
34070: EMPTY
34071: LIST
34072: LIST
34073: PUSH
34074: LD_INT 1
34076: PUSH
34077: LD_INT 1
34079: PUSH
34080: EMPTY
34081: LIST
34082: LIST
34083: PUSH
34084: LD_INT 0
34086: PUSH
34087: LD_INT 1
34089: PUSH
34090: EMPTY
34091: LIST
34092: LIST
34093: PUSH
34094: LD_INT 1
34096: NEG
34097: PUSH
34098: LD_INT 0
34100: PUSH
34101: EMPTY
34102: LIST
34103: LIST
34104: PUSH
34105: LD_INT 1
34107: NEG
34108: PUSH
34109: LD_INT 1
34111: NEG
34112: PUSH
34113: EMPTY
34114: LIST
34115: LIST
34116: PUSH
34117: LD_INT 1
34119: NEG
34120: PUSH
34121: LD_INT 2
34123: NEG
34124: PUSH
34125: EMPTY
34126: LIST
34127: LIST
34128: PUSH
34129: LD_INT 0
34131: PUSH
34132: LD_INT 2
34134: NEG
34135: PUSH
34136: EMPTY
34137: LIST
34138: LIST
34139: PUSH
34140: LD_INT 1
34142: PUSH
34143: LD_INT 1
34145: NEG
34146: PUSH
34147: EMPTY
34148: LIST
34149: LIST
34150: PUSH
34151: LD_INT 2
34153: PUSH
34154: LD_INT 0
34156: PUSH
34157: EMPTY
34158: LIST
34159: LIST
34160: PUSH
34161: LD_INT 2
34163: PUSH
34164: LD_INT 1
34166: PUSH
34167: EMPTY
34168: LIST
34169: LIST
34170: PUSH
34171: LD_INT 2
34173: PUSH
34174: LD_INT 2
34176: PUSH
34177: EMPTY
34178: LIST
34179: LIST
34180: PUSH
34181: LD_INT 1
34183: PUSH
34184: LD_INT 2
34186: PUSH
34187: EMPTY
34188: LIST
34189: LIST
34190: PUSH
34191: LD_INT 0
34193: PUSH
34194: LD_INT 2
34196: PUSH
34197: EMPTY
34198: LIST
34199: LIST
34200: PUSH
34201: LD_INT 1
34203: NEG
34204: PUSH
34205: LD_INT 1
34207: PUSH
34208: EMPTY
34209: LIST
34210: LIST
34211: PUSH
34212: LD_INT 2
34214: NEG
34215: PUSH
34216: LD_INT 0
34218: PUSH
34219: EMPTY
34220: LIST
34221: LIST
34222: PUSH
34223: LD_INT 2
34225: NEG
34226: PUSH
34227: LD_INT 1
34229: NEG
34230: PUSH
34231: EMPTY
34232: LIST
34233: LIST
34234: PUSH
34235: LD_INT 2
34237: NEG
34238: PUSH
34239: LD_INT 2
34241: NEG
34242: PUSH
34243: EMPTY
34244: LIST
34245: LIST
34246: PUSH
34247: EMPTY
34248: LIST
34249: LIST
34250: LIST
34251: LIST
34252: LIST
34253: LIST
34254: LIST
34255: LIST
34256: LIST
34257: LIST
34258: LIST
34259: LIST
34260: LIST
34261: LIST
34262: LIST
34263: LIST
34264: LIST
34265: LIST
34266: LIST
34267: ST_TO_ADDR
// fBarracks5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] , [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
34268: LD_ADDR_VAR 0 58
34272: PUSH
34273: LD_INT 0
34275: PUSH
34276: LD_INT 0
34278: PUSH
34279: EMPTY
34280: LIST
34281: LIST
34282: PUSH
34283: LD_INT 0
34285: PUSH
34286: LD_INT 1
34288: NEG
34289: PUSH
34290: EMPTY
34291: LIST
34292: LIST
34293: PUSH
34294: LD_INT 1
34296: PUSH
34297: LD_INT 0
34299: PUSH
34300: EMPTY
34301: LIST
34302: LIST
34303: PUSH
34304: LD_INT 1
34306: PUSH
34307: LD_INT 1
34309: PUSH
34310: EMPTY
34311: LIST
34312: LIST
34313: PUSH
34314: LD_INT 0
34316: PUSH
34317: LD_INT 1
34319: PUSH
34320: EMPTY
34321: LIST
34322: LIST
34323: PUSH
34324: LD_INT 1
34326: NEG
34327: PUSH
34328: LD_INT 0
34330: PUSH
34331: EMPTY
34332: LIST
34333: LIST
34334: PUSH
34335: LD_INT 1
34337: NEG
34338: PUSH
34339: LD_INT 1
34341: NEG
34342: PUSH
34343: EMPTY
34344: LIST
34345: LIST
34346: PUSH
34347: LD_INT 1
34349: NEG
34350: PUSH
34351: LD_INT 2
34353: NEG
34354: PUSH
34355: EMPTY
34356: LIST
34357: LIST
34358: PUSH
34359: LD_INT 0
34361: PUSH
34362: LD_INT 2
34364: NEG
34365: PUSH
34366: EMPTY
34367: LIST
34368: LIST
34369: PUSH
34370: LD_INT 1
34372: PUSH
34373: LD_INT 1
34375: NEG
34376: PUSH
34377: EMPTY
34378: LIST
34379: LIST
34380: PUSH
34381: LD_INT 2
34383: PUSH
34384: LD_INT 0
34386: PUSH
34387: EMPTY
34388: LIST
34389: LIST
34390: PUSH
34391: LD_INT 2
34393: PUSH
34394: LD_INT 1
34396: PUSH
34397: EMPTY
34398: LIST
34399: LIST
34400: PUSH
34401: LD_INT 2
34403: PUSH
34404: LD_INT 2
34406: PUSH
34407: EMPTY
34408: LIST
34409: LIST
34410: PUSH
34411: LD_INT 1
34413: PUSH
34414: LD_INT 2
34416: PUSH
34417: EMPTY
34418: LIST
34419: LIST
34420: PUSH
34421: LD_INT 0
34423: PUSH
34424: LD_INT 2
34426: PUSH
34427: EMPTY
34428: LIST
34429: LIST
34430: PUSH
34431: LD_INT 1
34433: NEG
34434: PUSH
34435: LD_INT 1
34437: PUSH
34438: EMPTY
34439: LIST
34440: LIST
34441: PUSH
34442: LD_INT 2
34444: NEG
34445: PUSH
34446: LD_INT 0
34448: PUSH
34449: EMPTY
34450: LIST
34451: LIST
34452: PUSH
34453: LD_INT 2
34455: NEG
34456: PUSH
34457: LD_INT 1
34459: NEG
34460: PUSH
34461: EMPTY
34462: LIST
34463: LIST
34464: PUSH
34465: LD_INT 2
34467: NEG
34468: PUSH
34469: LD_INT 2
34471: NEG
34472: PUSH
34473: EMPTY
34474: LIST
34475: LIST
34476: PUSH
34477: EMPTY
34478: LIST
34479: LIST
34480: LIST
34481: LIST
34482: LIST
34483: LIST
34484: LIST
34485: LIST
34486: LIST
34487: LIST
34488: LIST
34489: LIST
34490: LIST
34491: LIST
34492: LIST
34493: LIST
34494: LIST
34495: LIST
34496: LIST
34497: ST_TO_ADDR
// fBunker0 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34498: LD_ADDR_VAR 0 59
34502: PUSH
34503: LD_INT 0
34505: PUSH
34506: LD_INT 0
34508: PUSH
34509: EMPTY
34510: LIST
34511: LIST
34512: PUSH
34513: LD_INT 0
34515: PUSH
34516: LD_INT 1
34518: NEG
34519: PUSH
34520: EMPTY
34521: LIST
34522: LIST
34523: PUSH
34524: LD_INT 1
34526: PUSH
34527: LD_INT 0
34529: PUSH
34530: EMPTY
34531: LIST
34532: LIST
34533: PUSH
34534: LD_INT 1
34536: PUSH
34537: LD_INT 1
34539: PUSH
34540: EMPTY
34541: LIST
34542: LIST
34543: PUSH
34544: LD_INT 0
34546: PUSH
34547: LD_INT 1
34549: PUSH
34550: EMPTY
34551: LIST
34552: LIST
34553: PUSH
34554: LD_INT 1
34556: NEG
34557: PUSH
34558: LD_INT 0
34560: PUSH
34561: EMPTY
34562: LIST
34563: LIST
34564: PUSH
34565: LD_INT 1
34567: NEG
34568: PUSH
34569: LD_INT 1
34571: NEG
34572: PUSH
34573: EMPTY
34574: LIST
34575: LIST
34576: PUSH
34577: EMPTY
34578: LIST
34579: LIST
34580: LIST
34581: LIST
34582: LIST
34583: LIST
34584: LIST
34585: ST_TO_ADDR
// fBunker1 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34586: LD_ADDR_VAR 0 60
34590: PUSH
34591: LD_INT 0
34593: PUSH
34594: LD_INT 0
34596: PUSH
34597: EMPTY
34598: LIST
34599: LIST
34600: PUSH
34601: LD_INT 0
34603: PUSH
34604: LD_INT 1
34606: NEG
34607: PUSH
34608: EMPTY
34609: LIST
34610: LIST
34611: PUSH
34612: LD_INT 1
34614: PUSH
34615: LD_INT 0
34617: PUSH
34618: EMPTY
34619: LIST
34620: LIST
34621: PUSH
34622: LD_INT 1
34624: PUSH
34625: LD_INT 1
34627: PUSH
34628: EMPTY
34629: LIST
34630: LIST
34631: PUSH
34632: LD_INT 0
34634: PUSH
34635: LD_INT 1
34637: PUSH
34638: EMPTY
34639: LIST
34640: LIST
34641: PUSH
34642: LD_INT 1
34644: NEG
34645: PUSH
34646: LD_INT 0
34648: PUSH
34649: EMPTY
34650: LIST
34651: LIST
34652: PUSH
34653: LD_INT 1
34655: NEG
34656: PUSH
34657: LD_INT 1
34659: NEG
34660: PUSH
34661: EMPTY
34662: LIST
34663: LIST
34664: PUSH
34665: EMPTY
34666: LIST
34667: LIST
34668: LIST
34669: LIST
34670: LIST
34671: LIST
34672: LIST
34673: ST_TO_ADDR
// fBunker2 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34674: LD_ADDR_VAR 0 61
34678: PUSH
34679: LD_INT 0
34681: PUSH
34682: LD_INT 0
34684: PUSH
34685: EMPTY
34686: LIST
34687: LIST
34688: PUSH
34689: LD_INT 0
34691: PUSH
34692: LD_INT 1
34694: NEG
34695: PUSH
34696: EMPTY
34697: LIST
34698: LIST
34699: PUSH
34700: LD_INT 1
34702: PUSH
34703: LD_INT 0
34705: PUSH
34706: EMPTY
34707: LIST
34708: LIST
34709: PUSH
34710: LD_INT 1
34712: PUSH
34713: LD_INT 1
34715: PUSH
34716: EMPTY
34717: LIST
34718: LIST
34719: PUSH
34720: LD_INT 0
34722: PUSH
34723: LD_INT 1
34725: PUSH
34726: EMPTY
34727: LIST
34728: LIST
34729: PUSH
34730: LD_INT 1
34732: NEG
34733: PUSH
34734: LD_INT 0
34736: PUSH
34737: EMPTY
34738: LIST
34739: LIST
34740: PUSH
34741: LD_INT 1
34743: NEG
34744: PUSH
34745: LD_INT 1
34747: NEG
34748: PUSH
34749: EMPTY
34750: LIST
34751: LIST
34752: PUSH
34753: EMPTY
34754: LIST
34755: LIST
34756: LIST
34757: LIST
34758: LIST
34759: LIST
34760: LIST
34761: ST_TO_ADDR
// fBunker3 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34762: LD_ADDR_VAR 0 62
34766: PUSH
34767: LD_INT 0
34769: PUSH
34770: LD_INT 0
34772: PUSH
34773: EMPTY
34774: LIST
34775: LIST
34776: PUSH
34777: LD_INT 0
34779: PUSH
34780: LD_INT 1
34782: NEG
34783: PUSH
34784: EMPTY
34785: LIST
34786: LIST
34787: PUSH
34788: LD_INT 1
34790: PUSH
34791: LD_INT 0
34793: PUSH
34794: EMPTY
34795: LIST
34796: LIST
34797: PUSH
34798: LD_INT 1
34800: PUSH
34801: LD_INT 1
34803: PUSH
34804: EMPTY
34805: LIST
34806: LIST
34807: PUSH
34808: LD_INT 0
34810: PUSH
34811: LD_INT 1
34813: PUSH
34814: EMPTY
34815: LIST
34816: LIST
34817: PUSH
34818: LD_INT 1
34820: NEG
34821: PUSH
34822: LD_INT 0
34824: PUSH
34825: EMPTY
34826: LIST
34827: LIST
34828: PUSH
34829: LD_INT 1
34831: NEG
34832: PUSH
34833: LD_INT 1
34835: NEG
34836: PUSH
34837: EMPTY
34838: LIST
34839: LIST
34840: PUSH
34841: EMPTY
34842: LIST
34843: LIST
34844: LIST
34845: LIST
34846: LIST
34847: LIST
34848: LIST
34849: ST_TO_ADDR
// fBunker4 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34850: LD_ADDR_VAR 0 63
34854: PUSH
34855: LD_INT 0
34857: PUSH
34858: LD_INT 0
34860: PUSH
34861: EMPTY
34862: LIST
34863: LIST
34864: PUSH
34865: LD_INT 0
34867: PUSH
34868: LD_INT 1
34870: NEG
34871: PUSH
34872: EMPTY
34873: LIST
34874: LIST
34875: PUSH
34876: LD_INT 1
34878: PUSH
34879: LD_INT 0
34881: PUSH
34882: EMPTY
34883: LIST
34884: LIST
34885: PUSH
34886: LD_INT 1
34888: PUSH
34889: LD_INT 1
34891: PUSH
34892: EMPTY
34893: LIST
34894: LIST
34895: PUSH
34896: LD_INT 0
34898: PUSH
34899: LD_INT 1
34901: PUSH
34902: EMPTY
34903: LIST
34904: LIST
34905: PUSH
34906: LD_INT 1
34908: NEG
34909: PUSH
34910: LD_INT 0
34912: PUSH
34913: EMPTY
34914: LIST
34915: LIST
34916: PUSH
34917: LD_INT 1
34919: NEG
34920: PUSH
34921: LD_INT 1
34923: NEG
34924: PUSH
34925: EMPTY
34926: LIST
34927: LIST
34928: PUSH
34929: EMPTY
34930: LIST
34931: LIST
34932: LIST
34933: LIST
34934: LIST
34935: LIST
34936: LIST
34937: ST_TO_ADDR
// fBunker5 = [ [ 0 , 0 ] , [ 0 , - 1 ] , [ 1 , 0 ] , [ 1 , 1 ] , [ 0 , 1 ] , [ - 1 , 0 ] , [ - 1 , - 1 ] ] ;
34938: LD_ADDR_VAR 0 64
34942: PUSH
34943: LD_INT 0
34945: PUSH
34946: LD_INT 0
34948: PUSH
34949: EMPTY
34950: LIST
34951: LIST
34952: PUSH
34953: LD_INT 0
34955: PUSH
34956: LD_INT 1
34958: NEG
34959: PUSH
34960: EMPTY
34961: LIST
34962: LIST
34963: PUSH
34964: LD_INT 1
34966: PUSH
34967: LD_INT 0
34969: PUSH
34970: EMPTY
34971: LIST
34972: LIST
34973: PUSH
34974: LD_INT 1
34976: PUSH
34977: LD_INT 1
34979: PUSH
34980: EMPTY
34981: LIST
34982: LIST
34983: PUSH
34984: LD_INT 0
34986: PUSH
34987: LD_INT 1
34989: PUSH
34990: EMPTY
34991: LIST
34992: LIST
34993: PUSH
34994: LD_INT 1
34996: NEG
34997: PUSH
34998: LD_INT 0
35000: PUSH
35001: EMPTY
35002: LIST
35003: LIST
35004: PUSH
35005: LD_INT 1
35007: NEG
35008: PUSH
35009: LD_INT 1
35011: NEG
35012: PUSH
35013: EMPTY
35014: LIST
35015: LIST
35016: PUSH
35017: EMPTY
35018: LIST
35019: LIST
35020: LIST
35021: LIST
35022: LIST
35023: LIST
35024: LIST
35025: ST_TO_ADDR
// end ; 1 :
35026: GO 40923
35028: LD_INT 1
35030: DOUBLE
35031: EQUAL
35032: IFTRUE 35036
35034: GO 37659
35036: POP
// begin fDepotAm0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35037: LD_ADDR_VAR 0 11
35041: PUSH
35042: LD_INT 1
35044: NEG
35045: PUSH
35046: LD_INT 3
35048: NEG
35049: PUSH
35050: EMPTY
35051: LIST
35052: LIST
35053: PUSH
35054: LD_INT 0
35056: PUSH
35057: LD_INT 3
35059: NEG
35060: PUSH
35061: EMPTY
35062: LIST
35063: LIST
35064: PUSH
35065: LD_INT 1
35067: PUSH
35068: LD_INT 2
35070: NEG
35071: PUSH
35072: EMPTY
35073: LIST
35074: LIST
35075: PUSH
35076: EMPTY
35077: LIST
35078: LIST
35079: LIST
35080: ST_TO_ADDR
// fDepotAm1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35081: LD_ADDR_VAR 0 12
35085: PUSH
35086: LD_INT 2
35088: PUSH
35089: LD_INT 1
35091: NEG
35092: PUSH
35093: EMPTY
35094: LIST
35095: LIST
35096: PUSH
35097: LD_INT 3
35099: PUSH
35100: LD_INT 0
35102: PUSH
35103: EMPTY
35104: LIST
35105: LIST
35106: PUSH
35107: LD_INT 3
35109: PUSH
35110: LD_INT 1
35112: PUSH
35113: EMPTY
35114: LIST
35115: LIST
35116: PUSH
35117: EMPTY
35118: LIST
35119: LIST
35120: LIST
35121: ST_TO_ADDR
// fDepotAm2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35122: LD_ADDR_VAR 0 13
35126: PUSH
35127: LD_INT 3
35129: PUSH
35130: LD_INT 2
35132: PUSH
35133: EMPTY
35134: LIST
35135: LIST
35136: PUSH
35137: LD_INT 3
35139: PUSH
35140: LD_INT 3
35142: PUSH
35143: EMPTY
35144: LIST
35145: LIST
35146: PUSH
35147: LD_INT 2
35149: PUSH
35150: LD_INT 3
35152: PUSH
35153: EMPTY
35154: LIST
35155: LIST
35156: PUSH
35157: EMPTY
35158: LIST
35159: LIST
35160: LIST
35161: ST_TO_ADDR
// fDepotAm3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35162: LD_ADDR_VAR 0 14
35166: PUSH
35167: LD_INT 1
35169: PUSH
35170: LD_INT 3
35172: PUSH
35173: EMPTY
35174: LIST
35175: LIST
35176: PUSH
35177: LD_INT 0
35179: PUSH
35180: LD_INT 3
35182: PUSH
35183: EMPTY
35184: LIST
35185: LIST
35186: PUSH
35187: LD_INT 1
35189: NEG
35190: PUSH
35191: LD_INT 2
35193: PUSH
35194: EMPTY
35195: LIST
35196: LIST
35197: PUSH
35198: EMPTY
35199: LIST
35200: LIST
35201: LIST
35202: ST_TO_ADDR
// fDepotAm4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35203: LD_ADDR_VAR 0 15
35207: PUSH
35208: LD_INT 2
35210: NEG
35211: PUSH
35212: LD_INT 1
35214: PUSH
35215: EMPTY
35216: LIST
35217: LIST
35218: PUSH
35219: LD_INT 3
35221: NEG
35222: PUSH
35223: LD_INT 0
35225: PUSH
35226: EMPTY
35227: LIST
35228: LIST
35229: PUSH
35230: LD_INT 3
35232: NEG
35233: PUSH
35234: LD_INT 1
35236: NEG
35237: PUSH
35238: EMPTY
35239: LIST
35240: LIST
35241: PUSH
35242: EMPTY
35243: LIST
35244: LIST
35245: LIST
35246: ST_TO_ADDR
// fDepotAm5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35247: LD_ADDR_VAR 0 16
35251: PUSH
35252: LD_INT 2
35254: NEG
35255: PUSH
35256: LD_INT 3
35258: NEG
35259: PUSH
35260: EMPTY
35261: LIST
35262: LIST
35263: PUSH
35264: LD_INT 3
35266: NEG
35267: PUSH
35268: LD_INT 2
35270: NEG
35271: PUSH
35272: EMPTY
35273: LIST
35274: LIST
35275: PUSH
35276: LD_INT 3
35278: NEG
35279: PUSH
35280: LD_INT 3
35282: NEG
35283: PUSH
35284: EMPTY
35285: LIST
35286: LIST
35287: PUSH
35288: EMPTY
35289: LIST
35290: LIST
35291: LIST
35292: ST_TO_ADDR
// fDepotAr0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
35293: LD_ADDR_VAR 0 17
35297: PUSH
35298: LD_INT 1
35300: NEG
35301: PUSH
35302: LD_INT 3
35304: NEG
35305: PUSH
35306: EMPTY
35307: LIST
35308: LIST
35309: PUSH
35310: LD_INT 0
35312: PUSH
35313: LD_INT 3
35315: NEG
35316: PUSH
35317: EMPTY
35318: LIST
35319: LIST
35320: PUSH
35321: LD_INT 1
35323: PUSH
35324: LD_INT 2
35326: NEG
35327: PUSH
35328: EMPTY
35329: LIST
35330: LIST
35331: PUSH
35332: EMPTY
35333: LIST
35334: LIST
35335: LIST
35336: ST_TO_ADDR
// fDepotAr1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
35337: LD_ADDR_VAR 0 18
35341: PUSH
35342: LD_INT 2
35344: PUSH
35345: LD_INT 1
35347: NEG
35348: PUSH
35349: EMPTY
35350: LIST
35351: LIST
35352: PUSH
35353: LD_INT 3
35355: PUSH
35356: LD_INT 0
35358: PUSH
35359: EMPTY
35360: LIST
35361: LIST
35362: PUSH
35363: LD_INT 3
35365: PUSH
35366: LD_INT 1
35368: PUSH
35369: EMPTY
35370: LIST
35371: LIST
35372: PUSH
35373: EMPTY
35374: LIST
35375: LIST
35376: LIST
35377: ST_TO_ADDR
// fDepotAr2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
35378: LD_ADDR_VAR 0 19
35382: PUSH
35383: LD_INT 3
35385: PUSH
35386: LD_INT 2
35388: PUSH
35389: EMPTY
35390: LIST
35391: LIST
35392: PUSH
35393: LD_INT 3
35395: PUSH
35396: LD_INT 3
35398: PUSH
35399: EMPTY
35400: LIST
35401: LIST
35402: PUSH
35403: LD_INT 2
35405: PUSH
35406: LD_INT 3
35408: PUSH
35409: EMPTY
35410: LIST
35411: LIST
35412: PUSH
35413: EMPTY
35414: LIST
35415: LIST
35416: LIST
35417: ST_TO_ADDR
// fDepotAr3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
35418: LD_ADDR_VAR 0 20
35422: PUSH
35423: LD_INT 1
35425: PUSH
35426: LD_INT 3
35428: PUSH
35429: EMPTY
35430: LIST
35431: LIST
35432: PUSH
35433: LD_INT 0
35435: PUSH
35436: LD_INT 3
35438: PUSH
35439: EMPTY
35440: LIST
35441: LIST
35442: PUSH
35443: LD_INT 1
35445: NEG
35446: PUSH
35447: LD_INT 2
35449: PUSH
35450: EMPTY
35451: LIST
35452: LIST
35453: PUSH
35454: EMPTY
35455: LIST
35456: LIST
35457: LIST
35458: ST_TO_ADDR
// fDepotAr4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
35459: LD_ADDR_VAR 0 21
35463: PUSH
35464: LD_INT 2
35466: NEG
35467: PUSH
35468: LD_INT 1
35470: PUSH
35471: EMPTY
35472: LIST
35473: LIST
35474: PUSH
35475: LD_INT 3
35477: NEG
35478: PUSH
35479: LD_INT 0
35481: PUSH
35482: EMPTY
35483: LIST
35484: LIST
35485: PUSH
35486: LD_INT 3
35488: NEG
35489: PUSH
35490: LD_INT 1
35492: NEG
35493: PUSH
35494: EMPTY
35495: LIST
35496: LIST
35497: PUSH
35498: EMPTY
35499: LIST
35500: LIST
35501: LIST
35502: ST_TO_ADDR
// fDepotAr5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
35503: LD_ADDR_VAR 0 22
35507: PUSH
35508: LD_INT 2
35510: NEG
35511: PUSH
35512: LD_INT 3
35514: NEG
35515: PUSH
35516: EMPTY
35517: LIST
35518: LIST
35519: PUSH
35520: LD_INT 3
35522: NEG
35523: PUSH
35524: LD_INT 2
35526: NEG
35527: PUSH
35528: EMPTY
35529: LIST
35530: LIST
35531: PUSH
35532: LD_INT 3
35534: NEG
35535: PUSH
35536: LD_INT 3
35538: NEG
35539: PUSH
35540: EMPTY
35541: LIST
35542: LIST
35543: PUSH
35544: EMPTY
35545: LIST
35546: LIST
35547: LIST
35548: ST_TO_ADDR
// fDepotRu0 = [ [ 0 , - 3 ] , [ - 1 , - 4 ] , [ 1 , - 3 ] ] ;
35549: LD_ADDR_VAR 0 23
35553: PUSH
35554: LD_INT 0
35556: PUSH
35557: LD_INT 3
35559: NEG
35560: PUSH
35561: EMPTY
35562: LIST
35563: LIST
35564: PUSH
35565: LD_INT 1
35567: NEG
35568: PUSH
35569: LD_INT 4
35571: NEG
35572: PUSH
35573: EMPTY
35574: LIST
35575: LIST
35576: PUSH
35577: LD_INT 1
35579: PUSH
35580: LD_INT 3
35582: NEG
35583: PUSH
35584: EMPTY
35585: LIST
35586: LIST
35587: PUSH
35588: EMPTY
35589: LIST
35590: LIST
35591: LIST
35592: ST_TO_ADDR
// fDepotRu1 = [ [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 1 ] ] ;
35593: LD_ADDR_VAR 0 24
35597: PUSH
35598: LD_INT 3
35600: PUSH
35601: LD_INT 0
35603: PUSH
35604: EMPTY
35605: LIST
35606: LIST
35607: PUSH
35608: LD_INT 3
35610: PUSH
35611: LD_INT 1
35613: NEG
35614: PUSH
35615: EMPTY
35616: LIST
35617: LIST
35618: PUSH
35619: LD_INT 4
35621: PUSH
35622: LD_INT 1
35624: PUSH
35625: EMPTY
35626: LIST
35627: LIST
35628: PUSH
35629: EMPTY
35630: LIST
35631: LIST
35632: LIST
35633: ST_TO_ADDR
// fDepotRu2 = [ [ 3 , 3 ] , [ 4 , 3 ] , [ 3 , 4 ] ] ;
35634: LD_ADDR_VAR 0 25
35638: PUSH
35639: LD_INT 3
35641: PUSH
35642: LD_INT 3
35644: PUSH
35645: EMPTY
35646: LIST
35647: LIST
35648: PUSH
35649: LD_INT 4
35651: PUSH
35652: LD_INT 3
35654: PUSH
35655: EMPTY
35656: LIST
35657: LIST
35658: PUSH
35659: LD_INT 3
35661: PUSH
35662: LD_INT 4
35664: PUSH
35665: EMPTY
35666: LIST
35667: LIST
35668: PUSH
35669: EMPTY
35670: LIST
35671: LIST
35672: LIST
35673: ST_TO_ADDR
// fDepotRu3 = [ [ 0 , 3 ] , [ 1 , 4 ] , [ - 1 , 3 ] ] ;
35674: LD_ADDR_VAR 0 26
35678: PUSH
35679: LD_INT 0
35681: PUSH
35682: LD_INT 3
35684: PUSH
35685: EMPTY
35686: LIST
35687: LIST
35688: PUSH
35689: LD_INT 1
35691: PUSH
35692: LD_INT 4
35694: PUSH
35695: EMPTY
35696: LIST
35697: LIST
35698: PUSH
35699: LD_INT 1
35701: NEG
35702: PUSH
35703: LD_INT 3
35705: PUSH
35706: EMPTY
35707: LIST
35708: LIST
35709: PUSH
35710: EMPTY
35711: LIST
35712: LIST
35713: LIST
35714: ST_TO_ADDR
// fDepotRu4 = [ [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , - 1 ] ] ;
35715: LD_ADDR_VAR 0 27
35719: PUSH
35720: LD_INT 3
35722: NEG
35723: PUSH
35724: LD_INT 0
35726: PUSH
35727: EMPTY
35728: LIST
35729: LIST
35730: PUSH
35731: LD_INT 3
35733: NEG
35734: PUSH
35735: LD_INT 1
35737: PUSH
35738: EMPTY
35739: LIST
35740: LIST
35741: PUSH
35742: LD_INT 4
35744: NEG
35745: PUSH
35746: LD_INT 1
35748: NEG
35749: PUSH
35750: EMPTY
35751: LIST
35752: LIST
35753: PUSH
35754: EMPTY
35755: LIST
35756: LIST
35757: LIST
35758: ST_TO_ADDR
// fDepotRu5 = [ [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] ] ;
35759: LD_ADDR_VAR 0 28
35763: PUSH
35764: LD_INT 3
35766: NEG
35767: PUSH
35768: LD_INT 3
35770: NEG
35771: PUSH
35772: EMPTY
35773: LIST
35774: LIST
35775: PUSH
35776: LD_INT 3
35778: NEG
35779: PUSH
35780: LD_INT 4
35782: NEG
35783: PUSH
35784: EMPTY
35785: LIST
35786: LIST
35787: PUSH
35788: LD_INT 4
35790: NEG
35791: PUSH
35792: LD_INT 3
35794: NEG
35795: PUSH
35796: EMPTY
35797: LIST
35798: LIST
35799: PUSH
35800: EMPTY
35801: LIST
35802: LIST
35803: LIST
35804: ST_TO_ADDR
// fFactory0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] , [ - 1 , - 4 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ - 1 , - 5 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ - 1 , - 6 ] , [ 0 , - 6 ] , [ 1 , - 5 ] ] ;
35805: LD_ADDR_VAR 0 29
35809: PUSH
35810: LD_INT 1
35812: NEG
35813: PUSH
35814: LD_INT 3
35816: NEG
35817: PUSH
35818: EMPTY
35819: LIST
35820: LIST
35821: PUSH
35822: LD_INT 0
35824: PUSH
35825: LD_INT 3
35827: NEG
35828: PUSH
35829: EMPTY
35830: LIST
35831: LIST
35832: PUSH
35833: LD_INT 1
35835: PUSH
35836: LD_INT 2
35838: NEG
35839: PUSH
35840: EMPTY
35841: LIST
35842: LIST
35843: PUSH
35844: LD_INT 1
35846: NEG
35847: PUSH
35848: LD_INT 4
35850: NEG
35851: PUSH
35852: EMPTY
35853: LIST
35854: LIST
35855: PUSH
35856: LD_INT 0
35858: PUSH
35859: LD_INT 4
35861: NEG
35862: PUSH
35863: EMPTY
35864: LIST
35865: LIST
35866: PUSH
35867: LD_INT 1
35869: PUSH
35870: LD_INT 3
35872: NEG
35873: PUSH
35874: EMPTY
35875: LIST
35876: LIST
35877: PUSH
35878: LD_INT 1
35880: NEG
35881: PUSH
35882: LD_INT 5
35884: NEG
35885: PUSH
35886: EMPTY
35887: LIST
35888: LIST
35889: PUSH
35890: LD_INT 0
35892: PUSH
35893: LD_INT 5
35895: NEG
35896: PUSH
35897: EMPTY
35898: LIST
35899: LIST
35900: PUSH
35901: LD_INT 1
35903: PUSH
35904: LD_INT 4
35906: NEG
35907: PUSH
35908: EMPTY
35909: LIST
35910: LIST
35911: PUSH
35912: LD_INT 1
35914: NEG
35915: PUSH
35916: LD_INT 6
35918: NEG
35919: PUSH
35920: EMPTY
35921: LIST
35922: LIST
35923: PUSH
35924: LD_INT 0
35926: PUSH
35927: LD_INT 6
35929: NEG
35930: PUSH
35931: EMPTY
35932: LIST
35933: LIST
35934: PUSH
35935: LD_INT 1
35937: PUSH
35938: LD_INT 5
35940: NEG
35941: PUSH
35942: EMPTY
35943: LIST
35944: LIST
35945: PUSH
35946: EMPTY
35947: LIST
35948: LIST
35949: LIST
35950: LIST
35951: LIST
35952: LIST
35953: LIST
35954: LIST
35955: LIST
35956: LIST
35957: LIST
35958: LIST
35959: ST_TO_ADDR
// fFactory1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 5 , - 1 ] , [ 6 , 0 ] , [ 6 , 1 ] ] ;
35960: LD_ADDR_VAR 0 30
35964: PUSH
35965: LD_INT 2
35967: PUSH
35968: LD_INT 1
35970: NEG
35971: PUSH
35972: EMPTY
35973: LIST
35974: LIST
35975: PUSH
35976: LD_INT 3
35978: PUSH
35979: LD_INT 0
35981: PUSH
35982: EMPTY
35983: LIST
35984: LIST
35985: PUSH
35986: LD_INT 3
35988: PUSH
35989: LD_INT 1
35991: PUSH
35992: EMPTY
35993: LIST
35994: LIST
35995: PUSH
35996: LD_INT 3
35998: PUSH
35999: LD_INT 1
36001: NEG
36002: PUSH
36003: EMPTY
36004: LIST
36005: LIST
36006: PUSH
36007: LD_INT 4
36009: PUSH
36010: LD_INT 0
36012: PUSH
36013: EMPTY
36014: LIST
36015: LIST
36016: PUSH
36017: LD_INT 4
36019: PUSH
36020: LD_INT 1
36022: PUSH
36023: EMPTY
36024: LIST
36025: LIST
36026: PUSH
36027: LD_INT 4
36029: PUSH
36030: LD_INT 1
36032: NEG
36033: PUSH
36034: EMPTY
36035: LIST
36036: LIST
36037: PUSH
36038: LD_INT 5
36040: PUSH
36041: LD_INT 0
36043: PUSH
36044: EMPTY
36045: LIST
36046: LIST
36047: PUSH
36048: LD_INT 5
36050: PUSH
36051: LD_INT 1
36053: PUSH
36054: EMPTY
36055: LIST
36056: LIST
36057: PUSH
36058: LD_INT 5
36060: PUSH
36061: LD_INT 1
36063: NEG
36064: PUSH
36065: EMPTY
36066: LIST
36067: LIST
36068: PUSH
36069: LD_INT 6
36071: PUSH
36072: LD_INT 0
36074: PUSH
36075: EMPTY
36076: LIST
36077: LIST
36078: PUSH
36079: LD_INT 6
36081: PUSH
36082: LD_INT 1
36084: PUSH
36085: EMPTY
36086: LIST
36087: LIST
36088: PUSH
36089: EMPTY
36090: LIST
36091: LIST
36092: LIST
36093: LIST
36094: LIST
36095: LIST
36096: LIST
36097: LIST
36098: LIST
36099: LIST
36100: LIST
36101: LIST
36102: ST_TO_ADDR
// fFactory2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 6 , 5 ] , [ 6 , 6 ] , [ 5 , 6 ] ] ;
36103: LD_ADDR_VAR 0 31
36107: PUSH
36108: LD_INT 3
36110: PUSH
36111: LD_INT 2
36113: PUSH
36114: EMPTY
36115: LIST
36116: LIST
36117: PUSH
36118: LD_INT 3
36120: PUSH
36121: LD_INT 3
36123: PUSH
36124: EMPTY
36125: LIST
36126: LIST
36127: PUSH
36128: LD_INT 2
36130: PUSH
36131: LD_INT 3
36133: PUSH
36134: EMPTY
36135: LIST
36136: LIST
36137: PUSH
36138: LD_INT 4
36140: PUSH
36141: LD_INT 3
36143: PUSH
36144: EMPTY
36145: LIST
36146: LIST
36147: PUSH
36148: LD_INT 4
36150: PUSH
36151: LD_INT 4
36153: PUSH
36154: EMPTY
36155: LIST
36156: LIST
36157: PUSH
36158: LD_INT 3
36160: PUSH
36161: LD_INT 4
36163: PUSH
36164: EMPTY
36165: LIST
36166: LIST
36167: PUSH
36168: LD_INT 5
36170: PUSH
36171: LD_INT 4
36173: PUSH
36174: EMPTY
36175: LIST
36176: LIST
36177: PUSH
36178: LD_INT 5
36180: PUSH
36181: LD_INT 5
36183: PUSH
36184: EMPTY
36185: LIST
36186: LIST
36187: PUSH
36188: LD_INT 4
36190: PUSH
36191: LD_INT 5
36193: PUSH
36194: EMPTY
36195: LIST
36196: LIST
36197: PUSH
36198: LD_INT 6
36200: PUSH
36201: LD_INT 5
36203: PUSH
36204: EMPTY
36205: LIST
36206: LIST
36207: PUSH
36208: LD_INT 6
36210: PUSH
36211: LD_INT 6
36213: PUSH
36214: EMPTY
36215: LIST
36216: LIST
36217: PUSH
36218: LD_INT 5
36220: PUSH
36221: LD_INT 6
36223: PUSH
36224: EMPTY
36225: LIST
36226: LIST
36227: PUSH
36228: EMPTY
36229: LIST
36230: LIST
36231: LIST
36232: LIST
36233: LIST
36234: LIST
36235: LIST
36236: LIST
36237: LIST
36238: LIST
36239: LIST
36240: LIST
36241: ST_TO_ADDR
// fFactory3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ 1 , 6 ] , [ 0 , 6 ] , [ - 1 , 5 ] ] ;
36242: LD_ADDR_VAR 0 32
36246: PUSH
36247: LD_INT 1
36249: PUSH
36250: LD_INT 3
36252: PUSH
36253: EMPTY
36254: LIST
36255: LIST
36256: PUSH
36257: LD_INT 0
36259: PUSH
36260: LD_INT 3
36262: PUSH
36263: EMPTY
36264: LIST
36265: LIST
36266: PUSH
36267: LD_INT 1
36269: NEG
36270: PUSH
36271: LD_INT 2
36273: PUSH
36274: EMPTY
36275: LIST
36276: LIST
36277: PUSH
36278: LD_INT 1
36280: PUSH
36281: LD_INT 4
36283: PUSH
36284: EMPTY
36285: LIST
36286: LIST
36287: PUSH
36288: LD_INT 0
36290: PUSH
36291: LD_INT 4
36293: PUSH
36294: EMPTY
36295: LIST
36296: LIST
36297: PUSH
36298: LD_INT 1
36300: NEG
36301: PUSH
36302: LD_INT 3
36304: PUSH
36305: EMPTY
36306: LIST
36307: LIST
36308: PUSH
36309: LD_INT 1
36311: PUSH
36312: LD_INT 5
36314: PUSH
36315: EMPTY
36316: LIST
36317: LIST
36318: PUSH
36319: LD_INT 0
36321: PUSH
36322: LD_INT 5
36324: PUSH
36325: EMPTY
36326: LIST
36327: LIST
36328: PUSH
36329: LD_INT 1
36331: NEG
36332: PUSH
36333: LD_INT 4
36335: PUSH
36336: EMPTY
36337: LIST
36338: LIST
36339: PUSH
36340: LD_INT 1
36342: PUSH
36343: LD_INT 6
36345: PUSH
36346: EMPTY
36347: LIST
36348: LIST
36349: PUSH
36350: LD_INT 0
36352: PUSH
36353: LD_INT 6
36355: PUSH
36356: EMPTY
36357: LIST
36358: LIST
36359: PUSH
36360: LD_INT 1
36362: NEG
36363: PUSH
36364: LD_INT 5
36366: PUSH
36367: EMPTY
36368: LIST
36369: LIST
36370: PUSH
36371: EMPTY
36372: LIST
36373: LIST
36374: LIST
36375: LIST
36376: LIST
36377: LIST
36378: LIST
36379: LIST
36380: LIST
36381: LIST
36382: LIST
36383: LIST
36384: ST_TO_ADDR
// fFactory4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , 1 ] , [ - 6 , 0 ] , [ - 6 , - 1 ] ] ;
36385: LD_ADDR_VAR 0 33
36389: PUSH
36390: LD_INT 2
36392: NEG
36393: PUSH
36394: LD_INT 1
36396: PUSH
36397: EMPTY
36398: LIST
36399: LIST
36400: PUSH
36401: LD_INT 3
36403: NEG
36404: PUSH
36405: LD_INT 0
36407: PUSH
36408: EMPTY
36409: LIST
36410: LIST
36411: PUSH
36412: LD_INT 3
36414: NEG
36415: PUSH
36416: LD_INT 1
36418: NEG
36419: PUSH
36420: EMPTY
36421: LIST
36422: LIST
36423: PUSH
36424: LD_INT 3
36426: NEG
36427: PUSH
36428: LD_INT 1
36430: PUSH
36431: EMPTY
36432: LIST
36433: LIST
36434: PUSH
36435: LD_INT 4
36437: NEG
36438: PUSH
36439: LD_INT 0
36441: PUSH
36442: EMPTY
36443: LIST
36444: LIST
36445: PUSH
36446: LD_INT 4
36448: NEG
36449: PUSH
36450: LD_INT 1
36452: NEG
36453: PUSH
36454: EMPTY
36455: LIST
36456: LIST
36457: PUSH
36458: LD_INT 4
36460: NEG
36461: PUSH
36462: LD_INT 1
36464: PUSH
36465: EMPTY
36466: LIST
36467: LIST
36468: PUSH
36469: LD_INT 5
36471: NEG
36472: PUSH
36473: LD_INT 0
36475: PUSH
36476: EMPTY
36477: LIST
36478: LIST
36479: PUSH
36480: LD_INT 5
36482: NEG
36483: PUSH
36484: LD_INT 1
36486: NEG
36487: PUSH
36488: EMPTY
36489: LIST
36490: LIST
36491: PUSH
36492: LD_INT 5
36494: NEG
36495: PUSH
36496: LD_INT 1
36498: PUSH
36499: EMPTY
36500: LIST
36501: LIST
36502: PUSH
36503: LD_INT 6
36505: NEG
36506: PUSH
36507: LD_INT 0
36509: PUSH
36510: EMPTY
36511: LIST
36512: LIST
36513: PUSH
36514: LD_INT 6
36516: NEG
36517: PUSH
36518: LD_INT 1
36520: NEG
36521: PUSH
36522: EMPTY
36523: LIST
36524: LIST
36525: PUSH
36526: EMPTY
36527: LIST
36528: LIST
36529: LIST
36530: LIST
36531: LIST
36532: LIST
36533: LIST
36534: LIST
36535: LIST
36536: LIST
36537: LIST
36538: LIST
36539: ST_TO_ADDR
// fFactory5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 5 , - 6 ] , [ - 6 , - 5 ] , [ - 6 , - 6 ] ] ;
36540: LD_ADDR_VAR 0 34
36544: PUSH
36545: LD_INT 2
36547: NEG
36548: PUSH
36549: LD_INT 3
36551: NEG
36552: PUSH
36553: EMPTY
36554: LIST
36555: LIST
36556: PUSH
36557: LD_INT 3
36559: NEG
36560: PUSH
36561: LD_INT 2
36563: NEG
36564: PUSH
36565: EMPTY
36566: LIST
36567: LIST
36568: PUSH
36569: LD_INT 3
36571: NEG
36572: PUSH
36573: LD_INT 3
36575: NEG
36576: PUSH
36577: EMPTY
36578: LIST
36579: LIST
36580: PUSH
36581: LD_INT 3
36583: NEG
36584: PUSH
36585: LD_INT 4
36587: NEG
36588: PUSH
36589: EMPTY
36590: LIST
36591: LIST
36592: PUSH
36593: LD_INT 4
36595: NEG
36596: PUSH
36597: LD_INT 3
36599: NEG
36600: PUSH
36601: EMPTY
36602: LIST
36603: LIST
36604: PUSH
36605: LD_INT 4
36607: NEG
36608: PUSH
36609: LD_INT 4
36611: NEG
36612: PUSH
36613: EMPTY
36614: LIST
36615: LIST
36616: PUSH
36617: LD_INT 4
36619: NEG
36620: PUSH
36621: LD_INT 5
36623: NEG
36624: PUSH
36625: EMPTY
36626: LIST
36627: LIST
36628: PUSH
36629: LD_INT 5
36631: NEG
36632: PUSH
36633: LD_INT 4
36635: NEG
36636: PUSH
36637: EMPTY
36638: LIST
36639: LIST
36640: PUSH
36641: LD_INT 5
36643: NEG
36644: PUSH
36645: LD_INT 5
36647: NEG
36648: PUSH
36649: EMPTY
36650: LIST
36651: LIST
36652: PUSH
36653: LD_INT 5
36655: NEG
36656: PUSH
36657: LD_INT 6
36659: NEG
36660: PUSH
36661: EMPTY
36662: LIST
36663: LIST
36664: PUSH
36665: LD_INT 6
36667: NEG
36668: PUSH
36669: LD_INT 5
36671: NEG
36672: PUSH
36673: EMPTY
36674: LIST
36675: LIST
36676: PUSH
36677: LD_INT 6
36679: NEG
36680: PUSH
36681: LD_INT 6
36683: NEG
36684: PUSH
36685: EMPTY
36686: LIST
36687: LIST
36688: PUSH
36689: EMPTY
36690: LIST
36691: LIST
36692: LIST
36693: LIST
36694: LIST
36695: LIST
36696: LIST
36697: LIST
36698: LIST
36699: LIST
36700: LIST
36701: LIST
36702: ST_TO_ADDR
// fLab0 = [ [ 0 , - 2 ] , [ - 1 , - 3 ] , [ 1 , - 2 ] ] ;
36703: LD_ADDR_VAR 0 41
36707: PUSH
36708: LD_INT 0
36710: PUSH
36711: LD_INT 2
36713: NEG
36714: PUSH
36715: EMPTY
36716: LIST
36717: LIST
36718: PUSH
36719: LD_INT 1
36721: NEG
36722: PUSH
36723: LD_INT 3
36725: NEG
36726: PUSH
36727: EMPTY
36728: LIST
36729: LIST
36730: PUSH
36731: LD_INT 1
36733: PUSH
36734: LD_INT 2
36736: NEG
36737: PUSH
36738: EMPTY
36739: LIST
36740: LIST
36741: PUSH
36742: EMPTY
36743: LIST
36744: LIST
36745: LIST
36746: ST_TO_ADDR
// fLab1 = [ [ 2 , 0 ] , [ 2 , - 1 ] , [ 3 , 1 ] ] ;
36747: LD_ADDR_VAR 0 42
36751: PUSH
36752: LD_INT 2
36754: PUSH
36755: LD_INT 0
36757: PUSH
36758: EMPTY
36759: LIST
36760: LIST
36761: PUSH
36762: LD_INT 2
36764: PUSH
36765: LD_INT 1
36767: NEG
36768: PUSH
36769: EMPTY
36770: LIST
36771: LIST
36772: PUSH
36773: LD_INT 3
36775: PUSH
36776: LD_INT 1
36778: PUSH
36779: EMPTY
36780: LIST
36781: LIST
36782: PUSH
36783: EMPTY
36784: LIST
36785: LIST
36786: LIST
36787: ST_TO_ADDR
// fLab2 = [ [ 2 , 2 ] , [ 3 , 2 ] , [ 2 , 3 ] ] ;
36788: LD_ADDR_VAR 0 43
36792: PUSH
36793: LD_INT 2
36795: PUSH
36796: LD_INT 2
36798: PUSH
36799: EMPTY
36800: LIST
36801: LIST
36802: PUSH
36803: LD_INT 3
36805: PUSH
36806: LD_INT 2
36808: PUSH
36809: EMPTY
36810: LIST
36811: LIST
36812: PUSH
36813: LD_INT 2
36815: PUSH
36816: LD_INT 3
36818: PUSH
36819: EMPTY
36820: LIST
36821: LIST
36822: PUSH
36823: EMPTY
36824: LIST
36825: LIST
36826: LIST
36827: ST_TO_ADDR
// fLab3 = [ [ 0 , 2 ] , [ 1 , 3 ] , [ - 1 , 2 ] ] ;
36828: LD_ADDR_VAR 0 44
36832: PUSH
36833: LD_INT 0
36835: PUSH
36836: LD_INT 2
36838: PUSH
36839: EMPTY
36840: LIST
36841: LIST
36842: PUSH
36843: LD_INT 1
36845: PUSH
36846: LD_INT 3
36848: PUSH
36849: EMPTY
36850: LIST
36851: LIST
36852: PUSH
36853: LD_INT 1
36855: NEG
36856: PUSH
36857: LD_INT 2
36859: PUSH
36860: EMPTY
36861: LIST
36862: LIST
36863: PUSH
36864: EMPTY
36865: LIST
36866: LIST
36867: LIST
36868: ST_TO_ADDR
// fLab4 = [ [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , - 1 ] ] ;
36869: LD_ADDR_VAR 0 45
36873: PUSH
36874: LD_INT 2
36876: NEG
36877: PUSH
36878: LD_INT 0
36880: PUSH
36881: EMPTY
36882: LIST
36883: LIST
36884: PUSH
36885: LD_INT 2
36887: NEG
36888: PUSH
36889: LD_INT 1
36891: PUSH
36892: EMPTY
36893: LIST
36894: LIST
36895: PUSH
36896: LD_INT 3
36898: NEG
36899: PUSH
36900: LD_INT 1
36902: NEG
36903: PUSH
36904: EMPTY
36905: LIST
36906: LIST
36907: PUSH
36908: EMPTY
36909: LIST
36910: LIST
36911: LIST
36912: ST_TO_ADDR
// fLab5 = [ [ - 2 , - 2 ] , [ - 2 , - 3 ] , [ - 3 , - 2 ] ] ;
36913: LD_ADDR_VAR 0 46
36917: PUSH
36918: LD_INT 2
36920: NEG
36921: PUSH
36922: LD_INT 2
36924: NEG
36925: PUSH
36926: EMPTY
36927: LIST
36928: LIST
36929: PUSH
36930: LD_INT 2
36932: NEG
36933: PUSH
36934: LD_INT 3
36936: NEG
36937: PUSH
36938: EMPTY
36939: LIST
36940: LIST
36941: PUSH
36942: LD_INT 3
36944: NEG
36945: PUSH
36946: LD_INT 2
36948: NEG
36949: PUSH
36950: EMPTY
36951: LIST
36952: LIST
36953: PUSH
36954: EMPTY
36955: LIST
36956: LIST
36957: LIST
36958: ST_TO_ADDR
// fControlTower0 = [ [ - 2 , - 3 ] , [ - 1 , - 3 ] ] ;
36959: LD_ADDR_VAR 0 47
36963: PUSH
36964: LD_INT 2
36966: NEG
36967: PUSH
36968: LD_INT 3
36970: NEG
36971: PUSH
36972: EMPTY
36973: LIST
36974: LIST
36975: PUSH
36976: LD_INT 1
36978: NEG
36979: PUSH
36980: LD_INT 3
36982: NEG
36983: PUSH
36984: EMPTY
36985: LIST
36986: LIST
36987: PUSH
36988: EMPTY
36989: LIST
36990: LIST
36991: ST_TO_ADDR
// fControlTower1 = [ [ 1 , - 2 ] , [ 2 , - 1 ] ] ;
36992: LD_ADDR_VAR 0 48
36996: PUSH
36997: LD_INT 1
36999: PUSH
37000: LD_INT 2
37002: NEG
37003: PUSH
37004: EMPTY
37005: LIST
37006: LIST
37007: PUSH
37008: LD_INT 2
37010: PUSH
37011: LD_INT 1
37013: NEG
37014: PUSH
37015: EMPTY
37016: LIST
37017: LIST
37018: PUSH
37019: EMPTY
37020: LIST
37021: LIST
37022: ST_TO_ADDR
// fControlTower2 = [ [ 3 , 1 ] , [ 3 , 2 ] ] ;
37023: LD_ADDR_VAR 0 49
37027: PUSH
37028: LD_INT 3
37030: PUSH
37031: LD_INT 1
37033: PUSH
37034: EMPTY
37035: LIST
37036: LIST
37037: PUSH
37038: LD_INT 3
37040: PUSH
37041: LD_INT 2
37043: PUSH
37044: EMPTY
37045: LIST
37046: LIST
37047: PUSH
37048: EMPTY
37049: LIST
37050: LIST
37051: ST_TO_ADDR
// fControlTower3 = [ [ 2 , 3 ] , [ 1 , 3 ] ] ;
37052: LD_ADDR_VAR 0 50
37056: PUSH
37057: LD_INT 2
37059: PUSH
37060: LD_INT 3
37062: PUSH
37063: EMPTY
37064: LIST
37065: LIST
37066: PUSH
37067: LD_INT 1
37069: PUSH
37070: LD_INT 3
37072: PUSH
37073: EMPTY
37074: LIST
37075: LIST
37076: PUSH
37077: EMPTY
37078: LIST
37079: LIST
37080: ST_TO_ADDR
// fControlTower4 = [ [ - 1 , 2 ] , [ - 2 , 1 ] ] ;
37081: LD_ADDR_VAR 0 51
37085: PUSH
37086: LD_INT 1
37088: NEG
37089: PUSH
37090: LD_INT 2
37092: PUSH
37093: EMPTY
37094: LIST
37095: LIST
37096: PUSH
37097: LD_INT 2
37099: NEG
37100: PUSH
37101: LD_INT 1
37103: PUSH
37104: EMPTY
37105: LIST
37106: LIST
37107: PUSH
37108: EMPTY
37109: LIST
37110: LIST
37111: ST_TO_ADDR
// fControlTower5 = [ [ - 3 , - 1 ] , [ - 3 , - 2 ] ] ;
37112: LD_ADDR_VAR 0 52
37116: PUSH
37117: LD_INT 3
37119: NEG
37120: PUSH
37121: LD_INT 1
37123: NEG
37124: PUSH
37125: EMPTY
37126: LIST
37127: LIST
37128: PUSH
37129: LD_INT 3
37131: NEG
37132: PUSH
37133: LD_INT 2
37135: NEG
37136: PUSH
37137: EMPTY
37138: LIST
37139: LIST
37140: PUSH
37141: EMPTY
37142: LIST
37143: LIST
37144: ST_TO_ADDR
// fBarracks0 = [ [ - 1 , - 3 ] , [ 0 , - 3 ] , [ 1 , - 2 ] ] ;
37145: LD_ADDR_VAR 0 53
37149: PUSH
37150: LD_INT 1
37152: NEG
37153: PUSH
37154: LD_INT 3
37156: NEG
37157: PUSH
37158: EMPTY
37159: LIST
37160: LIST
37161: PUSH
37162: LD_INT 0
37164: PUSH
37165: LD_INT 3
37167: NEG
37168: PUSH
37169: EMPTY
37170: LIST
37171: LIST
37172: PUSH
37173: LD_INT 1
37175: PUSH
37176: LD_INT 2
37178: NEG
37179: PUSH
37180: EMPTY
37181: LIST
37182: LIST
37183: PUSH
37184: EMPTY
37185: LIST
37186: LIST
37187: LIST
37188: ST_TO_ADDR
// fBarracks1 = [ [ 2 , - 1 ] , [ 3 , 0 ] , [ 3 , 1 ] ] ;
37189: LD_ADDR_VAR 0 54
37193: PUSH
37194: LD_INT 2
37196: PUSH
37197: LD_INT 1
37199: NEG
37200: PUSH
37201: EMPTY
37202: LIST
37203: LIST
37204: PUSH
37205: LD_INT 3
37207: PUSH
37208: LD_INT 0
37210: PUSH
37211: EMPTY
37212: LIST
37213: LIST
37214: PUSH
37215: LD_INT 3
37217: PUSH
37218: LD_INT 1
37220: PUSH
37221: EMPTY
37222: LIST
37223: LIST
37224: PUSH
37225: EMPTY
37226: LIST
37227: LIST
37228: LIST
37229: ST_TO_ADDR
// fBarracks2 = [ [ 3 , 2 ] , [ 3 , 3 ] , [ 2 , 3 ] ] ;
37230: LD_ADDR_VAR 0 55
37234: PUSH
37235: LD_INT 3
37237: PUSH
37238: LD_INT 2
37240: PUSH
37241: EMPTY
37242: LIST
37243: LIST
37244: PUSH
37245: LD_INT 3
37247: PUSH
37248: LD_INT 3
37250: PUSH
37251: EMPTY
37252: LIST
37253: LIST
37254: PUSH
37255: LD_INT 2
37257: PUSH
37258: LD_INT 3
37260: PUSH
37261: EMPTY
37262: LIST
37263: LIST
37264: PUSH
37265: EMPTY
37266: LIST
37267: LIST
37268: LIST
37269: ST_TO_ADDR
// fBarracks3 = [ [ 1 , 3 ] , [ 0 , 3 ] , [ - 1 , 2 ] ] ;
37270: LD_ADDR_VAR 0 56
37274: PUSH
37275: LD_INT 1
37277: PUSH
37278: LD_INT 3
37280: PUSH
37281: EMPTY
37282: LIST
37283: LIST
37284: PUSH
37285: LD_INT 0
37287: PUSH
37288: LD_INT 3
37290: PUSH
37291: EMPTY
37292: LIST
37293: LIST
37294: PUSH
37295: LD_INT 1
37297: NEG
37298: PUSH
37299: LD_INT 2
37301: PUSH
37302: EMPTY
37303: LIST
37304: LIST
37305: PUSH
37306: EMPTY
37307: LIST
37308: LIST
37309: LIST
37310: ST_TO_ADDR
// fBarracks4 = [ [ - 2 , 1 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] ] ;
37311: LD_ADDR_VAR 0 57
37315: PUSH
37316: LD_INT 2
37318: NEG
37319: PUSH
37320: LD_INT 1
37322: PUSH
37323: EMPTY
37324: LIST
37325: LIST
37326: PUSH
37327: LD_INT 3
37329: NEG
37330: PUSH
37331: LD_INT 0
37333: PUSH
37334: EMPTY
37335: LIST
37336: LIST
37337: PUSH
37338: LD_INT 3
37340: NEG
37341: PUSH
37342: LD_INT 1
37344: NEG
37345: PUSH
37346: EMPTY
37347: LIST
37348: LIST
37349: PUSH
37350: EMPTY
37351: LIST
37352: LIST
37353: LIST
37354: ST_TO_ADDR
// fBarracks5 = [ [ - 2 , - 3 ] , [ - 3 , - 2 ] , [ - 3 , - 3 ] ] ;
37355: LD_ADDR_VAR 0 58
37359: PUSH
37360: LD_INT 2
37362: NEG
37363: PUSH
37364: LD_INT 3
37366: NEG
37367: PUSH
37368: EMPTY
37369: LIST
37370: LIST
37371: PUSH
37372: LD_INT 3
37374: NEG
37375: PUSH
37376: LD_INT 2
37378: NEG
37379: PUSH
37380: EMPTY
37381: LIST
37382: LIST
37383: PUSH
37384: LD_INT 3
37386: NEG
37387: PUSH
37388: LD_INT 3
37390: NEG
37391: PUSH
37392: EMPTY
37393: LIST
37394: LIST
37395: PUSH
37396: EMPTY
37397: LIST
37398: LIST
37399: LIST
37400: ST_TO_ADDR
// fBunker0 = [ [ - 1 , - 2 ] , [ 0 , - 2 ] , [ 1 , - 1 ] ] ;
37401: LD_ADDR_VAR 0 59
37405: PUSH
37406: LD_INT 1
37408: NEG
37409: PUSH
37410: LD_INT 2
37412: NEG
37413: PUSH
37414: EMPTY
37415: LIST
37416: LIST
37417: PUSH
37418: LD_INT 0
37420: PUSH
37421: LD_INT 2
37423: NEG
37424: PUSH
37425: EMPTY
37426: LIST
37427: LIST
37428: PUSH
37429: LD_INT 1
37431: PUSH
37432: LD_INT 1
37434: NEG
37435: PUSH
37436: EMPTY
37437: LIST
37438: LIST
37439: PUSH
37440: EMPTY
37441: LIST
37442: LIST
37443: LIST
37444: ST_TO_ADDR
// fBunker1 = [ [ 1 , - 1 ] , [ 2 , 0 ] , [ 2 , 1 ] ] ;
37445: LD_ADDR_VAR 0 60
37449: PUSH
37450: LD_INT 1
37452: PUSH
37453: LD_INT 1
37455: NEG
37456: PUSH
37457: EMPTY
37458: LIST
37459: LIST
37460: PUSH
37461: LD_INT 2
37463: PUSH
37464: LD_INT 0
37466: PUSH
37467: EMPTY
37468: LIST
37469: LIST
37470: PUSH
37471: LD_INT 2
37473: PUSH
37474: LD_INT 1
37476: PUSH
37477: EMPTY
37478: LIST
37479: LIST
37480: PUSH
37481: EMPTY
37482: LIST
37483: LIST
37484: LIST
37485: ST_TO_ADDR
// fBunker2 = [ [ 2 , 1 ] , [ 2 , 2 ] , [ 1 , 2 ] ] ;
37486: LD_ADDR_VAR 0 61
37490: PUSH
37491: LD_INT 2
37493: PUSH
37494: LD_INT 1
37496: PUSH
37497: EMPTY
37498: LIST
37499: LIST
37500: PUSH
37501: LD_INT 2
37503: PUSH
37504: LD_INT 2
37506: PUSH
37507: EMPTY
37508: LIST
37509: LIST
37510: PUSH
37511: LD_INT 1
37513: PUSH
37514: LD_INT 2
37516: PUSH
37517: EMPTY
37518: LIST
37519: LIST
37520: PUSH
37521: EMPTY
37522: LIST
37523: LIST
37524: LIST
37525: ST_TO_ADDR
// fBunker3 = [ [ 1 , 2 ] , [ 0 , 2 ] , [ - 1 , 1 ] ] ;
37526: LD_ADDR_VAR 0 62
37530: PUSH
37531: LD_INT 1
37533: PUSH
37534: LD_INT 2
37536: PUSH
37537: EMPTY
37538: LIST
37539: LIST
37540: PUSH
37541: LD_INT 0
37543: PUSH
37544: LD_INT 2
37546: PUSH
37547: EMPTY
37548: LIST
37549: LIST
37550: PUSH
37551: LD_INT 1
37553: NEG
37554: PUSH
37555: LD_INT 1
37557: PUSH
37558: EMPTY
37559: LIST
37560: LIST
37561: PUSH
37562: EMPTY
37563: LIST
37564: LIST
37565: LIST
37566: ST_TO_ADDR
// fBunker4 = [ [ - 1 , 1 ] , [ - 2 , 0 ] , [ - 2 , - 1 ] ] ;
37567: LD_ADDR_VAR 0 63
37571: PUSH
37572: LD_INT 1
37574: NEG
37575: PUSH
37576: LD_INT 1
37578: PUSH
37579: EMPTY
37580: LIST
37581: LIST
37582: PUSH
37583: LD_INT 2
37585: NEG
37586: PUSH
37587: LD_INT 0
37589: PUSH
37590: EMPTY
37591: LIST
37592: LIST
37593: PUSH
37594: LD_INT 2
37596: NEG
37597: PUSH
37598: LD_INT 1
37600: NEG
37601: PUSH
37602: EMPTY
37603: LIST
37604: LIST
37605: PUSH
37606: EMPTY
37607: LIST
37608: LIST
37609: LIST
37610: ST_TO_ADDR
// fBunker5 = [ [ - 1 , - 2 ] , [ - 2 , - 1 ] , [ - 2 , - 2 ] ] ;
37611: LD_ADDR_VAR 0 64
37615: PUSH
37616: LD_INT 1
37618: NEG
37619: PUSH
37620: LD_INT 2
37622: NEG
37623: PUSH
37624: EMPTY
37625: LIST
37626: LIST
37627: PUSH
37628: LD_INT 2
37630: NEG
37631: PUSH
37632: LD_INT 1
37634: NEG
37635: PUSH
37636: EMPTY
37637: LIST
37638: LIST
37639: PUSH
37640: LD_INT 2
37642: NEG
37643: PUSH
37644: LD_INT 2
37646: NEG
37647: PUSH
37648: EMPTY
37649: LIST
37650: LIST
37651: PUSH
37652: EMPTY
37653: LIST
37654: LIST
37655: LIST
37656: ST_TO_ADDR
// end ; 2 :
37657: GO 40923
37659: LD_INT 2
37661: DOUBLE
37662: EQUAL
37663: IFTRUE 37667
37665: GO 40922
37667: POP
// begin fFactory0 = [ [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] ] ;
37668: LD_ADDR_VAR 0 29
37672: PUSH
37673: LD_INT 4
37675: PUSH
37676: LD_INT 0
37678: PUSH
37679: EMPTY
37680: LIST
37681: LIST
37682: PUSH
37683: LD_INT 4
37685: PUSH
37686: LD_INT 1
37688: NEG
37689: PUSH
37690: EMPTY
37691: LIST
37692: LIST
37693: PUSH
37694: LD_INT 5
37696: PUSH
37697: LD_INT 0
37699: PUSH
37700: EMPTY
37701: LIST
37702: LIST
37703: PUSH
37704: LD_INT 5
37706: PUSH
37707: LD_INT 1
37709: PUSH
37710: EMPTY
37711: LIST
37712: LIST
37713: PUSH
37714: LD_INT 4
37716: PUSH
37717: LD_INT 1
37719: PUSH
37720: EMPTY
37721: LIST
37722: LIST
37723: PUSH
37724: LD_INT 3
37726: PUSH
37727: LD_INT 0
37729: PUSH
37730: EMPTY
37731: LIST
37732: LIST
37733: PUSH
37734: LD_INT 3
37736: PUSH
37737: LD_INT 1
37739: NEG
37740: PUSH
37741: EMPTY
37742: LIST
37743: LIST
37744: PUSH
37745: LD_INT 3
37747: PUSH
37748: LD_INT 2
37750: NEG
37751: PUSH
37752: EMPTY
37753: LIST
37754: LIST
37755: PUSH
37756: LD_INT 5
37758: PUSH
37759: LD_INT 2
37761: PUSH
37762: EMPTY
37763: LIST
37764: LIST
37765: PUSH
37766: LD_INT 3
37768: PUSH
37769: LD_INT 3
37771: PUSH
37772: EMPTY
37773: LIST
37774: LIST
37775: PUSH
37776: LD_INT 3
37778: PUSH
37779: LD_INT 2
37781: PUSH
37782: EMPTY
37783: LIST
37784: LIST
37785: PUSH
37786: LD_INT 4
37788: PUSH
37789: LD_INT 3
37791: PUSH
37792: EMPTY
37793: LIST
37794: LIST
37795: PUSH
37796: LD_INT 4
37798: PUSH
37799: LD_INT 4
37801: PUSH
37802: EMPTY
37803: LIST
37804: LIST
37805: PUSH
37806: LD_INT 3
37808: PUSH
37809: LD_INT 4
37811: PUSH
37812: EMPTY
37813: LIST
37814: LIST
37815: PUSH
37816: LD_INT 2
37818: PUSH
37819: LD_INT 3
37821: PUSH
37822: EMPTY
37823: LIST
37824: LIST
37825: PUSH
37826: LD_INT 2
37828: PUSH
37829: LD_INT 2
37831: PUSH
37832: EMPTY
37833: LIST
37834: LIST
37835: PUSH
37836: LD_INT 4
37838: PUSH
37839: LD_INT 2
37841: PUSH
37842: EMPTY
37843: LIST
37844: LIST
37845: PUSH
37846: LD_INT 2
37848: PUSH
37849: LD_INT 4
37851: PUSH
37852: EMPTY
37853: LIST
37854: LIST
37855: PUSH
37856: LD_INT 0
37858: PUSH
37859: LD_INT 4
37861: PUSH
37862: EMPTY
37863: LIST
37864: LIST
37865: PUSH
37866: LD_INT 0
37868: PUSH
37869: LD_INT 3
37871: PUSH
37872: EMPTY
37873: LIST
37874: LIST
37875: PUSH
37876: LD_INT 1
37878: PUSH
37879: LD_INT 4
37881: PUSH
37882: EMPTY
37883: LIST
37884: LIST
37885: PUSH
37886: LD_INT 1
37888: PUSH
37889: LD_INT 5
37891: PUSH
37892: EMPTY
37893: LIST
37894: LIST
37895: PUSH
37896: LD_INT 0
37898: PUSH
37899: LD_INT 5
37901: PUSH
37902: EMPTY
37903: LIST
37904: LIST
37905: PUSH
37906: LD_INT 1
37908: NEG
37909: PUSH
37910: LD_INT 4
37912: PUSH
37913: EMPTY
37914: LIST
37915: LIST
37916: PUSH
37917: LD_INT 1
37919: NEG
37920: PUSH
37921: LD_INT 3
37923: PUSH
37924: EMPTY
37925: LIST
37926: LIST
37927: PUSH
37928: LD_INT 2
37930: PUSH
37931: LD_INT 5
37933: PUSH
37934: EMPTY
37935: LIST
37936: LIST
37937: PUSH
37938: LD_INT 2
37940: NEG
37941: PUSH
37942: LD_INT 3
37944: PUSH
37945: EMPTY
37946: LIST
37947: LIST
37948: PUSH
37949: LD_INT 3
37951: NEG
37952: PUSH
37953: LD_INT 0
37955: PUSH
37956: EMPTY
37957: LIST
37958: LIST
37959: PUSH
37960: LD_INT 3
37962: NEG
37963: PUSH
37964: LD_INT 1
37966: NEG
37967: PUSH
37968: EMPTY
37969: LIST
37970: LIST
37971: PUSH
37972: LD_INT 2
37974: NEG
37975: PUSH
37976: LD_INT 0
37978: PUSH
37979: EMPTY
37980: LIST
37981: LIST
37982: PUSH
37983: LD_INT 2
37985: NEG
37986: PUSH
37987: LD_INT 1
37989: PUSH
37990: EMPTY
37991: LIST
37992: LIST
37993: PUSH
37994: LD_INT 3
37996: NEG
37997: PUSH
37998: LD_INT 1
38000: PUSH
38001: EMPTY
38002: LIST
38003: LIST
38004: PUSH
38005: LD_INT 4
38007: NEG
38008: PUSH
38009: LD_INT 0
38011: PUSH
38012: EMPTY
38013: LIST
38014: LIST
38015: PUSH
38016: LD_INT 4
38018: NEG
38019: PUSH
38020: LD_INT 1
38022: NEG
38023: PUSH
38024: EMPTY
38025: LIST
38026: LIST
38027: PUSH
38028: LD_INT 4
38030: NEG
38031: PUSH
38032: LD_INT 2
38034: NEG
38035: PUSH
38036: EMPTY
38037: LIST
38038: LIST
38039: PUSH
38040: LD_INT 2
38042: NEG
38043: PUSH
38044: LD_INT 2
38046: PUSH
38047: EMPTY
38048: LIST
38049: LIST
38050: PUSH
38051: LD_INT 4
38053: NEG
38054: PUSH
38055: LD_INT 4
38057: NEG
38058: PUSH
38059: EMPTY
38060: LIST
38061: LIST
38062: PUSH
38063: LD_INT 4
38065: NEG
38066: PUSH
38067: LD_INT 5
38069: NEG
38070: PUSH
38071: EMPTY
38072: LIST
38073: LIST
38074: PUSH
38075: LD_INT 3
38077: NEG
38078: PUSH
38079: LD_INT 4
38081: NEG
38082: PUSH
38083: EMPTY
38084: LIST
38085: LIST
38086: PUSH
38087: LD_INT 3
38089: NEG
38090: PUSH
38091: LD_INT 3
38093: NEG
38094: PUSH
38095: EMPTY
38096: LIST
38097: LIST
38098: PUSH
38099: LD_INT 4
38101: NEG
38102: PUSH
38103: LD_INT 3
38105: NEG
38106: PUSH
38107: EMPTY
38108: LIST
38109: LIST
38110: PUSH
38111: LD_INT 5
38113: NEG
38114: PUSH
38115: LD_INT 4
38117: NEG
38118: PUSH
38119: EMPTY
38120: LIST
38121: LIST
38122: PUSH
38123: LD_INT 5
38125: NEG
38126: PUSH
38127: LD_INT 5
38129: NEG
38130: PUSH
38131: EMPTY
38132: LIST
38133: LIST
38134: PUSH
38135: LD_INT 3
38137: NEG
38138: PUSH
38139: LD_INT 5
38141: NEG
38142: PUSH
38143: EMPTY
38144: LIST
38145: LIST
38146: PUSH
38147: LD_INT 5
38149: NEG
38150: PUSH
38151: LD_INT 3
38153: NEG
38154: PUSH
38155: EMPTY
38156: LIST
38157: LIST
38158: PUSH
38159: EMPTY
38160: LIST
38161: LIST
38162: LIST
38163: LIST
38164: LIST
38165: LIST
38166: LIST
38167: LIST
38168: LIST
38169: LIST
38170: LIST
38171: LIST
38172: LIST
38173: LIST
38174: LIST
38175: LIST
38176: LIST
38177: LIST
38178: LIST
38179: LIST
38180: LIST
38181: LIST
38182: LIST
38183: LIST
38184: LIST
38185: LIST
38186: LIST
38187: LIST
38188: LIST
38189: LIST
38190: LIST
38191: LIST
38192: LIST
38193: LIST
38194: LIST
38195: LIST
38196: LIST
38197: LIST
38198: LIST
38199: LIST
38200: LIST
38201: LIST
38202: LIST
38203: LIST
38204: LIST
38205: ST_TO_ADDR
// fFactory1 = [ [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] ] ;
38206: LD_ADDR_VAR 0 30
38210: PUSH
38211: LD_INT 4
38213: PUSH
38214: LD_INT 4
38216: PUSH
38217: EMPTY
38218: LIST
38219: LIST
38220: PUSH
38221: LD_INT 4
38223: PUSH
38224: LD_INT 3
38226: PUSH
38227: EMPTY
38228: LIST
38229: LIST
38230: PUSH
38231: LD_INT 5
38233: PUSH
38234: LD_INT 4
38236: PUSH
38237: EMPTY
38238: LIST
38239: LIST
38240: PUSH
38241: LD_INT 5
38243: PUSH
38244: LD_INT 5
38246: PUSH
38247: EMPTY
38248: LIST
38249: LIST
38250: PUSH
38251: LD_INT 4
38253: PUSH
38254: LD_INT 5
38256: PUSH
38257: EMPTY
38258: LIST
38259: LIST
38260: PUSH
38261: LD_INT 3
38263: PUSH
38264: LD_INT 4
38266: PUSH
38267: EMPTY
38268: LIST
38269: LIST
38270: PUSH
38271: LD_INT 3
38273: PUSH
38274: LD_INT 3
38276: PUSH
38277: EMPTY
38278: LIST
38279: LIST
38280: PUSH
38281: LD_INT 5
38283: PUSH
38284: LD_INT 3
38286: PUSH
38287: EMPTY
38288: LIST
38289: LIST
38290: PUSH
38291: LD_INT 3
38293: PUSH
38294: LD_INT 5
38296: PUSH
38297: EMPTY
38298: LIST
38299: LIST
38300: PUSH
38301: LD_INT 0
38303: PUSH
38304: LD_INT 3
38306: PUSH
38307: EMPTY
38308: LIST
38309: LIST
38310: PUSH
38311: LD_INT 0
38313: PUSH
38314: LD_INT 2
38316: PUSH
38317: EMPTY
38318: LIST
38319: LIST
38320: PUSH
38321: LD_INT 1
38323: PUSH
38324: LD_INT 3
38326: PUSH
38327: EMPTY
38328: LIST
38329: LIST
38330: PUSH
38331: LD_INT 1
38333: PUSH
38334: LD_INT 4
38336: PUSH
38337: EMPTY
38338: LIST
38339: LIST
38340: PUSH
38341: LD_INT 0
38343: PUSH
38344: LD_INT 4
38346: PUSH
38347: EMPTY
38348: LIST
38349: LIST
38350: PUSH
38351: LD_INT 1
38353: NEG
38354: PUSH
38355: LD_INT 3
38357: PUSH
38358: EMPTY
38359: LIST
38360: LIST
38361: PUSH
38362: LD_INT 1
38364: NEG
38365: PUSH
38366: LD_INT 2
38368: PUSH
38369: EMPTY
38370: LIST
38371: LIST
38372: PUSH
38373: LD_INT 2
38375: PUSH
38376: LD_INT 4
38378: PUSH
38379: EMPTY
38380: LIST
38381: LIST
38382: PUSH
38383: LD_INT 2
38385: NEG
38386: PUSH
38387: LD_INT 2
38389: PUSH
38390: EMPTY
38391: LIST
38392: LIST
38393: PUSH
38394: LD_INT 4
38396: NEG
38397: PUSH
38398: LD_INT 0
38400: PUSH
38401: EMPTY
38402: LIST
38403: LIST
38404: PUSH
38405: LD_INT 4
38407: NEG
38408: PUSH
38409: LD_INT 1
38411: NEG
38412: PUSH
38413: EMPTY
38414: LIST
38415: LIST
38416: PUSH
38417: LD_INT 3
38419: NEG
38420: PUSH
38421: LD_INT 0
38423: PUSH
38424: EMPTY
38425: LIST
38426: LIST
38427: PUSH
38428: LD_INT 3
38430: NEG
38431: PUSH
38432: LD_INT 1
38434: PUSH
38435: EMPTY
38436: LIST
38437: LIST
38438: PUSH
38439: LD_INT 4
38441: NEG
38442: PUSH
38443: LD_INT 1
38445: PUSH
38446: EMPTY
38447: LIST
38448: LIST
38449: PUSH
38450: LD_INT 5
38452: NEG
38453: PUSH
38454: LD_INT 0
38456: PUSH
38457: EMPTY
38458: LIST
38459: LIST
38460: PUSH
38461: LD_INT 5
38463: NEG
38464: PUSH
38465: LD_INT 1
38467: NEG
38468: PUSH
38469: EMPTY
38470: LIST
38471: LIST
38472: PUSH
38473: LD_INT 5
38475: NEG
38476: PUSH
38477: LD_INT 2
38479: NEG
38480: PUSH
38481: EMPTY
38482: LIST
38483: LIST
38484: PUSH
38485: LD_INT 3
38487: NEG
38488: PUSH
38489: LD_INT 2
38491: PUSH
38492: EMPTY
38493: LIST
38494: LIST
38495: PUSH
38496: LD_INT 3
38498: NEG
38499: PUSH
38500: LD_INT 3
38502: NEG
38503: PUSH
38504: EMPTY
38505: LIST
38506: LIST
38507: PUSH
38508: LD_INT 3
38510: NEG
38511: PUSH
38512: LD_INT 4
38514: NEG
38515: PUSH
38516: EMPTY
38517: LIST
38518: LIST
38519: PUSH
38520: LD_INT 2
38522: NEG
38523: PUSH
38524: LD_INT 3
38526: NEG
38527: PUSH
38528: EMPTY
38529: LIST
38530: LIST
38531: PUSH
38532: LD_INT 2
38534: NEG
38535: PUSH
38536: LD_INT 2
38538: NEG
38539: PUSH
38540: EMPTY
38541: LIST
38542: LIST
38543: PUSH
38544: LD_INT 3
38546: NEG
38547: PUSH
38548: LD_INT 2
38550: NEG
38551: PUSH
38552: EMPTY
38553: LIST
38554: LIST
38555: PUSH
38556: LD_INT 4
38558: NEG
38559: PUSH
38560: LD_INT 3
38562: NEG
38563: PUSH
38564: EMPTY
38565: LIST
38566: LIST
38567: PUSH
38568: LD_INT 4
38570: NEG
38571: PUSH
38572: LD_INT 4
38574: NEG
38575: PUSH
38576: EMPTY
38577: LIST
38578: LIST
38579: PUSH
38580: LD_INT 2
38582: NEG
38583: PUSH
38584: LD_INT 4
38586: NEG
38587: PUSH
38588: EMPTY
38589: LIST
38590: LIST
38591: PUSH
38592: LD_INT 4
38594: NEG
38595: PUSH
38596: LD_INT 2
38598: NEG
38599: PUSH
38600: EMPTY
38601: LIST
38602: LIST
38603: PUSH
38604: LD_INT 0
38606: PUSH
38607: LD_INT 4
38609: NEG
38610: PUSH
38611: EMPTY
38612: LIST
38613: LIST
38614: PUSH
38615: LD_INT 0
38617: PUSH
38618: LD_INT 5
38620: NEG
38621: PUSH
38622: EMPTY
38623: LIST
38624: LIST
38625: PUSH
38626: LD_INT 1
38628: PUSH
38629: LD_INT 4
38631: NEG
38632: PUSH
38633: EMPTY
38634: LIST
38635: LIST
38636: PUSH
38637: LD_INT 1
38639: PUSH
38640: LD_INT 3
38642: NEG
38643: PUSH
38644: EMPTY
38645: LIST
38646: LIST
38647: PUSH
38648: LD_INT 0
38650: PUSH
38651: LD_INT 3
38653: NEG
38654: PUSH
38655: EMPTY
38656: LIST
38657: LIST
38658: PUSH
38659: LD_INT 1
38661: NEG
38662: PUSH
38663: LD_INT 4
38665: NEG
38666: PUSH
38667: EMPTY
38668: LIST
38669: LIST
38670: PUSH
38671: LD_INT 1
38673: NEG
38674: PUSH
38675: LD_INT 5
38677: NEG
38678: PUSH
38679: EMPTY
38680: LIST
38681: LIST
38682: PUSH
38683: LD_INT 2
38685: PUSH
38686: LD_INT 3
38688: NEG
38689: PUSH
38690: EMPTY
38691: LIST
38692: LIST
38693: PUSH
38694: LD_INT 2
38696: NEG
38697: PUSH
38698: LD_INT 5
38700: NEG
38701: PUSH
38702: EMPTY
38703: LIST
38704: LIST
38705: PUSH
38706: EMPTY
38707: LIST
38708: LIST
38709: LIST
38710: LIST
38711: LIST
38712: LIST
38713: LIST
38714: LIST
38715: LIST
38716: LIST
38717: LIST
38718: LIST
38719: LIST
38720: LIST
38721: LIST
38722: LIST
38723: LIST
38724: LIST
38725: LIST
38726: LIST
38727: LIST
38728: LIST
38729: LIST
38730: LIST
38731: LIST
38732: LIST
38733: LIST
38734: LIST
38735: LIST
38736: LIST
38737: LIST
38738: LIST
38739: LIST
38740: LIST
38741: LIST
38742: LIST
38743: LIST
38744: LIST
38745: LIST
38746: LIST
38747: LIST
38748: LIST
38749: LIST
38750: LIST
38751: LIST
38752: ST_TO_ADDR
// fFactory2 = [ [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] , [ - 3 , 0 ] , [ - 3 , - 1 ] , [ - 2 , 0 ] , [ - 2 , 1 ] , [ - 3 , 1 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 4 , - 2 ] , [ - 2 , 2 ] , [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] ] ;
38753: LD_ADDR_VAR 0 31
38757: PUSH
38758: LD_INT 0
38760: PUSH
38761: LD_INT 4
38763: PUSH
38764: EMPTY
38765: LIST
38766: LIST
38767: PUSH
38768: LD_INT 0
38770: PUSH
38771: LD_INT 3
38773: PUSH
38774: EMPTY
38775: LIST
38776: LIST
38777: PUSH
38778: LD_INT 1
38780: PUSH
38781: LD_INT 4
38783: PUSH
38784: EMPTY
38785: LIST
38786: LIST
38787: PUSH
38788: LD_INT 1
38790: PUSH
38791: LD_INT 5
38793: PUSH
38794: EMPTY
38795: LIST
38796: LIST
38797: PUSH
38798: LD_INT 0
38800: PUSH
38801: LD_INT 5
38803: PUSH
38804: EMPTY
38805: LIST
38806: LIST
38807: PUSH
38808: LD_INT 1
38810: NEG
38811: PUSH
38812: LD_INT 4
38814: PUSH
38815: EMPTY
38816: LIST
38817: LIST
38818: PUSH
38819: LD_INT 1
38821: NEG
38822: PUSH
38823: LD_INT 3
38825: PUSH
38826: EMPTY
38827: LIST
38828: LIST
38829: PUSH
38830: LD_INT 2
38832: PUSH
38833: LD_INT 5
38835: PUSH
38836: EMPTY
38837: LIST
38838: LIST
38839: PUSH
38840: LD_INT 2
38842: NEG
38843: PUSH
38844: LD_INT 3
38846: PUSH
38847: EMPTY
38848: LIST
38849: LIST
38850: PUSH
38851: LD_INT 3
38853: NEG
38854: PUSH
38855: LD_INT 0
38857: PUSH
38858: EMPTY
38859: LIST
38860: LIST
38861: PUSH
38862: LD_INT 3
38864: NEG
38865: PUSH
38866: LD_INT 1
38868: NEG
38869: PUSH
38870: EMPTY
38871: LIST
38872: LIST
38873: PUSH
38874: LD_INT 2
38876: NEG
38877: PUSH
38878: LD_INT 0
38880: PUSH
38881: EMPTY
38882: LIST
38883: LIST
38884: PUSH
38885: LD_INT 2
38887: NEG
38888: PUSH
38889: LD_INT 1
38891: PUSH
38892: EMPTY
38893: LIST
38894: LIST
38895: PUSH
38896: LD_INT 3
38898: NEG
38899: PUSH
38900: LD_INT 1
38902: PUSH
38903: EMPTY
38904: LIST
38905: LIST
38906: PUSH
38907: LD_INT 4
38909: NEG
38910: PUSH
38911: LD_INT 0
38913: PUSH
38914: EMPTY
38915: LIST
38916: LIST
38917: PUSH
38918: LD_INT 4
38920: NEG
38921: PUSH
38922: LD_INT 1
38924: NEG
38925: PUSH
38926: EMPTY
38927: LIST
38928: LIST
38929: PUSH
38930: LD_INT 4
38932: NEG
38933: PUSH
38934: LD_INT 2
38936: NEG
38937: PUSH
38938: EMPTY
38939: LIST
38940: LIST
38941: PUSH
38942: LD_INT 2
38944: NEG
38945: PUSH
38946: LD_INT 2
38948: PUSH
38949: EMPTY
38950: LIST
38951: LIST
38952: PUSH
38953: LD_INT 4
38955: NEG
38956: PUSH
38957: LD_INT 4
38959: NEG
38960: PUSH
38961: EMPTY
38962: LIST
38963: LIST
38964: PUSH
38965: LD_INT 4
38967: NEG
38968: PUSH
38969: LD_INT 5
38971: NEG
38972: PUSH
38973: EMPTY
38974: LIST
38975: LIST
38976: PUSH
38977: LD_INT 3
38979: NEG
38980: PUSH
38981: LD_INT 4
38983: NEG
38984: PUSH
38985: EMPTY
38986: LIST
38987: LIST
38988: PUSH
38989: LD_INT 3
38991: NEG
38992: PUSH
38993: LD_INT 3
38995: NEG
38996: PUSH
38997: EMPTY
38998: LIST
38999: LIST
39000: PUSH
39001: LD_INT 4
39003: NEG
39004: PUSH
39005: LD_INT 3
39007: NEG
39008: PUSH
39009: EMPTY
39010: LIST
39011: LIST
39012: PUSH
39013: LD_INT 5
39015: NEG
39016: PUSH
39017: LD_INT 4
39019: NEG
39020: PUSH
39021: EMPTY
39022: LIST
39023: LIST
39024: PUSH
39025: LD_INT 5
39027: NEG
39028: PUSH
39029: LD_INT 5
39031: NEG
39032: PUSH
39033: EMPTY
39034: LIST
39035: LIST
39036: PUSH
39037: LD_INT 3
39039: NEG
39040: PUSH
39041: LD_INT 5
39043: NEG
39044: PUSH
39045: EMPTY
39046: LIST
39047: LIST
39048: PUSH
39049: LD_INT 5
39051: NEG
39052: PUSH
39053: LD_INT 3
39055: NEG
39056: PUSH
39057: EMPTY
39058: LIST
39059: LIST
39060: PUSH
39061: LD_INT 0
39063: PUSH
39064: LD_INT 3
39066: NEG
39067: PUSH
39068: EMPTY
39069: LIST
39070: LIST
39071: PUSH
39072: LD_INT 0
39074: PUSH
39075: LD_INT 4
39077: NEG
39078: PUSH
39079: EMPTY
39080: LIST
39081: LIST
39082: PUSH
39083: LD_INT 1
39085: PUSH
39086: LD_INT 3
39088: NEG
39089: PUSH
39090: EMPTY
39091: LIST
39092: LIST
39093: PUSH
39094: LD_INT 1
39096: PUSH
39097: LD_INT 2
39099: NEG
39100: PUSH
39101: EMPTY
39102: LIST
39103: LIST
39104: PUSH
39105: LD_INT 0
39107: PUSH
39108: LD_INT 2
39110: NEG
39111: PUSH
39112: EMPTY
39113: LIST
39114: LIST
39115: PUSH
39116: LD_INT 1
39118: NEG
39119: PUSH
39120: LD_INT 3
39122: NEG
39123: PUSH
39124: EMPTY
39125: LIST
39126: LIST
39127: PUSH
39128: LD_INT 1
39130: NEG
39131: PUSH
39132: LD_INT 4
39134: NEG
39135: PUSH
39136: EMPTY
39137: LIST
39138: LIST
39139: PUSH
39140: LD_INT 2
39142: PUSH
39143: LD_INT 2
39145: NEG
39146: PUSH
39147: EMPTY
39148: LIST
39149: LIST
39150: PUSH
39151: LD_INT 2
39153: NEG
39154: PUSH
39155: LD_INT 4
39157: NEG
39158: PUSH
39159: EMPTY
39160: LIST
39161: LIST
39162: PUSH
39163: LD_INT 4
39165: PUSH
39166: LD_INT 0
39168: PUSH
39169: EMPTY
39170: LIST
39171: LIST
39172: PUSH
39173: LD_INT 4
39175: PUSH
39176: LD_INT 1
39178: NEG
39179: PUSH
39180: EMPTY
39181: LIST
39182: LIST
39183: PUSH
39184: LD_INT 5
39186: PUSH
39187: LD_INT 0
39189: PUSH
39190: EMPTY
39191: LIST
39192: LIST
39193: PUSH
39194: LD_INT 5
39196: PUSH
39197: LD_INT 1
39199: PUSH
39200: EMPTY
39201: LIST
39202: LIST
39203: PUSH
39204: LD_INT 4
39206: PUSH
39207: LD_INT 1
39209: PUSH
39210: EMPTY
39211: LIST
39212: LIST
39213: PUSH
39214: LD_INT 3
39216: PUSH
39217: LD_INT 0
39219: PUSH
39220: EMPTY
39221: LIST
39222: LIST
39223: PUSH
39224: LD_INT 3
39226: PUSH
39227: LD_INT 1
39229: NEG
39230: PUSH
39231: EMPTY
39232: LIST
39233: LIST
39234: PUSH
39235: LD_INT 3
39237: PUSH
39238: LD_INT 2
39240: NEG
39241: PUSH
39242: EMPTY
39243: LIST
39244: LIST
39245: PUSH
39246: LD_INT 5
39248: PUSH
39249: LD_INT 2
39251: PUSH
39252: EMPTY
39253: LIST
39254: LIST
39255: PUSH
39256: EMPTY
39257: LIST
39258: LIST
39259: LIST
39260: LIST
39261: LIST
39262: LIST
39263: LIST
39264: LIST
39265: LIST
39266: LIST
39267: LIST
39268: LIST
39269: LIST
39270: LIST
39271: LIST
39272: LIST
39273: LIST
39274: LIST
39275: LIST
39276: LIST
39277: LIST
39278: LIST
39279: LIST
39280: LIST
39281: LIST
39282: LIST
39283: LIST
39284: LIST
39285: LIST
39286: LIST
39287: LIST
39288: LIST
39289: LIST
39290: LIST
39291: LIST
39292: LIST
39293: LIST
39294: LIST
39295: LIST
39296: LIST
39297: LIST
39298: LIST
39299: LIST
39300: LIST
39301: LIST
39302: ST_TO_ADDR
// fFactory3 = [ [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] , [ - 3 , - 3 ] , [ - 3 , - 4 ] , [ - 2 , - 3 ] , [ - 2 , - 2 ] , [ - 3 , - 2 ] , [ - 4 , - 3 ] , [ - 4 , - 4 ] , [ - 2 , - 4 ] , [ - 4 , - 2 ] , [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] ] ;
39303: LD_ADDR_VAR 0 32
39307: PUSH
39308: LD_INT 4
39310: NEG
39311: PUSH
39312: LD_INT 0
39314: PUSH
39315: EMPTY
39316: LIST
39317: LIST
39318: PUSH
39319: LD_INT 4
39321: NEG
39322: PUSH
39323: LD_INT 1
39325: NEG
39326: PUSH
39327: EMPTY
39328: LIST
39329: LIST
39330: PUSH
39331: LD_INT 3
39333: NEG
39334: PUSH
39335: LD_INT 0
39337: PUSH
39338: EMPTY
39339: LIST
39340: LIST
39341: PUSH
39342: LD_INT 3
39344: NEG
39345: PUSH
39346: LD_INT 1
39348: PUSH
39349: EMPTY
39350: LIST
39351: LIST
39352: PUSH
39353: LD_INT 4
39355: NEG
39356: PUSH
39357: LD_INT 1
39359: PUSH
39360: EMPTY
39361: LIST
39362: LIST
39363: PUSH
39364: LD_INT 5
39366: NEG
39367: PUSH
39368: LD_INT 0
39370: PUSH
39371: EMPTY
39372: LIST
39373: LIST
39374: PUSH
39375: LD_INT 5
39377: NEG
39378: PUSH
39379: LD_INT 1
39381: NEG
39382: PUSH
39383: EMPTY
39384: LIST
39385: LIST
39386: PUSH
39387: LD_INT 5
39389: NEG
39390: PUSH
39391: LD_INT 2
39393: NEG
39394: PUSH
39395: EMPTY
39396: LIST
39397: LIST
39398: PUSH
39399: LD_INT 3
39401: NEG
39402: PUSH
39403: LD_INT 2
39405: PUSH
39406: EMPTY
39407: LIST
39408: LIST
39409: PUSH
39410: LD_INT 3
39412: NEG
39413: PUSH
39414: LD_INT 3
39416: NEG
39417: PUSH
39418: EMPTY
39419: LIST
39420: LIST
39421: PUSH
39422: LD_INT 3
39424: NEG
39425: PUSH
39426: LD_INT 4
39428: NEG
39429: PUSH
39430: EMPTY
39431: LIST
39432: LIST
39433: PUSH
39434: LD_INT 2
39436: NEG
39437: PUSH
39438: LD_INT 3
39440: NEG
39441: PUSH
39442: EMPTY
39443: LIST
39444: LIST
39445: PUSH
39446: LD_INT 2
39448: NEG
39449: PUSH
39450: LD_INT 2
39452: NEG
39453: PUSH
39454: EMPTY
39455: LIST
39456: LIST
39457: PUSH
39458: LD_INT 3
39460: NEG
39461: PUSH
39462: LD_INT 2
39464: NEG
39465: PUSH
39466: EMPTY
39467: LIST
39468: LIST
39469: PUSH
39470: LD_INT 4
39472: NEG
39473: PUSH
39474: LD_INT 3
39476: NEG
39477: PUSH
39478: EMPTY
39479: LIST
39480: LIST
39481: PUSH
39482: LD_INT 4
39484: NEG
39485: PUSH
39486: LD_INT 4
39488: NEG
39489: PUSH
39490: EMPTY
39491: LIST
39492: LIST
39493: PUSH
39494: LD_INT 2
39496: NEG
39497: PUSH
39498: LD_INT 4
39500: NEG
39501: PUSH
39502: EMPTY
39503: LIST
39504: LIST
39505: PUSH
39506: LD_INT 4
39508: NEG
39509: PUSH
39510: LD_INT 2
39512: NEG
39513: PUSH
39514: EMPTY
39515: LIST
39516: LIST
39517: PUSH
39518: LD_INT 0
39520: PUSH
39521: LD_INT 4
39523: NEG
39524: PUSH
39525: EMPTY
39526: LIST
39527: LIST
39528: PUSH
39529: LD_INT 0
39531: PUSH
39532: LD_INT 5
39534: NEG
39535: PUSH
39536: EMPTY
39537: LIST
39538: LIST
39539: PUSH
39540: LD_INT 1
39542: PUSH
39543: LD_INT 4
39545: NEG
39546: PUSH
39547: EMPTY
39548: LIST
39549: LIST
39550: PUSH
39551: LD_INT 1
39553: PUSH
39554: LD_INT 3
39556: NEG
39557: PUSH
39558: EMPTY
39559: LIST
39560: LIST
39561: PUSH
39562: LD_INT 0
39564: PUSH
39565: LD_INT 3
39567: NEG
39568: PUSH
39569: EMPTY
39570: LIST
39571: LIST
39572: PUSH
39573: LD_INT 1
39575: NEG
39576: PUSH
39577: LD_INT 4
39579: NEG
39580: PUSH
39581: EMPTY
39582: LIST
39583: LIST
39584: PUSH
39585: LD_INT 1
39587: NEG
39588: PUSH
39589: LD_INT 5
39591: NEG
39592: PUSH
39593: EMPTY
39594: LIST
39595: LIST
39596: PUSH
39597: LD_INT 2
39599: PUSH
39600: LD_INT 3
39602: NEG
39603: PUSH
39604: EMPTY
39605: LIST
39606: LIST
39607: PUSH
39608: LD_INT 2
39610: NEG
39611: PUSH
39612: LD_INT 5
39614: NEG
39615: PUSH
39616: EMPTY
39617: LIST
39618: LIST
39619: PUSH
39620: LD_INT 3
39622: PUSH
39623: LD_INT 0
39625: PUSH
39626: EMPTY
39627: LIST
39628: LIST
39629: PUSH
39630: LD_INT 3
39632: PUSH
39633: LD_INT 1
39635: NEG
39636: PUSH
39637: EMPTY
39638: LIST
39639: LIST
39640: PUSH
39641: LD_INT 4
39643: PUSH
39644: LD_INT 0
39646: PUSH
39647: EMPTY
39648: LIST
39649: LIST
39650: PUSH
39651: LD_INT 4
39653: PUSH
39654: LD_INT 1
39656: PUSH
39657: EMPTY
39658: LIST
39659: LIST
39660: PUSH
39661: LD_INT 3
39663: PUSH
39664: LD_INT 1
39666: PUSH
39667: EMPTY
39668: LIST
39669: LIST
39670: PUSH
39671: LD_INT 2
39673: PUSH
39674: LD_INT 0
39676: PUSH
39677: EMPTY
39678: LIST
39679: LIST
39680: PUSH
39681: LD_INT 2
39683: PUSH
39684: LD_INT 1
39686: NEG
39687: PUSH
39688: EMPTY
39689: LIST
39690: LIST
39691: PUSH
39692: LD_INT 2
39694: PUSH
39695: LD_INT 2
39697: NEG
39698: PUSH
39699: EMPTY
39700: LIST
39701: LIST
39702: PUSH
39703: LD_INT 4
39705: PUSH
39706: LD_INT 2
39708: PUSH
39709: EMPTY
39710: LIST
39711: LIST
39712: PUSH
39713: LD_INT 4
39715: PUSH
39716: LD_INT 4
39718: PUSH
39719: EMPTY
39720: LIST
39721: LIST
39722: PUSH
39723: LD_INT 4
39725: PUSH
39726: LD_INT 3
39728: PUSH
39729: EMPTY
39730: LIST
39731: LIST
39732: PUSH
39733: LD_INT 5
39735: PUSH
39736: LD_INT 4
39738: PUSH
39739: EMPTY
39740: LIST
39741: LIST
39742: PUSH
39743: LD_INT 5
39745: PUSH
39746: LD_INT 5
39748: PUSH
39749: EMPTY
39750: LIST
39751: LIST
39752: PUSH
39753: LD_INT 4
39755: PUSH
39756: LD_INT 5
39758: PUSH
39759: EMPTY
39760: LIST
39761: LIST
39762: PUSH
39763: LD_INT 3
39765: PUSH
39766: LD_INT 4
39768: PUSH
39769: EMPTY
39770: LIST
39771: LIST
39772: PUSH
39773: LD_INT 3
39775: PUSH
39776: LD_INT 3
39778: PUSH
39779: EMPTY
39780: LIST
39781: LIST
39782: PUSH
39783: LD_INT 5
39785: PUSH
39786: LD_INT 3
39788: PUSH
39789: EMPTY
39790: LIST
39791: LIST
39792: PUSH
39793: LD_INT 3
39795: PUSH
39796: LD_INT 5
39798: PUSH
39799: EMPTY
39800: LIST
39801: LIST
39802: PUSH
39803: EMPTY
39804: LIST
39805: LIST
39806: LIST
39807: LIST
39808: LIST
39809: LIST
39810: LIST
39811: LIST
39812: LIST
39813: LIST
39814: LIST
39815: LIST
39816: LIST
39817: LIST
39818: LIST
39819: LIST
39820: LIST
39821: LIST
39822: LIST
39823: LIST
39824: LIST
39825: LIST
39826: LIST
39827: LIST
39828: LIST
39829: LIST
39830: LIST
39831: LIST
39832: LIST
39833: LIST
39834: LIST
39835: LIST
39836: LIST
39837: LIST
39838: LIST
39839: LIST
39840: LIST
39841: LIST
39842: LIST
39843: LIST
39844: LIST
39845: LIST
39846: LIST
39847: LIST
39848: LIST
39849: ST_TO_ADDR
// fFactory4 = [ [ - 4 , - 4 ] , [ - 4 , - 5 ] , [ - 3 , - 4 ] , [ - 3 , - 3 ] , [ - 4 , - 3 ] , [ - 5 , - 4 ] , [ - 5 , - 5 ] , [ - 3 , - 5 ] , [ - 5 , - 3 ] , [ 0 , - 3 ] , [ 0 , - 4 ] , [ 1 , - 3 ] , [ 1 , - 2 ] , [ 0 , - 2 ] , [ - 1 , - 3 ] , [ - 1 , - 4 ] , [ 2 , - 2 ] , [ - 2 , - 4 ] , [ 4 , 0 ] , [ 4 , - 1 ] , [ 5 , 0 ] , [ 5 , 1 ] , [ 4 , 1 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 3 , - 2 ] , [ 5 , 2 ] , [ 3 , 3 ] , [ 3 , 2 ] , [ 4 , 3 ] , [ 4 , 4 ] , [ 3 , 4 ] , [ 2 , 3 ] , [ 2 , 2 ] , [ 4 , 2 ] , [ 2 , 4 ] , [ 0 , 4 ] , [ 0 , 3 ] , [ 1 , 4 ] , [ 1 , 5 ] , [ 0 , 5 ] , [ - 1 , 4 ] , [ - 1 , 3 ] , [ 2 , 5 ] , [ - 2 , 3 ] ] ;
39850: LD_ADDR_VAR 0 33
39854: PUSH
39855: LD_INT 4
39857: NEG
39858: PUSH
39859: LD_INT 4
39861: NEG
39862: PUSH
39863: EMPTY
39864: LIST
39865: LIST
39866: PUSH
39867: LD_INT 4
39869: NEG
39870: PUSH
39871: LD_INT 5
39873: NEG
39874: PUSH
39875: EMPTY
39876: LIST
39877: LIST
39878: PUSH
39879: LD_INT 3
39881: NEG
39882: PUSH
39883: LD_INT 4
39885: NEG
39886: PUSH
39887: EMPTY
39888: LIST
39889: LIST
39890: PUSH
39891: LD_INT 3
39893: NEG
39894: PUSH
39895: LD_INT 3
39897: NEG
39898: PUSH
39899: EMPTY
39900: LIST
39901: LIST
39902: PUSH
39903: LD_INT 4
39905: NEG
39906: PUSH
39907: LD_INT 3
39909: NEG
39910: PUSH
39911: EMPTY
39912: LIST
39913: LIST
39914: PUSH
39915: LD_INT 5
39917: NEG
39918: PUSH
39919: LD_INT 4
39921: NEG
39922: PUSH
39923: EMPTY
39924: LIST
39925: LIST
39926: PUSH
39927: LD_INT 5
39929: NEG
39930: PUSH
39931: LD_INT 5
39933: NEG
39934: PUSH
39935: EMPTY
39936: LIST
39937: LIST
39938: PUSH
39939: LD_INT 3
39941: NEG
39942: PUSH
39943: LD_INT 5
39945: NEG
39946: PUSH
39947: EMPTY
39948: LIST
39949: LIST
39950: PUSH
39951: LD_INT 5
39953: NEG
39954: PUSH
39955: LD_INT 3
39957: NEG
39958: PUSH
39959: EMPTY
39960: LIST
39961: LIST
39962: PUSH
39963: LD_INT 0
39965: PUSH
39966: LD_INT 3
39968: NEG
39969: PUSH
39970: EMPTY
39971: LIST
39972: LIST
39973: PUSH
39974: LD_INT 0
39976: PUSH
39977: LD_INT 4
39979: NEG
39980: PUSH
39981: EMPTY
39982: LIST
39983: LIST
39984: PUSH
39985: LD_INT 1
39987: PUSH
39988: LD_INT 3
39990: NEG
39991: PUSH
39992: EMPTY
39993: LIST
39994: LIST
39995: PUSH
39996: LD_INT 1
39998: PUSH
39999: LD_INT 2
40001: NEG
40002: PUSH
40003: EMPTY
40004: LIST
40005: LIST
40006: PUSH
40007: LD_INT 0
40009: PUSH
40010: LD_INT 2
40012: NEG
40013: PUSH
40014: EMPTY
40015: LIST
40016: LIST
40017: PUSH
40018: LD_INT 1
40020: NEG
40021: PUSH
40022: LD_INT 3
40024: NEG
40025: PUSH
40026: EMPTY
40027: LIST
40028: LIST
40029: PUSH
40030: LD_INT 1
40032: NEG
40033: PUSH
40034: LD_INT 4
40036: NEG
40037: PUSH
40038: EMPTY
40039: LIST
40040: LIST
40041: PUSH
40042: LD_INT 2
40044: PUSH
40045: LD_INT 2
40047: NEG
40048: PUSH
40049: EMPTY
40050: LIST
40051: LIST
40052: PUSH
40053: LD_INT 2
40055: NEG
40056: PUSH
40057: LD_INT 4
40059: NEG
40060: PUSH
40061: EMPTY
40062: LIST
40063: LIST
40064: PUSH
40065: LD_INT 4
40067: PUSH
40068: LD_INT 0
40070: PUSH
40071: EMPTY
40072: LIST
40073: LIST
40074: PUSH
40075: LD_INT 4
40077: PUSH
40078: LD_INT 1
40080: NEG
40081: PUSH
40082: EMPTY
40083: LIST
40084: LIST
40085: PUSH
40086: LD_INT 5
40088: PUSH
40089: LD_INT 0
40091: PUSH
40092: EMPTY
40093: LIST
40094: LIST
40095: PUSH
40096: LD_INT 5
40098: PUSH
40099: LD_INT 1
40101: PUSH
40102: EMPTY
40103: LIST
40104: LIST
40105: PUSH
40106: LD_INT 4
40108: PUSH
40109: LD_INT 1
40111: PUSH
40112: EMPTY
40113: LIST
40114: LIST
40115: PUSH
40116: LD_INT 3
40118: PUSH
40119: LD_INT 0
40121: PUSH
40122: EMPTY
40123: LIST
40124: LIST
40125: PUSH
40126: LD_INT 3
40128: PUSH
40129: LD_INT 1
40131: NEG
40132: PUSH
40133: EMPTY
40134: LIST
40135: LIST
40136: PUSH
40137: LD_INT 3
40139: PUSH
40140: LD_INT 2
40142: NEG
40143: PUSH
40144: EMPTY
40145: LIST
40146: LIST
40147: PUSH
40148: LD_INT 5
40150: PUSH
40151: LD_INT 2
40153: PUSH
40154: EMPTY
40155: LIST
40156: LIST
40157: PUSH
40158: LD_INT 3
40160: PUSH
40161: LD_INT 3
40163: PUSH
40164: EMPTY
40165: LIST
40166: LIST
40167: PUSH
40168: LD_INT 3
40170: PUSH
40171: LD_INT 2
40173: PUSH
40174: EMPTY
40175: LIST
40176: LIST
40177: PUSH
40178: LD_INT 4
40180: PUSH
40181: LD_INT 3
40183: PUSH
40184: EMPTY
40185: LIST
40186: LIST
40187: PUSH
40188: LD_INT 4
40190: PUSH
40191: LD_INT 4
40193: PUSH
40194: EMPTY
40195: LIST
40196: LIST
40197: PUSH
40198: LD_INT 3
40200: PUSH
40201: LD_INT 4
40203: PUSH
40204: EMPTY
40205: LIST
40206: LIST
40207: PUSH
40208: LD_INT 2
40210: PUSH
40211: LD_INT 3
40213: PUSH
40214: EMPTY
40215: LIST
40216: LIST
40217: PUSH
40218: LD_INT 2
40220: PUSH
40221: LD_INT 2
40223: PUSH
40224: EMPTY
40225: LIST
40226: LIST
40227: PUSH
40228: LD_INT 4
40230: PUSH
40231: LD_INT 2
40233: PUSH
40234: EMPTY
40235: LIST
40236: LIST
40237: PUSH
40238: LD_INT 2
40240: PUSH
40241: LD_INT 4
40243: PUSH
40244: EMPTY
40245: LIST
40246: LIST
40247: PUSH
40248: LD_INT 0
40250: PUSH
40251: LD_INT 4
40253: PUSH
40254: EMPTY
40255: LIST
40256: LIST
40257: PUSH
40258: LD_INT 0
40260: PUSH
40261: LD_INT 3
40263: PUSH
40264: EMPTY
40265: LIST
40266: LIST
40267: PUSH
40268: LD_INT 1
40270: PUSH
40271: LD_INT 4
40273: PUSH
40274: EMPTY
40275: LIST
40276: LIST
40277: PUSH
40278: LD_INT 1
40280: PUSH
40281: LD_INT 5
40283: PUSH
40284: EMPTY
40285: LIST
40286: LIST
40287: PUSH
40288: LD_INT 0
40290: PUSH
40291: LD_INT 5
40293: PUSH
40294: EMPTY
40295: LIST
40296: LIST
40297: PUSH
40298: LD_INT 1
40300: NEG
40301: PUSH
40302: LD_INT 4
40304: PUSH
40305: EMPTY
40306: LIST
40307: LIST
40308: PUSH
40309: LD_INT 1
40311: NEG
40312: PUSH
40313: LD_INT 3
40315: PUSH
40316: EMPTY
40317: LIST
40318: LIST
40319: PUSH
40320: LD_INT 2
40322: PUSH
40323: LD_INT 5
40325: PUSH
40326: EMPTY
40327: LIST
40328: LIST
40329: PUSH
40330: LD_INT 2
40332: NEG
40333: PUSH
40334: LD_INT 3
40336: PUSH
40337: EMPTY
40338: LIST
40339: LIST
40340: PUSH
40341: EMPTY
40342: LIST
40343: LIST
40344: LIST
40345: LIST
40346: LIST
40347: LIST
40348: LIST
40349: LIST
40350: LIST
40351: LIST
40352: LIST
40353: LIST
40354: LIST
40355: LIST
40356: LIST
40357: LIST
40358: LIST
40359: LIST
40360: LIST
40361: LIST
40362: LIST
40363: LIST
40364: LIST
40365: LIST
40366: LIST
40367: LIST
40368: LIST
40369: LIST
40370: LIST
40371: LIST
40372: LIST
40373: LIST
40374: LIST
40375: LIST
40376: LIST
40377: LIST
40378: LIST
40379: LIST
40380: LIST
40381: LIST
40382: LIST
40383: LIST
40384: LIST
40385: LIST
40386: LIST
40387: ST_TO_ADDR
// fFactory5 = [ [ 0 , - 4 ] , [ 0 , - 5 ] , [ 1 , - 4 ] , [ 1 , - 3 ] , [ 0 , - 3 ] , [ - 1 , - 4 ] , [ - 1 , - 5 ] , [ 2 , - 3 ] , [ - 2 , - 5 ] , [ 3 , 0 ] , [ 3 , - 1 ] , [ 4 , 0 ] , [ 4 , 1 ] , [ 3 , 1 ] , [ 2 , 0 ] , [ 2 , - 1 ] , [ 2 , - 2 ] , [ 4 , 2 ] , [ 4 , 4 ] , [ 4 , 3 ] , [ 5 , 4 ] , [ 5 , 5 ] , [ 4 , 5 ] , [ 3 , 4 ] , [ 3 , 3 ] , [ 5 , 3 ] , [ 3 , 5 ] , [ 0 , 3 ] , [ 0 , 2 ] , [ 1 , 3 ] , [ 1 , 4 ] , [ 0 , 4 ] , [ - 1 , 3 ] , [ - 1 , 2 ] , [ 2 , 4 ] , [ - 2 , 2 ] , [ - 4 , 0 ] , [ - 4 , - 1 ] , [ - 3 , 0 ] , [ - 3 , 1 ] , [ - 4 , 1 ] , [ - 5 , 0 ] , [ - 5 , - 1 ] , [ - 5 , - 2 ] , [ - 3 , 2 ] ] ;
40388: LD_ADDR_VAR 0 34
40392: PUSH
40393: LD_INT 0
40395: PUSH
40396: LD_INT 4
40398: NEG
40399: PUSH
40400: EMPTY
40401: LIST
40402: LIST
40403: PUSH
40404: LD_INT 0
40406: PUSH
40407: LD_INT 5
40409: NEG
40410: PUSH
40411: EMPTY
40412: LIST
40413: LIST
40414: PUSH
40415: LD_INT 1
40417: PUSH
40418: LD_INT 4
40420: NEG
40421: PUSH
40422: EMPTY
40423: LIST
40424: LIST
40425: PUSH
40426: LD_INT 1
40428: PUSH
40429: LD_INT 3
40431: NEG
40432: PUSH
40433: EMPTY
40434: LIST
40435: LIST
40436: PUSH
40437: LD_INT 0
40439: PUSH
40440: LD_INT 3
40442: NEG
40443: PUSH
40444: EMPTY
40445: LIST
40446: LIST
40447: PUSH
40448: LD_INT 1
40450: NEG
40451: PUSH
40452: LD_INT 4
40454: NEG
40455: PUSH
40456: EMPTY
40457: LIST
40458: LIST
40459: PUSH
40460: LD_INT 1
40462: NEG
40463: PUSH
40464: LD_INT 5
40466: NEG
40467: PUSH
40468: EMPTY
40469: LIST
40470: LIST
40471: PUSH
40472: LD_INT 2
40474: PUSH
40475: LD_INT 3
40477: NEG
40478: PUSH
40479: EMPTY
40480: LIST
40481: LIST
40482: PUSH
40483: LD_INT 2
40485: NEG
40486: PUSH
40487: LD_INT 5
40489: NEG
40490: PUSH
40491: EMPTY
40492: LIST
40493: LIST
40494: PUSH
40495: LD_INT 3
40497: PUSH
40498: LD_INT 0
40500: PUSH
40501: EMPTY
40502: LIST
40503: LIST
40504: PUSH
40505: LD_INT 3
40507: PUSH
40508: LD_INT 1
40510: NEG
40511: PUSH
40512: EMPTY
40513: LIST
40514: LIST
40515: PUSH
40516: LD_INT 4
40518: PUSH
40519: LD_INT 0
40521: PUSH
40522: EMPTY
40523: LIST
40524: LIST
40525: PUSH
40526: LD_INT 4
40528: PUSH
40529: LD_INT 1
40531: PUSH
40532: EMPTY
40533: LIST
40534: LIST
40535: PUSH
40536: LD_INT 3
40538: PUSH
40539: LD_INT 1
40541: PUSH
40542: EMPTY
40543: LIST
40544: LIST
40545: PUSH
40546: LD_INT 2
40548: PUSH
40549: LD_INT 0
40551: PUSH
40552: EMPTY
40553: LIST
40554: LIST
40555: PUSH
40556: LD_INT 2
40558: PUSH
40559: LD_INT 1
40561: NEG
40562: PUSH
40563: EMPTY
40564: LIST
40565: LIST
40566: PUSH
40567: LD_INT 2
40569: PUSH
40570: LD_INT 2
40572: NEG
40573: PUSH
40574: EMPTY
40575: LIST
40576: LIST
40577: PUSH
40578: LD_INT 4
40580: PUSH
40581: LD_INT 2
40583: PUSH
40584: EMPTY
40585: LIST
40586: LIST
40587: PUSH
40588: LD_INT 4
40590: PUSH
40591: LD_INT 4
40593: PUSH
40594: EMPTY
40595: LIST
40596: LIST
40597: PUSH
40598: LD_INT 4
40600: PUSH
40601: LD_INT 3
40603: PUSH
40604: EMPTY
40605: LIST
40606: LIST
40607: PUSH
40608: LD_INT 5
40610: PUSH
40611: LD_INT 4
40613: PUSH
40614: EMPTY
40615: LIST
40616: LIST
40617: PUSH
40618: LD_INT 5
40620: PUSH
40621: LD_INT 5
40623: PUSH
40624: EMPTY
40625: LIST
40626: LIST
40627: PUSH
40628: LD_INT 4
40630: PUSH
40631: LD_INT 5
40633: PUSH
40634: EMPTY
40635: LIST
40636: LIST
40637: PUSH
40638: LD_INT 3
40640: PUSH
40641: LD_INT 4
40643: PUSH
40644: EMPTY
40645: LIST
40646: LIST
40647: PUSH
40648: LD_INT 3
40650: PUSH
40651: LD_INT 3
40653: PUSH
40654: EMPTY
40655: LIST
40656: LIST
40657: PUSH
40658: LD_INT 5
40660: PUSH
40661: LD_INT 3
40663: PUSH
40664: EMPTY
40665: LIST
40666: LIST
40667: PUSH
40668: LD_INT 3
40670: PUSH
40671: LD_INT 5
40673: PUSH
40674: EMPTY
40675: LIST
40676: LIST
40677: PUSH
40678: LD_INT 0
40680: PUSH
40681: LD_INT 3
40683: PUSH
40684: EMPTY
40685: LIST
40686: LIST
40687: PUSH
40688: LD_INT 0
40690: PUSH
40691: LD_INT 2
40693: PUSH
40694: EMPTY
40695: LIST
40696: LIST
40697: PUSH
40698: LD_INT 1
40700: PUSH
40701: LD_INT 3
40703: PUSH
40704: EMPTY
40705: LIST
40706: LIST
40707: PUSH
40708: LD_INT 1
40710: PUSH
40711: LD_INT 4
40713: PUSH
40714: EMPTY
40715: LIST
40716: LIST
40717: PUSH
40718: LD_INT 0
40720: PUSH
40721: LD_INT 4
40723: PUSH
40724: EMPTY
40725: LIST
40726: LIST
40727: PUSH
40728: LD_INT 1
40730: NEG
40731: PUSH
40732: LD_INT 3
40734: PUSH
40735: EMPTY
40736: LIST
40737: LIST
40738: PUSH
40739: LD_INT 1
40741: NEG
40742: PUSH
40743: LD_INT 2
40745: PUSH
40746: EMPTY
40747: LIST
40748: LIST
40749: PUSH
40750: LD_INT 2
40752: PUSH
40753: LD_INT 4
40755: PUSH
40756: EMPTY
40757: LIST
40758: LIST
40759: PUSH
40760: LD_INT 2
40762: NEG
40763: PUSH
40764: LD_INT 2
40766: PUSH
40767: EMPTY
40768: LIST
40769: LIST
40770: PUSH
40771: LD_INT 4
40773: NEG
40774: PUSH
40775: LD_INT 0
40777: PUSH
40778: EMPTY
40779: LIST
40780: LIST
40781: PUSH
40782: LD_INT 4
40784: NEG
40785: PUSH
40786: LD_INT 1
40788: NEG
40789: PUSH
40790: EMPTY
40791: LIST
40792: LIST
40793: PUSH
40794: LD_INT 3
40796: NEG
40797: PUSH
40798: LD_INT 0
40800: PUSH
40801: EMPTY
40802: LIST
40803: LIST
40804: PUSH
40805: LD_INT 3
40807: NEG
40808: PUSH
40809: LD_INT 1
40811: PUSH
40812: EMPTY
40813: LIST
40814: LIST
40815: PUSH
40816: LD_INT 4
40818: NEG
40819: PUSH
40820: LD_INT 1
40822: PUSH
40823: EMPTY
40824: LIST
40825: LIST
40826: PUSH
40827: LD_INT 5
40829: NEG
40830: PUSH
40831: LD_INT 0
40833: PUSH
40834: EMPTY
40835: LIST
40836: LIST
40837: PUSH
40838: LD_INT 5
40840: NEG
40841: PUSH
40842: LD_INT 1
40844: NEG
40845: PUSH
40846: EMPTY
40847: LIST
40848: LIST
40849: PUSH
40850: LD_INT 5
40852: NEG
40853: PUSH
40854: LD_INT 2
40856: NEG
40857: PUSH
40858: EMPTY
40859: LIST
40860: LIST
40861: PUSH
40862: LD_INT 3
40864: NEG
40865: PUSH
40866: LD_INT 2
40868: PUSH
40869: EMPTY
40870: LIST
40871: LIST
40872: PUSH
40873: EMPTY
40874: LIST
40875: LIST
40876: LIST
40877: LIST
40878: LIST
40879: LIST
40880: LIST
40881: LIST
40882: LIST
40883: LIST
40884: LIST
40885: LIST
40886: LIST
40887: LIST
40888: LIST
40889: LIST
40890: LIST
40891: LIST
40892: LIST
40893: LIST
40894: LIST
40895: LIST
40896: LIST
40897: LIST
40898: LIST
40899: LIST
40900: LIST
40901: LIST
40902: LIST
40903: LIST
40904: LIST
40905: LIST
40906: LIST
40907: LIST
40908: LIST
40909: LIST
40910: LIST
40911: LIST
40912: LIST
40913: LIST
40914: LIST
40915: LIST
40916: LIST
40917: LIST
40918: LIST
40919: ST_TO_ADDR
// end ; end ;
40920: GO 40923
40922: POP
// case btype of b_depot , b_warehouse :
40923: LD_VAR 0 1
40927: PUSH
40928: LD_INT 0
40930: DOUBLE
40931: EQUAL
40932: IFTRUE 40942
40934: LD_INT 1
40936: DOUBLE
40937: EQUAL
40938: IFTRUE 40942
40940: GO 41143
40942: POP
// case nation of nation_american :
40943: LD_VAR 0 5
40947: PUSH
40948: LD_INT 1
40950: DOUBLE
40951: EQUAL
40952: IFTRUE 40956
40954: GO 41012
40956: POP
// temp_list = [ fDepotAm0 , fDepotAm1 , fDepotAm2 , fDepotAm3 , fDepotAm4 , fDepotAm5 ] [ dir + 1 ] ; nation_arabian :
40957: LD_ADDR_VAR 0 9
40961: PUSH
40962: LD_VAR 0 11
40966: PUSH
40967: LD_VAR 0 12
40971: PUSH
40972: LD_VAR 0 13
40976: PUSH
40977: LD_VAR 0 14
40981: PUSH
40982: LD_VAR 0 15
40986: PUSH
40987: LD_VAR 0 16
40991: PUSH
40992: EMPTY
40993: LIST
40994: LIST
40995: LIST
40996: LIST
40997: LIST
40998: LIST
40999: PUSH
41000: LD_VAR 0 4
41004: PUSH
41005: LD_INT 1
41007: PLUS
41008: ARRAY
41009: ST_TO_ADDR
41010: GO 41141
41012: LD_INT 2
41014: DOUBLE
41015: EQUAL
41016: IFTRUE 41020
41018: GO 41076
41020: POP
// temp_list = [ fDepotAr0 , fDepotAr1 , fDepotAr2 , fDepotAr3 , fDepotAr4 , fDepotAr5 ] [ dir + 1 ] ; nation_russian :
41021: LD_ADDR_VAR 0 9
41025: PUSH
41026: LD_VAR 0 17
41030: PUSH
41031: LD_VAR 0 18
41035: PUSH
41036: LD_VAR 0 19
41040: PUSH
41041: LD_VAR 0 20
41045: PUSH
41046: LD_VAR 0 21
41050: PUSH
41051: LD_VAR 0 22
41055: PUSH
41056: EMPTY
41057: LIST
41058: LIST
41059: LIST
41060: LIST
41061: LIST
41062: LIST
41063: PUSH
41064: LD_VAR 0 4
41068: PUSH
41069: LD_INT 1
41071: PLUS
41072: ARRAY
41073: ST_TO_ADDR
41074: GO 41141
41076: LD_INT 3
41078: DOUBLE
41079: EQUAL
41080: IFTRUE 41084
41082: GO 41140
41084: POP
// temp_list = [ fDepotRu0 , fDepotRu1 , fDepotRu2 , fDepotRu3 , fDepotRu4 , fDepotRu5 ] [ dir + 1 ] ; end ; b_workshop , b_factory :
41085: LD_ADDR_VAR 0 9
41089: PUSH
41090: LD_VAR 0 23
41094: PUSH
41095: LD_VAR 0 24
41099: PUSH
41100: LD_VAR 0 25
41104: PUSH
41105: LD_VAR 0 26
41109: PUSH
41110: LD_VAR 0 27
41114: PUSH
41115: LD_VAR 0 28
41119: PUSH
41120: EMPTY
41121: LIST
41122: LIST
41123: LIST
41124: LIST
41125: LIST
41126: LIST
41127: PUSH
41128: LD_VAR 0 4
41132: PUSH
41133: LD_INT 1
41135: PLUS
41136: ARRAY
41137: ST_TO_ADDR
41138: GO 41141
41140: POP
41141: GO 41696
41143: LD_INT 2
41145: DOUBLE
41146: EQUAL
41147: IFTRUE 41157
41149: LD_INT 3
41151: DOUBLE
41152: EQUAL
41153: IFTRUE 41157
41155: GO 41213
41157: POP
// temp_list = [ fFactory0 , fFactory1 , fFactory2 , fFactory3 , fFactory4 , fFactory5 ] [ dir + 1 ] ; b_ext_track , b_ext_gun , b_ext_rocket , b_ext_noncombat , b_ext_radio , b_ext_radar , b_ext_siberium , b_ext_stitch , b_ext_computer , b_ext_laser :
41158: LD_ADDR_VAR 0 9
41162: PUSH
41163: LD_VAR 0 29
41167: PUSH
41168: LD_VAR 0 30
41172: PUSH
41173: LD_VAR 0 31
41177: PUSH
41178: LD_VAR 0 32
41182: PUSH
41183: LD_VAR 0 33
41187: PUSH
41188: LD_VAR 0 34
41192: PUSH
41193: EMPTY
41194: LIST
41195: LIST
41196: LIST
41197: LIST
41198: LIST
41199: LIST
41200: PUSH
41201: LD_VAR 0 4
41205: PUSH
41206: LD_INT 1
41208: PLUS
41209: ARRAY
41210: ST_TO_ADDR
41211: GO 41696
41213: LD_INT 16
41215: DOUBLE
41216: EQUAL
41217: IFTRUE 41275
41219: LD_INT 17
41221: DOUBLE
41222: EQUAL
41223: IFTRUE 41275
41225: LD_INT 18
41227: DOUBLE
41228: EQUAL
41229: IFTRUE 41275
41231: LD_INT 19
41233: DOUBLE
41234: EQUAL
41235: IFTRUE 41275
41237: LD_INT 22
41239: DOUBLE
41240: EQUAL
41241: IFTRUE 41275
41243: LD_INT 20
41245: DOUBLE
41246: EQUAL
41247: IFTRUE 41275
41249: LD_INT 21
41251: DOUBLE
41252: EQUAL
41253: IFTRUE 41275
41255: LD_INT 23
41257: DOUBLE
41258: EQUAL
41259: IFTRUE 41275
41261: LD_INT 24
41263: DOUBLE
41264: EQUAL
41265: IFTRUE 41275
41267: LD_INT 25
41269: DOUBLE
41270: EQUAL
41271: IFTRUE 41275
41273: GO 41331
41275: POP
// temp_list = [ fExt0 , fExt1 , fExt2 , fExt3 , fExt4 , fExt5 ] [ dir + 1 ] ; b_lab , b_lab_half , b_lab_full , b_lab_biological , b_lab_computer , b_lab_opto , b_lab_siberium , b_lab_spacetime , b_lab_weapon :
41276: LD_ADDR_VAR 0 9
41280: PUSH
41281: LD_VAR 0 35
41285: PUSH
41286: LD_VAR 0 36
41290: PUSH
41291: LD_VAR 0 37
41295: PUSH
41296: LD_VAR 0 38
41300: PUSH
41301: LD_VAR 0 39
41305: PUSH
41306: LD_VAR 0 40
41310: PUSH
41311: EMPTY
41312: LIST
41313: LIST
41314: LIST
41315: LIST
41316: LIST
41317: LIST
41318: PUSH
41319: LD_VAR 0 4
41323: PUSH
41324: LD_INT 1
41326: PLUS
41327: ARRAY
41328: ST_TO_ADDR
41329: GO 41696
41331: LD_INT 6
41333: DOUBLE
41334: EQUAL
41335: IFTRUE 41387
41337: LD_INT 7
41339: DOUBLE
41340: EQUAL
41341: IFTRUE 41387
41343: LD_INT 8
41345: DOUBLE
41346: EQUAL
41347: IFTRUE 41387
41349: LD_INT 13
41351: DOUBLE
41352: EQUAL
41353: IFTRUE 41387
41355: LD_INT 12
41357: DOUBLE
41358: EQUAL
41359: IFTRUE 41387
41361: LD_INT 15
41363: DOUBLE
41364: EQUAL
41365: IFTRUE 41387
41367: LD_INT 11
41369: DOUBLE
41370: EQUAL
41371: IFTRUE 41387
41373: LD_INT 14
41375: DOUBLE
41376: EQUAL
41377: IFTRUE 41387
41379: LD_INT 10
41381: DOUBLE
41382: EQUAL
41383: IFTRUE 41387
41385: GO 41443
41387: POP
// temp_list = [ fLab0 , fLab1 , fLab2 , fLab3 , fLab4 , fLab5 ] [ dir + 1 ] ; b_control_tower :
41388: LD_ADDR_VAR 0 9
41392: PUSH
41393: LD_VAR 0 41
41397: PUSH
41398: LD_VAR 0 42
41402: PUSH
41403: LD_VAR 0 43
41407: PUSH
41408: LD_VAR 0 44
41412: PUSH
41413: LD_VAR 0 45
41417: PUSH
41418: LD_VAR 0 46
41422: PUSH
41423: EMPTY
41424: LIST
41425: LIST
41426: LIST
41427: LIST
41428: LIST
41429: LIST
41430: PUSH
41431: LD_VAR 0 4
41435: PUSH
41436: LD_INT 1
41438: PLUS
41439: ARRAY
41440: ST_TO_ADDR
41441: GO 41696
41443: LD_INT 36
41445: DOUBLE
41446: EQUAL
41447: IFTRUE 41451
41449: GO 41507
41451: POP
// temp_list = [ fControlTower0 , fControlTower1 , fControlTower2 , fControlTower3 , fControlTower4 , fControlTower5 ] [ dir + 1 ] ; b_armoury , b_barracks , b_teleport , b_behemoth :
41452: LD_ADDR_VAR 0 9
41456: PUSH
41457: LD_VAR 0 47
41461: PUSH
41462: LD_VAR 0 48
41466: PUSH
41467: LD_VAR 0 49
41471: PUSH
41472: LD_VAR 0 50
41476: PUSH
41477: LD_VAR 0 51
41481: PUSH
41482: LD_VAR 0 52
41486: PUSH
41487: EMPTY
41488: LIST
41489: LIST
41490: LIST
41491: LIST
41492: LIST
41493: LIST
41494: PUSH
41495: LD_VAR 0 4
41499: PUSH
41500: LD_INT 1
41502: PLUS
41503: ARRAY
41504: ST_TO_ADDR
41505: GO 41696
41507: LD_INT 4
41509: DOUBLE
41510: EQUAL
41511: IFTRUE 41533
41513: LD_INT 5
41515: DOUBLE
41516: EQUAL
41517: IFTRUE 41533
41519: LD_INT 34
41521: DOUBLE
41522: EQUAL
41523: IFTRUE 41533
41525: LD_INT 37
41527: DOUBLE
41528: EQUAL
41529: IFTRUE 41533
41531: GO 41589
41533: POP
// temp_list = [ fBarracks0 , fBarracks1 , fBarracks2 , fBarracks3 , fBarracks4 , fBarracks5 ] [ dir + 1 ] ; b_breastwork , b_bunker , b_turret , b_solar_power , b_oil_power , b_siberite_power , b_oil_mine , b_siberite_mine :
41534: LD_ADDR_VAR 0 9
41538: PUSH
41539: LD_VAR 0 53
41543: PUSH
41544: LD_VAR 0 54
41548: PUSH
41549: LD_VAR 0 55
41553: PUSH
41554: LD_VAR 0 56
41558: PUSH
41559: LD_VAR 0 57
41563: PUSH
41564: LD_VAR 0 58
41568: PUSH
41569: EMPTY
41570: LIST
41571: LIST
41572: LIST
41573: LIST
41574: LIST
41575: LIST
41576: PUSH
41577: LD_VAR 0 4
41581: PUSH
41582: LD_INT 1
41584: PLUS
41585: ARRAY
41586: ST_TO_ADDR
41587: GO 41696
41589: LD_INT 31
41591: DOUBLE
41592: EQUAL
41593: IFTRUE 41639
41595: LD_INT 32
41597: DOUBLE
41598: EQUAL
41599: IFTRUE 41639
41601: LD_INT 33
41603: DOUBLE
41604: EQUAL
41605: IFTRUE 41639
41607: LD_INT 27
41609: DOUBLE
41610: EQUAL
41611: IFTRUE 41639
41613: LD_INT 26
41615: DOUBLE
41616: EQUAL
41617: IFTRUE 41639
41619: LD_INT 28
41621: DOUBLE
41622: EQUAL
41623: IFTRUE 41639
41625: LD_INT 29
41627: DOUBLE
41628: EQUAL
41629: IFTRUE 41639
41631: LD_INT 30
41633: DOUBLE
41634: EQUAL
41635: IFTRUE 41639
41637: GO 41695
41639: POP
// temp_list = [ fBunker0 , fBunker1 , fBunker2 , fBunker3 , fBunker4 , fBunker5 ] [ dir + 1 ] ; end ;
41640: LD_ADDR_VAR 0 9
41644: PUSH
41645: LD_VAR 0 59
41649: PUSH
41650: LD_VAR 0 60
41654: PUSH
41655: LD_VAR 0 61
41659: PUSH
41660: LD_VAR 0 62
41664: PUSH
41665: LD_VAR 0 63
41669: PUSH
41670: LD_VAR 0 64
41674: PUSH
41675: EMPTY
41676: LIST
41677: LIST
41678: LIST
41679: LIST
41680: LIST
41681: LIST
41682: PUSH
41683: LD_VAR 0 4
41687: PUSH
41688: LD_INT 1
41690: PLUS
41691: ARRAY
41692: ST_TO_ADDR
41693: GO 41696
41695: POP
// temp_list2 = [ ] ;
41696: LD_ADDR_VAR 0 10
41700: PUSH
41701: EMPTY
41702: ST_TO_ADDR
// for i in temp_list do
41703: LD_ADDR_VAR 0 8
41707: PUSH
41708: LD_VAR 0 9
41712: PUSH
41713: FOR_IN
41714: IFFALSE 41766
// temp_list2 = temp_list2 ^ [ [ i [ 1 ] + x , i [ 2 ] + y ] ] ;
41716: LD_ADDR_VAR 0 10
41720: PUSH
41721: LD_VAR 0 10
41725: PUSH
41726: LD_VAR 0 8
41730: PUSH
41731: LD_INT 1
41733: ARRAY
41734: PUSH
41735: LD_VAR 0 2
41739: PLUS
41740: PUSH
41741: LD_VAR 0 8
41745: PUSH
41746: LD_INT 2
41748: ARRAY
41749: PUSH
41750: LD_VAR 0 3
41754: PLUS
41755: PUSH
41756: EMPTY
41757: LIST
41758: LIST
41759: PUSH
41760: EMPTY
41761: LIST
41762: ADD
41763: ST_TO_ADDR
41764: GO 41713
41766: POP
41767: POP
// result = temp_list2 ;
41768: LD_ADDR_VAR 0 7
41772: PUSH
41773: LD_VAR 0 10
41777: ST_TO_ADDR
// end ;
41778: LD_VAR 0 7
41782: RET
// export function EnemyInRange ( unit , dist ) ; begin
41783: LD_INT 0
41785: PPUSH
// result := DangerAtRangeXY ( GetSide ( unit ) , GetX ( unit ) , GetY ( unit ) , dist ) [ 4 ] ;
41786: LD_ADDR_VAR 0 3
41790: PUSH
41791: LD_VAR 0 1
41795: PPUSH
41796: CALL_OW 255
41800: PPUSH
41801: LD_VAR 0 1
41805: PPUSH
41806: CALL_OW 250
41810: PPUSH
41811: LD_VAR 0 1
41815: PPUSH
41816: CALL_OW 251
41820: PPUSH
41821: LD_VAR 0 2
41825: PPUSH
41826: CALL 15179 0 4
41830: PUSH
41831: LD_INT 4
41833: ARRAY
41834: ST_TO_ADDR
// end ;
41835: LD_VAR 0 3
41839: RET
// export function PlayerSeeMe ( unit ) ; begin
41840: LD_INT 0
41842: PPUSH
// result := See ( your_side , unit ) ;
41843: LD_ADDR_VAR 0 2
41847: PUSH
41848: LD_OWVAR 2
41852: PPUSH
41853: LD_VAR 0 1
41857: PPUSH
41858: CALL_OW 292
41862: ST_TO_ADDR
// end ;
41863: LD_VAR 0 2
41867: RET
// export function ReverseDir ( unit ) ; begin
41868: LD_INT 0
41870: PPUSH
// if not unit then
41871: LD_VAR 0 1
41875: NOT
41876: IFFALSE 41880
// exit ;
41878: GO 41903
// result := ( GetDir ( unit ) + 3 ) mod 6 ;
41880: LD_ADDR_VAR 0 2
41884: PUSH
41885: LD_VAR 0 1
41889: PPUSH
41890: CALL_OW 254
41894: PUSH
41895: LD_INT 3
41897: PLUS
41898: PUSH
41899: LD_INT 6
41901: MOD
41902: ST_TO_ADDR
// end ;
41903: LD_VAR 0 2
41907: RET
// export function GetClosestHex ( unit , hexes ) ; var i , dist , tmp , hex ; begin
41908: LD_INT 0
41910: PPUSH
41911: PPUSH
41912: PPUSH
41913: PPUSH
41914: PPUSH
// if not hexes then
41915: LD_VAR 0 2
41919: NOT
41920: IFFALSE 41924
// exit ;
41922: GO 42072
// dist := 9999 ;
41924: LD_ADDR_VAR 0 5
41928: PUSH
41929: LD_INT 9999
41931: ST_TO_ADDR
// for i = 1 to hexes do
41932: LD_ADDR_VAR 0 4
41936: PUSH
41937: DOUBLE
41938: LD_INT 1
41940: DEC
41941: ST_TO_ADDR
41942: LD_VAR 0 2
41946: PUSH
41947: FOR_TO
41948: IFFALSE 42060
// begin if GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) < dist then
41950: LD_VAR 0 1
41954: PPUSH
41955: LD_VAR 0 2
41959: PUSH
41960: LD_VAR 0 4
41964: ARRAY
41965: PUSH
41966: LD_INT 1
41968: ARRAY
41969: PPUSH
41970: LD_VAR 0 2
41974: PUSH
41975: LD_VAR 0 4
41979: ARRAY
41980: PUSH
41981: LD_INT 2
41983: ARRAY
41984: PPUSH
41985: CALL_OW 297
41989: PUSH
41990: LD_VAR 0 5
41994: LESS
41995: IFFALSE 42058
// begin hex := hexes [ i ] ;
41997: LD_ADDR_VAR 0 7
42001: PUSH
42002: LD_VAR 0 2
42006: PUSH
42007: LD_VAR 0 4
42011: ARRAY
42012: ST_TO_ADDR
// dist := GetDistUnitXY ( unit , hexes [ i ] [ 1 ] , hexes [ i ] [ 2 ] ) ;
42013: LD_ADDR_VAR 0 5
42017: PUSH
42018: LD_VAR 0 1
42022: PPUSH
42023: LD_VAR 0 2
42027: PUSH
42028: LD_VAR 0 4
42032: ARRAY
42033: PUSH
42034: LD_INT 1
42036: ARRAY
42037: PPUSH
42038: LD_VAR 0 2
42042: PUSH
42043: LD_VAR 0 4
42047: ARRAY
42048: PUSH
42049: LD_INT 2
42051: ARRAY
42052: PPUSH
42053: CALL_OW 297
42057: ST_TO_ADDR
// end ; end ;
42058: GO 41947
42060: POP
42061: POP
// result := hex ;
42062: LD_ADDR_VAR 0 3
42066: PUSH
42067: LD_VAR 0 7
42071: ST_TO_ADDR
// end ;
42072: LD_VAR 0 3
42076: RET
// export function ComAutodestruct ( unit ) ; var i ; begin
42077: LD_INT 0
42079: PPUSH
42080: PPUSH
// if not unit or not unit in FilterAllUnits ( [ [ f_type , unit_vehicle ] , [ f_nation , 2 ] ] ) then
42081: LD_VAR 0 1
42085: NOT
42086: PUSH
42087: LD_VAR 0 1
42091: PUSH
42092: LD_INT 21
42094: PUSH
42095: LD_INT 2
42097: PUSH
42098: EMPTY
42099: LIST
42100: LIST
42101: PUSH
42102: LD_INT 23
42104: PUSH
42105: LD_INT 2
42107: PUSH
42108: EMPTY
42109: LIST
42110: LIST
42111: PUSH
42112: EMPTY
42113: LIST
42114: LIST
42115: PPUSH
42116: CALL_OW 69
42120: IN
42121: NOT
42122: OR
42123: IFFALSE 42127
// exit ;
42125: GO 42174
// for i = 1 to 3 do
42127: LD_ADDR_VAR 0 3
42131: PUSH
42132: DOUBLE
42133: LD_INT 1
42135: DEC
42136: ST_TO_ADDR
42137: LD_INT 3
42139: PUSH
42140: FOR_TO
42141: IFFALSE 42172
// MineExplosion ( GetX ( unit ) , GetY ( unit ) , 1 ) ;
42143: LD_VAR 0 1
42147: PPUSH
42148: CALL_OW 250
42152: PPUSH
42153: LD_VAR 0 1
42157: PPUSH
42158: CALL_OW 251
42162: PPUSH
42163: LD_INT 1
42165: PPUSH
42166: CALL_OW 453
42170: GO 42140
42172: POP
42173: POP
// end ;
42174: LD_VAR 0 2
42178: RET
// export function AttackHovercraft ( unit , enemy_unit ) ; var i , j , tmp , x , y ; begin
42179: LD_INT 0
42181: PPUSH
42182: PPUSH
42183: PPUSH
42184: PPUSH
42185: PPUSH
42186: PPUSH
// if not unit or not enemy_unit or HasTask ( unit ) then
42187: LD_VAR 0 1
42191: NOT
42192: PUSH
42193: LD_VAR 0 2
42197: NOT
42198: OR
42199: PUSH
42200: LD_VAR 0 1
42204: PPUSH
42205: CALL_OW 314
42209: OR
42210: IFFALSE 42214
// exit ;
42212: GO 42655
// x := GetX ( enemy_unit ) ;
42214: LD_ADDR_VAR 0 7
42218: PUSH
42219: LD_VAR 0 2
42223: PPUSH
42224: CALL_OW 250
42228: ST_TO_ADDR
// y := GetY ( enemy_unit ) ;
42229: LD_ADDR_VAR 0 8
42233: PUSH
42234: LD_VAR 0 2
42238: PPUSH
42239: CALL_OW 251
42243: ST_TO_ADDR
// if not x or not y then
42244: LD_VAR 0 7
42248: NOT
42249: PUSH
42250: LD_VAR 0 8
42254: NOT
42255: OR
42256: IFFALSE 42260
// exit ;
42258: GO 42655
// tmp := [ [ ShiftX ( x , 0 , 4 ) , ShiftY ( y , 0 , 4 ) ] , [ ShiftX ( x , 1 , 4 ) , ShiftY ( y , 1 , 4 ) ] , [ ShiftX ( x , 2 , 4 ) , ShiftY ( y , 2 , 4 ) ] , [ ShiftX ( x , 3 , 4 ) , ShiftY ( y , 3 , 4 ) ] , [ ShiftX ( x , 4 , 4 ) , ShiftY ( y , 4 , 4 ) ] , [ ShiftX ( x , 5 , 4 ) , ShiftY ( y , 5 , 4 ) ] ] ;
42260: LD_ADDR_VAR 0 6
42264: PUSH
42265: LD_VAR 0 7
42269: PPUSH
42270: LD_INT 0
42272: PPUSH
42273: LD_INT 4
42275: PPUSH
42276: CALL_OW 272
42280: PUSH
42281: LD_VAR 0 8
42285: PPUSH
42286: LD_INT 0
42288: PPUSH
42289: LD_INT 4
42291: PPUSH
42292: CALL_OW 273
42296: PUSH
42297: EMPTY
42298: LIST
42299: LIST
42300: PUSH
42301: LD_VAR 0 7
42305: PPUSH
42306: LD_INT 1
42308: PPUSH
42309: LD_INT 4
42311: PPUSH
42312: CALL_OW 272
42316: PUSH
42317: LD_VAR 0 8
42321: PPUSH
42322: LD_INT 1
42324: PPUSH
42325: LD_INT 4
42327: PPUSH
42328: CALL_OW 273
42332: PUSH
42333: EMPTY
42334: LIST
42335: LIST
42336: PUSH
42337: LD_VAR 0 7
42341: PPUSH
42342: LD_INT 2
42344: PPUSH
42345: LD_INT 4
42347: PPUSH
42348: CALL_OW 272
42352: PUSH
42353: LD_VAR 0 8
42357: PPUSH
42358: LD_INT 2
42360: PPUSH
42361: LD_INT 4
42363: PPUSH
42364: CALL_OW 273
42368: PUSH
42369: EMPTY
42370: LIST
42371: LIST
42372: PUSH
42373: LD_VAR 0 7
42377: PPUSH
42378: LD_INT 3
42380: PPUSH
42381: LD_INT 4
42383: PPUSH
42384: CALL_OW 272
42388: PUSH
42389: LD_VAR 0 8
42393: PPUSH
42394: LD_INT 3
42396: PPUSH
42397: LD_INT 4
42399: PPUSH
42400: CALL_OW 273
42404: PUSH
42405: EMPTY
42406: LIST
42407: LIST
42408: PUSH
42409: LD_VAR 0 7
42413: PPUSH
42414: LD_INT 4
42416: PPUSH
42417: LD_INT 4
42419: PPUSH
42420: CALL_OW 272
42424: PUSH
42425: LD_VAR 0 8
42429: PPUSH
42430: LD_INT 4
42432: PPUSH
42433: LD_INT 4
42435: PPUSH
42436: CALL_OW 273
42440: PUSH
42441: EMPTY
42442: LIST
42443: LIST
42444: PUSH
42445: LD_VAR 0 7
42449: PPUSH
42450: LD_INT 5
42452: PPUSH
42453: LD_INT 4
42455: PPUSH
42456: CALL_OW 272
42460: PUSH
42461: LD_VAR 0 8
42465: PPUSH
42466: LD_INT 5
42468: PPUSH
42469: LD_INT 4
42471: PPUSH
42472: CALL_OW 273
42476: PUSH
42477: EMPTY
42478: LIST
42479: LIST
42480: PUSH
42481: EMPTY
42482: LIST
42483: LIST
42484: LIST
42485: LIST
42486: LIST
42487: LIST
42488: ST_TO_ADDR
// for i = tmp downto 1 do
42489: LD_ADDR_VAR 0 4
42493: PUSH
42494: DOUBLE
42495: LD_VAR 0 6
42499: INC
42500: ST_TO_ADDR
42501: LD_INT 1
42503: PUSH
42504: FOR_DOWNTO
42505: IFFALSE 42606
// if not ValidHex ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) or HexInfo ( tmp [ i ] [ 1 ] , tmp [ i ] [ 2 ] ) <> 0 then
42507: LD_VAR 0 6
42511: PUSH
42512: LD_VAR 0 4
42516: ARRAY
42517: PUSH
42518: LD_INT 1
42520: ARRAY
42521: PPUSH
42522: LD_VAR 0 6
42526: PUSH
42527: LD_VAR 0 4
42531: ARRAY
42532: PUSH
42533: LD_INT 2
42535: ARRAY
42536: PPUSH
42537: CALL_OW 488
42541: NOT
42542: PUSH
42543: LD_VAR 0 6
42547: PUSH
42548: LD_VAR 0 4
42552: ARRAY
42553: PUSH
42554: LD_INT 1
42556: ARRAY
42557: PPUSH
42558: LD_VAR 0 6
42562: PUSH
42563: LD_VAR 0 4
42567: ARRAY
42568: PUSH
42569: LD_INT 2
42571: ARRAY
42572: PPUSH
42573: CALL_OW 428
42577: PUSH
42578: LD_INT 0
42580: NONEQUAL
42581: OR
42582: IFFALSE 42604
// tmp := Delete ( tmp , i ) ;
42584: LD_ADDR_VAR 0 6
42588: PUSH
42589: LD_VAR 0 6
42593: PPUSH
42594: LD_VAR 0 4
42598: PPUSH
42599: CALL_OW 3
42603: ST_TO_ADDR
42604: GO 42504
42606: POP
42607: POP
// j := GetClosestHex ( unit , tmp ) ;
42608: LD_ADDR_VAR 0 5
42612: PUSH
42613: LD_VAR 0 1
42617: PPUSH
42618: LD_VAR 0 6
42622: PPUSH
42623: CALL 41908 0 2
42627: ST_TO_ADDR
// ComMoveXY ( unit , j [ 1 ] , j [ 2 ] ) ;
42628: LD_VAR 0 1
42632: PPUSH
42633: LD_VAR 0 5
42637: PUSH
42638: LD_INT 1
42640: ARRAY
42641: PPUSH
42642: LD_VAR 0 5
42646: PUSH
42647: LD_INT 2
42649: ARRAY
42650: PPUSH
42651: CALL_OW 111
// end ;
42655: LD_VAR 0 3
42659: RET
// export function PrepareNature ( birds , tigers , apemans , enchidnas , horses , mastodonts , fishes , nat_area , wat_area ) ; var i , animal ; begin
42660: LD_INT 0
42662: PPUSH
42663: PPUSH
42664: PPUSH
// uc_side = 0 ;
42665: LD_ADDR_OWVAR 20
42669: PUSH
42670: LD_INT 0
42672: ST_TO_ADDR
// uc_nation = 0 ;
42673: LD_ADDR_OWVAR 21
42677: PUSH
42678: LD_INT 0
42680: ST_TO_ADDR
// InitHc_All ( ) ;
42681: CALL_OW 584
// InitVc ;
42685: CALL_OW 20
// if mastodonts then
42689: LD_VAR 0 6
42693: IFFALSE 42760
// for i = 1 to mastodonts do
42695: LD_ADDR_VAR 0 11
42699: PUSH
42700: DOUBLE
42701: LD_INT 1
42703: DEC
42704: ST_TO_ADDR
42705: LD_VAR 0 6
42709: PUSH
42710: FOR_TO
42711: IFFALSE 42758
// begin vc_chassis := 31 ;
42713: LD_ADDR_OWVAR 37
42717: PUSH
42718: LD_INT 31
42720: ST_TO_ADDR
// vc_control := control_rider ;
42721: LD_ADDR_OWVAR 38
42725: PUSH
42726: LD_INT 4
42728: ST_TO_ADDR
// animal := CreateVehicle ;
42729: LD_ADDR_VAR 0 12
42733: PUSH
42734: CALL_OW 45
42738: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42739: LD_VAR 0 12
42743: PPUSH
42744: LD_VAR 0 8
42748: PPUSH
42749: LD_INT 0
42751: PPUSH
42752: CALL 44895 0 3
// end ;
42756: GO 42710
42758: POP
42759: POP
// if horses then
42760: LD_VAR 0 5
42764: IFFALSE 42831
// for i = 1 to horses do
42766: LD_ADDR_VAR 0 11
42770: PUSH
42771: DOUBLE
42772: LD_INT 1
42774: DEC
42775: ST_TO_ADDR
42776: LD_VAR 0 5
42780: PUSH
42781: FOR_TO
42782: IFFALSE 42829
// begin hc_class := 21 ;
42784: LD_ADDR_OWVAR 28
42788: PUSH
42789: LD_INT 21
42791: ST_TO_ADDR
// hc_gallery :=  ;
42792: LD_ADDR_OWVAR 33
42796: PUSH
42797: LD_STRING 
42799: ST_TO_ADDR
// animal := CreateHuman ;
42800: LD_ADDR_VAR 0 12
42804: PUSH
42805: CALL_OW 44
42809: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42810: LD_VAR 0 12
42814: PPUSH
42815: LD_VAR 0 8
42819: PPUSH
42820: LD_INT 0
42822: PPUSH
42823: CALL 44895 0 3
// end ;
42827: GO 42781
42829: POP
42830: POP
// if birds then
42831: LD_VAR 0 1
42835: IFFALSE 42902
// for i = 1 to birds do
42837: LD_ADDR_VAR 0 11
42841: PUSH
42842: DOUBLE
42843: LD_INT 1
42845: DEC
42846: ST_TO_ADDR
42847: LD_VAR 0 1
42851: PUSH
42852: FOR_TO
42853: IFFALSE 42900
// begin hc_class = 18 ;
42855: LD_ADDR_OWVAR 28
42859: PUSH
42860: LD_INT 18
42862: ST_TO_ADDR
// hc_gallery =  ;
42863: LD_ADDR_OWVAR 33
42867: PUSH
42868: LD_STRING 
42870: ST_TO_ADDR
// animal := CreateHuman ;
42871: LD_ADDR_VAR 0 12
42875: PUSH
42876: CALL_OW 44
42880: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42881: LD_VAR 0 12
42885: PPUSH
42886: LD_VAR 0 8
42890: PPUSH
42891: LD_INT 0
42893: PPUSH
42894: CALL 44895 0 3
// end ;
42898: GO 42852
42900: POP
42901: POP
// if tigers then
42902: LD_VAR 0 2
42906: IFFALSE 42990
// for i = 1 to tigers do
42908: LD_ADDR_VAR 0 11
42912: PUSH
42913: DOUBLE
42914: LD_INT 1
42916: DEC
42917: ST_TO_ADDR
42918: LD_VAR 0 2
42922: PUSH
42923: FOR_TO
42924: IFFALSE 42988
// begin hc_class = class_tiger ;
42926: LD_ADDR_OWVAR 28
42930: PUSH
42931: LD_INT 14
42933: ST_TO_ADDR
// hc_gallery =  ;
42934: LD_ADDR_OWVAR 33
42938: PUSH
42939: LD_STRING 
42941: ST_TO_ADDR
// hc_agressivity = Rand ( - 7 , 7 ) ;
42942: LD_ADDR_OWVAR 35
42946: PUSH
42947: LD_INT 7
42949: NEG
42950: PPUSH
42951: LD_INT 7
42953: PPUSH
42954: CALL_OW 12
42958: ST_TO_ADDR
// animal := CreateHuman ;
42959: LD_ADDR_VAR 0 12
42963: PUSH
42964: CALL_OW 44
42968: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
42969: LD_VAR 0 12
42973: PPUSH
42974: LD_VAR 0 8
42978: PPUSH
42979: LD_INT 0
42981: PPUSH
42982: CALL 44895 0 3
// end ;
42986: GO 42923
42988: POP
42989: POP
// if apemans then
42990: LD_VAR 0 3
42994: IFFALSE 43117
// for i = 1 to apemans do
42996: LD_ADDR_VAR 0 11
43000: PUSH
43001: DOUBLE
43002: LD_INT 1
43004: DEC
43005: ST_TO_ADDR
43006: LD_VAR 0 3
43010: PUSH
43011: FOR_TO
43012: IFFALSE 43115
// begin hc_class = class_apeman ;
43014: LD_ADDR_OWVAR 28
43018: PUSH
43019: LD_INT 12
43021: ST_TO_ADDR
// hc_gallery =  ;
43022: LD_ADDR_OWVAR 33
43026: PUSH
43027: LD_STRING 
43029: ST_TO_ADDR
// hc_agressivity = rand ( - 2 , 2 ) ;
43030: LD_ADDR_OWVAR 35
43034: PUSH
43035: LD_INT 2
43037: NEG
43038: PPUSH
43039: LD_INT 2
43041: PPUSH
43042: CALL_OW 12
43046: ST_TO_ADDR
// hc_skills := [ rand ( 1 , 3 ) , rand ( 1 , 3 ) , 0 , 0 ] ;
43047: LD_ADDR_OWVAR 31
43051: PUSH
43052: LD_INT 1
43054: PPUSH
43055: LD_INT 3
43057: PPUSH
43058: CALL_OW 12
43062: PUSH
43063: LD_INT 1
43065: PPUSH
43066: LD_INT 3
43068: PPUSH
43069: CALL_OW 12
43073: PUSH
43074: LD_INT 0
43076: PUSH
43077: LD_INT 0
43079: PUSH
43080: EMPTY
43081: LIST
43082: LIST
43083: LIST
43084: LIST
43085: ST_TO_ADDR
// animal := CreateHuman ;
43086: LD_ADDR_VAR 0 12
43090: PUSH
43091: CALL_OW 44
43095: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43096: LD_VAR 0 12
43100: PPUSH
43101: LD_VAR 0 8
43105: PPUSH
43106: LD_INT 0
43108: PPUSH
43109: CALL 44895 0 3
// end ;
43113: GO 43011
43115: POP
43116: POP
// if enchidnas then
43117: LD_VAR 0 4
43121: IFFALSE 43188
// for i = 1 to enchidnas do
43123: LD_ADDR_VAR 0 11
43127: PUSH
43128: DOUBLE
43129: LD_INT 1
43131: DEC
43132: ST_TO_ADDR
43133: LD_VAR 0 4
43137: PUSH
43138: FOR_TO
43139: IFFALSE 43186
// begin hc_class = 13 ;
43141: LD_ADDR_OWVAR 28
43145: PUSH
43146: LD_INT 13
43148: ST_TO_ADDR
// hc_gallery =  ;
43149: LD_ADDR_OWVAR 33
43153: PUSH
43154: LD_STRING 
43156: ST_TO_ADDR
// animal := CreateHuman ;
43157: LD_ADDR_VAR 0 12
43161: PUSH
43162: CALL_OW 44
43166: ST_TO_ADDR
// PlaceUnitInArea ( animal , nat_area , false ) ;
43167: LD_VAR 0 12
43171: PPUSH
43172: LD_VAR 0 8
43176: PPUSH
43177: LD_INT 0
43179: PPUSH
43180: CALL 44895 0 3
// end ;
43184: GO 43138
43186: POP
43187: POP
// if fishes then
43188: LD_VAR 0 7
43192: IFFALSE 43259
// for i = 1 to fishes do
43194: LD_ADDR_VAR 0 11
43198: PUSH
43199: DOUBLE
43200: LD_INT 1
43202: DEC
43203: ST_TO_ADDR
43204: LD_VAR 0 7
43208: PUSH
43209: FOR_TO
43210: IFFALSE 43257
// begin hc_class = 20 ;
43212: LD_ADDR_OWVAR 28
43216: PUSH
43217: LD_INT 20
43219: ST_TO_ADDR
// hc_gallery =  ;
43220: LD_ADDR_OWVAR 33
43224: PUSH
43225: LD_STRING 
43227: ST_TO_ADDR
// animal := CreateHuman ;
43228: LD_ADDR_VAR 0 12
43232: PUSH
43233: CALL_OW 44
43237: ST_TO_ADDR
// PlaceUnitInArea ( animal , wat_area , false ) ;
43238: LD_VAR 0 12
43242: PPUSH
43243: LD_VAR 0 9
43247: PPUSH
43248: LD_INT 0
43250: PPUSH
43251: CALL 44895 0 3
// end ;
43255: GO 43209
43257: POP
43258: POP
// end ;
43259: LD_VAR 0 10
43263: RET
// export function WantHeal ( sci , unit ) ; begin
43264: LD_INT 0
43266: PPUSH
// if GetTaskList ( sci ) > 0 then
43267: LD_VAR 0 1
43271: PPUSH
43272: CALL_OW 437
43276: PUSH
43277: LD_INT 0
43279: GREATER
43280: IFFALSE 43350
// begin if GetTaskList ( sci ) [ 1 ] [ 1 ] = l and GetTaskList ( sci ) [ 1 ] [ 4 ] = unit then
43282: LD_VAR 0 1
43286: PPUSH
43287: CALL_OW 437
43291: PUSH
43292: LD_INT 1
43294: ARRAY
43295: PUSH
43296: LD_INT 1
43298: ARRAY
43299: PUSH
43300: LD_STRING l
43302: EQUAL
43303: PUSH
43304: LD_VAR 0 1
43308: PPUSH
43309: CALL_OW 437
43313: PUSH
43314: LD_INT 1
43316: ARRAY
43317: PUSH
43318: LD_INT 4
43320: ARRAY
43321: PUSH
43322: LD_VAR 0 2
43326: EQUAL
43327: AND
43328: IFFALSE 43340
// result := true else
43330: LD_ADDR_VAR 0 3
43334: PUSH
43335: LD_INT 1
43337: ST_TO_ADDR
43338: GO 43348
// result := false ;
43340: LD_ADDR_VAR 0 3
43344: PUSH
43345: LD_INT 0
43347: ST_TO_ADDR
// end else
43348: GO 43358
// result := false ;
43350: LD_ADDR_VAR 0 3
43354: PUSH
43355: LD_INT 0
43357: ST_TO_ADDR
// end ;
43358: LD_VAR 0 3
43362: RET
// export function HealTarget ( sci ) ; begin
43363: LD_INT 0
43365: PPUSH
// if not sci then
43366: LD_VAR 0 1
43370: NOT
43371: IFFALSE 43375
// exit ;
43373: GO 43440
// result := 0 ;
43375: LD_ADDR_VAR 0 2
43379: PUSH
43380: LD_INT 0
43382: ST_TO_ADDR
// if GetTaskList ( sci ) then
43383: LD_VAR 0 1
43387: PPUSH
43388: CALL_OW 437
43392: IFFALSE 43440
// if GetTaskList ( sci ) [ 1 ] [ 1 ] = l then
43394: LD_VAR 0 1
43398: PPUSH
43399: CALL_OW 437
43403: PUSH
43404: LD_INT 1
43406: ARRAY
43407: PUSH
43408: LD_INT 1
43410: ARRAY
43411: PUSH
43412: LD_STRING l
43414: EQUAL
43415: IFFALSE 43440
// result := GetTaskList ( sci ) [ 1 ] [ 4 ] ;
43417: LD_ADDR_VAR 0 2
43421: PUSH
43422: LD_VAR 0 1
43426: PPUSH
43427: CALL_OW 437
43431: PUSH
43432: LD_INT 1
43434: ARRAY
43435: PUSH
43436: LD_INT 4
43438: ARRAY
43439: ST_TO_ADDR
// end ;
43440: LD_VAR 0 2
43444: RET
// export function _ScanBase ( base_units ) ; var i , t , tmp ; begin
43445: LD_INT 0
43447: PPUSH
43448: PPUSH
43449: PPUSH
43450: PPUSH
// if not base_units then
43451: LD_VAR 0 1
43455: NOT
43456: IFFALSE 43460
// exit ;
43458: GO 43547
// result := false ;
43460: LD_ADDR_VAR 0 2
43464: PUSH
43465: LD_INT 0
43467: ST_TO_ADDR
// tmp := UnitFilter ( base_units , [ f_type , unit_building ] ) ;
43468: LD_ADDR_VAR 0 5
43472: PUSH
43473: LD_VAR 0 1
43477: PPUSH
43478: LD_INT 21
43480: PUSH
43481: LD_INT 3
43483: PUSH
43484: EMPTY
43485: LIST
43486: LIST
43487: PPUSH
43488: CALL_OW 72
43492: ST_TO_ADDR
// if not tmp then
43493: LD_VAR 0 5
43497: NOT
43498: IFFALSE 43502
// exit ;
43500: GO 43547
// for i in tmp do
43502: LD_ADDR_VAR 0 3
43506: PUSH
43507: LD_VAR 0 5
43511: PUSH
43512: FOR_IN
43513: IFFALSE 43545
// begin result := EnemyInRange ( i , 22 ) ;
43515: LD_ADDR_VAR 0 2
43519: PUSH
43520: LD_VAR 0 3
43524: PPUSH
43525: LD_INT 22
43527: PPUSH
43528: CALL 41783 0 2
43532: ST_TO_ADDR
// if result then
43533: LD_VAR 0 2
43537: IFFALSE 43543
// exit ;
43539: POP
43540: POP
43541: GO 43547
// end ;
43543: GO 43512
43545: POP
43546: POP
// end ;
43547: LD_VAR 0 2
43551: RET
// export function FilterByTag ( units , tag ) ; begin
43552: LD_INT 0
43554: PPUSH
// result := UnitFilter ( units , [ f_tag , tag ] ) ;
43555: LD_ADDR_VAR 0 3
43559: PUSH
43560: LD_VAR 0 1
43564: PPUSH
43565: LD_INT 120
43567: PUSH
43568: LD_VAR 0 2
43572: PUSH
43573: EMPTY
43574: LIST
43575: LIST
43576: PPUSH
43577: CALL_OW 72
43581: ST_TO_ADDR
// end ;
43582: LD_VAR 0 3
43586: RET
// export function IsDriver ( un ) ; begin
43587: LD_INT 0
43589: PPUSH
// result := un in FilterAllUnits ( [ f_driving ] ) ;
43590: LD_ADDR_VAR 0 2
43594: PUSH
43595: LD_VAR 0 1
43599: PUSH
43600: LD_INT 55
43602: PUSH
43603: EMPTY
43604: LIST
43605: PPUSH
43606: CALL_OW 69
43610: IN
43611: ST_TO_ADDR
// end ;
43612: LD_VAR 0 2
43616: RET
// export function GetFacExtXYD ( x , y , d ) ; var list ; begin
43617: LD_INT 0
43619: PPUSH
43620: PPUSH
// list := [ ] ;
43621: LD_ADDR_VAR 0 5
43625: PUSH
43626: EMPTY
43627: ST_TO_ADDR
// case d of 0 :
43628: LD_VAR 0 3
43632: PUSH
43633: LD_INT 0
43635: DOUBLE
43636: EQUAL
43637: IFTRUE 43641
43639: GO 43774
43641: POP
// begin list := [ [ x - 4 , y - 4 , 2 ] , [ x - 3 , y , 1 ] , [ x + 4 , y , 4 ] , [ x + 3 , y + 3 , 5 ] , [ x , y + 4 , 0 ] ] ;
43642: LD_ADDR_VAR 0 5
43646: PUSH
43647: LD_VAR 0 1
43651: PUSH
43652: LD_INT 4
43654: MINUS
43655: PUSH
43656: LD_VAR 0 2
43660: PUSH
43661: LD_INT 4
43663: MINUS
43664: PUSH
43665: LD_INT 2
43667: PUSH
43668: EMPTY
43669: LIST
43670: LIST
43671: LIST
43672: PUSH
43673: LD_VAR 0 1
43677: PUSH
43678: LD_INT 3
43680: MINUS
43681: PUSH
43682: LD_VAR 0 2
43686: PUSH
43687: LD_INT 1
43689: PUSH
43690: EMPTY
43691: LIST
43692: LIST
43693: LIST
43694: PUSH
43695: LD_VAR 0 1
43699: PUSH
43700: LD_INT 4
43702: PLUS
43703: PUSH
43704: LD_VAR 0 2
43708: PUSH
43709: LD_INT 4
43711: PUSH
43712: EMPTY
43713: LIST
43714: LIST
43715: LIST
43716: PUSH
43717: LD_VAR 0 1
43721: PUSH
43722: LD_INT 3
43724: PLUS
43725: PUSH
43726: LD_VAR 0 2
43730: PUSH
43731: LD_INT 3
43733: PLUS
43734: PUSH
43735: LD_INT 5
43737: PUSH
43738: EMPTY
43739: LIST
43740: LIST
43741: LIST
43742: PUSH
43743: LD_VAR 0 1
43747: PUSH
43748: LD_VAR 0 2
43752: PUSH
43753: LD_INT 4
43755: PLUS
43756: PUSH
43757: LD_INT 0
43759: PUSH
43760: EMPTY
43761: LIST
43762: LIST
43763: LIST
43764: PUSH
43765: EMPTY
43766: LIST
43767: LIST
43768: LIST
43769: LIST
43770: LIST
43771: ST_TO_ADDR
// end ; 1 :
43772: GO 44472
43774: LD_INT 1
43776: DOUBLE
43777: EQUAL
43778: IFTRUE 43782
43780: GO 43915
43782: POP
// begin list := [ [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] , [ x - 4 , y , 1 ] , [ x , y + 3 , 0 ] , [ x + 4 , y + 4 , 5 ] ] ;
43783: LD_ADDR_VAR 0 5
43787: PUSH
43788: LD_VAR 0 1
43792: PUSH
43793: LD_VAR 0 2
43797: PUSH
43798: LD_INT 4
43800: MINUS
43801: PUSH
43802: LD_INT 3
43804: PUSH
43805: EMPTY
43806: LIST
43807: LIST
43808: LIST
43809: PUSH
43810: LD_VAR 0 1
43814: PUSH
43815: LD_INT 3
43817: MINUS
43818: PUSH
43819: LD_VAR 0 2
43823: PUSH
43824: LD_INT 3
43826: MINUS
43827: PUSH
43828: LD_INT 2
43830: PUSH
43831: EMPTY
43832: LIST
43833: LIST
43834: LIST
43835: PUSH
43836: LD_VAR 0 1
43840: PUSH
43841: LD_INT 4
43843: MINUS
43844: PUSH
43845: LD_VAR 0 2
43849: PUSH
43850: LD_INT 1
43852: PUSH
43853: EMPTY
43854: LIST
43855: LIST
43856: LIST
43857: PUSH
43858: LD_VAR 0 1
43862: PUSH
43863: LD_VAR 0 2
43867: PUSH
43868: LD_INT 3
43870: PLUS
43871: PUSH
43872: LD_INT 0
43874: PUSH
43875: EMPTY
43876: LIST
43877: LIST
43878: LIST
43879: PUSH
43880: LD_VAR 0 1
43884: PUSH
43885: LD_INT 4
43887: PLUS
43888: PUSH
43889: LD_VAR 0 2
43893: PUSH
43894: LD_INT 4
43896: PLUS
43897: PUSH
43898: LD_INT 5
43900: PUSH
43901: EMPTY
43902: LIST
43903: LIST
43904: LIST
43905: PUSH
43906: EMPTY
43907: LIST
43908: LIST
43909: LIST
43910: LIST
43911: LIST
43912: ST_TO_ADDR
// end ; 2 :
43913: GO 44472
43915: LD_INT 2
43917: DOUBLE
43918: EQUAL
43919: IFTRUE 43923
43921: GO 44052
43923: POP
// begin list := [ [ x , y - 3 , 3 ] , [ x + 4 , y , 4 ] , [ x , y + 4 , 0 ] , [ x - 3 , y , 1 ] , [ x - 4 , y - 4 , 2 ] ] ;
43924: LD_ADDR_VAR 0 5
43928: PUSH
43929: LD_VAR 0 1
43933: PUSH
43934: LD_VAR 0 2
43938: PUSH
43939: LD_INT 3
43941: MINUS
43942: PUSH
43943: LD_INT 3
43945: PUSH
43946: EMPTY
43947: LIST
43948: LIST
43949: LIST
43950: PUSH
43951: LD_VAR 0 1
43955: PUSH
43956: LD_INT 4
43958: PLUS
43959: PUSH
43960: LD_VAR 0 2
43964: PUSH
43965: LD_INT 4
43967: PUSH
43968: EMPTY
43969: LIST
43970: LIST
43971: LIST
43972: PUSH
43973: LD_VAR 0 1
43977: PUSH
43978: LD_VAR 0 2
43982: PUSH
43983: LD_INT 4
43985: PLUS
43986: PUSH
43987: LD_INT 0
43989: PUSH
43990: EMPTY
43991: LIST
43992: LIST
43993: LIST
43994: PUSH
43995: LD_VAR 0 1
43999: PUSH
44000: LD_INT 3
44002: MINUS
44003: PUSH
44004: LD_VAR 0 2
44008: PUSH
44009: LD_INT 1
44011: PUSH
44012: EMPTY
44013: LIST
44014: LIST
44015: LIST
44016: PUSH
44017: LD_VAR 0 1
44021: PUSH
44022: LD_INT 4
44024: MINUS
44025: PUSH
44026: LD_VAR 0 2
44030: PUSH
44031: LD_INT 4
44033: MINUS
44034: PUSH
44035: LD_INT 2
44037: PUSH
44038: EMPTY
44039: LIST
44040: LIST
44041: LIST
44042: PUSH
44043: EMPTY
44044: LIST
44045: LIST
44046: LIST
44047: LIST
44048: LIST
44049: ST_TO_ADDR
// end ; 3 :
44050: GO 44472
44052: LD_INT 3
44054: DOUBLE
44055: EQUAL
44056: IFTRUE 44060
44058: GO 44193
44060: POP
// begin list := [ [ x + 3 , y , 4 ] , [ x + 4 , y + 4 , 5 ] , [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x - 3 , y - 3 , 2 ] ] ;
44061: LD_ADDR_VAR 0 5
44065: PUSH
44066: LD_VAR 0 1
44070: PUSH
44071: LD_INT 3
44073: PLUS
44074: PUSH
44075: LD_VAR 0 2
44079: PUSH
44080: LD_INT 4
44082: PUSH
44083: EMPTY
44084: LIST
44085: LIST
44086: LIST
44087: PUSH
44088: LD_VAR 0 1
44092: PUSH
44093: LD_INT 4
44095: PLUS
44096: PUSH
44097: LD_VAR 0 2
44101: PUSH
44102: LD_INT 4
44104: PLUS
44105: PUSH
44106: LD_INT 5
44108: PUSH
44109: EMPTY
44110: LIST
44111: LIST
44112: LIST
44113: PUSH
44114: LD_VAR 0 1
44118: PUSH
44119: LD_INT 4
44121: MINUS
44122: PUSH
44123: LD_VAR 0 2
44127: PUSH
44128: LD_INT 1
44130: PUSH
44131: EMPTY
44132: LIST
44133: LIST
44134: LIST
44135: PUSH
44136: LD_VAR 0 1
44140: PUSH
44141: LD_VAR 0 2
44145: PUSH
44146: LD_INT 4
44148: MINUS
44149: PUSH
44150: LD_INT 3
44152: PUSH
44153: EMPTY
44154: LIST
44155: LIST
44156: LIST
44157: PUSH
44158: LD_VAR 0 1
44162: PUSH
44163: LD_INT 3
44165: MINUS
44166: PUSH
44167: LD_VAR 0 2
44171: PUSH
44172: LD_INT 3
44174: MINUS
44175: PUSH
44176: LD_INT 2
44178: PUSH
44179: EMPTY
44180: LIST
44181: LIST
44182: LIST
44183: PUSH
44184: EMPTY
44185: LIST
44186: LIST
44187: LIST
44188: LIST
44189: LIST
44190: ST_TO_ADDR
// end ; 4 :
44191: GO 44472
44193: LD_INT 4
44195: DOUBLE
44196: EQUAL
44197: IFTRUE 44201
44199: GO 44334
44201: POP
// begin list := [ [ x , y + 4 , 0 ] , [ x + 3 , y + 3 , 5 ] , [ x + 4 , y , 4 ] , [ x , y - 3 , 3 ] , [ x - 4 , y - 4 , 2 ] ] ;
44202: LD_ADDR_VAR 0 5
44206: PUSH
44207: LD_VAR 0 1
44211: PUSH
44212: LD_VAR 0 2
44216: PUSH
44217: LD_INT 4
44219: PLUS
44220: PUSH
44221: LD_INT 0
44223: PUSH
44224: EMPTY
44225: LIST
44226: LIST
44227: LIST
44228: PUSH
44229: LD_VAR 0 1
44233: PUSH
44234: LD_INT 3
44236: PLUS
44237: PUSH
44238: LD_VAR 0 2
44242: PUSH
44243: LD_INT 3
44245: PLUS
44246: PUSH
44247: LD_INT 5
44249: PUSH
44250: EMPTY
44251: LIST
44252: LIST
44253: LIST
44254: PUSH
44255: LD_VAR 0 1
44259: PUSH
44260: LD_INT 4
44262: PLUS
44263: PUSH
44264: LD_VAR 0 2
44268: PUSH
44269: LD_INT 4
44271: PUSH
44272: EMPTY
44273: LIST
44274: LIST
44275: LIST
44276: PUSH
44277: LD_VAR 0 1
44281: PUSH
44282: LD_VAR 0 2
44286: PUSH
44287: LD_INT 3
44289: MINUS
44290: PUSH
44291: LD_INT 3
44293: PUSH
44294: EMPTY
44295: LIST
44296: LIST
44297: LIST
44298: PUSH
44299: LD_VAR 0 1
44303: PUSH
44304: LD_INT 4
44306: MINUS
44307: PUSH
44308: LD_VAR 0 2
44312: PUSH
44313: LD_INT 4
44315: MINUS
44316: PUSH
44317: LD_INT 2
44319: PUSH
44320: EMPTY
44321: LIST
44322: LIST
44323: LIST
44324: PUSH
44325: EMPTY
44326: LIST
44327: LIST
44328: LIST
44329: LIST
44330: LIST
44331: ST_TO_ADDR
// end ; 5 :
44332: GO 44472
44334: LD_INT 5
44336: DOUBLE
44337: EQUAL
44338: IFTRUE 44342
44340: GO 44471
44342: POP
// begin list := [ [ x - 4 , y , 1 ] , [ x , y - 4 , 3 ] , [ x + 4 , y + 4 , 5 ] , [ x + 3 , y , 4 ] , [ x , y + 3 , 0 ] ] ;
44343: LD_ADDR_VAR 0 5
44347: PUSH
44348: LD_VAR 0 1
44352: PUSH
44353: LD_INT 4
44355: MINUS
44356: PUSH
44357: LD_VAR 0 2
44361: PUSH
44362: LD_INT 1
44364: PUSH
44365: EMPTY
44366: LIST
44367: LIST
44368: LIST
44369: PUSH
44370: LD_VAR 0 1
44374: PUSH
44375: LD_VAR 0 2
44379: PUSH
44380: LD_INT 4
44382: MINUS
44383: PUSH
44384: LD_INT 3
44386: PUSH
44387: EMPTY
44388: LIST
44389: LIST
44390: LIST
44391: PUSH
44392: LD_VAR 0 1
44396: PUSH
44397: LD_INT 4
44399: PLUS
44400: PUSH
44401: LD_VAR 0 2
44405: PUSH
44406: LD_INT 4
44408: PLUS
44409: PUSH
44410: LD_INT 5
44412: PUSH
44413: EMPTY
44414: LIST
44415: LIST
44416: LIST
44417: PUSH
44418: LD_VAR 0 1
44422: PUSH
44423: LD_INT 3
44425: PLUS
44426: PUSH
44427: LD_VAR 0 2
44431: PUSH
44432: LD_INT 4
44434: PUSH
44435: EMPTY
44436: LIST
44437: LIST
44438: LIST
44439: PUSH
44440: LD_VAR 0 1
44444: PUSH
44445: LD_VAR 0 2
44449: PUSH
44450: LD_INT 3
44452: PLUS
44453: PUSH
44454: LD_INT 0
44456: PUSH
44457: EMPTY
44458: LIST
44459: LIST
44460: LIST
44461: PUSH
44462: EMPTY
44463: LIST
44464: LIST
44465: LIST
44466: LIST
44467: LIST
44468: ST_TO_ADDR
// end ; end ;
44469: GO 44472
44471: POP
// result := list ;
44472: LD_ADDR_VAR 0 4
44476: PUSH
44477: LD_VAR 0 5
44481: ST_TO_ADDR
// end ;
44482: LD_VAR 0 4
44486: RET
// export function SortBySkill ( units , class ) ; var i , tmp ; begin
44487: LD_INT 0
44489: PPUSH
44490: PPUSH
44491: PPUSH
// if not units or not class in [ 1 , 2 , 3 , 4 ] then
44492: LD_VAR 0 1
44496: NOT
44497: PUSH
44498: LD_VAR 0 2
44502: PUSH
44503: LD_INT 1
44505: PUSH
44506: LD_INT 2
44508: PUSH
44509: LD_INT 3
44511: PUSH
44512: LD_INT 4
44514: PUSH
44515: EMPTY
44516: LIST
44517: LIST
44518: LIST
44519: LIST
44520: IN
44521: NOT
44522: OR
44523: IFFALSE 44527
// exit ;
44525: GO 44619
// tmp := [ ] ;
44527: LD_ADDR_VAR 0 5
44531: PUSH
44532: EMPTY
44533: ST_TO_ADDR
// for i in units do
44534: LD_ADDR_VAR 0 4
44538: PUSH
44539: LD_VAR 0 1
44543: PUSH
44544: FOR_IN
44545: IFFALSE 44588
// tmp := Insert ( tmp , tmp + 1 , GetSkill ( i , class ) ) ;
44547: LD_ADDR_VAR 0 5
44551: PUSH
44552: LD_VAR 0 5
44556: PPUSH
44557: LD_VAR 0 5
44561: PUSH
44562: LD_INT 1
44564: PLUS
44565: PPUSH
44566: LD_VAR 0 4
44570: PPUSH
44571: LD_VAR 0 2
44575: PPUSH
44576: CALL_OW 259
44580: PPUSH
44581: CALL_OW 2
44585: ST_TO_ADDR
44586: GO 44544
44588: POP
44589: POP
// if not tmp then
44590: LD_VAR 0 5
44594: NOT
44595: IFFALSE 44599
// exit ;
44597: GO 44619
// result := SortListByListDesc ( units , tmp ) ;
44599: LD_ADDR_VAR 0 3
44603: PUSH
44604: LD_VAR 0 1
44608: PPUSH
44609: LD_VAR 0 5
44613: PPUSH
44614: CALL_OW 77
44618: ST_TO_ADDR
// end ;
44619: LD_VAR 0 3
44623: RET
// export function UnitGoingToBuilding ( unit , building ) ; var x , y ; begin
44624: LD_INT 0
44626: PPUSH
44627: PPUSH
44628: PPUSH
// result := false ;
44629: LD_ADDR_VAR 0 3
44633: PUSH
44634: LD_INT 0
44636: ST_TO_ADDR
// x := GetX ( building ) ;
44637: LD_ADDR_VAR 0 4
44641: PUSH
44642: LD_VAR 0 2
44646: PPUSH
44647: CALL_OW 250
44651: ST_TO_ADDR
// y := GetY ( building ) ;
44652: LD_ADDR_VAR 0 5
44656: PUSH
44657: LD_VAR 0 2
44661: PPUSH
44662: CALL_OW 251
44666: ST_TO_ADDR
// if not building or not x or not y then
44667: LD_VAR 0 2
44671: NOT
44672: PUSH
44673: LD_VAR 0 4
44677: NOT
44678: OR
44679: PUSH
44680: LD_VAR 0 5
44684: NOT
44685: OR
44686: IFFALSE 44690
// exit ;
44688: GO 44782
// if GetTaskList ( unit ) then
44690: LD_VAR 0 1
44694: PPUSH
44695: CALL_OW 437
44699: IFFALSE 44782
// begin if e = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44701: LD_STRING e
44703: PUSH
44704: LD_VAR 0 1
44708: PPUSH
44709: CALL_OW 437
44713: PUSH
44714: LD_INT 1
44716: ARRAY
44717: PUSH
44718: LD_INT 1
44720: ARRAY
44721: EQUAL
44722: PUSH
44723: LD_VAR 0 4
44727: PUSH
44728: LD_VAR 0 1
44732: PPUSH
44733: CALL_OW 437
44737: PUSH
44738: LD_INT 1
44740: ARRAY
44741: PUSH
44742: LD_INT 2
44744: ARRAY
44745: EQUAL
44746: AND
44747: PUSH
44748: LD_VAR 0 5
44752: PUSH
44753: LD_VAR 0 1
44757: PPUSH
44758: CALL_OW 437
44762: PUSH
44763: LD_INT 1
44765: ARRAY
44766: PUSH
44767: LD_INT 3
44769: ARRAY
44770: EQUAL
44771: AND
44772: IFFALSE 44782
// result := true end ;
44774: LD_ADDR_VAR 0 3
44778: PUSH
44779: LD_INT 1
44781: ST_TO_ADDR
// end ;
44782: LD_VAR 0 3
44786: RET
// export function UnitGoingToXY ( unit , x , y ) ; begin
44787: LD_INT 0
44789: PPUSH
// result := false ;
44790: LD_ADDR_VAR 0 4
44794: PUSH
44795: LD_INT 0
44797: ST_TO_ADDR
// if GetTaskList ( unit ) then
44798: LD_VAR 0 1
44802: PPUSH
44803: CALL_OW 437
44807: IFFALSE 44890
// begin if M = GetTaskList ( unit ) [ 1 ] [ 1 ] and x = GetTaskList ( unit ) [ 1 ] [ 2 ] and y = GetTaskList ( unit ) [ 1 ] [ 3 ] then
44809: LD_STRING M
44811: PUSH
44812: LD_VAR 0 1
44816: PPUSH
44817: CALL_OW 437
44821: PUSH
44822: LD_INT 1
44824: ARRAY
44825: PUSH
44826: LD_INT 1
44828: ARRAY
44829: EQUAL
44830: PUSH
44831: LD_VAR 0 2
44835: PUSH
44836: LD_VAR 0 1
44840: PPUSH
44841: CALL_OW 437
44845: PUSH
44846: LD_INT 1
44848: ARRAY
44849: PUSH
44850: LD_INT 2
44852: ARRAY
44853: EQUAL
44854: AND
44855: PUSH
44856: LD_VAR 0 3
44860: PUSH
44861: LD_VAR 0 1
44865: PPUSH
44866: CALL_OW 437
44870: PUSH
44871: LD_INT 1
44873: ARRAY
44874: PUSH
44875: LD_INT 3
44877: ARRAY
44878: EQUAL
44879: AND
44880: IFFALSE 44890
// result := true ;
44882: LD_ADDR_VAR 0 4
44886: PUSH
44887: LD_INT 1
44889: ST_TO_ADDR
// end ; end ;
44890: LD_VAR 0 4
44894: RET
// export function PlaceUnitInArea ( unit , area , mode ) ; var i , tmp , hex ; begin
44895: LD_INT 0
44897: PPUSH
44898: PPUSH
44899: PPUSH
44900: PPUSH
// if not unit or not area then
44901: LD_VAR 0 1
44905: NOT
44906: PUSH
44907: LD_VAR 0 2
44911: NOT
44912: OR
44913: IFFALSE 44917
// exit ;
44915: GO 45081
// tmp := AreaToList ( area , i ) ;
44917: LD_ADDR_VAR 0 6
44921: PUSH
44922: LD_VAR 0 2
44926: PPUSH
44927: LD_VAR 0 5
44931: PPUSH
44932: CALL_OW 517
44936: ST_TO_ADDR
// for i = 1 to tmp [ 1 ] do
44937: LD_ADDR_VAR 0 5
44941: PUSH
44942: DOUBLE
44943: LD_INT 1
44945: DEC
44946: ST_TO_ADDR
44947: LD_VAR 0 6
44951: PUSH
44952: LD_INT 1
44954: ARRAY
44955: PUSH
44956: FOR_TO
44957: IFFALSE 45079
// begin hex := [ tmp [ 1 ] [ i ] , tmp [ 2 ] [ i ] ] ;
44959: LD_ADDR_VAR 0 7
44963: PUSH
44964: LD_VAR 0 6
44968: PUSH
44969: LD_INT 1
44971: ARRAY
44972: PUSH
44973: LD_VAR 0 5
44977: ARRAY
44978: PUSH
44979: LD_VAR 0 6
44983: PUSH
44984: LD_INT 2
44986: ARRAY
44987: PUSH
44988: LD_VAR 0 5
44992: ARRAY
44993: PUSH
44994: EMPTY
44995: LIST
44996: LIST
44997: ST_TO_ADDR
// if HexInfo ( hex [ 1 ] , hex [ 2 ] ) = 0 then
44998: LD_VAR 0 7
45002: PUSH
45003: LD_INT 1
45005: ARRAY
45006: PPUSH
45007: LD_VAR 0 7
45011: PUSH
45012: LD_INT 2
45014: ARRAY
45015: PPUSH
45016: CALL_OW 428
45020: PUSH
45021: LD_INT 0
45023: EQUAL
45024: IFFALSE 45077
// begin PlaceUnitXY ( unit , hex [ 1 ] , hex [ 2 ] , mode ) ;
45026: LD_VAR 0 1
45030: PPUSH
45031: LD_VAR 0 7
45035: PUSH
45036: LD_INT 1
45038: ARRAY
45039: PPUSH
45040: LD_VAR 0 7
45044: PUSH
45045: LD_INT 2
45047: ARRAY
45048: PPUSH
45049: LD_VAR 0 3
45053: PPUSH
45054: CALL_OW 48
// result := IsPlaced ( unit ) ;
45058: LD_ADDR_VAR 0 4
45062: PUSH
45063: LD_VAR 0 1
45067: PPUSH
45068: CALL_OW 305
45072: ST_TO_ADDR
// exit ;
45073: POP
45074: POP
45075: GO 45081
// end ; end ;
45077: GO 44956
45079: POP
45080: POP
// end ;
45081: LD_VAR 0 4
45085: RET
// export function BuildingsListDump ( side ) ; var i , tmp ; begin
45086: LD_INT 0
45088: PPUSH
45089: PPUSH
45090: PPUSH
// if not side or side > 8 then
45091: LD_VAR 0 1
45095: NOT
45096: PUSH
45097: LD_VAR 0 1
45101: PUSH
45102: LD_INT 8
45104: GREATER
45105: OR
45106: IFFALSE 45110
// exit ;
45108: GO 45297
// tmp := FilterAllUnits ( [ [ f_side , side ] , [ f_type , unit_building ] ] ) ;
45110: LD_ADDR_VAR 0 4
45114: PUSH
45115: LD_INT 22
45117: PUSH
45118: LD_VAR 0 1
45122: PUSH
45123: EMPTY
45124: LIST
45125: LIST
45126: PUSH
45127: LD_INT 21
45129: PUSH
45130: LD_INT 3
45132: PUSH
45133: EMPTY
45134: LIST
45135: LIST
45136: PUSH
45137: EMPTY
45138: LIST
45139: LIST
45140: PPUSH
45141: CALL_OW 69
45145: ST_TO_ADDR
// if not tmp then
45146: LD_VAR 0 4
45150: NOT
45151: IFFALSE 45155
// exit ;
45153: GO 45297
// enable_addtolog := true ;
45155: LD_ADDR_OWVAR 81
45159: PUSH
45160: LD_INT 1
45162: ST_TO_ADDR
// AddToLog ( [ ) ;
45163: LD_STRING [
45165: PPUSH
45166: CALL_OW 561
// for i in tmp do
45170: LD_ADDR_VAR 0 3
45174: PUSH
45175: LD_VAR 0 4
45179: PUSH
45180: FOR_IN
45181: IFFALSE 45288
// begin AddToLog ( [ & GetBType ( i ) & ,  & GetX ( i ) & ,  & GetY ( i ) & ,  & GetDir ( i ) & ,  & GetLabKind ( i , 1 ) & ,  & GetLabKind ( i , 2 ) & ], ) ;
45183: LD_STRING [
45185: PUSH
45186: LD_VAR 0 3
45190: PPUSH
45191: CALL_OW 266
45195: STR
45196: PUSH
45197: LD_STRING , 
45199: STR
45200: PUSH
45201: LD_VAR 0 3
45205: PPUSH
45206: CALL_OW 250
45210: STR
45211: PUSH
45212: LD_STRING , 
45214: STR
45215: PUSH
45216: LD_VAR 0 3
45220: PPUSH
45221: CALL_OW 251
45225: STR
45226: PUSH
45227: LD_STRING , 
45229: STR
45230: PUSH
45231: LD_VAR 0 3
45235: PPUSH
45236: CALL_OW 254
45240: STR
45241: PUSH
45242: LD_STRING , 
45244: STR
45245: PUSH
45246: LD_VAR 0 3
45250: PPUSH
45251: LD_INT 1
45253: PPUSH
45254: CALL_OW 268
45258: STR
45259: PUSH
45260: LD_STRING , 
45262: STR
45263: PUSH
45264: LD_VAR 0 3
45268: PPUSH
45269: LD_INT 2
45271: PPUSH
45272: CALL_OW 268
45276: STR
45277: PUSH
45278: LD_STRING ],
45280: STR
45281: PPUSH
45282: CALL_OW 561
// end ;
45286: GO 45180
45288: POP
45289: POP
// AddToLog ( ]; ) ;
45290: LD_STRING ];
45292: PPUSH
45293: CALL_OW 561
// end ;
45297: LD_VAR 0 2
45301: RET
// export function Crates ( area , rate , min , max ) ; var i , r , time , amount ; begin
45302: LD_INT 0
45304: PPUSH
45305: PPUSH
45306: PPUSH
45307: PPUSH
45308: PPUSH
// if not area or not rate or not max then
45309: LD_VAR 0 1
45313: NOT
45314: PUSH
45315: LD_VAR 0 2
45319: NOT
45320: OR
45321: PUSH
45322: LD_VAR 0 4
45326: NOT
45327: OR
45328: IFFALSE 45332
// exit ;
45330: GO 45521
// while 1 do
45332: LD_INT 1
45334: IFFALSE 45521
// begin amount := GetResourceArea ( area , mat_cans ) * 10 ;
45336: LD_ADDR_VAR 0 9
45340: PUSH
45341: LD_VAR 0 1
45345: PPUSH
45346: LD_INT 1
45348: PPUSH
45349: CALL_OW 287
45353: PUSH
45354: LD_INT 10
45356: MUL
45357: ST_TO_ADDR
// r := rate / 10 ;
45358: LD_ADDR_VAR 0 7
45362: PUSH
45363: LD_VAR 0 2
45367: PUSH
45368: LD_INT 10
45370: DIVREAL
45371: ST_TO_ADDR
// time := 1 1$00 ;
45372: LD_ADDR_VAR 0 8
45376: PUSH
45377: LD_INT 2100
45379: ST_TO_ADDR
// if amount < min then
45380: LD_VAR 0 9
45384: PUSH
45385: LD_VAR 0 3
45389: LESS
45390: IFFALSE 45408
// r := r * 2 else
45392: LD_ADDR_VAR 0 7
45396: PUSH
45397: LD_VAR 0 7
45401: PUSH
45402: LD_INT 2
45404: MUL
45405: ST_TO_ADDR
45406: GO 45434
// if amount > max then
45408: LD_VAR 0 9
45412: PUSH
45413: LD_VAR 0 4
45417: GREATER
45418: IFFALSE 45434
// r := r / 2 ;
45420: LD_ADDR_VAR 0 7
45424: PUSH
45425: LD_VAR 0 7
45429: PUSH
45430: LD_INT 2
45432: DIVREAL
45433: ST_TO_ADDR
// time := time / r ;
45434: LD_ADDR_VAR 0 8
45438: PUSH
45439: LD_VAR 0 8
45443: PUSH
45444: LD_VAR 0 7
45448: DIVREAL
45449: ST_TO_ADDR
// if time < 0 then
45450: LD_VAR 0 8
45454: PUSH
45455: LD_INT 0
45457: LESS
45458: IFFALSE 45475
// time := time * - 1 ;
45460: LD_ADDR_VAR 0 8
45464: PUSH
45465: LD_VAR 0 8
45469: PUSH
45470: LD_INT 1
45472: NEG
45473: MUL
45474: ST_TO_ADDR
// wait ( time + rand ( 0 0$01 , 0 0$25 ) ) ;
45475: LD_VAR 0 8
45479: PUSH
45480: LD_INT 35
45482: PPUSH
45483: LD_INT 875
45485: PPUSH
45486: CALL_OW 12
45490: PLUS
45491: PPUSH
45492: CALL_OW 67
// CreateCratesArea ( rand ( 1 , 5 ) , area , true ) ;
45496: LD_INT 1
45498: PPUSH
45499: LD_INT 5
45501: PPUSH
45502: CALL_OW 12
45506: PPUSH
45507: LD_VAR 0 1
45511: PPUSH
45512: LD_INT 1
45514: PPUSH
45515: CALL_OW 55
// end ;
45519: GO 45332
// end ;
45521: LD_VAR 0 5
45525: RET
// export function UpgradeTurretsWeapon ( turrets , factories ) ; var i , j , k , nat , weapon , weapons , list ; begin
45526: LD_INT 0
45528: PPUSH
45529: PPUSH
45530: PPUSH
45531: PPUSH
45532: PPUSH
45533: PPUSH
45534: PPUSH
45535: PPUSH
// if not turrets or not factories then
45536: LD_VAR 0 1
45540: NOT
45541: PUSH
45542: LD_VAR 0 2
45546: NOT
45547: OR
45548: IFFALSE 45552
// exit ;
45550: GO 45859
// list := [ [ [ us_double_gun , us_heavy_gun ] , [ us_machine_gun , us_gatling_gun ] , [ us_light_gun , us_double_gun ] ] , [ [ ar_double_machine_gun , ar_gatling_gun ] , [ ar_light_gun , ar_gun ] ] , [ [ ru_heavy_machine_gun , ru_gatling_gun ] , [ ru_gun , ru_heavy_gun ] , [ ru_rocket_launcher , ru_rocket ] ] , ] ;
45552: LD_ADDR_VAR 0 10
45556: PUSH
45557: LD_INT 5
45559: PUSH
45560: LD_INT 6
45562: PUSH
45563: EMPTY
45564: LIST
45565: LIST
45566: PUSH
45567: LD_INT 2
45569: PUSH
45570: LD_INT 4
45572: PUSH
45573: EMPTY
45574: LIST
45575: LIST
45576: PUSH
45577: LD_INT 3
45579: PUSH
45580: LD_INT 5
45582: PUSH
45583: EMPTY
45584: LIST
45585: LIST
45586: PUSH
45587: EMPTY
45588: LIST
45589: LIST
45590: LIST
45591: PUSH
45592: LD_INT 24
45594: PUSH
45595: LD_INT 25
45597: PUSH
45598: EMPTY
45599: LIST
45600: LIST
45601: PUSH
45602: LD_INT 23
45604: PUSH
45605: LD_INT 27
45607: PUSH
45608: EMPTY
45609: LIST
45610: LIST
45611: PUSH
45612: EMPTY
45613: LIST
45614: LIST
45615: PUSH
45616: LD_INT 42
45618: PUSH
45619: LD_INT 43
45621: PUSH
45622: EMPTY
45623: LIST
45624: LIST
45625: PUSH
45626: LD_INT 44
45628: PUSH
45629: LD_INT 46
45631: PUSH
45632: EMPTY
45633: LIST
45634: LIST
45635: PUSH
45636: LD_INT 45
45638: PUSH
45639: LD_INT 47
45641: PUSH
45642: EMPTY
45643: LIST
45644: LIST
45645: PUSH
45646: EMPTY
45647: LIST
45648: LIST
45649: LIST
45650: PUSH
45651: EMPTY
45652: LIST
45653: LIST
45654: LIST
45655: ST_TO_ADDR
// result := [ ] ;
45656: LD_ADDR_VAR 0 3
45660: PUSH
45661: EMPTY
45662: ST_TO_ADDR
// for i in turrets do
45663: LD_ADDR_VAR 0 4
45667: PUSH
45668: LD_VAR 0 1
45672: PUSH
45673: FOR_IN
45674: IFFALSE 45857
// begin nat := GetNation ( i ) ;
45676: LD_ADDR_VAR 0 7
45680: PUSH
45681: LD_VAR 0 4
45685: PPUSH
45686: CALL_OW 248
45690: ST_TO_ADDR
// weapon := 0 ;
45691: LD_ADDR_VAR 0 8
45695: PUSH
45696: LD_INT 0
45698: ST_TO_ADDR
// if not nat then
45699: LD_VAR 0 7
45703: NOT
45704: IFFALSE 45708
// continue ;
45706: GO 45673
// for j in list [ nat ] do
45708: LD_ADDR_VAR 0 5
45712: PUSH
45713: LD_VAR 0 10
45717: PUSH
45718: LD_VAR 0 7
45722: ARRAY
45723: PUSH
45724: FOR_IN
45725: IFFALSE 45766
// if GetBWeapon ( i ) = j [ 1 ] then
45727: LD_VAR 0 4
45731: PPUSH
45732: CALL_OW 269
45736: PUSH
45737: LD_VAR 0 5
45741: PUSH
45742: LD_INT 1
45744: ARRAY
45745: EQUAL
45746: IFFALSE 45764
// begin weapon := j [ 2 ] ;
45748: LD_ADDR_VAR 0 8
45752: PUSH
45753: LD_VAR 0 5
45757: PUSH
45758: LD_INT 2
45760: ARRAY
45761: ST_TO_ADDR
// break ;
45762: GO 45766
// end ;
45764: GO 45724
45766: POP
45767: POP
// if not weapon then
45768: LD_VAR 0 8
45772: NOT
45773: IFFALSE 45777
// continue ;
45775: GO 45673
// for k in factories do
45777: LD_ADDR_VAR 0 6
45781: PUSH
45782: LD_VAR 0 2
45786: PUSH
45787: FOR_IN
45788: IFFALSE 45853
// begin weapons := AvailableWeaponList ( k ) ;
45790: LD_ADDR_VAR 0 9
45794: PUSH
45795: LD_VAR 0 6
45799: PPUSH
45800: CALL_OW 478
45804: ST_TO_ADDR
// if not weapons then
45805: LD_VAR 0 9
45809: NOT
45810: IFFALSE 45814
// continue ;
45812: GO 45787
// if weapon in weapons then
45814: LD_VAR 0 8
45818: PUSH
45819: LD_VAR 0 9
45823: IN
45824: IFFALSE 45851
// begin result := [ i , weapon ] ;
45826: LD_ADDR_VAR 0 3
45830: PUSH
45831: LD_VAR 0 4
45835: PUSH
45836: LD_VAR 0 8
45840: PUSH
45841: EMPTY
45842: LIST
45843: LIST
45844: ST_TO_ADDR
// exit ;
45845: POP
45846: POP
45847: POP
45848: POP
45849: GO 45859
// end ; end ;
45851: GO 45787
45853: POP
45854: POP
// end ;
45855: GO 45673
45857: POP
45858: POP
// end ;
45859: LD_VAR 0 3
45863: RET
// export function RevealMapOnXY ( x , y , side , range ) ; begin
45864: LD_INT 0
45866: PPUSH
// if not side or side > 8 then
45867: LD_VAR 0 3
45871: NOT
45872: PUSH
45873: LD_VAR 0 3
45877: PUSH
45878: LD_INT 8
45880: GREATER
45881: OR
45882: IFFALSE 45886
// exit ;
45884: GO 45945
// if not range then
45886: LD_VAR 0 4
45890: NOT
45891: IFFALSE 45902
// range := - 12 ;
45893: LD_ADDR_VAR 0 4
45897: PUSH
45898: LD_INT 12
45900: NEG
45901: ST_TO_ADDR
// PlaceSeeing ( x , y , side , range ) ;
45902: LD_VAR 0 1
45906: PPUSH
45907: LD_VAR 0 2
45911: PPUSH
45912: LD_VAR 0 3
45916: PPUSH
45917: LD_VAR 0 4
45921: PPUSH
45922: CALL_OW 330
// RemoveSeeing ( x , y , side ) ;
45926: LD_VAR 0 1
45930: PPUSH
45931: LD_VAR 0 2
45935: PPUSH
45936: LD_VAR 0 3
45940: PPUSH
45941: CALL_OW 331
// end ;
45945: LD_VAR 0 5
45949: RET
// export function Video ( mode ) ; begin
45950: LD_INT 0
45952: PPUSH
// ingame_video = mode ;
45953: LD_ADDR_OWVAR 52
45957: PUSH
45958: LD_VAR 0 1
45962: ST_TO_ADDR
// interface_hidden = mode ;
45963: LD_ADDR_OWVAR 54
45967: PUSH
45968: LD_VAR 0 1
45972: ST_TO_ADDR
// end ;
45973: LD_VAR 0 2
45977: RET
// export function Join ( array , element ) ; begin
45978: LD_INT 0
45980: PPUSH
// result := Replace ( array , array + 1 , element ) ;
45981: LD_ADDR_VAR 0 3
45985: PUSH
45986: LD_VAR 0 1
45990: PPUSH
45991: LD_VAR 0 1
45995: PUSH
45996: LD_INT 1
45998: PLUS
45999: PPUSH
46000: LD_VAR 0 2
46004: PPUSH
46005: CALL_OW 1
46009: ST_TO_ADDR
// end ;
46010: LD_VAR 0 3
46014: RET
// export function JoinUnion ( array , element ) ; begin
46015: LD_INT 0
46017: PPUSH
// result := array union element ;
46018: LD_ADDR_VAR 0 3
46022: PUSH
46023: LD_VAR 0 1
46027: PUSH
46028: LD_VAR 0 2
46032: UNION
46033: ST_TO_ADDR
// end ;
46034: LD_VAR 0 3
46038: RET
// export function GetBehemoths ( side ) ; begin
46039: LD_INT 0
46041: PPUSH
// result := FilterAllUnits ( [ [ f_side , side ] , [ f_chassis , 25 ] ] ) ;
46042: LD_ADDR_VAR 0 2
46046: PUSH
46047: LD_INT 22
46049: PUSH
46050: LD_VAR 0 1
46054: PUSH
46055: EMPTY
46056: LIST
46057: LIST
46058: PUSH
46059: LD_INT 31
46061: PUSH
46062: LD_INT 25
46064: PUSH
46065: EMPTY
46066: LIST
46067: LIST
46068: PUSH
46069: EMPTY
46070: LIST
46071: LIST
46072: PPUSH
46073: CALL_OW 69
46077: ST_TO_ADDR
// end ;
46078: LD_VAR 0 2
46082: RET
// export function Shuffle ( array ) ; var i , index ; begin
46083: LD_INT 0
46085: PPUSH
46086: PPUSH
46087: PPUSH
// result := [ ] ;
46088: LD_ADDR_VAR 0 2
46092: PUSH
46093: EMPTY
46094: ST_TO_ADDR
// if not array then
46095: LD_VAR 0 1
46099: NOT
46100: IFFALSE 46104
// exit ;
46102: GO 46203
// Randomize ;
46104: CALL_OW 10
// for i = array downto 1 do
46108: LD_ADDR_VAR 0 3
46112: PUSH
46113: DOUBLE
46114: LD_VAR 0 1
46118: INC
46119: ST_TO_ADDR
46120: LD_INT 1
46122: PUSH
46123: FOR_DOWNTO
46124: IFFALSE 46201
// begin index := rand ( 1 , array ) ;
46126: LD_ADDR_VAR 0 4
46130: PUSH
46131: LD_INT 1
46133: PPUSH
46134: LD_VAR 0 1
46138: PPUSH
46139: CALL_OW 12
46143: ST_TO_ADDR
// result := Insert ( result , result + 1 , array [ index ] ) ;
46144: LD_ADDR_VAR 0 2
46148: PUSH
46149: LD_VAR 0 2
46153: PPUSH
46154: LD_VAR 0 2
46158: PUSH
46159: LD_INT 1
46161: PLUS
46162: PPUSH
46163: LD_VAR 0 1
46167: PUSH
46168: LD_VAR 0 4
46172: ARRAY
46173: PPUSH
46174: CALL_OW 2
46178: ST_TO_ADDR
// array := Delete ( array , index ) ;
46179: LD_ADDR_VAR 0 1
46183: PUSH
46184: LD_VAR 0 1
46188: PPUSH
46189: LD_VAR 0 4
46193: PPUSH
46194: CALL_OW 3
46198: ST_TO_ADDR
// end ;
46199: GO 46123
46201: POP
46202: POP
// end ;
46203: LD_VAR 0 2
46207: RET
// export function GetBaseMaterials ( base ) ; begin
46208: LD_INT 0
46210: PPUSH
// result := [ 0 , 0 , 0 ] ;
46211: LD_ADDR_VAR 0 2
46215: PUSH
46216: LD_INT 0
46218: PUSH
46219: LD_INT 0
46221: PUSH
46222: LD_INT 0
46224: PUSH
46225: EMPTY
46226: LIST
46227: LIST
46228: LIST
46229: ST_TO_ADDR
// if not base then
46230: LD_VAR 0 1
46234: NOT
46235: IFFALSE 46239
// exit ;
46237: GO 46288
// result := [ GetResourceType ( base , mat_cans ) , GetResourceType ( base , mat_oil ) , GetResourceType ( base , mat_siberit ) ] ;
46239: LD_ADDR_VAR 0 2
46243: PUSH
46244: LD_VAR 0 1
46248: PPUSH
46249: LD_INT 1
46251: PPUSH
46252: CALL_OW 275
46256: PUSH
46257: LD_VAR 0 1
46261: PPUSH
46262: LD_INT 2
46264: PPUSH
46265: CALL_OW 275
46269: PUSH
46270: LD_VAR 0 1
46274: PPUSH
46275: LD_INT 3
46277: PPUSH
46278: CALL_OW 275
46282: PUSH
46283: EMPTY
46284: LIST
46285: LIST
46286: LIST
46287: ST_TO_ADDR
// end ;
46288: LD_VAR 0 2
46292: RET
// export function ShrinkArray ( array , size ) ; var i ; begin
46293: LD_INT 0
46295: PPUSH
46296: PPUSH
// result := array ;
46297: LD_ADDR_VAR 0 3
46301: PUSH
46302: LD_VAR 0 1
46306: ST_TO_ADDR
// if size > 0 then
46307: LD_VAR 0 2
46311: PUSH
46312: LD_INT 0
46314: GREATER
46315: IFFALSE 46361
// for i := array downto size do
46317: LD_ADDR_VAR 0 4
46321: PUSH
46322: DOUBLE
46323: LD_VAR 0 1
46327: INC
46328: ST_TO_ADDR
46329: LD_VAR 0 2
46333: PUSH
46334: FOR_DOWNTO
46335: IFFALSE 46359
// result := Delete ( result , result ) ;
46337: LD_ADDR_VAR 0 3
46341: PUSH
46342: LD_VAR 0 3
46346: PPUSH
46347: LD_VAR 0 3
46351: PPUSH
46352: CALL_OW 3
46356: ST_TO_ADDR
46357: GO 46334
46359: POP
46360: POP
// end ;
46361: LD_VAR 0 3
46365: RET
// export function ComExit ( unit ) ; var tmp ; begin
46366: LD_INT 0
46368: PPUSH
46369: PPUSH
// if not IsInUnit ( unit ) then
46370: LD_VAR 0 1
46374: PPUSH
46375: CALL_OW 310
46379: NOT
46380: IFFALSE 46384
// exit ;
46382: GO 46444
// tmp := IsInUnit ( unit ) ;
46384: LD_ADDR_VAR 0 3
46388: PUSH
46389: LD_VAR 0 1
46393: PPUSH
46394: CALL_OW 310
46398: ST_TO_ADDR
// if GetType ( tmp ) = unit_vehicle then
46399: LD_VAR 0 3
46403: PPUSH
46404: CALL_OW 247
46408: PUSH
46409: LD_INT 2
46411: EQUAL
46412: IFFALSE 46425
// ComExitVehicle ( unit ) else
46414: LD_VAR 0 1
46418: PPUSH
46419: CALL_OW 121
46423: GO 46434
// ComExitBuilding ( unit ) ;
46425: LD_VAR 0 1
46429: PPUSH
46430: CALL_OW 122
// result := tmp ;
46434: LD_ADDR_VAR 0 2
46438: PUSH
46439: LD_VAR 0 3
46443: ST_TO_ADDR
// end ;
46444: LD_VAR 0 2
46448: RET
// export function ComExitAll ( units ) ; var i ; begin
46449: LD_INT 0
46451: PPUSH
46452: PPUSH
// if not units then
46453: LD_VAR 0 1
46457: NOT
46458: IFFALSE 46462
// exit ;
46460: GO 46488
// for i in units do
46462: LD_ADDR_VAR 0 3
46466: PUSH
46467: LD_VAR 0 1
46471: PUSH
46472: FOR_IN
46473: IFFALSE 46486
// ComExit ( i ) ;
46475: LD_VAR 0 3
46479: PPUSH
46480: CALL 46366 0 1
46484: GO 46472
46486: POP
46487: POP
// end ;
46488: LD_VAR 0 2
46492: RET
// export function ResetHc ; begin
46493: LD_INT 0
46495: PPUSH
// InitHc ;
46496: CALL_OW 19
// hc_importance := 0 ;
46500: LD_ADDR_OWVAR 32
46504: PUSH
46505: LD_INT 0
46507: ST_TO_ADDR
// end ;
46508: LD_VAR 0 1
46512: RET
// export function PointBetweenXY ( x1 , y1 , x2 , y2 ) ; var _x , _y ; begin
46513: LD_INT 0
46515: PPUSH
46516: PPUSH
46517: PPUSH
// _x := ( x1 + x2 ) div 2 ;
46518: LD_ADDR_VAR 0 6
46522: PUSH
46523: LD_VAR 0 1
46527: PUSH
46528: LD_VAR 0 3
46532: PLUS
46533: PUSH
46534: LD_INT 2
46536: DIV
46537: ST_TO_ADDR
// if _x < 0 then
46538: LD_VAR 0 6
46542: PUSH
46543: LD_INT 0
46545: LESS
46546: IFFALSE 46563
// _x := _x * - 1 ;
46548: LD_ADDR_VAR 0 6
46552: PUSH
46553: LD_VAR 0 6
46557: PUSH
46558: LD_INT 1
46560: NEG
46561: MUL
46562: ST_TO_ADDR
// _y := ( y1 + y2 ) div 2 ;
46563: LD_ADDR_VAR 0 7
46567: PUSH
46568: LD_VAR 0 2
46572: PUSH
46573: LD_VAR 0 4
46577: PLUS
46578: PUSH
46579: LD_INT 2
46581: DIV
46582: ST_TO_ADDR
// if _y < 0 then
46583: LD_VAR 0 7
46587: PUSH
46588: LD_INT 0
46590: LESS
46591: IFFALSE 46608
// _y := _y * - 1 ;
46593: LD_ADDR_VAR 0 7
46597: PUSH
46598: LD_VAR 0 7
46602: PUSH
46603: LD_INT 1
46605: NEG
46606: MUL
46607: ST_TO_ADDR
// result := [ _x , _y ] ;
46608: LD_ADDR_VAR 0 5
46612: PUSH
46613: LD_VAR 0 6
46617: PUSH
46618: LD_VAR 0 7
46622: PUSH
46623: EMPTY
46624: LIST
46625: LIST
46626: ST_TO_ADDR
// end ;
46627: LD_VAR 0 5
46631: RET
// export function NotGoToAreaUnit ( unit , area , goAway ) ; var x , y , task ; begin
46632: LD_INT 0
46634: PPUSH
46635: PPUSH
46636: PPUSH
46637: PPUSH
// task := GetTaskList ( unit ) ;
46638: LD_ADDR_VAR 0 7
46642: PUSH
46643: LD_VAR 0 1
46647: PPUSH
46648: CALL_OW 437
46652: ST_TO_ADDR
// if not task and not IsInArea ( unit , area ) then
46653: LD_VAR 0 7
46657: NOT
46658: PUSH
46659: LD_VAR 0 1
46663: PPUSH
46664: LD_VAR 0 2
46668: PPUSH
46669: CALL_OW 308
46673: NOT
46674: AND
46675: IFFALSE 46679
// exit ;
46677: GO 46797
// if IsInArea ( unit , area ) then
46679: LD_VAR 0 1
46683: PPUSH
46684: LD_VAR 0 2
46688: PPUSH
46689: CALL_OW 308
46693: IFFALSE 46711
// begin ComMoveToArea ( unit , goAway ) ;
46695: LD_VAR 0 1
46699: PPUSH
46700: LD_VAR 0 3
46704: PPUSH
46705: CALL_OW 113
// exit ;
46709: GO 46797
// end ; if task [ 1 ] [ 1 ] <> M then
46711: LD_VAR 0 7
46715: PUSH
46716: LD_INT 1
46718: ARRAY
46719: PUSH
46720: LD_INT 1
46722: ARRAY
46723: PUSH
46724: LD_STRING M
46726: NONEQUAL
46727: IFFALSE 46731
// exit ;
46729: GO 46797
// x := task [ 1 ] [ 2 ] ;
46731: LD_ADDR_VAR 0 5
46735: PUSH
46736: LD_VAR 0 7
46740: PUSH
46741: LD_INT 1
46743: ARRAY
46744: PUSH
46745: LD_INT 2
46747: ARRAY
46748: ST_TO_ADDR
// y := task [ 1 ] [ 3 ] ;
46749: LD_ADDR_VAR 0 6
46753: PUSH
46754: LD_VAR 0 7
46758: PUSH
46759: LD_INT 1
46761: ARRAY
46762: PUSH
46763: LD_INT 3
46765: ARRAY
46766: ST_TO_ADDR
// if InArea ( x , y , area ) then
46767: LD_VAR 0 5
46771: PPUSH
46772: LD_VAR 0 6
46776: PPUSH
46777: LD_VAR 0 2
46781: PPUSH
46782: CALL_OW 309
46786: IFFALSE 46797
// ComStop ( unit ) ;
46788: LD_VAR 0 1
46792: PPUSH
46793: CALL_OW 141
// end ;
46797: LD_VAR 0 4
46801: RET
// export function Abs ( value ) ; begin
46802: LD_INT 0
46804: PPUSH
// result := value ;
46805: LD_ADDR_VAR 0 2
46809: PUSH
46810: LD_VAR 0 1
46814: ST_TO_ADDR
// if value < 0 then
46815: LD_VAR 0 1
46819: PUSH
46820: LD_INT 0
46822: LESS
46823: IFFALSE 46840
// result := value * - 1 ;
46825: LD_ADDR_VAR 0 2
46829: PUSH
46830: LD_VAR 0 1
46834: PUSH
46835: LD_INT 1
46837: NEG
46838: MUL
46839: ST_TO_ADDR
// end ;
46840: LD_VAR 0 2
46844: RET
// export function ComMoveToNearbyEntrance ( unit , building ) ; var x , _x , y , _y , d , r , i ; begin
46845: LD_INT 0
46847: PPUSH
46848: PPUSH
46849: PPUSH
46850: PPUSH
46851: PPUSH
46852: PPUSH
46853: PPUSH
46854: PPUSH
// if not unit or not building then
46855: LD_VAR 0 1
46859: NOT
46860: PUSH
46861: LD_VAR 0 2
46865: NOT
46866: OR
46867: IFFALSE 46871
// exit ;
46869: GO 47097
// x := GetX ( building ) ;
46871: LD_ADDR_VAR 0 4
46875: PUSH
46876: LD_VAR 0 2
46880: PPUSH
46881: CALL_OW 250
46885: ST_TO_ADDR
// y := GetY ( building ) ;
46886: LD_ADDR_VAR 0 6
46890: PUSH
46891: LD_VAR 0 2
46895: PPUSH
46896: CALL_OW 251
46900: ST_TO_ADDR
// d := GetDir ( building ) ;
46901: LD_ADDR_VAR 0 8
46905: PUSH
46906: LD_VAR 0 2
46910: PPUSH
46911: CALL_OW 254
46915: ST_TO_ADDR
// r := 4 ;
46916: LD_ADDR_VAR 0 9
46920: PUSH
46921: LD_INT 4
46923: ST_TO_ADDR
// for i := 1 to 5 do
46924: LD_ADDR_VAR 0 10
46928: PUSH
46929: DOUBLE
46930: LD_INT 1
46932: DEC
46933: ST_TO_ADDR
46934: LD_INT 5
46936: PUSH
46937: FOR_TO
46938: IFFALSE 47095
// begin _x := ShiftX ( x , d , r + i ) ;
46940: LD_ADDR_VAR 0 5
46944: PUSH
46945: LD_VAR 0 4
46949: PPUSH
46950: LD_VAR 0 8
46954: PPUSH
46955: LD_VAR 0 9
46959: PUSH
46960: LD_VAR 0 10
46964: PLUS
46965: PPUSH
46966: CALL_OW 272
46970: ST_TO_ADDR
// _y := ShiftY ( y , d , r + i ) ;
46971: LD_ADDR_VAR 0 7
46975: PUSH
46976: LD_VAR 0 6
46980: PPUSH
46981: LD_VAR 0 8
46985: PPUSH
46986: LD_VAR 0 9
46990: PUSH
46991: LD_VAR 0 10
46995: PLUS
46996: PPUSH
46997: CALL_OW 273
47001: ST_TO_ADDR
// if ValidHex ( _x , _y ) and not GetType ( HexInfo ( _x , _y ) ) in [ unit_building , unit_vehicle ] then
47002: LD_VAR 0 5
47006: PPUSH
47007: LD_VAR 0 7
47011: PPUSH
47012: CALL_OW 488
47016: PUSH
47017: LD_VAR 0 5
47021: PPUSH
47022: LD_VAR 0 7
47026: PPUSH
47027: CALL_OW 428
47031: PPUSH
47032: CALL_OW 247
47036: PUSH
47037: LD_INT 3
47039: PUSH
47040: LD_INT 2
47042: PUSH
47043: EMPTY
47044: LIST
47045: LIST
47046: IN
47047: NOT
47048: AND
47049: IFFALSE 47093
// begin ComMoveXY ( unit , _x , _y ) ;
47051: LD_VAR 0 1
47055: PPUSH
47056: LD_VAR 0 5
47060: PPUSH
47061: LD_VAR 0 7
47065: PPUSH
47066: CALL_OW 111
// result := [ _x , _y ] ;
47070: LD_ADDR_VAR 0 3
47074: PUSH
47075: LD_VAR 0 5
47079: PUSH
47080: LD_VAR 0 7
47084: PUSH
47085: EMPTY
47086: LIST
47087: LIST
47088: ST_TO_ADDR
// exit ;
47089: POP
47090: POP
47091: GO 47097
// end ; end ;
47093: GO 46937
47095: POP
47096: POP
// end ;
47097: LD_VAR 0 3
47101: RET
// export function SideAttackedSide ( side1 , side2 ) ; var i , un ; begin
47102: LD_INT 0
47104: PPUSH
47105: PPUSH
47106: PPUSH
// result := 0 ;
47107: LD_ADDR_VAR 0 3
47111: PUSH
47112: LD_INT 0
47114: ST_TO_ADDR
// if side1 < 0 or side1 > 8 or side2 < 0 or side2 > 8 then
47115: LD_VAR 0 1
47119: PUSH
47120: LD_INT 0
47122: LESS
47123: PUSH
47124: LD_VAR 0 1
47128: PUSH
47129: LD_INT 8
47131: GREATER
47132: OR
47133: PUSH
47134: LD_VAR 0 2
47138: PUSH
47139: LD_INT 0
47141: LESS
47142: OR
47143: PUSH
47144: LD_VAR 0 2
47148: PUSH
47149: LD_INT 8
47151: GREATER
47152: OR
47153: IFFALSE 47157
// exit ;
47155: GO 47232
// for i in FilterAllUnits ( [ f_side , side2 ] ) do
47157: LD_ADDR_VAR 0 4
47161: PUSH
47162: LD_INT 22
47164: PUSH
47165: LD_VAR 0 2
47169: PUSH
47170: EMPTY
47171: LIST
47172: LIST
47173: PPUSH
47174: CALL_OW 69
47178: PUSH
47179: FOR_IN
47180: IFFALSE 47230
// begin un := UnitShoot ( i ) ;
47182: LD_ADDR_VAR 0 5
47186: PUSH
47187: LD_VAR 0 4
47191: PPUSH
47192: CALL_OW 504
47196: ST_TO_ADDR
// if GetSide ( un ) = side1 then
47197: LD_VAR 0 5
47201: PPUSH
47202: CALL_OW 255
47206: PUSH
47207: LD_VAR 0 1
47211: EQUAL
47212: IFFALSE 47228
// begin result := un ;
47214: LD_ADDR_VAR 0 3
47218: PUSH
47219: LD_VAR 0 5
47223: ST_TO_ADDR
// exit ;
47224: POP
47225: POP
47226: GO 47232
// end ; end ;
47228: GO 47179
47230: POP
47231: POP
// end ;
47232: LD_VAR 0 3
47236: RET
// export function GetCargoBay ( units ) ; begin
47237: LD_INT 0
47239: PPUSH
// result := UnitFilter ( units , [ f_or , [ f_weapon , us_cargo_bay ] , [ f_weapon , ru_cargo_bay ] , [ f_weapon , ar_cargo_bay ] , [ f_weapon , ru_big_cargo_bay ] ] ) ;
47240: LD_ADDR_VAR 0 2
47244: PUSH
47245: LD_VAR 0 1
47249: PPUSH
47250: LD_INT 2
47252: PUSH
47253: LD_INT 34
47255: PUSH
47256: LD_INT 12
47258: PUSH
47259: EMPTY
47260: LIST
47261: LIST
47262: PUSH
47263: LD_INT 34
47265: PUSH
47266: LD_INT 51
47268: PUSH
47269: EMPTY
47270: LIST
47271: LIST
47272: PUSH
47273: LD_INT 34
47275: PUSH
47276: LD_INT 32
47278: PUSH
47279: EMPTY
47280: LIST
47281: LIST
47282: PUSH
47283: LD_INT 34
47285: PUSH
47286: LD_EXP 64
47290: PUSH
47291: EMPTY
47292: LIST
47293: LIST
47294: PUSH
47295: EMPTY
47296: LIST
47297: LIST
47298: LIST
47299: LIST
47300: LIST
47301: PPUSH
47302: CALL_OW 72
47306: ST_TO_ADDR
// end ;
47307: LD_VAR 0 2
47311: RET
// export function Negate ( value ) ; begin
47312: LD_INT 0
47314: PPUSH
// result := not value ;
47315: LD_ADDR_VAR 0 2
47319: PUSH
47320: LD_VAR 0 1
47324: NOT
47325: ST_TO_ADDR
// end ;
47326: LD_VAR 0 2
47330: RET
// export function Inc ( value ) ; begin
47331: LD_INT 0
47333: PPUSH
// result := value + 1 ;
47334: LD_ADDR_VAR 0 2
47338: PUSH
47339: LD_VAR 0 1
47343: PUSH
47344: LD_INT 1
47346: PLUS
47347: ST_TO_ADDR
// end ;
47348: LD_VAR 0 2
47352: RET
// export function Dec ( value ) ; begin
47353: LD_INT 0
47355: PPUSH
// result := value - 1 ;
47356: LD_ADDR_VAR 0 2
47360: PUSH
47361: LD_VAR 0 1
47365: PUSH
47366: LD_INT 1
47368: MINUS
47369: ST_TO_ADDR
// end ;
47370: LD_VAR 0 2
47374: RET
// export function GetDirFromHex ( x1 , y1 , x2 , y2 ) ; var i , _x , _y , tmp , distance , centerDist , centerPoint ; begin
47375: LD_INT 0
47377: PPUSH
47378: PPUSH
47379: PPUSH
47380: PPUSH
47381: PPUSH
47382: PPUSH
47383: PPUSH
47384: PPUSH
// if not ValidHex ( x1 , y1 ) or not ValidHex ( x2 , y2 ) then
47385: LD_VAR 0 1
47389: PPUSH
47390: LD_VAR 0 2
47394: PPUSH
47395: CALL_OW 488
47399: NOT
47400: PUSH
47401: LD_VAR 0 3
47405: PPUSH
47406: LD_VAR 0 4
47410: PPUSH
47411: CALL_OW 488
47415: NOT
47416: OR
47417: IFFALSE 47430
// begin result := - 1 ;
47419: LD_ADDR_VAR 0 5
47423: PUSH
47424: LD_INT 1
47426: NEG
47427: ST_TO_ADDR
// exit ;
47428: GO 47665
// end ; centerPoint := PointBetweenXY ( x1 , y1 , x2 , y2 ) ;
47430: LD_ADDR_VAR 0 12
47434: PUSH
47435: LD_VAR 0 1
47439: PPUSH
47440: LD_VAR 0 2
47444: PPUSH
47445: LD_VAR 0 3
47449: PPUSH
47450: LD_VAR 0 4
47454: PPUSH
47455: CALL 46513 0 4
47459: ST_TO_ADDR
// centerDist := GetDistXY ( x1 , y1 , centerPoint [ 1 ] , centerPoint [ 2 ] ) ;
47460: LD_ADDR_VAR 0 11
47464: PUSH
47465: LD_VAR 0 1
47469: PPUSH
47470: LD_VAR 0 2
47474: PPUSH
47475: LD_VAR 0 12
47479: PUSH
47480: LD_INT 1
47482: ARRAY
47483: PPUSH
47484: LD_VAR 0 12
47488: PUSH
47489: LD_INT 2
47491: ARRAY
47492: PPUSH
47493: CALL_OW 298
47497: ST_TO_ADDR
// distance := 9999 ;
47498: LD_ADDR_VAR 0 10
47502: PUSH
47503: LD_INT 9999
47505: ST_TO_ADDR
// for i := 0 to 5 do
47506: LD_ADDR_VAR 0 6
47510: PUSH
47511: DOUBLE
47512: LD_INT 0
47514: DEC
47515: ST_TO_ADDR
47516: LD_INT 5
47518: PUSH
47519: FOR_TO
47520: IFFALSE 47663
// begin _x := ShiftX ( x1 , i , centerDist ) ;
47522: LD_ADDR_VAR 0 7
47526: PUSH
47527: LD_VAR 0 1
47531: PPUSH
47532: LD_VAR 0 6
47536: PPUSH
47537: LD_VAR 0 11
47541: PPUSH
47542: CALL_OW 272
47546: ST_TO_ADDR
// _y := ShiftY ( y1 , i , centerDist ) ;
47547: LD_ADDR_VAR 0 8
47551: PUSH
47552: LD_VAR 0 2
47556: PPUSH
47557: LD_VAR 0 6
47561: PPUSH
47562: LD_VAR 0 11
47566: PPUSH
47567: CALL_OW 273
47571: ST_TO_ADDR
// if not ValidHex ( _x , _y ) then
47572: LD_VAR 0 7
47576: PPUSH
47577: LD_VAR 0 8
47581: PPUSH
47582: CALL_OW 488
47586: NOT
47587: IFFALSE 47591
// continue ;
47589: GO 47519
// tmp := GetDistXY ( centerPoint [ 1 ] , centerPoint [ 2 ] , _x , _y ) ;
47591: LD_ADDR_VAR 0 9
47595: PUSH
47596: LD_VAR 0 12
47600: PUSH
47601: LD_INT 1
47603: ARRAY
47604: PPUSH
47605: LD_VAR 0 12
47609: PUSH
47610: LD_INT 2
47612: ARRAY
47613: PPUSH
47614: LD_VAR 0 7
47618: PPUSH
47619: LD_VAR 0 8
47623: PPUSH
47624: CALL_OW 298
47628: ST_TO_ADDR
// if tmp < distance then
47629: LD_VAR 0 9
47633: PUSH
47634: LD_VAR 0 10
47638: LESS
47639: IFFALSE 47661
// begin result := i ;
47641: LD_ADDR_VAR 0 5
47645: PUSH
47646: LD_VAR 0 6
47650: ST_TO_ADDR
// distance := tmp ;
47651: LD_ADDR_VAR 0 10
47655: PUSH
47656: LD_VAR 0 9
47660: ST_TO_ADDR
// end ; end ;
47661: GO 47519
47663: POP
47664: POP
// end ;
47665: LD_VAR 0 5
47669: RET
// export function ComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47670: LD_INT 0
47672: PPUSH
47673: PPUSH
// if not driver or not IsInUnit ( driver ) then
47674: LD_VAR 0 1
47678: NOT
47679: PUSH
47680: LD_VAR 0 1
47684: PPUSH
47685: CALL_OW 310
47689: NOT
47690: OR
47691: IFFALSE 47695
// exit ;
47693: GO 47785
// vehicle := IsInUnit ( driver ) ;
47695: LD_ADDR_VAR 0 3
47699: PUSH
47700: LD_VAR 0 1
47704: PPUSH
47705: CALL_OW 310
47709: ST_TO_ADDR
// SetTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47710: LD_VAR 0 1
47714: PPUSH
47715: LD_STRING \
47717: PUSH
47718: LD_INT 0
47720: PUSH
47721: LD_INT 0
47723: PUSH
47724: LD_INT 0
47726: PUSH
47727: LD_INT 0
47729: PUSH
47730: LD_INT 0
47732: PUSH
47733: LD_INT 0
47735: PUSH
47736: EMPTY
47737: LIST
47738: LIST
47739: LIST
47740: LIST
47741: LIST
47742: LIST
47743: LIST
47744: PUSH
47745: LD_STRING E
47747: PUSH
47748: LD_INT 0
47750: PUSH
47751: LD_INT 0
47753: PUSH
47754: LD_VAR 0 3
47758: PUSH
47759: LD_INT 0
47761: PUSH
47762: LD_INT 0
47764: PUSH
47765: LD_INT 0
47767: PUSH
47768: EMPTY
47769: LIST
47770: LIST
47771: LIST
47772: LIST
47773: LIST
47774: LIST
47775: LIST
47776: PUSH
47777: EMPTY
47778: LIST
47779: LIST
47780: PPUSH
47781: CALL_OW 446
// end ;
47785: LD_VAR 0 2
47789: RET
// export function AddComRepairVehicleAndReturn ( driver ) ; var vehicle ; begin
47790: LD_INT 0
47792: PPUSH
47793: PPUSH
// if not driver or not IsInUnit ( driver ) then
47794: LD_VAR 0 1
47798: NOT
47799: PUSH
47800: LD_VAR 0 1
47804: PPUSH
47805: CALL_OW 310
47809: NOT
47810: OR
47811: IFFALSE 47815
// exit ;
47813: GO 47905
// vehicle := IsInUnit ( driver ) ;
47815: LD_ADDR_VAR 0 3
47819: PUSH
47820: LD_VAR 0 1
47824: PPUSH
47825: CALL_OW 310
47829: ST_TO_ADDR
// AddTaskList ( driver , [ [ \ , 0 , 0 , 0 , 0 , 0 , 0 ] , [ E , 0 , 0 , vehicle , 0 , 0 , 0 ] ] ) ;
47830: LD_VAR 0 1
47834: PPUSH
47835: LD_STRING \
47837: PUSH
47838: LD_INT 0
47840: PUSH
47841: LD_INT 0
47843: PUSH
47844: LD_INT 0
47846: PUSH
47847: LD_INT 0
47849: PUSH
47850: LD_INT 0
47852: PUSH
47853: LD_INT 0
47855: PUSH
47856: EMPTY
47857: LIST
47858: LIST
47859: LIST
47860: LIST
47861: LIST
47862: LIST
47863: LIST
47864: PUSH
47865: LD_STRING E
47867: PUSH
47868: LD_INT 0
47870: PUSH
47871: LD_INT 0
47873: PUSH
47874: LD_VAR 0 3
47878: PUSH
47879: LD_INT 0
47881: PUSH
47882: LD_INT 0
47884: PUSH
47885: LD_INT 0
47887: PUSH
47888: EMPTY
47889: LIST
47890: LIST
47891: LIST
47892: LIST
47893: LIST
47894: LIST
47895: LIST
47896: PUSH
47897: EMPTY
47898: LIST
47899: LIST
47900: PPUSH
47901: CALL_OW 447
// end ;
47905: LD_VAR 0 2
47909: RET
// export function SortByHealth ( units , asc ) ; var i , tmp ; begin
47910: LD_INT 0
47912: PPUSH
47913: PPUSH
47914: PPUSH
// tmp := [ ] ;
47915: LD_ADDR_VAR 0 5
47919: PUSH
47920: EMPTY
47921: ST_TO_ADDR
// for i in units do
47922: LD_ADDR_VAR 0 4
47926: PUSH
47927: LD_VAR 0 1
47931: PUSH
47932: FOR_IN
47933: IFFALSE 47971
// tmp := Insert ( tmp , tmp + 1 , GetLives ( i ) ) ;
47935: LD_ADDR_VAR 0 5
47939: PUSH
47940: LD_VAR 0 5
47944: PPUSH
47945: LD_VAR 0 5
47949: PUSH
47950: LD_INT 1
47952: PLUS
47953: PPUSH
47954: LD_VAR 0 4
47958: PPUSH
47959: CALL_OW 256
47963: PPUSH
47964: CALL_OW 2
47968: ST_TO_ADDR
47969: GO 47932
47971: POP
47972: POP
// if not tmp then
47973: LD_VAR 0 5
47977: NOT
47978: IFFALSE 47982
// exit ;
47980: GO 48030
// if asc then
47982: LD_VAR 0 2
47986: IFFALSE 48010
// result := SortListByListAsc ( units , tmp ) else
47988: LD_ADDR_VAR 0 3
47992: PUSH
47993: LD_VAR 0 1
47997: PPUSH
47998: LD_VAR 0 5
48002: PPUSH
48003: CALL_OW 76
48007: ST_TO_ADDR
48008: GO 48030
// result := SortListByListDesc ( units , tmp ) ;
48010: LD_ADDR_VAR 0 3
48014: PUSH
48015: LD_VAR 0 1
48019: PPUSH
48020: LD_VAR 0 5
48024: PPUSH
48025: CALL_OW 77
48029: ST_TO_ADDR
// end ;
48030: LD_VAR 0 3
48034: RET
// export function WantToRepairVehicle ( mech , vehicle ) ; var task ; begin
48035: LD_INT 0
48037: PPUSH
48038: PPUSH
// task := GetTaskList ( mech ) ;
48039: LD_ADDR_VAR 0 4
48043: PUSH
48044: LD_VAR 0 1
48048: PPUSH
48049: CALL_OW 437
48053: ST_TO_ADDR
// if not task then
48054: LD_VAR 0 4
48058: NOT
48059: IFFALSE 48063
// exit ;
48061: GO 48105
// result := task [ 1 ] [ 1 ] = r and task [ 1 ] [ 4 ] = vehicle ;
48063: LD_ADDR_VAR 0 3
48067: PUSH
48068: LD_VAR 0 4
48072: PUSH
48073: LD_INT 1
48075: ARRAY
48076: PUSH
48077: LD_INT 1
48079: ARRAY
48080: PUSH
48081: LD_STRING r
48083: EQUAL
48084: PUSH
48085: LD_VAR 0 4
48089: PUSH
48090: LD_INT 1
48092: ARRAY
48093: PUSH
48094: LD_INT 4
48096: ARRAY
48097: PUSH
48098: LD_VAR 0 2
48102: EQUAL
48103: AND
48104: ST_TO_ADDR
// end ;
48105: LD_VAR 0 3
48109: RET
// export function PlaceUnitXYD ( unit , x , y , d , mode ) ; begin
48110: LD_INT 0
48112: PPUSH
// SetDir ( unit , d ) ;
48113: LD_VAR 0 1
48117: PPUSH
48118: LD_VAR 0 4
48122: PPUSH
48123: CALL_OW 233
// PlaceUnitXY ( unit , x , y , mode ) ;
48127: LD_VAR 0 1
48131: PPUSH
48132: LD_VAR 0 2
48136: PPUSH
48137: LD_VAR 0 3
48141: PPUSH
48142: LD_VAR 0 5
48146: PPUSH
48147: CALL_OW 48
// end ;
48151: LD_VAR 0 6
48155: RET
// export function ToNaturalNumber ( number ) ; begin
48156: LD_INT 0
48158: PPUSH
// result := number div 1 ;
48159: LD_ADDR_VAR 0 2
48163: PUSH
48164: LD_VAR 0 1
48168: PUSH
48169: LD_INT 1
48171: DIV
48172: ST_TO_ADDR
// if number < 0 then
48173: LD_VAR 0 1
48177: PUSH
48178: LD_INT 0
48180: LESS
48181: IFFALSE 48191
// result := 0 ;
48183: LD_ADDR_VAR 0 2
48187: PUSH
48188: LD_INT 0
48190: ST_TO_ADDR
// end ;
48191: LD_VAR 0 2
48195: RET
// export function SortByClass ( units , class ) ; var un ; begin
48196: LD_INT 0
48198: PPUSH
48199: PPUSH
// if not units or not class then
48200: LD_VAR 0 1
48204: NOT
48205: PUSH
48206: LD_VAR 0 2
48210: NOT
48211: OR
48212: IFFALSE 48216
// exit ;
48214: GO 48311
// result := [ ] ;
48216: LD_ADDR_VAR 0 3
48220: PUSH
48221: EMPTY
48222: ST_TO_ADDR
// for un in units do
48223: LD_ADDR_VAR 0 4
48227: PUSH
48228: LD_VAR 0 1
48232: PUSH
48233: FOR_IN
48234: IFFALSE 48309
// if GetClass ( un ) = class then
48236: LD_VAR 0 4
48240: PPUSH
48241: CALL_OW 257
48245: PUSH
48246: LD_VAR 0 2
48250: EQUAL
48251: IFFALSE 48278
// result := Insert ( result , 1 , un ) else
48253: LD_ADDR_VAR 0 3
48257: PUSH
48258: LD_VAR 0 3
48262: PPUSH
48263: LD_INT 1
48265: PPUSH
48266: LD_VAR 0 4
48270: PPUSH
48271: CALL_OW 2
48275: ST_TO_ADDR
48276: GO 48307
// result := Replace ( result , result + 1 , un ) ;
48278: LD_ADDR_VAR 0 3
48282: PUSH
48283: LD_VAR 0 3
48287: PPUSH
48288: LD_VAR 0 3
48292: PUSH
48293: LD_INT 1
48295: PLUS
48296: PPUSH
48297: LD_VAR 0 4
48301: PPUSH
48302: CALL_OW 1
48306: ST_TO_ADDR
48307: GO 48233
48309: POP
48310: POP
// end ;
48311: LD_VAR 0 3
48315: RET
// export function GetCratesNearbyXY ( x , y , r ) ; var _x , _y , min_y , min_x , max_x , max_y ; begin
48316: LD_INT 0
48318: PPUSH
48319: PPUSH
48320: PPUSH
48321: PPUSH
48322: PPUSH
48323: PPUSH
48324: PPUSH
// result := [ ] ;
48325: LD_ADDR_VAR 0 4
48329: PUSH
48330: EMPTY
48331: ST_TO_ADDR
// if x - r < 0 then
48332: LD_VAR 0 1
48336: PUSH
48337: LD_VAR 0 3
48341: MINUS
48342: PUSH
48343: LD_INT 0
48345: LESS
48346: IFFALSE 48358
// min_x := 0 else
48348: LD_ADDR_VAR 0 8
48352: PUSH
48353: LD_INT 0
48355: ST_TO_ADDR
48356: GO 48374
// min_x := x - r ;
48358: LD_ADDR_VAR 0 8
48362: PUSH
48363: LD_VAR 0 1
48367: PUSH
48368: LD_VAR 0 3
48372: MINUS
48373: ST_TO_ADDR
// if y - r < 0 then
48374: LD_VAR 0 2
48378: PUSH
48379: LD_VAR 0 3
48383: MINUS
48384: PUSH
48385: LD_INT 0
48387: LESS
48388: IFFALSE 48400
// min_y := 0 else
48390: LD_ADDR_VAR 0 7
48394: PUSH
48395: LD_INT 0
48397: ST_TO_ADDR
48398: GO 48416
// min_y := y - r ;
48400: LD_ADDR_VAR 0 7
48404: PUSH
48405: LD_VAR 0 2
48409: PUSH
48410: LD_VAR 0 3
48414: MINUS
48415: ST_TO_ADDR
// max_x := x + r ;
48416: LD_ADDR_VAR 0 9
48420: PUSH
48421: LD_VAR 0 1
48425: PUSH
48426: LD_VAR 0 3
48430: PLUS
48431: ST_TO_ADDR
// max_y := y + r ;
48432: LD_ADDR_VAR 0 10
48436: PUSH
48437: LD_VAR 0 2
48441: PUSH
48442: LD_VAR 0 3
48446: PLUS
48447: ST_TO_ADDR
// for _x = min_x to max_x do
48448: LD_ADDR_VAR 0 5
48452: PUSH
48453: DOUBLE
48454: LD_VAR 0 8
48458: DEC
48459: ST_TO_ADDR
48460: LD_VAR 0 9
48464: PUSH
48465: FOR_TO
48466: IFFALSE 48567
// for _y = min_y to max_y do
48468: LD_ADDR_VAR 0 6
48472: PUSH
48473: DOUBLE
48474: LD_VAR 0 7
48478: DEC
48479: ST_TO_ADDR
48480: LD_VAR 0 10
48484: PUSH
48485: FOR_TO
48486: IFFALSE 48563
// begin if not ValidHex ( _x , _y ) then
48488: LD_VAR 0 5
48492: PPUSH
48493: LD_VAR 0 6
48497: PPUSH
48498: CALL_OW 488
48502: NOT
48503: IFFALSE 48507
// continue ;
48505: GO 48485
// if GetResourceTypeXY ( _x , _y ) then
48507: LD_VAR 0 5
48511: PPUSH
48512: LD_VAR 0 6
48516: PPUSH
48517: CALL_OW 283
48521: IFFALSE 48561
// result := Replace ( result , result + 1 , [ _x , _y ] ) ;
48523: LD_ADDR_VAR 0 4
48527: PUSH
48528: LD_VAR 0 4
48532: PPUSH
48533: LD_VAR 0 4
48537: PUSH
48538: LD_INT 1
48540: PLUS
48541: PPUSH
48542: LD_VAR 0 5
48546: PUSH
48547: LD_VAR 0 6
48551: PUSH
48552: EMPTY
48553: LIST
48554: LIST
48555: PPUSH
48556: CALL_OW 1
48560: ST_TO_ADDR
// end ;
48561: GO 48485
48563: POP
48564: POP
48565: GO 48465
48567: POP
48568: POP
// end ;
48569: LD_VAR 0 4
48573: RET
// export function AgressiveMove ( units , path ) ; var i , enemy , nearEnemy , cr , side , tag , ignoreCratesWeapon ; begin
48574: LD_INT 0
48576: PPUSH
48577: PPUSH
48578: PPUSH
48579: PPUSH
48580: PPUSH
48581: PPUSH
48582: PPUSH
48583: PPUSH
// if not units then
48584: LD_VAR 0 1
48588: NOT
48589: IFFALSE 48593
// exit ;
48591: GO 49018
// result := UnitFilter ( units , [ f_ok ] ) ;
48593: LD_ADDR_VAR 0 3
48597: PUSH
48598: LD_VAR 0 1
48602: PPUSH
48603: LD_INT 50
48605: PUSH
48606: EMPTY
48607: LIST
48608: PPUSH
48609: CALL_OW 72
48613: ST_TO_ADDR
// side := GetSide ( units [ 1 ] ) ;
48614: LD_ADDR_VAR 0 8
48618: PUSH
48619: LD_VAR 0 1
48623: PUSH
48624: LD_INT 1
48626: ARRAY
48627: PPUSH
48628: CALL_OW 255
48632: ST_TO_ADDR
// ignoreCratesWeapon := [ ar_selfpropelled_bomb , ar_bio_bomb ] ;
48633: LD_ADDR_VAR 0 10
48637: PUSH
48638: LD_INT 29
48640: PUSH
48641: LD_EXP 67
48645: PUSH
48646: EMPTY
48647: LIST
48648: LIST
48649: ST_TO_ADDR
// if not result then
48650: LD_VAR 0 3
48654: NOT
48655: IFFALSE 48659
// exit ;
48657: GO 49018
// enemy := FilterAllUnits ( [ f_enemy , side ] ) ;
48659: LD_ADDR_VAR 0 5
48663: PUSH
48664: LD_INT 81
48666: PUSH
48667: LD_VAR 0 8
48671: PUSH
48672: EMPTY
48673: LIST
48674: LIST
48675: PPUSH
48676: CALL_OW 69
48680: ST_TO_ADDR
// for i in result do
48681: LD_ADDR_VAR 0 4
48685: PUSH
48686: LD_VAR 0 3
48690: PUSH
48691: FOR_IN
48692: IFFALSE 49016
// begin tag := GetTag ( i ) + 1 ;
48694: LD_ADDR_VAR 0 9
48698: PUSH
48699: LD_VAR 0 4
48703: PPUSH
48704: CALL_OW 110
48708: PUSH
48709: LD_INT 1
48711: PLUS
48712: ST_TO_ADDR
// cr := GetCratesNearbyXY ( GetX ( i ) , GetY ( i ) , 6 ) ;
48713: LD_ADDR_VAR 0 7
48717: PUSH
48718: LD_VAR 0 4
48722: PPUSH
48723: CALL_OW 250
48727: PPUSH
48728: LD_VAR 0 4
48732: PPUSH
48733: CALL_OW 251
48737: PPUSH
48738: LD_INT 6
48740: PPUSH
48741: CALL 48316 0 3
48745: ST_TO_ADDR
// if cr and not GetWeapon ( i ) in ignoreCratesWeapon then
48746: LD_VAR 0 7
48750: PUSH
48751: LD_VAR 0 4
48755: PPUSH
48756: CALL_OW 264
48760: PUSH
48761: LD_VAR 0 10
48765: IN
48766: NOT
48767: AND
48768: IFFALSE 48807
// ComAttackPlace ( i , cr [ 1 ] [ 1 ] , cr [ 1 ] [ 2 ] ) else
48770: LD_VAR 0 4
48774: PPUSH
48775: LD_VAR 0 7
48779: PUSH
48780: LD_INT 1
48782: ARRAY
48783: PUSH
48784: LD_INT 1
48786: ARRAY
48787: PPUSH
48788: LD_VAR 0 7
48792: PUSH
48793: LD_INT 1
48795: ARRAY
48796: PUSH
48797: LD_INT 2
48799: ARRAY
48800: PPUSH
48801: CALL_OW 116
48805: GO 49014
// if path > tag then
48807: LD_VAR 0 2
48811: PUSH
48812: LD_VAR 0 9
48816: GREATER
48817: IFFALSE 48984
// begin nearEnemy := UnitFilter ( enemy , [ f_dist , i , 12 ] ) ;
48819: LD_ADDR_VAR 0 6
48823: PUSH
48824: LD_VAR 0 5
48828: PPUSH
48829: LD_INT 91
48831: PUSH
48832: LD_VAR 0 4
48836: PUSH
48837: LD_INT 12
48839: PUSH
48840: EMPTY
48841: LIST
48842: LIST
48843: LIST
48844: PPUSH
48845: CALL_OW 72
48849: ST_TO_ADDR
// if nearEnemy then
48850: LD_VAR 0 6
48854: IFFALSE 48882
// ComAttackUnit ( i , NearestUnitToUnit ( nearEnemy , i ) ) else
48856: LD_VAR 0 4
48860: PPUSH
48861: LD_VAR 0 6
48865: PPUSH
48866: LD_VAR 0 4
48870: PPUSH
48871: CALL_OW 74
48875: PPUSH
48876: CALL_OW 115
48880: GO 48982
// if GetDistUnitXY ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) > 6 then
48882: LD_VAR 0 4
48886: PPUSH
48887: LD_VAR 0 2
48891: PUSH
48892: LD_VAR 0 9
48896: ARRAY
48897: PUSH
48898: LD_INT 1
48900: ARRAY
48901: PPUSH
48902: LD_VAR 0 2
48906: PUSH
48907: LD_VAR 0 9
48911: ARRAY
48912: PUSH
48913: LD_INT 2
48915: ARRAY
48916: PPUSH
48917: CALL_OW 297
48921: PUSH
48922: LD_INT 6
48924: GREATER
48925: IFFALSE 48968
// ComAgressiveMove ( i , path [ tag ] [ 1 ] , path [ tag ] [ 2 ] ) else
48927: LD_VAR 0 4
48931: PPUSH
48932: LD_VAR 0 2
48936: PUSH
48937: LD_VAR 0 9
48941: ARRAY
48942: PUSH
48943: LD_INT 1
48945: ARRAY
48946: PPUSH
48947: LD_VAR 0 2
48951: PUSH
48952: LD_VAR 0 9
48956: ARRAY
48957: PUSH
48958: LD_INT 2
48960: ARRAY
48961: PPUSH
48962: CALL_OW 114
48966: GO 48982
// SetTag ( i , tag ) ;
48968: LD_VAR 0 4
48972: PPUSH
48973: LD_VAR 0 9
48977: PPUSH
48978: CALL_OW 109
// end else
48982: GO 49014
// if enemy then
48984: LD_VAR 0 5
48988: IFFALSE 49014
// ComAttackUnit ( i , NearestUnitToUnit ( enemy , i ) ) ;
48990: LD_VAR 0 4
48994: PPUSH
48995: LD_VAR 0 5
48999: PPUSH
49000: LD_VAR 0 4
49004: PPUSH
49005: CALL_OW 74
49009: PPUSH
49010: CALL_OW 115
// end ;
49014: GO 48691
49016: POP
49017: POP
// end ;
49018: LD_VAR 0 3
49022: RET
// export function ComLookAtDir ( unit , direction ) ; var x , y ; begin
49023: LD_INT 0
49025: PPUSH
49026: PPUSH
49027: PPUSH
// if not unit or IsInUnit ( unit ) then
49028: LD_VAR 0 1
49032: NOT
49033: PUSH
49034: LD_VAR 0 1
49038: PPUSH
49039: CALL_OW 310
49043: OR
49044: IFFALSE 49048
// exit ;
49046: GO 49139
// x := ShiftX ( GetX ( unit ) , direction , 1 ) ;
49048: LD_ADDR_VAR 0 4
49052: PUSH
49053: LD_VAR 0 1
49057: PPUSH
49058: CALL_OW 250
49062: PPUSH
49063: LD_VAR 0 2
49067: PPUSH
49068: LD_INT 1
49070: PPUSH
49071: CALL_OW 272
49075: ST_TO_ADDR
// y := ShiftY ( GetY ( unit ) , direction , 1 ) ;
49076: LD_ADDR_VAR 0 5
49080: PUSH
49081: LD_VAR 0 1
49085: PPUSH
49086: CALL_OW 251
49090: PPUSH
49091: LD_VAR 0 2
49095: PPUSH
49096: LD_INT 1
49098: PPUSH
49099: CALL_OW 273
49103: ST_TO_ADDR
// if ValidHex ( x , y ) then
49104: LD_VAR 0 4
49108: PPUSH
49109: LD_VAR 0 5
49113: PPUSH
49114: CALL_OW 488
49118: IFFALSE 49139
// ComTurnXY ( unit , x , y ) ;
49120: LD_VAR 0 1
49124: PPUSH
49125: LD_VAR 0 4
49129: PPUSH
49130: LD_VAR 0 5
49134: PPUSH
49135: CALL_OW 118
// end ;
49139: LD_VAR 0 3
49143: RET
// export function SeeUnits ( side , units ) ; var i ; begin
49144: LD_INT 0
49146: PPUSH
49147: PPUSH
// result := false ;
49148: LD_ADDR_VAR 0 3
49152: PUSH
49153: LD_INT 0
49155: ST_TO_ADDR
// if not units then
49156: LD_VAR 0 2
49160: NOT
49161: IFFALSE 49165
// exit ;
49163: GO 49210
// for i in units do
49165: LD_ADDR_VAR 0 4
49169: PUSH
49170: LD_VAR 0 2
49174: PUSH
49175: FOR_IN
49176: IFFALSE 49208
// if See ( side , i ) then
49178: LD_VAR 0 1
49182: PPUSH
49183: LD_VAR 0 4
49187: PPUSH
49188: CALL_OW 292
49192: IFFALSE 49206
// begin result := true ;
49194: LD_ADDR_VAR 0 3
49198: PUSH
49199: LD_INT 1
49201: ST_TO_ADDR
// exit ;
49202: POP
49203: POP
49204: GO 49210
// end ;
49206: GO 49175
49208: POP
49209: POP
// end ;
49210: LD_VAR 0 3
49214: RET
// export function GetNearestPoint ( unit , points ) ; var i , dist , tmpDist ; begin
49215: LD_INT 0
49217: PPUSH
49218: PPUSH
49219: PPUSH
49220: PPUSH
// if not unit or not points then
49221: LD_VAR 0 1
49225: NOT
49226: PUSH
49227: LD_VAR 0 2
49231: NOT
49232: OR
49233: IFFALSE 49237
// exit ;
49235: GO 49327
// dist := 99999 ;
49237: LD_ADDR_VAR 0 5
49241: PUSH
49242: LD_INT 99999
49244: ST_TO_ADDR
// for i in points do
49245: LD_ADDR_VAR 0 4
49249: PUSH
49250: LD_VAR 0 2
49254: PUSH
49255: FOR_IN
49256: IFFALSE 49325
// begin tmpDist := GetDistUnitXY ( unit , i [ 1 ] , i [ 2 ] ) ;
49258: LD_ADDR_VAR 0 6
49262: PUSH
49263: LD_VAR 0 1
49267: PPUSH
49268: LD_VAR 0 4
49272: PUSH
49273: LD_INT 1
49275: ARRAY
49276: PPUSH
49277: LD_VAR 0 4
49281: PUSH
49282: LD_INT 2
49284: ARRAY
49285: PPUSH
49286: CALL_OW 297
49290: ST_TO_ADDR
// if tmpDist < dist then
49291: LD_VAR 0 6
49295: PUSH
49296: LD_VAR 0 5
49300: LESS
49301: IFFALSE 49323
// begin result := i ;
49303: LD_ADDR_VAR 0 3
49307: PUSH
49308: LD_VAR 0 4
49312: ST_TO_ADDR
// dist := tmpDist ;
49313: LD_ADDR_VAR 0 5
49317: PUSH
49318: LD_VAR 0 6
49322: ST_TO_ADDR
// end ; end ;
49323: GO 49255
49325: POP
49326: POP
// end ;
49327: LD_VAR 0 3
49331: RET
// export function CreateBehemoth ( side , x , y , d ) ; begin
49332: LD_INT 0
49334: PPUSH
// uc_side := side ;
49335: LD_ADDR_OWVAR 20
49339: PUSH
49340: LD_VAR 0 1
49344: ST_TO_ADDR
// uc_nation := 3 ;
49345: LD_ADDR_OWVAR 21
49349: PUSH
49350: LD_INT 3
49352: ST_TO_ADDR
// vc_chassis := 25 ;
49353: LD_ADDR_OWVAR 37
49357: PUSH
49358: LD_INT 25
49360: ST_TO_ADDR
// vc_engine := engine_siberite ;
49361: LD_ADDR_OWVAR 39
49365: PUSH
49366: LD_INT 3
49368: ST_TO_ADDR
// vc_control := control_computer ;
49369: LD_ADDR_OWVAR 38
49373: PUSH
49374: LD_INT 3
49376: ST_TO_ADDR
// vc_weapon := 59 ;
49377: LD_ADDR_OWVAR 40
49381: PUSH
49382: LD_INT 59
49384: ST_TO_ADDR
// result := CreateVehicle ;
49385: LD_ADDR_VAR 0 5
49389: PUSH
49390: CALL_OW 45
49394: ST_TO_ADDR
// SetDir ( result , d ) ;
49395: LD_VAR 0 5
49399: PPUSH
49400: LD_VAR 0 4
49404: PPUSH
49405: CALL_OW 233
// PlaceUnitXY ( result , x , y , false ) ;
49409: LD_VAR 0 5
49413: PPUSH
49414: LD_VAR 0 2
49418: PPUSH
49419: LD_VAR 0 3
49423: PPUSH
49424: LD_INT 0
49426: PPUSH
49427: CALL_OW 48
// end ;
49431: LD_VAR 0 5
49435: RET
